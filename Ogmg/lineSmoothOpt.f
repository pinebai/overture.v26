! This file automatically generated from lineSmoothOpt.bf with bpp.
! These next include files will define the macros that will define the difference approximations
! The actual macro is called below
c Use this next macro to declare the statement functions that are defined below
c To include derivatives of rx use OPTION=RX


c Define statement functions for difference approximations of order 2 
c To include derivatives of rx use OPTION=RX
c To include derivatives of rx use OPTION=RX



c Use this next macro to declare the statement functions that are defined below
c To include derivatives of rx use OPTION=RX


c Define statement functions for difference approximations of order 4 
c To include derivatives of rx use OPTION=RX
c To include derivatives of rx use OPTION=RX


! These next include file will define the macros that will define the difference approximations (in op/src)
! Defines getDuDx2(u,aj,ff), getDuDxx2(u,aj,ff), getDuDx3(u,aj,ff), ...  etc. 


! ****** Dimension 2 ******
 ! getDuDx2 operation count     : additions+2*multiplications+assignments
 ! getDuDx2 optimization savings: -assignments
 ! getDuDy2 operation count     : additions+2*multiplications+assignments
 ! getDuDy2 optimization savings: -assignments
 ! getDuDxx2 operation count     : 9*multiplications+3*assignments+4*additions
 ! getDuDxx2 optimization savings: -3*assignments
 ! getDuDxy2 operation count     : 5*additions+9*multiplications+assignments
 ! getDuDxy2 optimization savings: -assignments
 ! getDuDyy2 operation count     : 9*multiplications+3*assignments+4*additions
 ! getDuDyy2 optimization savings: -3*assignments
 ! getDuDxxx2 operation count     : 25*multiplications+3*assignments+9*additions
 ! getDuDxxx2 optimization savings: 2*multiplications-3*assignments
 ! getDuDxxy2 operation count     : 33*multiplications+3*assignments+15*additions
 ! getDuDxxy2 optimization savings: 2*multiplications-3*assignments
 ! getDuDxyy2 operation count     : 32*multiplications+5*assignments+16*additions
 ! getDuDxyy2 optimization savings: additions+3*multiplications-5*assignments
 ! getDuDyyy2 operation count     : 25*multiplications+3*assignments+9*additions
 ! getDuDyyy2 optimization savings: 2*multiplications-3*assignments
 ! getDuDxxxx2 operation count     : 59*multiplications+11*assignments+24*additions
 ! getDuDxxxx2 optimization savings: 3*additions+23*multiplications-11*assignments
 ! getDuDxxxy2 operation count     : 86*multiplications+11*assignments+37*additions
 ! getDuDxxxy2 optimization savings: 2*additions+24*multiplications-11*assignments
 ! getDuDxxyy2 operation count     : 105*multiplications+16*assignments+50*additions
 ! getDuDxxyy2 optimization savings: 8*additions+37*multiplications-16*assignments
 ! getDuDxyyy2 operation count     : 89*multiplications+21*assignments+52*additions
 ! getDuDxyyy2 optimization savings: 17*additions+47*multiplications-21*assignments
 ! getDuDyyyy2 operation count     : 59*multiplications+11*assignments+24*additions
 ! getDuDyyyy2 optimization savings: 3*additions+23*multiplications-11*assignments
 ! getDuDxxxxx2 operation count     : 154*multiplications+43*assignments+82*additions
 ! getDuDxxxxx2 optimization savings: 39*additions+196*multiplications-43*assignments
 ! getDuDxxxxy2 operation count     : 207*multiplications+42*assignments+102*additions
 ! getDuDxxxxy2 optimization savings: 45*additions+211*multiplications-42*assignments
 ! getDuDxxxyy2 operation count     : 249*multiplications+55*assignments+126*additions
 ! getDuDxxxyy2 optimization savings: 49*additions+241*multiplications-55*assignments
 ! getDuDxxyyy2 operation count     : 239*multiplications+67*assignments+150*additions
 ! getDuDxxyyy2 optimization savings: 97*additions+363*multiplications-67*assignments
 ! getDuDxyyyy2 operation count     : 215*multiplications+73*assignments+150*additions
 ! getDuDxyyyy2 optimization savings: 153*additions+371*multiplications-73*assignments
 ! getDuDyyyyy2 operation count     : 154*multiplications+43*assignments+82*additions
 ! getDuDyyyyy2 optimization savings: 39*additions+196*multiplications-43*assignments
 ! getDuDxxxxxx2 operation count     : 364*multiplications+134*assignments+258*additions
 ! getDuDxxxxxx2 optimization savings: 345*additions+1337*multiplications-134*assignments
 ! getDuDxxxxxy2 operation count     : 525*multiplications+149*assignments+326*additions
 ! getDuDxxxxxy2 optimization savings: 409*additions+1502*multiplications-149*assignments
 ! getDuDxxxxyy2 operation count     : 543*multiplications+173*assignments+339*additions
 ! getDuDxxxxyy2 optimization savings: 415*additions+1552*multiplications-173*assignments
 ! getDuDxxxyyy2 operation count     : 510*multiplications+172*assignments+360*additions
 ! getDuDxxxyyy2 optimization savings: 463*additions+1755*multiplications-172*assignments
 ! getDuDxxyyyy2 operation count     : 482*multiplications+184*assignments+391*additions
 ! getDuDxxyyyy2 optimization savings: 731*additions+2241*multiplications-184*assignments
 ! getDuDxyyyyy2 operation count     : 456*multiplications+188*assignments+384*additions
 ! getDuDxyyyyy2 optimization savings: 1019*additions+2233*multiplications-188*assignments
 ! getDuDyyyyyy2 operation count     : 366*multiplications+133*assignments+258*additions
 ! getDuDyyyyyy2 optimization savings: 345*additions+1335*multiplications-133*assignments


! ****** Dimension 3 ******
 ! getDuDx3 operation count     : 2*additions+3*multiplications+assignments
 ! getDuDx3 optimization savings: -assignments
 ! getDuDy3 operation count     : 2*additions+3*multiplications+assignments
 ! getDuDy3 optimization savings: -assignments
 ! getDuDz3 operation count     : 2*additions+3*multiplications+assignments
 ! getDuDz3 optimization savings: -assignments
 ! getDuDxx3 operation count     : 18*multiplications+4*assignments+8*additions
 ! getDuDxx3 optimization savings: -4*assignments
 ! getDuDxy3 operation count     : 11*additions+18*multiplications+assignments
 ! getDuDxy3 optimization savings: -assignments
 ! getDuDyy3 operation count     : 18*multiplications+4*assignments+8*additions
 ! getDuDyy3 optimization savings: -4*assignments
 ! getDuDxz3 operation count     : 11*additions+18*multiplications+assignments
 ! getDuDxz3 optimization savings: -assignments
 ! getDuDyz3 operation count     : 11*additions+18*multiplications+assignments
 ! getDuDyz3 optimization savings: -assignments
 ! getDuDzz3 operation count     : 18*multiplications+4*assignments+8*additions
 ! getDuDzz3 optimization savings: -4*assignments
 ! getDuDxxx3 operation count     : 58*multiplications+4*assignments+21*additions
 ! getDuDxxx3 optimization savings: 6*multiplications-4*assignments
 ! getDuDxxy3 operation count     : 82*multiplications+7*assignments+38*additions
 ! getDuDxxy3 optimization savings: 9*multiplications-7*assignments
 ! getDuDxyy3 operation count     : 76*multiplications+10*assignments+41*additions
 ! getDuDxyy3 optimization savings: 6*additions+15*multiplications-10*assignments
 ! getDuDyyy3 operation count     : 58*multiplications+4*assignments+21*additions
 ! getDuDyyy3 optimization savings: 6*multiplications-4*assignments
 ! getDuDxxz3 operation count     : 82*multiplications+7*assignments+38*additions
 ! getDuDxxz3 optimization savings: 9*multiplications-7*assignments
 ! getDuDxyz3 operation count     : 50*additions+79*multiplications+4*assignments
 ! getDuDxyz3 optimization savings: 6*additions+12*multiplications-4*assignments
 ! getDuDyyz3 operation count     : 82*multiplications+7*assignments+38*additions
 ! getDuDyyz3 optimization savings: 9*multiplications-7*assignments
 ! getDuDxzz3 operation count     : 76*multiplications+10*assignments+41*additions
 ! getDuDxzz3 optimization savings: 6*additions+15*multiplications-10*assignments
 ! getDuDyzz3 operation count     : 76*multiplications+10*assignments+41*additions
 ! getDuDyzz3 optimization savings: 6*additions+15*multiplications-10*assignments
 ! getDuDzzz3 operation count     : 58*multiplications+4*assignments+21*additions
 ! getDuDzzz3 optimization savings: 6*multiplications-4*assignments
 ! getDuDxxxx3 operation count     : 161*multiplications+29*assignments+71*additions
 ! getDuDxxxx3 optimization savings: 15*additions+98*multiplications-29*assignments
 ! getDuDxxxy3 operation count     : 246*multiplications+28*assignments+110*additions
 ! getDuDxxxy3 optimization savings: 12*additions+109*multiplications-28*assignments
 ! getDuDxxyy3 operation count     : 280*multiplications+43*assignments+142*additions
 ! getDuDxxyy3 optimization savings: 46*additions+192*multiplications-43*assignments
 ! getDuDxyyy3 operation count     : 235*multiplications+49*assignments+148*additions
 ! getDuDxyyy3 optimization savings: 97*additions+225*multiplications-49*assignments
 ! getDuDyyyy3 operation count     : 161*multiplications+29*assignments+71*additions
 ! getDuDyyyy3 optimization savings: 15*additions+98*multiplications-29*assignments
 ! getDuDxxxz3 operation count     : 247*multiplications+27*assignments+110*additions
 ! getDuDxxxz3 optimization savings: 12*additions+108*multiplications-27*assignments
 ! getDuDxxyz3 operation count     : 292*multiplications+31*assignments+154*additions
 ! getDuDxxyz3 optimization savings: 46*additions+186*multiplications-31*assignments
 ! getDuDxyyz3 operation count     : 271*multiplications+166*additions+31*assignments
 ! getDuDxyyz3 optimization savings: 97*additions+207*multiplications-31*assignments
 ! getDuDyyyz3 operation count     : 247*multiplications+27*assignments+110*additions
 ! getDuDyyyz3 optimization savings: 12*additions+108*multiplications-27*assignments
 ! getDuDxxzz3 operation count     : 277*multiplications+46*assignments+142*additions
 ! getDuDxxzz3 optimization savings: 46*additions+195*multiplications-46*assignments
 ! getDuDxyzz3 operation count     : 256*multiplications+52*assignments+175*additions
 ! getDuDxyzz3 optimization savings: 115*additions+222*multiplications-52*assignments
 ! getDuDyyzz3 operation count     : 277*multiplications+46*assignments+142*additions
 ! getDuDyyzz3 optimization savings: 46*additions+195*multiplications-46*assignments
 ! getDuDxzzz3 operation count     : 235*multiplications+49*assignments+148*additions
 ! getDuDxzzz3 optimization savings: 97*additions+225*multiplications-49*assignments
 ! getDuDyzzz3 operation count     : 235*multiplications+49*assignments+148*additions
 ! getDuDyzzz3 optimization savings: 97*additions+225*multiplications-49*assignments
 ! getDuDzzzz3 operation count     : 161*multiplications+29*assignments+71*additions
 ! getDuDzzzz3 optimization savings: 15*additions+98*multiplications-29*assignments
 ! getDuDxxxxx3 operation count     : 480*multiplications+117*assignments+279*additions
 ! getDuDxxxxx3 optimization savings: 239*additions+1000*multiplications-117*assignments
 ! getDuDxxxxy3 operation count     : 644*multiplications+120*assignments+345*additions
 ! getDuDxxxxy3 optimization savings: 266*additions+1103*multiplications-120*assignments
 ! getDuDxxxyy3 operation count     : 402*additions+732*multiplications+150*assignments
 ! getDuDxxxyy3 optimization savings: 311*additions+1309*multiplications-150*assignments
 ! getDuDxxyyy3 operation count     : 685*multiplications+177*assignments+458*additions
 ! getDuDxxyyy3 optimization savings: 576*additions+1896*multiplications-177*assignments
 ! getDuDxyyyy3 operation count     : 619*multiplications+186*assignments+461*additions
 ! getDuDxyyyy3 optimization savings: 924*additions+1926*multiplications-186*assignments
 ! getDuDyyyyy3 operation count     : 479*multiplications+117*assignments+279*additions
 ! getDuDyyyyy3 optimization savings: 239*additions+1001*multiplications-117*assignments
 ! getDuDxxxxz3 operation count     : 646*multiplications+120*assignments+345*additions
 ! getDuDxxxxz3 optimization savings: 266*additions+1101*multiplications-120*assignments
 ! getDuDxxxyz3 operation count     : 833*multiplications+116*assignments+441*additions
 ! getDuDxxxyz3 optimization savings: 323*additions+1298*multiplications-116*assignments
 ! getDuDxxyyz3 operation count     : 889*multiplications+138*assignments+512*additions
 ! getDuDxxyyz3 optimization savings: 594*additions+1827*multiplications-138*assignments
 ! getDuDxyyyz3 operation count     : 754*multiplications+156*assignments+536*additions
 ! getDuDxyyyz3 optimization savings: 984*additions+1908*multiplications-156*assignments
 ! getDuDyyyyz3 operation count     : 648*multiplications+119*assignments+345*additions
 ! getDuDyyyyz3 optimization savings: 266*additions+1099*multiplications-119*assignments
 ! getDuDxxxzz3 operation count     : 730*multiplications+149*assignments+402*additions
 ! getDuDxxxzz3 optimization savings: 311*additions+1311*multiplications-149*assignments
 ! getDuDxxyzz3 operation count     : 754*multiplications+183*assignments+500*additions
 ! getDuDxxyzz3 optimization savings: 606*additions+1899*multiplications-183*assignments
 ! getDuDxyyzz3 operation count     : 524*additions+727*multiplications+174*assignments
 ! getDuDxyyzz3 optimization savings: 978*additions+1953*multiplications-174*assignments
 ! getDuDyyyzz3 operation count     : 730*multiplications+149*assignments+402*additions
 ! getDuDyyyzz3 optimization savings: 311*additions+1311*multiplications-149*assignments
 ! getDuDxxzzz3 operation count     : 679*multiplications+183*assignments+458*additions
 ! getDuDxxzzz3 optimization savings: 576*additions+1902*multiplications-183*assignments
 ! getDuDxyzzz3 operation count     : 658*multiplications+195*assignments+533*additions
 ! getDuDxyzzz3 optimization savings: 1095*additions+2004*multiplications-195*assignments
 ! getDuDyyzzz3 operation count     : 679*multiplications+183*assignments+458*additions
 ! getDuDyyzzz3 optimization savings: 576*additions+1902*multiplications-183*assignments
 ! getDuDxzzzz3 operation count     : 619*multiplications+186*assignments+461*additions
 ! getDuDxzzzz3 optimization savings: 924*additions+1926*multiplications-186*assignments
 ! getDuDyzzzz3 operation count     : 619*multiplications+186*assignments+461*additions
 ! getDuDyzzzz3 optimization savings: 924*additions+1926*multiplications-186*assignments
 ! getDuDzzzzz3 operation count     : 481*multiplications+115*assignments+279*additions
 ! getDuDzzzzz3 optimization savings: 239*additions+999*multiplications-115*assignments
 ! getDuDxxxxxx3 operation count     : 1232*multiplications+380*assignments+916*additions
 ! getDuDxxxxxx3 optimization savings: 2414*additions+8130*multiplications-380*assignments
 ! getDuDxxxxxy3 operation count     : 1742*multiplications+419*assignments+1142*additions
 ! getDuDxxxxxy3 optimization savings: 2790*additions+9123*multiplications-419*assignments
 ! getDuDxxxxyy3 operation count     : 1728*multiplications+492*assignments+1158*additions
 ! getDuDxxxxyy3 optimization savings: 2837*additions+9455*multiplications-492*assignments
 ! getDuDxxxyyy3 operation count     : 1194*additions+1600*multiplications+481*assignments
 ! getDuDxxxyyy3 optimization savings: 3128*additions+10552*multiplications-481*assignments
 ! getDuDxxyyyy3 operation count     : 1265*additions+1496*multiplications+508*assignments
 ! getDuDxxyyyy3 optimization savings: 4761*additions+13467*multiplications-508*assignments
 ! getDuDxyyyyy3 operation count     : 1421*multiplications+505*assignments+1253*additions
 ! getDuDxyyyyy3 optimization savings: 6954*additions+13503*multiplications-505*assignments
 ! getDuDyyyyyy3 operation count     : 1230*multiplications+381*assignments+916*additions
 ! getDuDyyyyyy3 optimization savings: 2414*additions+8132*multiplications-381*assignments
 ! getDuDxxxxxz3 operation count     : 1741*multiplications+417*assignments+1142*additions
 ! getDuDxxxxxz3 optimization savings: 2790*additions+9124*multiplications-417*assignments
 ! getDuDxxxxyz3 operation count     : 2098*multiplications+378*assignments+1289*additions
 ! getDuDxxxxyz3 optimization savings: 3120*additions+10006*multiplications-378*assignments
 ! getDuDxxxyyz3 operation count     : 2226*multiplications+460*assignments+1406*additions
 ! getDuDxxxyyz3 optimization savings: 3465*additions+11159*multiplications-460*assignments
 ! getDuDxxyyyz3 operation count     : 2063*multiplications+503*assignments+1531*additions
 ! getDuDxxyyyz3 optimization savings: 5227*additions+14391*multiplications-503*assignments
 ! getDuDxyyyyz3 operation count     : 1552*additions+1886*multiplications+521*assignments
 ! getDuDxyyyyz3 optimization savings: 7924*additions+14415*multiplications-521*assignments
 ! getDuDyyyyyz3 operation count     : 1745*multiplications+412*assignments+1142*additions
 ! getDuDyyyyyz3 optimization savings: 2790*additions+9120*multiplications-412*assignments
 ! getDuDxxxxzz3 operation count     : 1733*multiplications+489*assignments+1158*additions
 ! getDuDxxxxzz3 optimization savings: 2837*additions+9450*multiplications-489*assignments
 ! getDuDxxxyzz3 operation count     : 1971*multiplications+514*assignments+1338*additions
 ! getDuDxxxyzz3 optimization savings: 3398*additions+11018*multiplications-514*assignments
 ! getDuDxxyyzz3 operation count     : 2018*multiplications+554*assignments+1463*additions
 ! getDuDxxyyzz3 optimization savings: 5157*additions+14124*multiplications-554*assignments
 ! getDuDxyyyzz3 operation count     : 1502*additions+1835*multiplications+572*assignments
 ! getDuDxyyyzz3 optimization savings: 7830*additions+14196*multiplications-572*assignments
 ! getDuDyyyyzz3 operation count     : 1735*multiplications+490*assignments+1158*additions
 ! getDuDyyyyzz3 optimization savings: 2837*additions+9448*multiplications-490*assignments
 ! getDuDxxxzzz3 operation count     : 1595*multiplications+477*assignments+1194*additions
 ! getDuDxxxzzz3 optimization savings: 3128*additions+10557*multiplications-477*assignments
 ! getDuDxxyzzz3 operation count     : 1631*multiplications+526*assignments+1373*additions
 ! getDuDxxyzzz3 optimization savings: 5079*additions+13824*multiplications-526*assignments
 ! getDuDxyyzzz3 operation count     : 1415*additions+1610*multiplications+511*assignments
 ! getDuDxyyzzz3 optimization savings: 7512*additions+14169*multiplications-511*assignments
 ! getDuDyyyzzz3 operation count     : 1595*multiplications+477*assignments+1194*additions
 ! getDuDyyyzzz3 optimization savings: 3128*additions+10557*multiplications-477*assignments
 ! getDuDxxzzzz3 operation count     : 1487*multiplications+517*assignments+1265*additions
 ! getDuDxxzzzz3 optimization savings: 4761*additions+13476*multiplications-517*assignments
 ! getDuDxyzzzz3 operation count     : 1478*multiplications+538*assignments+1406*additions
 ! getDuDxyzzzz3 optimization savings: 8178*additions+14193*multiplications-538*assignments
 ! getDuDyyzzzz3 operation count     : 1487*multiplications+517*assignments+1265*additions
 ! getDuDyyzzzz3 optimization savings: 4761*additions+13476*multiplications-517*assignments
 ! getDuDxzzzzz3 operation count     : 1421*multiplications+505*assignments+1253*additions
 ! getDuDxzzzzz3 optimization savings: 6954*additions+13503*multiplications-505*assignments
 ! getDuDyzzzzz3 operation count     : 1421*multiplications+505*assignments+1253*additions
 ! getDuDyzzzzz3 optimization savings: 6954*additions+13503*multiplications-505*assignments
 ! getDuDzzzzzz3 operation count     : 1232*multiplications+382*assignments+916*additions
 ! getDuDzzzzzz3 optimization savings: 2414*additions+8130*multiplications-382*assignments

! Define 
!    defineParametricDerivativeMacros(u,dr,dx,DIM,ORDER,COMPONENTS,MAXDERIV)
!       defines -> ur2, us2, ux2, uy2, ...            (2D)
!                  ur3, us3, ut3, ux3, uy3, uz3, ...  (3D)
! This file was generated by weights.maple


! This next macro will evaluate parametric derivatives and save in temporaries
!   u is the variable name, v is the prefix for the temporaries, e.g.
!   For example, lines of the following form will be generated:
!      v = u(i1,i2,i3) 
!      vr = ur4(i1,i2,i3) 

! This next macro will evaluate parametric derivatives and save in temporaries
!   u is the variable name, v is the prefix for the temporaries, e.g.
!   For example, lines of the following form will be generated:
!      v = u(i1,i2,i3) 
!      vr = ur4(i1,i2,i3) 

! This next macro will evaluate parametric derivatives and save in temporaries
!   u is the variable name, v is the prefix for the temporaries, e.g.
!   For example, lines of the following form will be generated:
!      v = u(i1,i2,i3) 
!      vr = ur4(i1,i2,i3) 

! This next macro will evaluate x,y,z derivatives using temporaries already computed 
!   u1 is the variable name, aj the jaocbian name and v is the prefix for the temporaries
!   For example, lines of the following form will be generated:
!      getDuDx2(u1,aj,vx) 
!      getDuDxy2(u1,aj,vxy) 
!      getDuDxxx2(u1,aj,vxxx) 

! This next macro will evaluate x,y,z derivatives using temporaries already computed 
!   u1 is the variable name, aj the jaocbian name and v is the prefix for the temporaries
!   For example, lines of the following form will be generated:
!      getDuDx2(u1,aj,vx) 
!      getDuDxy2(u1,aj,vxy) 
!      getDuDxxx2(u1,aj,vxxx) 

! This next macro will evaluate x,y,z derivatives using temporaries already computed 
!   u1 is the variable name, aj the jaocbian name and v is the prefix for the temporaries
!   For example, lines of the following form will be generated:
!      getDuDx2(u1,aj,vx) 
!      getDuDxy2(u1,aj,vxy) 
!      getDuDxxx2(u1,aj,vxxx) 

! This next macro will evaluate x,y,z derivatives of the jacobian 

! u = jacobian name (rsxy), v=prefix for derivatives: vrxr, vrys, 
! *************** 0 components *************
! *************** 1 components *************
! *************** 2 components *************
! *************** 0 components *************
! *************** 1 components *************
! *************** 2 components *************

! ==========================================================================================
!  Evaluate the Jacobian and its derivatives (parametric and spatial). 
!    aj     : prefix for the name of the resulting jacobian variables, 
!             e.g. ajrx, ajsy, ajrxx, ajsxy, ...
!    MAXDER : number of derivatives to evaluate.  
! ==========================================================================================

! This next macro will evaluate r,s,t derivatives of the jacobian 
! u = jacobian name (rsxy), v=prefix for derivatives: vrxr, vrys, 

! ==========================================================================================
!  Evaluate the Jacobian and its parametric derivatives
!    aj     : prefix for the name of the resulting jacobian variables, 
!             e.g. ajrx, ajsy, ajrxx, ajsxy, ...
!    MAXDER : number of derivatives to evaluate.  
! ==========================================================================================




! return the loop indicies for the "boundary" (side,axis) shifted by "shift"

! =====================================================================================
! Macro: Fill the extrapolation coefficients into the pentadiagonal system.
!  *wdh* added 110309
! 
! k1,k2,k3 : fill in this point
! a1,a2,a3,a4,a5 : pentadiagonal matrix - MUST be ordered correctly -- extrapolated point is "a1"
! orderOfExtrap : order of extrapolation 
! =====================================================================================





! ======================================================================================
! Macro: Fill extrapolation coefficients into the first ghost for penta-diagonal system
! SIDE : left or right
! g1a,g1b,g2a,g2b,g3a,g3b : loop bounds
! *wdh* 11023 : added loop args to this macro and the ones below
! ======================================================================================

! ===========================================================================================
! Macro: Fill odd-symmetry coefficients into the first ghost for penta-diagonal system
! SIDE : left or right
! g1a,g1b,g2a,g2b,g3a,g3b : loop bounds
! ===========================================================================================

! ===========================================================================================
! Macro: Fill even-symmetry coefficients into the first ghost for penta-diagonal system
! SIDE : left or right
! g1a,g1b,g2a,g2b,g3a,g3b : loop bounds
! ===========================================================================================

! ===========================================================================================
! Macro: Fill even-symmetry coefficients into the second ghost for penta-diagonal system
! SIDE : left or right
! g1a,g1b,g2a,g2b,g3a,g3b : loop bounds
! ===========================================================================================

! ===========================================================================================
!   -- FIX ME --
!  *wdh* 110308 -- this was replaced by the macro below 
!  This version was only correct for Cartesian grids. 
! ==========================================================================================

! =====================================================================================================
! Fill a Second-order accurate Mixed/Neumann BC into the pental-diagonal matrix ON TWO LINES
!
! NOTE: this BC is normally used on lower levels when the fourth-order accurate approximation is used on level=0
!
! We discretize the following BC to second order: 
! 
! a1*( n1*ux + n2*ux + n3*uz ) + a0*u = f 
! a1*( (n1*rx+n2*ry+n3*rz)*ur + (n1*sx+n2*sy+n3*sz)*us + (n1*tx+n2*ty+n3*st)*ut ) + a0*u = f 
!
! On the FIRST ghostline we use
!        ur = (u(i1+1,i2,i3) - u(i1-1,i2,i3) )/(2*dr(0))
! On the SECOND ghostline we use the wide formula
!        ur = (u(i1+2,i2,i3) - u(i1-2,i2,i3) )/(4*dr(0))
!
! GRIDTYPE: rectangular or curvilinear
! SIDE: left or right
! =====================================================================================================





! =====================================================================================================
! Fill a Second-order accurate Mixed/Neumann BC into the pental-diagonal matrix
!
! We discretize the following BC to second order: 
! 
! a1*( n1*ux + n2*ux + n3*uz ) + a0*u = f 
! a1*( (n1*rx+n2*ry+n3*rz)*ur + (n1*sx+n2*sy+n3*sz)*us + (n1*tx+n2*ty+n3*st)*ut ) + a0*u = f 
!
!
! GRIDTYPE: rectangular or curvilinear
! SIDE: left or right
! B,C,D,E,A : names of penta-diagonal matrices (ordered for the left to right)
! =====================================================================================================


! =====================================================================================================
! Fill a Mixed/Neumann BC into the tridiagonal matrix
!
! We discretize the following BC to second order: 
! 
! a1*( n1*ux + n2*ux + n3*uz ) + a0*u = f 
! a1*( (n1*rx+n2*ry+n3*rz)*ur + (n1*sx+n2*sy+n3*sz)*us + (n1*tx+n2*ty+n3*st)*ut ) + a0*u = f 
!
!
! B,C,A : names of tridiagonal matrices for ghost-pt, boundary-pt , first-interior-pt
! DIM: 2 or 3 
! =====================================================================================================


! ============================================================================
! *OLD* Fourth-order Neumann equation and normal derivative of equation
! ============================================================================


! This next file defines the macro call appearing in the next function
c File generated by ogmg/neumann.maple
c Fourth-order BC for mixed boundary condition using the normal derivative of the PDE 
c BC:    an1*ur+an2*us+an0*u = g 
c PDE:   c11*urr + c12*urs + c22*uss + c1*ur + c2*us + c0 *u = f 
c PDE.r: urrr = b0*u + b1*us + b2*uss + b3*usss + bf  

c real alpha1,alpha2,a1,a2,a0
c real rxi,ryi,sxi,syi,rxr,rxs,sxr,sxs,ryr,rys,syr,sys
c real rxx,ryy,sxx,syy
c real rxrr,rxrs,rxss,ryrr,ryrs,ryss
c real sxrr,sxrs,sxss,syrr,syrs,syss
c real rxx,ryy,sxx,syy
c real rxxr,ryyr,rxxs,ryys, sxxr,syyr,sxxs,syys
c real rxNormI,rxNormIs,rxNormIss,rxNormIr,rxNormIrr
c real n1,n1s,n1ss,n2,n2s,n2ss
c real an1,an1s,an1ss,an2,an2s,an2ss 
c real an1r,an1rr,an2r,an2rs 
c real ff,ffs,ffr,g,gs,gss 
c real c11,c11r,c11s,c12,c12r,c12s,c22,c22r,c22s,c1,c1r,c1s,c2,c2r,c2s,c0,c0r,c0s
c real b0,b1,b2,b3,bf

! This Ogmg macro defines the forcing for fourth-order Neumann boundary conditions

! define derivatives in the r, s, and t directions:

! 2nd-order centered: 



! one-sided approximations on the left:


! one-sided approximations on the right:


! 2nd-order centered: 






! Extrapolation of f(i1,i2,i3) in direction (is1,is2,is3)





! ================================================================================================
!  Extrapolate a point. Choose the order of extrapolation based on how many 
! valid points exist (mask>0)
!
! fe : put result here 
! (k1,k2,k3) : check mask at points (i1+m*is1,i1+m*is2,i3+m*is3) m=1,2,..
! (l1,l2,l3) : Extrapolate point (l1,l2,l3) using points (l1+m*is1,l1+m*is2,l3+m*is3)
! (is1,is2,is3) : direction (shift) of extrapolation 
! 
! ================================================================================================

! ===================================================================================================
! Macro: Evaluate the boundary forcing g at the ghost point (k1,k2,k3) next to the target 
!     ghost point (l1,l2,l3) (where we are evaluating derivatives of g) and the boundary point (b1,b2,b3)
!
!                  |   |   |
!               ---B---L---X----  <- boundary 
!                  |   |   |
!               ---K---+---+----  <- ghost 
! 
!  This macro expects the following to be already set:
!  ax1, ax2 :  tangential directions: 
!            ax1= mod(axis+1,nd)
!            ax2= mod(axis+2,nd)
!  mdim(0:1,0:2) : index bounds on valid points where g is defined. 
! ===================================================================================================


! ========================================================================================================================
! This Ogmg macro defines the forcing for fourth-order Neumann boundary conditions
!    Lu = ff , Bu=g 
! Input: 
!  [mm1a,mm1b][mm2a,mm2b][mm3a,mm3b] : indexes for the boundary 
!  (i1,i2,i3) : point on the boundary 
!  (j1,j2,j3) : ghost point
!  (is1,is2,is3) : usual
! FORCING: forcing or no forcing  (if noForcing then return values are all zero)
! GRIDTYPE = rectangular or curvilinear
! DIR = R or S or T 
! DIM = 2 or 3 
! Return: DIM=2, DIR=R : ff, ffr, g, gss
!         DIM=2, DIR=S : ff, ffs, g, grr
!         DIM=3, DIR=R : ff, ffr, g, gss, gtt  + curvilinear: ffs, fft, gst 
!         DIM=3, DIR=S : ff, ffs, g, grr, gtt  + curvilinear: ffr, fft, grt
!         DIM=3, DIR=T : ff, fft, g, grr, gss  + curvilinear: ffr, ffs, grs
! ========================================================================================================================

! ============================================================================
! *OLD* Fourth-order Neumann equation and normal derivative of equation
! ============================================================================


c File generated by ogmg/neumann.maple
c Fourth-order BC for mixed boundary condition using the normal derivative of the PDE 
c BC:    an1*ur+an2*us+an0*u = g 
c PDE:   c11*urr + c12*urs + c22*uss + c1*ur + c2*us + c0 *u = f 
c PDE.r: urrr + br2*urr = b0*u + b1*us + b3*usss + bf  

c real alpha1,alpha2,a1,a2,a0
c real rxi,ryi,sxi,syi,rxr,rxs,sxr,sxs,ryr,rys,syr,sys
c real rxx,ryy,sxx,syy
c real rxrr,rxrs,rxss,ryrr,ryrs,ryss
c real sxrr,sxrs,sxss,syrr,syrs,syss
c real rxx,ryy,sxx,syy
c real rxxr,ryyr,rxxs,ryys, sxxr,syyr,sxxs,syys
c real rxNormI,rxNormIs,rxNormIss,rxNormIr,rxNormIrr
c real n1,n1s,n1ss,n2,n2s,n2ss
c real an1,an1s,an1ss,an2,an2s,an2ss 
c real an1r,an1rr,an2r,an2rs 
c real ff,ffs,ffr,g,gs,gss 
c real c11,c11r,c11s,c12,c12r,c12s,c22,c22r,c22s,c1,c1r,c1s,c2,c2r,c2s,c0,c0r,c0s
c real b0,b1,b2,b3,bf,br2

c Solution for ur4=ga, urrr2+br2*urr2 = gb is 
c u(i1-1,i2,i3) = 2*br2*drn/(-3+br2*drn)*u(i1,i2,i3)+(-3-br2*drn)/(-3+br2*drn)*u(i1+1,i2,i3)+(6*ga*drn+gb*drn**3)/(-3+br2*drn)
c u(i1-2,i2,i3) = u(i1+2,i2,i3)+16*br2*drn/(-3+br2*drn)*u(i1,i2,i3)-16*br2*drn/(-3+br2*drn)*u(i1+1,i2,i3)+(12*ga*drn+8*gb*drn**3+12*ga*drn**2*br2)/(-3+br2*drn)

c Solution for ur4=ga, urrr2+br2*urr2 = gb is 
c u(i1+1,i2,i3) = 2*br2*drn/(3+br2*drn)*u(i1,i2,i3)+(3-br2*drn)/(3+br2*drn)*u(i1-1,i2,i3)+(6*ga*drn+gb*drn**3)/(3+br2*drn)
c u(i1+2,i2,i3) = u(i1-2,i2,i3)+16*br2*drn/(3+br2*drn)*u(i1,i2,i3)-16*br2*drn/(3+br2*drn)*u(i1-1,i2,i3)+(12*ga*drn+8*gb*drn**3-12*ga*drn**2*br2)/(3+br2*drn)

c Solution for ur4=ga, urrr2+br2*urr2 = gb, ca*u(i1-2)+cb*u(i1-1)+cc*u = gc is 
c u(i1-2,i2,i3) = (-3*cc+cc*br2*drn+2*br2*drn*cb)/(-3*cc+cc*br2*drn+16*br2*drn*ca+2*br2*drn*cb)*u(i1+2,i2,i3)+(-16*cc*br2*drn-16*br2*drn*cb)/(-3*cc+cc*br2*drn+16*br2*drn*ca+2*br2*drn*cb)*u(i1+1,i2,i3)+(16*br2*drn*gc+12*ga*drn**2*cc*br2+8*cc*gb*drn**3+12*cc*ga*drn+24*ga*drn**2*br2*cb)/(-3*cc+cc*br2*drn+16*br2*drn*ca+2*br2*drn*cb)
c u(i1,i2,i3) = -(br2*drn*ca-3*ca)/(-3*cc+cc*br2*drn+16*br2*drn*ca+2*br2*drn*cb)*u(i1+2,i2,i3)-(-16*br2*drn*ca-br2*drn*cb-3*cb)/(-3*cc+cc*br2*drn+16*br2*drn*ca+2*br2*drn*cb)*u(i1+1,i2,i3)-(3*gc+6*cb*ga*drn+12*br2*drn**2*ca*ga-br2*drn*gc+cb*gb*drn**3+8*ca*gb*drn**3+12*ca*ga*drn)/(-3*cc+cc*br2*drn+16*br2*drn*ca+2*br2*drn*cb)
c u(i1-1,i2,i3) = -2/(-3*cc+cc*br2*drn+16*br2*drn*ca+2*br2*drn*cb)*br2*drn*ca*u(i1+2,i2,i3)-1/(-3*cc+cc*br2*drn+16*br2*drn*ca+2*br2*drn*cb)*(3*cc+cc*br2*drn-16*br2*drn*ca)*u(i1+1,i2,i3)-1/(-3*cc+cc*br2*drn+16*br2*drn*ca+2*br2*drn*cb)*(-cc*gb*drn**3-6*cc*ga*drn+24*br2*drn**2*ca*ga-2*br2*drn*gc)

c Solution for ur4=ga, urrr2+br2*urr2 = gb, ca*u(i1-2)+cb*u(i1-1)+cc*u = gc is 
c u(i1+2,i2,i3) = -(16*br2*drn*ca-3*cc-cc*br2*drn)/cc/(3+br2*drn)*u(i1-2,i2,i3)-(16*cc*br2*drn+16*br2*drn*cb)/cc/(3+br2*drn)*u(i1-1,i2,i3)-(-12*cc*ga*drn+12*ga*drn**2*cc*br2-16*br2*drn*gc-8*cc*gb*drn**3)/cc/(3+br2*drn)
c u(i1,i2,i3) = -ca/cc*u(i1-2,i2,i3)-cb/cc*u(i1-1,i2,i3)+gc/cc
c u(i1+1,i2,i3) = -2*br2*drn*ca/cc/(3+br2*drn)*u(i1-2,i2,i3)-(-3*cc+cc*br2*drn+2*br2*drn*cb)/cc/(3+br2*drn)*u(i1-1,i2,i3)-(-2*br2*drn*gc-6*cc*ga*drn-cc*gb*drn**3)/cc/(3+br2*drn)

! ============================================================================
! Fourth-order Neumann equation and normal derivative of equation
!
!    u.xx + u.yy + u.zz = f
!    a1n*u.x + a0*u = g     -> u.x = (g-a0*u)/a1n 
!
!    u.xxx = f.x - ( u.xyy + u.xzz )
!          = f.x - ( g.yy -a0*u.yy + g.zz - a0*u.zz )/a1n 
! 
! Here is the numerical boundary condition:
!    u.xxx + (a0/a1n)*u.xx = f.x - ( g.yy+g.zz -a0*f )/a1n 
! 
! ============================================================================



! ============================================================================
! Fourth-order Neumann equation and normal derivative of equation
!    ***New version: urrr + br2*urr - b0*u = gb
! ============================================================================

! Define 3d, order=4, PDE.r + Neumann BC: 
! This file was generated by ogmg/doc/neumann.maple
! This macro defines coefficients needed for a line solve of the Neumann and Equation Boundary Condition
! The equation for the 2nd ghost line is derived from the normal derivative of the PDE
! (PDE).r = fr :
! brrr*urrr + brr*urr + br*ur = bsss*usss + ...
! DIR : R,S,T 
! OPTION : LHS or RHS if evaluating the left-hand-side or right-hand-side 

! ============================================================================
! Fourth-order Neumann equation and normal derivative of equation
!    ***New version: urrr + br2*urr - b0*u = gb
! 
!   See ogmg/doc/neumann.maple
! ============================================================================



! =================================================================================
! Fill the matrix with the equations for parallel ghost boundaries (dirichlet)
! =================================================================================

! ------------------------------------------------------------------------------------------------
! Macro to declare variables for the 4th order Neumann BC's
! ------------------------------------------------------------------------------------------------



      subroutine lineSmoothBuild( nd,nd1a,nd1b,nd2a,nd2b,nd3a,nd3b,
     &    nda1a,nda1b,nda2a,nda2b,nda3a,nda3b,
     & ndc, coeff, cc, a, b, c, d, e, s, u, f, mask, rsxy, ipar, rpar,
     &  ndbcd,bcData )
! ===================================================================================
!  Line smooth -- build the tridiagonal/pentadiagonal matrices
!
!  a,b,c : for tridiagonal
!  a,b,c,d,e : for pentadiagonal
!
! Order of penta-diangonal entries: 
!     [ c d e a b
!     [ b c d e a
!     [ a b c d e 
!     [   a b c d e 
!     [     a b c d e 
!             . . . . .
!                a b c d e   ]
!                  a b c d e ]
!                  e a b c d ]
!                  d e a b c ]
!
! ===================================================================================

      implicit none
      integer nd,nd1a,nd1b,nd2a,nd2b,nd3a,nd3b,ndc,ndbcd
      integer nda1a,nda1b,nda2a,nda2b,nda3a,nda3b

      integer mask(nd1a:nd1b,nd2a:nd2b,nd3a:nd3b)
      real bcData(0:ndbcd-1,0:1,0:2)
      integer ipar(0:*)

      real a(nda1a:nda1b,nda2a:nda2b,nda3a:nda3b)
      real b(nda1a:nda1b,nda2a:nda2b,nda3a:nda3b)
      real c(nda1a:nda1b,nda2a:nda2b,nda3a:nda3b)
      real d(nda1a:nda1b,nda2a:nda2b,nda3a:nda3b)
      real e(nda1a:nda1b,nda2a:nda2b,nda3a:nda3b)

      real u(nd1a:nd1b,nd2a:nd2b,nd3a:nd3b)
      real f(nd1a:nd1b,nd2a:nd2b,nd3a:nd3b)
      real rsxy(nd1a:nd1b,nd2a:nd2b,nd3a:nd3b,0:nd-1,0:nd-1)
      real coeff(0:ndc-1,nd1a:nd1b,nd2a:nd2b,nd3a:nd3b)
      real s(nd1a:nd1b,nd2a:nd2b,nd3a:nd3b)
      real cc(0:*)
      real rpar(0:*)

!....local variables
      integer n1a,n1b,n1c,n2a,n2b,n2c,n3a,n3b,n3c
      integer sparseStencil,orderOfAccuracy,bcOptionD,bcOptionN,myid
      integer i1,i2,i3,m1a,m1b,m1c,m2a,m2b,m2c,m3a,m3b,m3c,j1,j2,j3,
     & is1,is2,is3,kd,is
      integer i1m1,i1p1,i2m1,i2p1,i3m1,i3p1,k1,k2,k3
      integer l1a,l1b,l2a,l2b,l3a,l3b
      integer grid,level,mm

      integer direction,width,width2,md,mdm1,mdp1,mdm2,mdp2,side,md2,
     & md2m1,md2p1,ms2
      integer axis,axisp1,axisp2
      integer bc(0:1,0:2),orderOfExtrapD,orderOfExtrapN,
     & useBoundaryForcing,isNeumannBC(0:1)
      real dx(0:2),dr(0:2)
      real dxi,dx2i,dxm,diag,nsign,aNormi

      real a0,a1,a2,alpha1,alpha2
      real rxi,ryi,sxi,syi,rxr,rxs,sxr,sxs,ryr,rys,syr,sys
      real rxxi,ryyi,sxxi,syyi
      real rxrr,rxrs,rxss,ryrr,ryrs,ryss
      real sxrr,sxrs,sxss,syrr,syrs,syss
      real rxx,ryy,sxx,syy
      real rxxr,ryyr,rxxs,ryys, sxxr,syyr,sxxs,syys
      real rxNormI,rxNormIs,rxNormIss,rxNormIr,rxNormIrr
      real sxNormI,sxNormIs,sxNormIss,sxNormIr,sxNormIrr

      real fv(-1:1,-1:1,-1:1), gv(-1:1,-1:1,-1:1)

      ! Delare variables for the order 4 Neumann BCs
       integer ax1,ax2
       integer iv(0:2),dv(0:2),mdim(0:1,0:2)
       real n1,n1r,n1rr, n1s,n1ss, n1t,n1tt, n1rs, n1rt, n1st
       real n2,n2r,n2rr, n2s,n2ss, n2t,n2tt, n2rs, n2rt, n2st
       real n3,n3r,n3rr, n3s,n3ss, n3t,n3tt, n3rs, n3rt, n3st
       real an1,an1s,an1ss,an2,an2s,an2ss,an1r,an1rr,an2r,an2rs,an2rr, 
     & an3
       real ff,ffs,ffr,g,gs,gss,gr,grr,grs,grt, gt,gst,gtt, fft,ffst,
     & fftt
       real c11,c11r,c11s,c12,c12r,c12s,c22,c22r,c22s,c1,c1r,c1s,c2,
     & c2r,c2s
       real b0,b1,b2,b3,bf
       real br,brr,brrr,bs,bss,bsss,bt,btt,bttt, brs,brt,bst, brrs, 
     & brrt, brss, brtt, bsst, bstt, brst, br2, bn1,bn2,bn3
       real cxx,cyy,czz,cxy,cxz,cyz,cx,cy,cz,c0
       real cRR,cSS,cTT,cRS,cRT,cST,ccR,ccS,ccT
       real cRRr,cSSr,cTTr,cRSr,cRTr,cSTr,ccRr,ccSr,ccTr,c0r
       real cRRs,cSSs,cTTs,cRSs,cRTs,cSTs,ccRs,ccSs,ccTs,c0s
       real cRRt,cSSt,cTTt,cRSt,cRTt,cSTt,ccRt,ccSt,ccTt,c0t
       real ani,anir,anis,anit, anirr,anirs, anirt, aniss, anist, anitt
       real anR, anRr,anRs,anRt, anRrr,anRrs, anRrt, anRss, anRst, 
     & anRtt
       real anS, anSr,anSs,anSt, anSrr,anSrs, anSrt, anSss, anSst, 
     & anStt
       real anT, anTr,anTs,anTt, anTrr,anTrs, anTrt, anTss, anTst, 
     & anTtt
       real a0r,a0s,a0t, a0rr,a0ss,a0tt,a0rs,a0rt,a0st
       real bogus
       real ajrxxr
       real ajrxxs
       real ajrxxt
       real ajrxyr
       real ajrxys
       real ajrxyt
       real ajrxzr
       real ajrxzs
       real ajrxzt
       real ajryxr
       real ajryxs
       real ajryxt
       real ajryyr
       real ajryys
       real ajryyt
       real ajryzr
       real ajryzs
       real ajryzt
       real ajrzxr
       real ajrzxs
       real ajrzxt
       real ajrzyr
       real ajrzys
       real ajrzyt
       real ajrzzr
       real ajrzzs
       real ajrzzt
       real ajsxxr
       real ajsxxs
       real ajsxxt
       real ajsxyr
       real ajsxys
       real ajsxyt
       real ajsxzr
       real ajsxzs
       real ajsxzt
       real ajsyxr
       real ajsyxs
       real ajsyxt
       real ajsyyr
       real ajsyys
       real ajsyyt
       real ajsyzr
       real ajsyzs
       real ajsyzt
       real ajszxr
       real ajszxs
       real ajszxt
       real ajszyr
       real ajszys
       real ajszyt
       real ajszzr
       real ajszzs
       real ajszzt
       real ajtxxr
       real ajtxxs
       real ajtxxt
       real ajtxyr
       real ajtxys
       real ajtxyt
       real ajtxzr
       real ajtxzs
       real ajtxzt
       real ajtyxr
       real ajtyxs
       real ajtyxt
       real ajtyyr
       real ajtyys
       real ajtyyt
       real ajtyzr
       real ajtyzs
       real ajtyzt
       real ajtzxr
       real ajtzxs
       real ajtzxt
       real ajtzyr
       real ajtzys
       real ajtzyt
       real ajtzzr
       real ajtzzs
       real ajtzzt
       real t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,
     & t17,t18,t19,t20,t21,t22,t23,t24,t25,t26,t27,t28,t29,t30,t31,
     & t32,t33,t34,t35,t36,t37,t38,t39,t40,t41,t42,t43,t44,t45,t46,
     & t47,t48,t49,t50,t51,t52,t53,t54,t55,t56,t57,t58,t59,t60,t61,
     & t62,t63,t64,t65,t66,t67,t68,t69,t70,t71,t72,t73,t74,t75,t76,
     & t77,t78,t79,t80,t81,t82,t83,t84,t85,t86,t87,t88,t89,t90,t91,
     & t92,t93,t94,t95,t96,t97,t98,t99,t100,t101,t102,t103,t104,t105,
     & t106,t107,t108,t109,t110,t111,t112,t113,t114,t115,t116,t117,
     & t118,t119,t120,t121,t122,t123,t124,t125,t126,t127,t128,t129,
     & t130,t131,t132,t133,t134,t135,t136,t137,t138,t139,t140,t141,
     & t142,t143,t144,t145,t146,t147,t148,t149,t150,t151,t152,t153,
     & t154,t155,t156,t157,t158,t159,t160,t161,t162,t163,t164,t165,
     & t166,t167,t168,t169,t170,t171,t172,t173,t174,t175,t176,t177,
     & t178,t179,t180,t181,t182,t183,t184,t185,t186,t187,t188,t189,
     & t190,t191,t192,t193,t194,t195,t196,t197,t198,t199,t200,t201,
     & t202,t203,t204,t205,t206,t207,t208,t209,t210,t211,t212,t213,
     & t214,t215,t216,t217,t218,t219,t220,t221,t222,t223,t224,t225,
     & t226,t227,t228,t229,t230,t231,t232,t233,t234,t235,t236,t237,
     & t238,t239,t240,t241,t242,t243,t244,t245,t246,t247,t248,t249,
     & t250,t251,t252,t253,t254,t255,t256,t257,t258,t259,t260,t261,
     & t262,t263,t264,t265,t266,t267,t268,t269,t270,t271,t272,t273,
     & t274,t275,t276,t277,t278,t279,t280,t281,t282,t283,t284,t285,
     & t286,t287,t288,t289,t290,t291,t292,t293,t294,t295,t296,t297,
     & t298,t299,t300,t301,t302,t303,t304,t305,t306,t307,t308,t309,
     & t310,t311,t312,t313,t314,t315,t316,t317,t318,t319,t320,t321,
     & t322,t323,t324,t325,t326,t327,t328,t329,t330,t331,t332,t333,
     & t334,t335,t336,t337,t338,t339,t340,t341,t342,t343,t344,t345,
     & t346,t347,t348,t349,t350,t351,t352,t353,t354,t355,t356,t357,
     & t358,t359,t360,t361,t362,t363,t364,t365,t366,t367,t368,t369,
     & t370,t371,t372,t373,t374,t375,t376,t377,t378,t379,t380,t381,
     & t382,t383,t384,t385,t386,t387,t388,t389,t390,t391,t392,t393,
     & t394,t395,t396,t397,t398,t399,t400,t401,t402,t403,t404,t405,
     & t406,t407,t408,t409,t410,t411,t412,t413,t414,t415,t416,t417,
     & t418,t419,t420,t421,t422,t423,t424,t425,t426,t427,t428,t429,
     & t430,t431,t432,t433,t434,t435,t436,t437,t438,t439,t440,t441,
     & t442,t443,t444,t445,t446,t447,t448,t449,t450,t451,t452,t453,
     & t454,t455,t456,t457,t458,t459,t460,t461,t462,t463,t464,t465,
     & t466,t467,t468,t469,t470,t471,t472,t473,t474,t475,t476,t477,
     & t478,t479,t480,t481,t482,t483,t484,t485,t486,t487,t488,t489,
     & t490,t491,t492,t493,t494,t495,t496,t497,t498,t499,t500,t501,
     & t502,t503,t504,t505,t506,t507,t508,t509,t510,t511,t512,t513,
     & t514,t515,t516,t517,t518,t519,t520,t521,t522,t523,t524,t525,
     & t526,t527,t528,t529,t530,t531,t532,t533,t534,t535,t536,t537,
     & t538,t539,t540,t541,t542,t543,t544,t545,t546,t547,t548,t549,
     & t550,t551,t552,t553,t554,t555,t556,t557,t558,t559,t560,t561,
     & t562,t563,t564,t565,t566,t567,t568,t569,t570,t571,t572,t573,
     & t574,t575,t576,t577,t578,t579,t580,t581,t582,t583,t584,t585,
     & t586,t587,t588,t589,t590,t591,t592,t593,t594,t595,t596,t597,
     & t598,t599,t600,t601,t602,t603,t604,t605,t606,t607,t608,t609,
     & t610,t611,t612,t613,t614,t615,t616,t617,t618,t619,t620,t621,
     & t622,t623,t624,t625,t626,t627,t628,t629,t630,t631,t632,t633,
     & t634,t635,t636,t637,t638,t639,t640,t641,t642,t643,t644,t645,
     & t646,t647,t648,t649,t650,t651,t652,t653,t654,t655,t656,t657,
     & t658,t659,t660,t661,t662,t663,t664,t665,t666,t667,t668,t669,
     & t670,t671,t672,t673,t674,t675,t676,t677,t678,t679,t680,t681,
     & t682,t683,t684,t685,t686,t687,t688,t689,t690,t691,t692,t693,
     & t694,t695,t696,t697,t698,t699,t700,t701,t702,t703,t704,t705,
     & t706,t707,t708,t709,t710,t711,t712,t713,t714,t715,t716,t717,
     & t718,t719,t720,t721,t722,t723,t724,t725,t726,t727,t728,t729,
     & t730,t731,t732,t733,t734,t735,t736,t737,t738,t739,t740,t741,
     & t742,t743,t744,t745,t746,t747,t748,t749,t750,t751,t752,t753,
     & t754,t755,t756,t757,t758,t759,t760,t761,t762,t763,t764,t765,
     & t766,t767,t768,t769,t770,t771,t772,t773,t774,t775,t776,t777,
     & t778,t779,t780,t781,t782,t783,t784,t785,t786,t787,t788,t789,
     & t790,t791,t792,t793,t794,t795,t796,t797,t798,t799,t800,t801,
     & t802,t803,t804,t805,t806,t807,t808,t809,t810,t811,t812,t813,
     & t814,t815,t816,t817,t818,t819,t820,t821,t822,t823,t824,t825,
     & t826,t827,t828,t829,t830,t831,t832,t833,t834,t835,t836,t837,
     & t838,t839,t840,t841,t842,t843,t844,t845,t846,t847,t848,t849,
     & t850,t851,t852,t853,t854,t855,t856,t857,t858,t859,t860,t861,
     & t862,t863,t864,t865,t866,t867,t868,t869,t870,t871,t872,t873,
     & t874,t875,t876,t877,t878,t879,t880,t881,t882,t883,t884,t885,
     & t886,t887,t888,t889,t890,t891,t892,t893,t894,t895,t896,t897,
     & t898,t899,t900,t901,t902,t903,t904,t905,t906,t907,t908,t909,
     & t910,t911,t912,t913,t914,t915,t916,t917,t918,t919,t920,t921,
     & t922,t923,t924,t925,t926,t927,t928,t929,t930,t931,t932,t933,
     & t934,t935,t936,t937,t938,t939,t940,t941,t942,t943,t944,t945,
     & t946,t947,t948,t949,t950,t951,t952,t953,t954,t955,t956,t957,
     & t958,t959,t960,t961,t962,t963,t964,t965,t966,t967,t968,t969,
     & t970,t971,t972,t973,t974,t975,t976,t977,t978,t979,t980,t981,
     & t982,t983,t984,t985,t986,t987,t988,t989,t990,t991,t992,t993,
     & t994,t995,t996,t997,t998,t999,t1000,t1001,t1002,t1003,t1004,
     & t1005,t1006,t1007,t1008,t1009,t1010,t1011,t1012,t1013,t1014,
     & t1015,t1016,t1017,t1018,t1019,t1020,t1021,t1022,t1023,t1024,
     & t1025,t1026,t1027,t1028,t1029,t1030,t1031,t1032,t1033,t1034,
     & t1035,t1036,t1037,t1038,t1039,t1040,t1041,t1042,t1043,t1044,
     & t1045,t1046,t1047,t1048,t1049,t1050,t1051,t1052,t1053,t1054,
     & t1055,t1056,t1057,t1058,t1059,t1060,t1061,t1062,t1063,t1064,
     & t1065,t1066,t1067,t1068,t1069,t1070,t1071,t1072,t1073,t1074,
     & t1075,t1076,t1077,t1078,t1079,t1080,t1081,t1082,t1083,t1084,
     & t1085,t1086,t1087,t1088,t1089,t1090,t1091,t1092,t1093,t1094,
     & t1095,t1096,t1097,t1098,t1099,t1100,t1101,t1102,t1103,t1104,
     & t1105,t1106,t1107,t1108,t1109,t1110,t1111,t1112,t1113,t1114,
     & t1115,t1116,t1117,t1118,t1119,t1120,t1121,t1122,t1123,t1124,
     & t1125,t1126,t1127,t1128,t1129,t1130,t1131,t1132,t1133,t1134,
     & t1135,t1136,t1137,t1138,t1139,t1140,t1141,t1142,t1143,t1144,
     & t1145,t1146,t1147,t1148,t1149,t1150,t1151,t1152,t1153,t1154,
     & t1155,t1156,t1157,t1158,t1159,t1160,t1161,t1162,t1163,t1164,
     & t1165,t1166,t1167,t1168,t1169,t1170,t1171,t1172,t1173,t1174,
     & t1175,t1176,t1177,t1178,t1179,t1180,t1181,t1182,t1183,t1184,
     & t1185,t1186,t1187,t1188,t1189,t1190,t1191,t1192,t1193,t1194,
     & t1195,t1196,t1197,t1198,t1199,t1200,t1201,t1202,t1203,t1204,
     & t1205,t1206,t1207,t1208,t1209,t1210,t1211,t1212,t1213,t1214,
     & t1215,t1216,t1217,t1218,t1219,t1220,t1221,t1222,t1223,t1224,
     & t1225,t1226,t1227,t1228,t1229,t1230,t1231,t1232,t1233,t1234,
     & t1235,t1236,t1237,t1238,t1239,t1240,t1241,t1242,t1243,t1244,
     & t1245,t1246,t1247,t1248,t1249,t1250,t1251,t1252,t1253,t1254,
     & t1255,t1256,t1257,t1258,t1259,t1260,t1261,t1262,t1263,t1264,
     & t1265,t1266,t1267,t1268,t1269,t1270,t1271,t1272,t1273,t1274,
     & t1275,t1276,t1277,t1278,t1279,t1280,t1281,t1282,t1283,t1284,
     & t1285,t1286,t1287,t1288,t1289,t1290,t1291,t1292,t1293,t1294,
     & t1295,t1296,t1297,t1298,t1299,t1300,t1301,t1302,t1303,t1304,
     & t1305,t1306,t1307,t1308,t1309,t1310,t1311,t1312,t1313,t1314,
     & t1315,t1316,t1317,t1318,t1319,t1320,t1321,t1322,t1323,t1324,
     & t1325,t1326,t1327,t1328,t1329,t1330,t1331,t1332,t1333,t1334,
     & t1335,t1336,t1337,t1338,t1339,t1340,t1341,t1342,t1343,t1344,
     & t1345,t1346,t1347,t1348,t1349,t1350,t1351,t1352,t1353,t1354,
     & t1355,t1356,t1357,t1358,t1359,t1360,t1361,t1362,t1363,t1364,
     & t1365,t1366,t1367,t1368,t1369,t1370,t1371,t1372,t1373,t1374,
     & t1375,t1376,t1377,t1378,t1379,t1380,t1381,t1382,t1383,t1384,
     & t1385,t1386,t1387,t1388,t1389,t1390,t1391,t1392,t1393,t1394,
     & t1395,t1396,t1397,t1398,t1399,t1400,t1401,t1402,t1403,t1404,
     & t1405,t1406,t1407,t1408,t1409,t1410,t1411,t1412,t1413,t1414,
     & t1415,t1416,t1417,t1418,t1419,t1420,t1421,t1422,t1423,t1424,
     & t1425,t1426,t1427,t1428,t1429,t1430,t1431,t1432,t1433,t1434,
     & t1435,t1436,t1437,t1438,t1439,t1440,t1441,t1442,t1443,t1444,
     & t1445,t1446,t1447,t1448,t1449,t1450,t1451,t1452,t1453,t1454,
     & t1455,t1456,t1457,t1458,t1459,t1460,t1461,t1462,t1463,t1464,
     & t1465,t1466,t1467,t1468,t1469,t1470,t1471,t1472,t1473,t1474,
     & t1475,t1476,t1477,t1478,t1479,t1480,t1481,t1482,t1483,t1484,
     & t1485,t1486,t1487,t1488,t1489,t1490,t1491,t1492,t1493,t1494,
     & t1495,t1496,t1497,t1498,t1499,t1500,t1501,t1502,t1503,t1504,
     & t1505,t1506,t1507,t1508,t1509,t1510,t1511,t1512,t1513,t1514,
     & t1515,t1516,t1517,t1518,t1519,t1520,t1521,t1522,t1523,t1524,
     & t1525,t1526,t1527,t1528,t1529,t1530,t1531,t1532,t1533,t1534,
     & t1535,t1536,t1537,t1538,t1539,t1540,t1541,t1542,t1543,t1544,
     & t1545,t1546,t1547,t1548,t1549,t1550,t1551,t1552,t1553,t1554,
     & t1555,t1556,t1557,t1558,t1559,t1560,t1561,t1562,t1563,t1564,
     & t1565,t1566,t1567,t1568,t1569,t1570,t1571,t1572,t1573,t1574,
     & t1575,t1576,t1577,t1578,t1579,t1580,t1581,t1582,t1583,t1584,
     & t1585,t1586,t1587,t1588,t1589,t1590,t1591,t1592,t1593,t1594,
     & t1595,t1596,t1597,t1598,t1599,t1600,t1601,t1602,t1603,t1604,
     & t1605,t1606,t1607,t1608,t1609,t1610,t1611,t1612,t1613,t1614,
     & t1615,t1616,t1617,t1618,t1619,t1620,t1621,t1622,t1623,t1624,
     & t1625,t1626,t1627,t1628,t1629,t1630,t1631,t1632,t1633,t1634,
     & t1635,t1636,t1637,t1638,t1639,t1640,t1641,t1642,t1643,t1644,
     & t1645,t1646,t1647,t1648,t1649,t1650,t1651,t1652,t1653,t1654,
     & t1655,t1656,t1657,t1658,t1659,t1660,t1661,t1662,t1663,t1664,
     & t1665,t1666,t1667,t1668,t1669,t1670,t1671,t1672,t1673,t1674,
     & t1675,t1676,t1677,t1678,t1679,t1680,t1681,t1682,t1683,t1684,
     & t1685,t1686,t1687,t1688,t1689,t1690,t1691,t1692,t1693,t1694,
     & t1695,t1696,t1697,t1698,t1699,t1700,t1701,t1702,t1703,t1704,
     & t1705,t1706,t1707,t1708,t1709,t1710,t1711,t1712,t1713,t1714,
     & t1715,t1716,t1717,t1718,t1719,t1720,t1721,t1722,t1723,t1724,
     & t1725,t1726,t1727,t1728,t1729,t1730,t1731,t1732,t1733,t1734,
     & t1735,t1736,t1737,t1738,t1739,t1740,t1741,t1742,t1743,t1744,
     & t1745,t1746,t1747,t1748,t1749,t1750,t1751,t1752,t1753,t1754,
     & t1755,t1756,t1757,t1758,t1759,t1760,t1761,t1762,t1763,t1764,
     & t1765,t1766,t1767,t1768,t1769,t1770,t1771,t1772,t1773,t1774,
     & t1775,t1776,t1777,t1778,t1779,t1780,t1781,t1782,t1783,t1784,
     & t1785,t1786,t1787,t1788,t1789,t1790,t1791,t1792,t1793,t1794,
     & t1795,t1796,t1797,t1798,t1799,t1800,t1801,t1802,t1803,t1804,
     & t1805,t1806,t1807,t1808,t1809,t1810,t1811,t1812,t1813,t1814,
     & t1815,t1816,t1817,t1818,t1819,t1820,t1821,t1822,t1823,t1824,
     & t1825,t1826,t1827,t1828,t1829,t1830,t1831,t1832,t1833,t1834,
     & t1835,t1836,t1837,t1838,t1839,t1840,t1841,t1842,t1843,t1844,
     & t1845,t1846,t1847,t1848,t1849,t1850,t1851,t1852,t1853,t1854,
     & t1855,t1856,t1857,t1858,t1859,t1860,t1861,t1862,t1863,t1864,
     & t1865,t1866,t1867,t1868,t1869,t1870,t1871,t1872,t1873,t1874,
     & t1875,t1876,t1877,t1878,t1879,t1880,t1881,t1882,t1883,t1884,
     & t1885,t1886,t1887,t1888,t1889,t1890,t1891,t1892,t1893,t1894,
     & t1895,t1896,t1897,t1898,t1899,t1900,t1901,t1902,t1903,t1904,
     & t1905,t1906,t1907,t1908,t1909,t1910,t1911,t1912,t1913,t1914,
     & t1915,t1916,t1917,t1918,t1919,t1920,t1921,t1922,t1923,t1924,
     & t1925,t1926,t1927,t1928,t1929,t1930,t1931,t1932,t1933,t1934,
     & t1935,t1936,t1937,t1938,t1939,t1940,t1941,t1942,t1943,t1944,
     & t1945,t1946,t1947,t1948,t1949,t1950,t1951,t1952,t1953,t1954,
     & t1955,t1956,t1957,t1958,t1959,t1960,t1961,t1962,t1963,t1964,
     & t1965,t1966,t1967,t1968,t1969,t1970,t1971,t1972,t1973,t1974,
     & t1975,t1976,t1977,t1978,t1979,t1980,t1981,t1982,t1983,t1984,
     & t1985,t1986,t1987,t1988,t1989,t1990,t1991,t1992,t1993,t1994,
     & t1995,t1996,t1997,t1998,t1999,t2000,t2001,t2002,t2003,t2004,
     & t2005,t2006,t2007,t2008,t2009,t2010,t2011,t2012,t2013,t2014,
     & t2015,t2016,t2017,t2018,t2019,t2020,t2021,t2022,t2023,t2024,
     & t2025,t2026,t2027,t2028,t2029,t2030,t2031,t2032,t2033,t2034,
     & t2035,t2036,t2037,t2038,t2039,t2040,t2041,t2042,t2043,t2044,
     & t2045,t2046,t2047,t2048,t2049,t2050,t2051,t2052,t2053,t2054,
     & t2055,t2056,t2057,t2058,t2059,t2060,t2061,t2062,t2063,t2064,
     & t2065,t2066,t2067,t2068,t2069,t2070,t2071,t2072,t2073,t2074,
     & t2075,t2076,t2077,t2078,t2079,t2080,t2081,t2082,t2083,t2084,
     & t2085,t2086,t2087,t2088,t2089,t2090,t2091,t2092,t2093,t2094,
     & t2095,t2096,t2097,t2098,t2099,t2100,t2101,t2102,t2103,t2104,
     & t2105,t2106,t2107,t2108,t2109,t2110,t2111,t2112,t2113,t2114,
     & t2115,t2116,t2117,t2118,t2119,t2120,t2121,t2122,t2123,t2124,
     & t2125,t2126,t2127,t2128,t2129,t2130,t2131,t2132,t2133,t2134,
     & t2135,t2136,t2137,t2138,t2139,t2140,t2141,t2142,t2143,t2144,
     & t2145,t2146,t2147,t2148,t2149,t2150,t2151,t2152,t2153,t2154,
     & t2155,t2156,t2157,t2158,t2159,t2160,t2161,t2162,t2163,t2164,
     & t2165,t2166,t2167,t2168,t2169,t2170,t2171,t2172,t2173,t2174,
     & t2175,t2176,t2177,t2178,t2179,t2180,t2181,t2182,t2183,t2184,
     & t2185,t2186,t2187,t2188,t2189,t2190,t2191,t2192,t2193,t2194,
     & t2195,t2196,t2197,t2198,t2199,t2200,t2201,t2202,t2203,t2204,
     & t2205,t2206,t2207,t2208,t2209,t2210,t2211,t2212,t2213,t2214,
     & t2215,t2216,t2217,t2218,t2219,t2220,t2221,t2222,t2223,t2224,
     & t2225,t2226,t2227,t2228,t2229,t2230,t2231,t2232,t2233,t2234,
     & t2235,t2236,t2237,t2238,t2239,t2240,t2241,t2242,t2243,t2244,
     & t2245,t2246,t2247,t2248,t2249,t2250,t2251,t2252,t2253,t2254,
     & t2255,t2256,t2257,t2258,t2259,t2260,t2261,t2262,t2263,t2264,
     & t2265,t2266,t2267,t2268,t2269,t2270,t2271,t2272,t2273,t2274,
     & t2275,t2276,t2277,t2278,t2279,t2280,t2281,t2282,t2283,t2284,
     & t2285,t2286,t2287,t2288,t2289,t2290,t2291,t2292,t2293,t2294,
     & t2295,t2296,t2297,t2298,t2299,t2300,t2301,t2302,t2303,t2304,
     & t2305,t2306,t2307,t2308,t2309,t2310,t2311,t2312,t2313,t2314,
     & t2315,t2316,t2317,t2318,t2319,t2320,t2321,t2322,t2323,t2324,
     & t2325,t2326,t2327,t2328,t2329,t2330,t2331,t2332,t2333,t2334,
     & t2335,t2336,t2337,t2338,t2339,t2340,t2341,t2342,t2343,t2344,
     & t2345,t2346,t2347,t2348,t2349,t2350,t2351,t2352,t2353,t2354,
     & t2355,t2356,t2357,t2358,t2359,t2360,t2361,t2362,t2363,t2364,
     & t2365,t2366,t2367,t2368,t2369,t2370,t2371,t2372,t2373,t2374,
     & t2375,t2376,t2377,t2378,t2379,t2380,t2381,t2382,t2383,t2384,
     & t2385,t2386,t2387,t2388,t2389,t2390,t2391,t2392,t2393,t2394,
     & t2395,t2396,t2397,t2398,t2399,t2400,t2401,t2402,t2403,t2404,
     & t2405,t2406,t2407,t2408,t2409,t2410,t2411,t2412,t2413,t2414,
     & t2415,t2416,t2417,t2418,t2419,t2420,t2421,t2422,t2423,t2424,
     & t2425,t2426,t2427,t2428,t2429,t2430,t2431,t2432,t2433,t2434,
     & t2435,t2436,t2437,t2438,t2439,t2440,t2441,t2442,t2443,t2444,
     & t2445,t2446,t2447,t2448,t2449,t2450,t2451,t2452,t2453,t2454,
     & t2455,t2456,t2457,t2458,t2459,t2460,t2461,t2462,t2463,t2464,
     & t2465,t2466,t2467,t2468,t2469,t2470,t2471,t2472,t2473,t2474,
     & t2475,t2476,t2477,t2478,t2479,t2480,t2481,t2482,t2483,t2484,
     & t2485,t2486,t2487,t2488,t2489,t2490,t2491,t2492,t2493,t2494,
     & t2495,t2496,t2497,t2498,t2499,t2500,t2501,t2502,t2503,t2504,
     & t2505,t2506,t2507,t2508,t2509,t2510,t2511,t2512,t2513,t2514,
     & t2515,t2516,t2517,t2518,t2519,t2520,t2521,t2522,t2523,t2524,
     & t2525,t2526,t2527,t2528,t2529,t2530,t2531,t2532,t2533,t2534,
     & t2535,t2536,t2537,t2538,t2539,t2540,t2541,t2542,t2543,t2544,
     & t2545,t2546,t2547,t2548,t2549,t2550,t2551,t2552,t2553,t2554,
     & t2555,t2556,t2557,t2558,t2559,t2560,t2561,t2562,t2563,t2564,
     & t2565,t2566,t2567,t2568,t2569,t2570,t2571,t2572,t2573,t2574,
     & t2575,t2576,t2577,t2578,t2579,t2580,t2581,t2582,t2583,t2584,
     & t2585,t2586,t2587,t2588,t2589,t2590,t2591,t2592,t2593,t2594,
     & t2595,t2596,t2597,t2598,t2599,t2600,t2601,t2602,t2603,t2604,
     & t2605,t2606,t2607,t2608,t2609,t2610,t2611,t2612,t2613,t2614,
     & t2615,t2616,t2617,t2618,t2619,t2620,t2621,t2622,t2623,t2624,
     & t2625,t2626,t2627,t2628,t2629,t2630,t2631,t2632,t2633,t2634,
     & t2635,t2636,t2637,t2638,t2639,t2640,t2641,t2642,t2643,t2644,
     & t2645,t2646,t2647,t2648,t2649,t2650,t2651,t2652,t2653,t2654,
     & t2655,t2656,t2657,t2658,t2659,t2660,t2661,t2662,t2663,t2664,
     & t2665,t2666,t2667,t2668,t2669,t2670,t2671,t2672,t2673,t2674,
     & t2675,t2676,t2677,t2678,t2679,t2680,t2681,t2682,t2683,t2684,
     & t2685,t2686,t2687,t2688,t2689,t2690,t2691,t2692,t2693,t2694,
     & t2695,t2696,t2697,t2698,t2699,t2700,t2701,t2702,t2703,t2704,
     & t2705,t2706,t2707,t2708,t2709,t2710,t2711,t2712,t2713,t2714,
     & t2715,t2716,t2717,t2718,t2719,t2720,t2721,t2722,t2723,t2724,
     & t2725,t2726,t2727,t2728,t2729,t2730,t2731,t2732,t2733,t2734,
     & t2735,t2736,t2737,t2738,t2739,t2740,t2741,t2742,t2743,t2744,
     & t2745,t2746,t2747,t2748,t2749,t2750,t2751,t2752,t2753,t2754,
     & t2755,t2756,t2757,t2758,t2759,t2760,t2761,t2762,t2763,t2764,
     & t2765,t2766,t2767,t2768,t2769,t2770,t2771,t2772,t2773,t2774,
     & t2775,t2776,t2777,t2778,t2779,t2780,t2781,t2782,t2783,t2784,
     & t2785,t2786,t2787,t2788,t2789,t2790,t2791,t2792,t2793,t2794,
     & t2795,t2796,t2797,t2798,t2799,t2800,t2801,t2802,t2803,t2804,
     & t2805,t2806,t2807,t2808,t2809,t2810,t2811,t2812,t2813,t2814,
     & t2815,t2816,t2817,t2818,t2819,t2820,t2821,t2822,t2823,t2824,
     & t2825,t2826,t2827,t2828,t2829,t2830,t2831,t2832,t2833,t2834,
     & t2835,t2836,t2837,t2838,t2839,t2840,t2841,t2842,t2843,t2844,
     & t2845,t2846,t2847,t2848,t2849,t2850,t2851,t2852,t2853,t2854,
     & t2855,t2856,t2857,t2858,t2859,t2860,t2861,t2862,t2863,t2864,
     & t2865,t2866,t2867,t2868,t2869,t2870,t2871,t2872,t2873,t2874,
     & t2875,t2876,t2877,t2878,t2879,t2880,t2881,t2882,t2883,t2884,
     & t2885,t2886,t2887,t2888,t2889,t2890,t2891,t2892,t2893,t2894,
     & t2895,t2896,t2897,t2898,t2899,t2900,t2901,t2902,t2903,t2904,
     & t2905,t2906,t2907,t2908,t2909,t2910,t2911,t2912,t2913,t2914,
     & t2915,t2916,t2917,t2918,t2919,t2920,t2921,t2922,t2923,t2924,
     & t2925,t2926,t2927,t2928,t2929,t2930,t2931,t2932,t2933,t2934,
     & t2935,t2936,t2937,t2938,t2939,t2940,t2941,t2942,t2943,t2944,
     & t2945,t2946,t2947,t2948,t2949,t2950,t2951,t2952,t2953,t2954,
     & t2955,t2956,t2957,t2958,t2959,t2960,t2961,t2962,t2963,t2964,
     & t2965,t2966,t2967,t2968,t2969,t2970,t2971,t2972,t2973,t2974,
     & t2975,t2976,t2977,t2978,t2979,t2980,t2981,t2982,t2983,t2984,
     & t2985,t2986,t2987,t2988,t2989,t2990,t2991,t2992,t2993,t2994,
     & t2995,t2996,t2997,t2998,t2999,t3000
        real ajrx,ajrxr,ajrxs,ajrxt,ajrxrr,ajrxrs,ajrxss,ajrxrt,ajrxst,
     & ajrxtt,ajrxrrr,ajrxrrs,ajrxrss,ajrxsss,ajrxrrt,ajrxrst,ajrxsst,
     & ajrxrtt,ajrxstt,ajrxttt,ajrxrrrr,ajrxrrrs,ajrxrrss,ajrxrsss,
     & ajrxssss,ajrxrrrt,ajrxrrst,ajrxrsst,ajrxssst,ajrxrrtt,ajrxrstt,
     & ajrxsstt,ajrxrttt,ajrxsttt,ajrxtttt,ajrxrrrrr,ajrxrrrrs,
     & ajrxrrrss,ajrxrrsss,ajrxrssss,ajrxsssss,ajrxrrrrt,ajrxrrrst,
     & ajrxrrsst,ajrxrssst,ajrxsssst,ajrxrrrtt,ajrxrrstt,ajrxrsstt,
     & ajrxssstt,ajrxrrttt,ajrxrsttt,ajrxssttt,ajrxrtttt,ajrxstttt,
     & ajrxttttt,ajrxrrrrrr,ajrxrrrrrs,ajrxrrrrss,ajrxrrrsss,
     & ajrxrrssss,ajrxrsssss,ajrxssssss,ajrxrrrrrt,ajrxrrrrst,
     & ajrxrrrsst,ajrxrrssst,ajrxrsssst,ajrxssssst,ajrxrrrrtt,
     & ajrxrrrstt,ajrxrrsstt,ajrxrssstt,ajrxsssstt,ajrxrrrttt,
     & ajrxrrsttt,ajrxrssttt,ajrxsssttt,ajrxrrtttt,ajrxrstttt,
     & ajrxsstttt,ajrxrttttt,ajrxsttttt,ajrxtttttt
        real ajsx,ajsxr,ajsxs,ajsxt,ajsxrr,ajsxrs,ajsxss,ajsxrt,ajsxst,
     & ajsxtt,ajsxrrr,ajsxrrs,ajsxrss,ajsxsss,ajsxrrt,ajsxrst,ajsxsst,
     & ajsxrtt,ajsxstt,ajsxttt,ajsxrrrr,ajsxrrrs,ajsxrrss,ajsxrsss,
     & ajsxssss,ajsxrrrt,ajsxrrst,ajsxrsst,ajsxssst,ajsxrrtt,ajsxrstt,
     & ajsxsstt,ajsxrttt,ajsxsttt,ajsxtttt,ajsxrrrrr,ajsxrrrrs,
     & ajsxrrrss,ajsxrrsss,ajsxrssss,ajsxsssss,ajsxrrrrt,ajsxrrrst,
     & ajsxrrsst,ajsxrssst,ajsxsssst,ajsxrrrtt,ajsxrrstt,ajsxrsstt,
     & ajsxssstt,ajsxrrttt,ajsxrsttt,ajsxssttt,ajsxrtttt,ajsxstttt,
     & ajsxttttt,ajsxrrrrrr,ajsxrrrrrs,ajsxrrrrss,ajsxrrrsss,
     & ajsxrrssss,ajsxrsssss,ajsxssssss,ajsxrrrrrt,ajsxrrrrst,
     & ajsxrrrsst,ajsxrrssst,ajsxrsssst,ajsxssssst,ajsxrrrrtt,
     & ajsxrrrstt,ajsxrrsstt,ajsxrssstt,ajsxsssstt,ajsxrrrttt,
     & ajsxrrsttt,ajsxrssttt,ajsxsssttt,ajsxrrtttt,ajsxrstttt,
     & ajsxsstttt,ajsxrttttt,ajsxsttttt,ajsxtttttt
        real ajry,ajryr,ajrys,ajryt,ajryrr,ajryrs,ajryss,ajryrt,ajryst,
     & ajrytt,ajryrrr,ajryrrs,ajryrss,ajrysss,ajryrrt,ajryrst,ajrysst,
     & ajryrtt,ajrystt,ajryttt,ajryrrrr,ajryrrrs,ajryrrss,ajryrsss,
     & ajryssss,ajryrrrt,ajryrrst,ajryrsst,ajryssst,ajryrrtt,ajryrstt,
     & ajrysstt,ajryrttt,ajrysttt,ajrytttt,ajryrrrrr,ajryrrrrs,
     & ajryrrrss,ajryrrsss,ajryrssss,ajrysssss,ajryrrrrt,ajryrrrst,
     & ajryrrsst,ajryrssst,ajrysssst,ajryrrrtt,ajryrrstt,ajryrsstt,
     & ajryssstt,ajryrrttt,ajryrsttt,ajryssttt,ajryrtttt,ajrystttt,
     & ajryttttt,ajryrrrrrr,ajryrrrrrs,ajryrrrrss,ajryrrrsss,
     & ajryrrssss,ajryrsssss,ajryssssss,ajryrrrrrt,ajryrrrrst,
     & ajryrrrsst,ajryrrssst,ajryrsssst,ajryssssst,ajryrrrrtt,
     & ajryrrrstt,ajryrrsstt,ajryrssstt,ajrysssstt,ajryrrrttt,
     & ajryrrsttt,ajryrssttt,ajrysssttt,ajryrrtttt,ajryrstttt,
     & ajrysstttt,ajryrttttt,ajrysttttt,ajrytttttt
        real ajsy,ajsyr,ajsys,ajsyt,ajsyrr,ajsyrs,ajsyss,ajsyrt,ajsyst,
     & ajsytt,ajsyrrr,ajsyrrs,ajsyrss,ajsysss,ajsyrrt,ajsyrst,ajsysst,
     & ajsyrtt,ajsystt,ajsyttt,ajsyrrrr,ajsyrrrs,ajsyrrss,ajsyrsss,
     & ajsyssss,ajsyrrrt,ajsyrrst,ajsyrsst,ajsyssst,ajsyrrtt,ajsyrstt,
     & ajsysstt,ajsyrttt,ajsysttt,ajsytttt,ajsyrrrrr,ajsyrrrrs,
     & ajsyrrrss,ajsyrrsss,ajsyrssss,ajsysssss,ajsyrrrrt,ajsyrrrst,
     & ajsyrrsst,ajsyrssst,ajsysssst,ajsyrrrtt,ajsyrrstt,ajsyrsstt,
     & ajsyssstt,ajsyrrttt,ajsyrsttt,ajsyssttt,ajsyrtttt,ajsystttt,
     & ajsyttttt,ajsyrrrrrr,ajsyrrrrrs,ajsyrrrrss,ajsyrrrsss,
     & ajsyrrssss,ajsyrsssss,ajsyssssss,ajsyrrrrrt,ajsyrrrrst,
     & ajsyrrrsst,ajsyrrssst,ajsyrsssst,ajsyssssst,ajsyrrrrtt,
     & ajsyrrrstt,ajsyrrsstt,ajsyrssstt,ajsysssstt,ajsyrrrttt,
     & ajsyrrsttt,ajsyrssttt,ajsysssttt,ajsyrrtttt,ajsyrstttt,
     & ajsysstttt,ajsyrttttt,ajsysttttt,ajsytttttt
        real ajrxx,ajrxy,ajrxz,ajrxxx,ajrxxy,ajrxyy,ajrxxz,ajrxyz,
     & ajrxzz,ajrxxxx,ajrxxxy,ajrxxyy,ajrxyyy,ajrxxxz,ajrxxyz,ajrxyyz,
     & ajrxxzz,ajrxyzz,ajrxzzz,ajrxxxxx,ajrxxxxy,ajrxxxyy,ajrxxyyy,
     & ajrxyyyy,ajrxxxxz,ajrxxxyz,ajrxxyyz,ajrxyyyz,ajrxxxzz,ajrxxyzz,
     & ajrxyyzz,ajrxxzzz,ajrxyzzz,ajrxzzzz,ajrxxxxxx,ajrxxxxxy,
     & ajrxxxxyy,ajrxxxyyy,ajrxxyyyy,ajrxyyyyy,ajrxxxxxz,ajrxxxxyz,
     & ajrxxxyyz,ajrxxyyyz,ajrxyyyyz,ajrxxxxzz,ajrxxxyzz,ajrxxyyzz,
     & ajrxyyyzz,ajrxxxzzz,ajrxxyzzz,ajrxyyzzz,ajrxxzzzz,ajrxyzzzz,
     & ajrxzzzzz,ajrxxxxxxx,ajrxxxxxxy,ajrxxxxxyy,ajrxxxxyyy,
     & ajrxxxyyyy,ajrxxyyyyy,ajrxyyyyyy,ajrxxxxxxz,ajrxxxxxyz,
     & ajrxxxxyyz,ajrxxxyyyz,ajrxxyyyyz,ajrxyyyyyz,ajrxxxxxzz,
     & ajrxxxxyzz,ajrxxxyyzz,ajrxxyyyzz,ajrxyyyyzz,ajrxxxxzzz,
     & ajrxxxyzzz,ajrxxyyzzz,ajrxyyyzzz,ajrxxxzzzz,ajrxxyzzzz,
     & ajrxyyzzzz,ajrxxzzzzz,ajrxyzzzzz,ajrxzzzzzz
        real ajsxx,ajsxy,ajsxz,ajsxxx,ajsxxy,ajsxyy,ajsxxz,ajsxyz,
     & ajsxzz,ajsxxxx,ajsxxxy,ajsxxyy,ajsxyyy,ajsxxxz,ajsxxyz,ajsxyyz,
     & ajsxxzz,ajsxyzz,ajsxzzz,ajsxxxxx,ajsxxxxy,ajsxxxyy,ajsxxyyy,
     & ajsxyyyy,ajsxxxxz,ajsxxxyz,ajsxxyyz,ajsxyyyz,ajsxxxzz,ajsxxyzz,
     & ajsxyyzz,ajsxxzzz,ajsxyzzz,ajsxzzzz,ajsxxxxxx,ajsxxxxxy,
     & ajsxxxxyy,ajsxxxyyy,ajsxxyyyy,ajsxyyyyy,ajsxxxxxz,ajsxxxxyz,
     & ajsxxxyyz,ajsxxyyyz,ajsxyyyyz,ajsxxxxzz,ajsxxxyzz,ajsxxyyzz,
     & ajsxyyyzz,ajsxxxzzz,ajsxxyzzz,ajsxyyzzz,ajsxxzzzz,ajsxyzzzz,
     & ajsxzzzzz,ajsxxxxxxx,ajsxxxxxxy,ajsxxxxxyy,ajsxxxxyyy,
     & ajsxxxyyyy,ajsxxyyyyy,ajsxyyyyyy,ajsxxxxxxz,ajsxxxxxyz,
     & ajsxxxxyyz,ajsxxxyyyz,ajsxxyyyyz,ajsxyyyyyz,ajsxxxxxzz,
     & ajsxxxxyzz,ajsxxxyyzz,ajsxxyyyzz,ajsxyyyyzz,ajsxxxxzzz,
     & ajsxxxyzzz,ajsxxyyzzz,ajsxyyyzzz,ajsxxxzzzz,ajsxxyzzzz,
     & ajsxyyzzzz,ajsxxzzzzz,ajsxyzzzzz,ajsxzzzzzz
        real ajryx,ajryy,ajryz,ajryxx,ajryxy,ajryyy,ajryxz,ajryyz,
     & ajryzz,ajryxxx,ajryxxy,ajryxyy,ajryyyy,ajryxxz,ajryxyz,ajryyyz,
     & ajryxzz,ajryyzz,ajryzzz,ajryxxxx,ajryxxxy,ajryxxyy,ajryxyyy,
     & ajryyyyy,ajryxxxz,ajryxxyz,ajryxyyz,ajryyyyz,ajryxxzz,ajryxyzz,
     & ajryyyzz,ajryxzzz,ajryyzzz,ajryzzzz,ajryxxxxx,ajryxxxxy,
     & ajryxxxyy,ajryxxyyy,ajryxyyyy,ajryyyyyy,ajryxxxxz,ajryxxxyz,
     & ajryxxyyz,ajryxyyyz,ajryyyyyz,ajryxxxzz,ajryxxyzz,ajryxyyzz,
     & ajryyyyzz,ajryxxzzz,ajryxyzzz,ajryyyzzz,ajryxzzzz,ajryyzzzz,
     & ajryzzzzz,ajryxxxxxx,ajryxxxxxy,ajryxxxxyy,ajryxxxyyy,
     & ajryxxyyyy,ajryxyyyyy,ajryyyyyyy,ajryxxxxxz,ajryxxxxyz,
     & ajryxxxyyz,ajryxxyyyz,ajryxyyyyz,ajryyyyyyz,ajryxxxxzz,
     & ajryxxxyzz,ajryxxyyzz,ajryxyyyzz,ajryyyyyzz,ajryxxxzzz,
     & ajryxxyzzz,ajryxyyzzz,ajryyyyzzz,ajryxxzzzz,ajryxyzzzz,
     & ajryyyzzzz,ajryxzzzzz,ajryyzzzzz,ajryzzzzzz
        real ajsyx,ajsyy,ajsyz,ajsyxx,ajsyxy,ajsyyy,ajsyxz,ajsyyz,
     & ajsyzz,ajsyxxx,ajsyxxy,ajsyxyy,ajsyyyy,ajsyxxz,ajsyxyz,ajsyyyz,
     & ajsyxzz,ajsyyzz,ajsyzzz,ajsyxxxx,ajsyxxxy,ajsyxxyy,ajsyxyyy,
     & ajsyyyyy,ajsyxxxz,ajsyxxyz,ajsyxyyz,ajsyyyyz,ajsyxxzz,ajsyxyzz,
     & ajsyyyzz,ajsyxzzz,ajsyyzzz,ajsyzzzz,ajsyxxxxx,ajsyxxxxy,
     & ajsyxxxyy,ajsyxxyyy,ajsyxyyyy,ajsyyyyyy,ajsyxxxxz,ajsyxxxyz,
     & ajsyxxyyz,ajsyxyyyz,ajsyyyyyz,ajsyxxxzz,ajsyxxyzz,ajsyxyyzz,
     & ajsyyyyzz,ajsyxxzzz,ajsyxyzzz,ajsyyyzzz,ajsyxzzzz,ajsyyzzzz,
     & ajsyzzzzz,ajsyxxxxxx,ajsyxxxxxy,ajsyxxxxyy,ajsyxxxyyy,
     & ajsyxxyyyy,ajsyxyyyyy,ajsyyyyyyy,ajsyxxxxxz,ajsyxxxxyz,
     & ajsyxxxyyz,ajsyxxyyyz,ajsyxyyyyz,ajsyyyyyyz,ajsyxxxxzz,
     & ajsyxxxyzz,ajsyxxyyzz,ajsyxyyyzz,ajsyyyyyzz,ajsyxxxzzz,
     & ajsyxxyzzz,ajsyxyyzzz,ajsyyyyzzz,ajsyxxzzzz,ajsyxyzzzz,
     & ajsyyyzzzz,ajsyxzzzzz,ajsyyzzzzz,ajsyzzzzzz
        real ajrz,ajrzr,ajrzs,ajrzt,ajrzrr,ajrzrs,ajrzss,ajrzrt,ajrzst,
     & ajrztt,ajrzrrr,ajrzrrs,ajrzrss,ajrzsss,ajrzrrt,ajrzrst,ajrzsst,
     & ajrzrtt,ajrzstt,ajrzttt,ajrzrrrr,ajrzrrrs,ajrzrrss,ajrzrsss,
     & ajrzssss,ajrzrrrt,ajrzrrst,ajrzrsst,ajrzssst,ajrzrrtt,ajrzrstt,
     & ajrzsstt,ajrzrttt,ajrzsttt,ajrztttt,ajrzrrrrr,ajrzrrrrs,
     & ajrzrrrss,ajrzrrsss,ajrzrssss,ajrzsssss,ajrzrrrrt,ajrzrrrst,
     & ajrzrrsst,ajrzrssst,ajrzsssst,ajrzrrrtt,ajrzrrstt,ajrzrsstt,
     & ajrzssstt,ajrzrrttt,ajrzrsttt,ajrzssttt,ajrzrtttt,ajrzstttt,
     & ajrzttttt,ajrzrrrrrr,ajrzrrrrrs,ajrzrrrrss,ajrzrrrsss,
     & ajrzrrssss,ajrzrsssss,ajrzssssss,ajrzrrrrrt,ajrzrrrrst,
     & ajrzrrrsst,ajrzrrssst,ajrzrsssst,ajrzssssst,ajrzrrrrtt,
     & ajrzrrrstt,ajrzrrsstt,ajrzrssstt,ajrzsssstt,ajrzrrrttt,
     & ajrzrrsttt,ajrzrssttt,ajrzsssttt,ajrzrrtttt,ajrzrstttt,
     & ajrzsstttt,ajrzrttttt,ajrzsttttt,ajrztttttt
        real ajsz,ajszr,ajszs,ajszt,ajszrr,ajszrs,ajszss,ajszrt,ajszst,
     & ajsztt,ajszrrr,ajszrrs,ajszrss,ajszsss,ajszrrt,ajszrst,ajszsst,
     & ajszrtt,ajszstt,ajszttt,ajszrrrr,ajszrrrs,ajszrrss,ajszrsss,
     & ajszssss,ajszrrrt,ajszrrst,ajszrsst,ajszssst,ajszrrtt,ajszrstt,
     & ajszsstt,ajszrttt,ajszsttt,ajsztttt,ajszrrrrr,ajszrrrrs,
     & ajszrrrss,ajszrrsss,ajszrssss,ajszsssss,ajszrrrrt,ajszrrrst,
     & ajszrrsst,ajszrssst,ajszsssst,ajszrrrtt,ajszrrstt,ajszrsstt,
     & ajszssstt,ajszrrttt,ajszrsttt,ajszssttt,ajszrtttt,ajszstttt,
     & ajszttttt,ajszrrrrrr,ajszrrrrrs,ajszrrrrss,ajszrrrsss,
     & ajszrrssss,ajszrsssss,ajszssssss,ajszrrrrrt,ajszrrrrst,
     & ajszrrrsst,ajszrrssst,ajszrsssst,ajszssssst,ajszrrrrtt,
     & ajszrrrstt,ajszrrsstt,ajszrssstt,ajszsssstt,ajszrrrttt,
     & ajszrrsttt,ajszrssttt,ajszsssttt,ajszrrtttt,ajszrstttt,
     & ajszsstttt,ajszrttttt,ajszsttttt,ajsztttttt
        real ajtx,ajtxr,ajtxs,ajtxt,ajtxrr,ajtxrs,ajtxss,ajtxrt,ajtxst,
     & ajtxtt,ajtxrrr,ajtxrrs,ajtxrss,ajtxsss,ajtxrrt,ajtxrst,ajtxsst,
     & ajtxrtt,ajtxstt,ajtxttt,ajtxrrrr,ajtxrrrs,ajtxrrss,ajtxrsss,
     & ajtxssss,ajtxrrrt,ajtxrrst,ajtxrsst,ajtxssst,ajtxrrtt,ajtxrstt,
     & ajtxsstt,ajtxrttt,ajtxsttt,ajtxtttt,ajtxrrrrr,ajtxrrrrs,
     & ajtxrrrss,ajtxrrsss,ajtxrssss,ajtxsssss,ajtxrrrrt,ajtxrrrst,
     & ajtxrrsst,ajtxrssst,ajtxsssst,ajtxrrrtt,ajtxrrstt,ajtxrsstt,
     & ajtxssstt,ajtxrrttt,ajtxrsttt,ajtxssttt,ajtxrtttt,ajtxstttt,
     & ajtxttttt,ajtxrrrrrr,ajtxrrrrrs,ajtxrrrrss,ajtxrrrsss,
     & ajtxrrssss,ajtxrsssss,ajtxssssss,ajtxrrrrrt,ajtxrrrrst,
     & ajtxrrrsst,ajtxrrssst,ajtxrsssst,ajtxssssst,ajtxrrrrtt,
     & ajtxrrrstt,ajtxrrsstt,ajtxrssstt,ajtxsssstt,ajtxrrrttt,
     & ajtxrrsttt,ajtxrssttt,ajtxsssttt,ajtxrrtttt,ajtxrstttt,
     & ajtxsstttt,ajtxrttttt,ajtxsttttt,ajtxtttttt
        real ajty,ajtyr,ajtys,ajtyt,ajtyrr,ajtyrs,ajtyss,ajtyrt,ajtyst,
     & ajtytt,ajtyrrr,ajtyrrs,ajtyrss,ajtysss,ajtyrrt,ajtyrst,ajtysst,
     & ajtyrtt,ajtystt,ajtyttt,ajtyrrrr,ajtyrrrs,ajtyrrss,ajtyrsss,
     & ajtyssss,ajtyrrrt,ajtyrrst,ajtyrsst,ajtyssst,ajtyrrtt,ajtyrstt,
     & ajtysstt,ajtyrttt,ajtysttt,ajtytttt,ajtyrrrrr,ajtyrrrrs,
     & ajtyrrrss,ajtyrrsss,ajtyrssss,ajtysssss,ajtyrrrrt,ajtyrrrst,
     & ajtyrrsst,ajtyrssst,ajtysssst,ajtyrrrtt,ajtyrrstt,ajtyrsstt,
     & ajtyssstt,ajtyrrttt,ajtyrsttt,ajtyssttt,ajtyrtttt,ajtystttt,
     & ajtyttttt,ajtyrrrrrr,ajtyrrrrrs,ajtyrrrrss,ajtyrrrsss,
     & ajtyrrssss,ajtyrsssss,ajtyssssss,ajtyrrrrrt,ajtyrrrrst,
     & ajtyrrrsst,ajtyrrssst,ajtyrsssst,ajtyssssst,ajtyrrrrtt,
     & ajtyrrrstt,ajtyrrsstt,ajtyrssstt,ajtysssstt,ajtyrrrttt,
     & ajtyrrsttt,ajtyrssttt,ajtysssttt,ajtyrrtttt,ajtyrstttt,
     & ajtysstttt,ajtyrttttt,ajtysttttt,ajtytttttt
        real ajtz,ajtzr,ajtzs,ajtzt,ajtzrr,ajtzrs,ajtzss,ajtzrt,ajtzst,
     & ajtztt,ajtzrrr,ajtzrrs,ajtzrss,ajtzsss,ajtzrrt,ajtzrst,ajtzsst,
     & ajtzrtt,ajtzstt,ajtzttt,ajtzrrrr,ajtzrrrs,ajtzrrss,ajtzrsss,
     & ajtzssss,ajtzrrrt,ajtzrrst,ajtzrsst,ajtzssst,ajtzrrtt,ajtzrstt,
     & ajtzsstt,ajtzrttt,ajtzsttt,ajtztttt,ajtzrrrrr,ajtzrrrrs,
     & ajtzrrrss,ajtzrrsss,ajtzrssss,ajtzsssss,ajtzrrrrt,ajtzrrrst,
     & ajtzrrsst,ajtzrssst,ajtzsssst,ajtzrrrtt,ajtzrrstt,ajtzrsstt,
     & ajtzssstt,ajtzrrttt,ajtzrsttt,ajtzssttt,ajtzrtttt,ajtzstttt,
     & ajtzttttt,ajtzrrrrrr,ajtzrrrrrs,ajtzrrrrss,ajtzrrrsss,
     & ajtzrrssss,ajtzrsssss,ajtzssssss,ajtzrrrrrt,ajtzrrrrst,
     & ajtzrrrsst,ajtzrrssst,ajtzrsssst,ajtzssssst,ajtzrrrrtt,
     & ajtzrrrstt,ajtzrrsstt,ajtzrssstt,ajtzsssstt,ajtzrrrttt,
     & ajtzrrsttt,ajtzrssttt,ajtzsssttt,ajtzrrtttt,ajtzrstttt,
     & ajtzsstttt,ajtzrttttt,ajtzsttttt,ajtztttttt
        real ajrzx,ajrzy,ajrzz,ajrzxx,ajrzxy,ajrzyy,ajrzxz,ajrzyz,
     & ajrzzz,ajrzxxx,ajrzxxy,ajrzxyy,ajrzyyy,ajrzxxz,ajrzxyz,ajrzyyz,
     & ajrzxzz,ajrzyzz,ajrzzzz,ajrzxxxx,ajrzxxxy,ajrzxxyy,ajrzxyyy,
     & ajrzyyyy,ajrzxxxz,ajrzxxyz,ajrzxyyz,ajrzyyyz,ajrzxxzz,ajrzxyzz,
     & ajrzyyzz,ajrzxzzz,ajrzyzzz,ajrzzzzz,ajrzxxxxx,ajrzxxxxy,
     & ajrzxxxyy,ajrzxxyyy,ajrzxyyyy,ajrzyyyyy,ajrzxxxxz,ajrzxxxyz,
     & ajrzxxyyz,ajrzxyyyz,ajrzyyyyz,ajrzxxxzz,ajrzxxyzz,ajrzxyyzz,
     & ajrzyyyzz,ajrzxxzzz,ajrzxyzzz,ajrzyyzzz,ajrzxzzzz,ajrzyzzzz,
     & ajrzzzzzz,ajrzxxxxxx,ajrzxxxxxy,ajrzxxxxyy,ajrzxxxyyy,
     & ajrzxxyyyy,ajrzxyyyyy,ajrzyyyyyy,ajrzxxxxxz,ajrzxxxxyz,
     & ajrzxxxyyz,ajrzxxyyyz,ajrzxyyyyz,ajrzyyyyyz,ajrzxxxxzz,
     & ajrzxxxyzz,ajrzxxyyzz,ajrzxyyyzz,ajrzyyyyzz,ajrzxxxzzz,
     & ajrzxxyzzz,ajrzxyyzzz,ajrzyyyzzz,ajrzxxzzzz,ajrzxyzzzz,
     & ajrzyyzzzz,ajrzxzzzzz,ajrzyzzzzz,ajrzzzzzzz
        real ajszx,ajszy,ajszz,ajszxx,ajszxy,ajszyy,ajszxz,ajszyz,
     & ajszzz,ajszxxx,ajszxxy,ajszxyy,ajszyyy,ajszxxz,ajszxyz,ajszyyz,
     & ajszxzz,ajszyzz,ajszzzz,ajszxxxx,ajszxxxy,ajszxxyy,ajszxyyy,
     & ajszyyyy,ajszxxxz,ajszxxyz,ajszxyyz,ajszyyyz,ajszxxzz,ajszxyzz,
     & ajszyyzz,ajszxzzz,ajszyzzz,ajszzzzz,ajszxxxxx,ajszxxxxy,
     & ajszxxxyy,ajszxxyyy,ajszxyyyy,ajszyyyyy,ajszxxxxz,ajszxxxyz,
     & ajszxxyyz,ajszxyyyz,ajszyyyyz,ajszxxxzz,ajszxxyzz,ajszxyyzz,
     & ajszyyyzz,ajszxxzzz,ajszxyzzz,ajszyyzzz,ajszxzzzz,ajszyzzzz,
     & ajszzzzzz,ajszxxxxxx,ajszxxxxxy,ajszxxxxyy,ajszxxxyyy,
     & ajszxxyyyy,ajszxyyyyy,ajszyyyyyy,ajszxxxxxz,ajszxxxxyz,
     & ajszxxxyyz,ajszxxyyyz,ajszxyyyyz,ajszyyyyyz,ajszxxxxzz,
     & ajszxxxyzz,ajszxxyyzz,ajszxyyyzz,ajszyyyyzz,ajszxxxzzz,
     & ajszxxyzzz,ajszxyyzzz,ajszyyyzzz,ajszxxzzzz,ajszxyzzzz,
     & ajszyyzzzz,ajszxzzzzz,ajszyzzzzz,ajszzzzzzz
        real ajtxx,ajtxy,ajtxz,ajtxxx,ajtxxy,ajtxyy,ajtxxz,ajtxyz,
     & ajtxzz,ajtxxxx,ajtxxxy,ajtxxyy,ajtxyyy,ajtxxxz,ajtxxyz,ajtxyyz,
     & ajtxxzz,ajtxyzz,ajtxzzz,ajtxxxxx,ajtxxxxy,ajtxxxyy,ajtxxyyy,
     & ajtxyyyy,ajtxxxxz,ajtxxxyz,ajtxxyyz,ajtxyyyz,ajtxxxzz,ajtxxyzz,
     & ajtxyyzz,ajtxxzzz,ajtxyzzz,ajtxzzzz,ajtxxxxxx,ajtxxxxxy,
     & ajtxxxxyy,ajtxxxyyy,ajtxxyyyy,ajtxyyyyy,ajtxxxxxz,ajtxxxxyz,
     & ajtxxxyyz,ajtxxyyyz,ajtxyyyyz,ajtxxxxzz,ajtxxxyzz,ajtxxyyzz,
     & ajtxyyyzz,ajtxxxzzz,ajtxxyzzz,ajtxyyzzz,ajtxxzzzz,ajtxyzzzz,
     & ajtxzzzzz,ajtxxxxxxx,ajtxxxxxxy,ajtxxxxxyy,ajtxxxxyyy,
     & ajtxxxyyyy,ajtxxyyyyy,ajtxyyyyyy,ajtxxxxxxz,ajtxxxxxyz,
     & ajtxxxxyyz,ajtxxxyyyz,ajtxxyyyyz,ajtxyyyyyz,ajtxxxxxzz,
     & ajtxxxxyzz,ajtxxxyyzz,ajtxxyyyzz,ajtxyyyyzz,ajtxxxxzzz,
     & ajtxxxyzzz,ajtxxyyzzz,ajtxyyyzzz,ajtxxxzzzz,ajtxxyzzzz,
     & ajtxyyzzzz,ajtxxzzzzz,ajtxyzzzzz,ajtxzzzzzz
        real ajtyx,ajtyy,ajtyz,ajtyxx,ajtyxy,ajtyyy,ajtyxz,ajtyyz,
     & ajtyzz,ajtyxxx,ajtyxxy,ajtyxyy,ajtyyyy,ajtyxxz,ajtyxyz,ajtyyyz,
     & ajtyxzz,ajtyyzz,ajtyzzz,ajtyxxxx,ajtyxxxy,ajtyxxyy,ajtyxyyy,
     & ajtyyyyy,ajtyxxxz,ajtyxxyz,ajtyxyyz,ajtyyyyz,ajtyxxzz,ajtyxyzz,
     & ajtyyyzz,ajtyxzzz,ajtyyzzz,ajtyzzzz,ajtyxxxxx,ajtyxxxxy,
     & ajtyxxxyy,ajtyxxyyy,ajtyxyyyy,ajtyyyyyy,ajtyxxxxz,ajtyxxxyz,
     & ajtyxxyyz,ajtyxyyyz,ajtyyyyyz,ajtyxxxzz,ajtyxxyzz,ajtyxyyzz,
     & ajtyyyyzz,ajtyxxzzz,ajtyxyzzz,ajtyyyzzz,ajtyxzzzz,ajtyyzzzz,
     & ajtyzzzzz,ajtyxxxxxx,ajtyxxxxxy,ajtyxxxxyy,ajtyxxxyyy,
     & ajtyxxyyyy,ajtyxyyyyy,ajtyyyyyyy,ajtyxxxxxz,ajtyxxxxyz,
     & ajtyxxxyyz,ajtyxxyyyz,ajtyxyyyyz,ajtyyyyyyz,ajtyxxxxzz,
     & ajtyxxxyzz,ajtyxxyyzz,ajtyxyyyzz,ajtyyyyyzz,ajtyxxxzzz,
     & ajtyxxyzzz,ajtyxyyzzz,ajtyyyyzzz,ajtyxxzzzz,ajtyxyzzzz,
     & ajtyyyzzzz,ajtyxzzzzz,ajtyyzzzzz,ajtyzzzzzz
        real ajtzx,ajtzy,ajtzz,ajtzxx,ajtzxy,ajtzyy,ajtzxz,ajtzyz,
     & ajtzzz,ajtzxxx,ajtzxxy,ajtzxyy,ajtzyyy,ajtzxxz,ajtzxyz,ajtzyyz,
     & ajtzxzz,ajtzyzz,ajtzzzz,ajtzxxxx,ajtzxxxy,ajtzxxyy,ajtzxyyy,
     & ajtzyyyy,ajtzxxxz,ajtzxxyz,ajtzxyyz,ajtzyyyz,ajtzxxzz,ajtzxyzz,
     & ajtzyyzz,ajtzxzzz,ajtzyzzz,ajtzzzzz,ajtzxxxxx,ajtzxxxxy,
     & ajtzxxxyy,ajtzxxyyy,ajtzxyyyy,ajtzyyyyy,ajtzxxxxz,ajtzxxxyz,
     & ajtzxxyyz,ajtzxyyyz,ajtzyyyyz,ajtzxxxzz,ajtzxxyzz,ajtzxyyzz,
     & ajtzyyyzz,ajtzxxzzz,ajtzxyzzz,ajtzyyzzz,ajtzxzzzz,ajtzyzzzz,
     & ajtzzzzzz,ajtzxxxxxx,ajtzxxxxxy,ajtzxxxxyy,ajtzxxxyyy,
     & ajtzxxyyyy,ajtzxyyyyy,ajtzyyyyyy,ajtzxxxxxz,ajtzxxxxyz,
     & ajtzxxxyyz,ajtzxxyyyz,ajtzxyyyyz,ajtzyyyyyz,ajtzxxxxzz,
     & ajtzxxxyzz,ajtzxxyyzz,ajtzxyyyzz,ajtzyyyyzz,ajtzxxxzzz,
     & ajtzxxyzzz,ajtzxyyzzz,ajtzyyyzzz,ajtzxxzzzz,ajtzxyzzzz,
     & ajtzyyzzzz,ajtzxzzzzz,ajtzyzzzzz,ajtzzzzzzz


      integer general, sparse, constantCoefficients,
     &   sparseConstantCoefficients,sparseVariableCoefficients,
     &   variableCoefficients
      parameter( general=0,
     &           sparse=1,
     &           constantCoefficients=2,
     &           sparseConstantCoefficients=3,
     &           sparseVariableCoefficients=4,
     &           variableCoefficients=5 )

      integer dirichlet,neumann,mixed,equation,extrapolation,
     &        combination,equationToSecondOrder,mixedToSecondOrder,
     & evenSymmetry,oddSymmetry,extrapolateTwoGhostLines,
     & parallelGhostBoundary

      parameter(
     &     dirichlet=1,
     &     neumann=2,
     &     mixed=3,
     &     equation=4,
     &     extrapolation=5,
     &     combination=6,
     &     equationToSecondOrder=7,
     &     mixedToSecondOrder=8,
     &     evenSymmetry=9,
     &     oddSymmetry=10,
     &     extrapolateTwoGhostLines=11,
     &     parallelGhostBoundary=20 )

      integer gridType
      integer rectangular,curvilinear
      parameter(
     &     rectangular=0,
     &     curvilinear=1)

      integer equationToSolve
      integer userDefined,laplaceEquation,divScalarGradOperator,
     &  heatEquationOperator,variableHeatEquationOperator,
     &   divScalarGradHeatOperator,secondOrderConstantCoefficients,
     & axisymmetricLaplaceEquation
      parameter(
     & userDefined=0,
     & laplaceEquation=1,
     & divScalarGradOperator=2,              ! div[ s[x] grad ]
     & heatEquationOperator=3,               ! I + c0*Delta
     & variableHeatEquationOperator=4,       ! I + s[x]*Delta
     & divScalarGradHeatOperator=5,  ! I + div[ s[x] grad ]
     & secondOrderConstantCoefficients=6,
     & axisymmetricLaplaceEquation=7 )

      real rx,ry,rz,sx,sy,sz,tx,ty,tz

       real d12
       real d22
       real h12
       real h22
       real rxr2
       real rxs2
       real rxt2
       real rxrr2
       real rxss2
       real rxrs2
       real ryr2
       real rys2
       real ryt2
       real ryrr2
       real ryss2
       real ryrs2
       real rzr2
       real rzs2
       real rzt2
       real rzrr2
       real rzss2
       real rzrs2
       real sxr2
       real sxs2
       real sxt2
       real sxrr2
       real sxss2
       real sxrs2
       real syr2
       real sys2
       real syt2
       real syrr2
       real syss2
       real syrs2
       real szr2
       real szs2
       real szt2
       real szrr2
       real szss2
       real szrs2
       real txr2
       real txs2
       real txt2
       real txrr2
       real txss2
       real txrs2
       real tyr2
       real tys2
       real tyt2
       real tyrr2
       real tyss2
       real tyrs2
       real tzr2
       real tzs2
       real tzt2
       real tzrr2
       real tzss2
       real tzrs2
       real rxx21
       real rxx22
       real rxy22
       real rxx23
       real rxy23
       real rxz23
       real ryx22
       real ryy22
       real ryx23
       real ryy23
       real ryz23
       real rzx22
       real rzy22
       real rzx23
       real rzy23
       real rzz23
       real sxx22
       real sxy22
       real sxx23
       real sxy23
       real sxz23
       real syx22
       real syy22
       real syx23
       real syy23
       real syz23
       real szx22
       real szy22
       real szx23
       real szy23
       real szz23
       real txx22
       real txy22
       real txx23
       real txy23
       real txz23
       real tyx22
       real tyy22
       real tyx23
       real tyy23
       real tyz23
       real tzx22
       real tzy22
       real tzx23
       real tzy23
       real tzz23
       real ur2
       real us2
       real ut2
       real urr2
       real uss2
       real urs2
       real utt2
       real urt2
       real ust2
       real urrr2
       real usss2
       real uttt2
       real ux21
       real uy21
       real uz21
       real ux22
       real uy22
       real uz22
       real ux23
       real uy23
       real uz23
       real uxx21
       real uyy21
       real uxy21
       real uxz21
       real uyz21
       real uzz21
       real ulaplacian21
       real uxx22
       real uyy22
       real uxy22
       real uxz22
       real uyz22
       real uzz22
       real ulaplacian22
       real uxx23
       real uyy23
       real uzz23
       real uxy23
       real uxz23
       real uyz23
       real ulaplacian23
       real ux23r
       real uy23r
       real uz23r
       real uxx23r
       real uyy23r
       real uxy23r
       real uzz23r
       real uxz23r
       real uyz23r
       real ux21r
       real uy21r
       real uz21r
       real uxx21r
       real uyy21r
       real uzz21r
       real uxy21r
       real uxz21r
       real uyz21r
       real ulaplacian21r
       real ux22r
       real uy22r
       real uz22r
       real uxx22r
       real uyy22r
       real uzz22r
       real uxy22r
       real uxz22r
       real uyz22r
       real ulaplacian22r
       real ulaplacian23r
       real uxxx22r
       real uyyy22r
       real uxxy22r
       real uxyy22r
       real uxxxx22r
       real uyyyy22r
       real uxxyy22r
       real uxxx23r
       real uyyy23r
       real uzzz23r
       real uxxy23r
       real uxxz23r
       real uxyy23r
       real uyyz23r
       real uxzz23r
       real uyzz23r
       real uxxxx23r
       real uyyyy23r
       real uzzzz23r
       real uxxyy23r
       real uxxzz23r
       real uyyzz23r
       real uLapSq22r
       real uLapSq23r
       real d14
       real d24
       real h41
       real h42
       real rxr4
       real rxs4
       real rxt4
       real ryr4
       real rys4
       real ryt4
       real rzr4
       real rzs4
       real rzt4
       real sxr4
       real sxs4
       real sxt4
       real syr4
       real sys4
       real syt4
       real szr4
       real szs4
       real szt4
       real txr4
       real txs4
       real txt4
       real tyr4
       real tys4
       real tyt4
       real tzr4
       real tzs4
       real tzt4
       real rxx41
       real rxx42
       real rxy42
       real rxx43
       real rxy43
       real rxz43
       real ryx42
       real ryy42
       real ryx43
       real ryy43
       real ryz43
       real rzx42
       real rzy42
       real rzx43
       real rzy43
       real rzz43
       real sxx42
       real sxy42
       real sxx43
       real sxy43
       real sxz43
       real syx42
       real syy42
       real syx43
       real syy43
       real syz43
       real szx42
       real szy42
       real szx43
       real szy43
       real szz43
       real txx42
       real txy42
       real txx43
       real txy43
       real txz43
       real tyx42
       real tyy42
       real tyx43
       real tyy43
       real tyz43
       real tzx42
       real tzy42
       real tzx43
       real tzy43
       real tzz43
       real ur4
       real us4
       real ut4
       real urr4
       real uss4
       real utt4
       real urs4
       real urt4
       real ust4
       real ux41
       real uy41
       real uz41
       real ux42
       real uy42
       real uz42
       real ux43
       real uy43
       real uz43
       real uxx41
       real uyy41
       real uxy41
       real uxz41
       real uyz41
       real uzz41
       real ulaplacian41
       real uxx42
       real uyy42
       real uxy42
       real uxz42
       real uyz42
       real uzz42
       real ulaplacian42
       real uxx43
       real uyy43
       real uzz43
       real uxy43
       real uxz43
       real uyz43
       real ulaplacian43
       real ux43r
       real uy43r
       real uz43r
       real uxx43r
       real uyy43r
       real uzz43r
       real uxy43r
       real uxz43r
       real uyz43r
       real ux41r
       real uy41r
       real uz41r
       real uxx41r
       real uyy41r
       real uzz41r
       real uxy41r
       real uxz41r
       real uyz41r
       real ulaplacian41r
       real ux42r
       real uy42r
       real uz42r
       real uxx42r
       real uyy42r
       real uzz42r
       real uxy42r
       real uxz42r
       real uyz42r
       real ulaplacian42r
       real ulaplacian43r

!....start statement functions 

      rx(i1,i2,i3)=rsxy(i1,i2,i3,0,0)
      ry(i1,i2,i3)=rsxy(i1,i2,i3,0,1)
      rz(i1,i2,i3)=rsxy(i1,i2,i3,0,2)
      sx(i1,i2,i3)=rsxy(i1,i2,i3,1,0)
      sy(i1,i2,i3)=rsxy(i1,i2,i3,1,1)
      sz(i1,i2,i3)=rsxy(i1,i2,i3,1,2)
      tx(i1,i2,i3)=rsxy(i1,i2,i3,2,0)
      ty(i1,i2,i3)=rsxy(i1,i2,i3,2,1)
      tz(i1,i2,i3)=rsxy(i1,i2,i3,2,2)
!     The next macro call will define the difference approximation statement functions
      d12(kd) = 1./(2.*dr(kd))
      d22(kd) = 1./(dr(kd)**2)
      ur2(i1,i2,i3)=(u(i1+1,i2,i3)-u(i1-1,i2,i3))*d12(0)
      us2(i1,i2,i3)=(u(i1,i2+1,i3)-u(i1,i2-1,i3))*d12(1)
      ut2(i1,i2,i3)=(u(i1,i2,i3+1)-u(i1,i2,i3-1))*d12(2)
      urr2(i1,i2,i3)=(-2.*u(i1,i2,i3)+(u(i1+1,i2,i3)+u(i1-1,i2,i3)) )*
     & d22(0)
      uss2(i1,i2,i3)=(-2.*u(i1,i2,i3)+(u(i1,i2+1,i3)+u(i1,i2-1,i3)) )*
     & d22(1)
      urs2(i1,i2,i3)=(ur2(i1,i2+1,i3)-ur2(i1,i2-1,i3))*d12(1)
      utt2(i1,i2,i3)=(-2.*u(i1,i2,i3)+(u(i1,i2,i3+1)+u(i1,i2,i3-1)) )*
     & d22(2)
      urt2(i1,i2,i3)=(ur2(i1,i2,i3+1)-ur2(i1,i2,i3-1))*d12(2)
      ust2(i1,i2,i3)=(us2(i1,i2,i3+1)-us2(i1,i2,i3-1))*d12(2)
      urrr2(i1,i2,i3)=(-2.*(u(i1+1,i2,i3)-u(i1-1,i2,i3))+(u(i1+2,i2,i3)
     & -u(i1-2,i2,i3)) )*d22(0)*d12(0)
      usss2(i1,i2,i3)=(-2.*(u(i1,i2+1,i3)-u(i1,i2-1,i3))+(u(i1,i2+2,i3)
     & -u(i1,i2-2,i3)) )*d22(1)*d12(1)
      uttt2(i1,i2,i3)=(-2.*(u(i1,i2,i3+1)-u(i1,i2,i3-1))+(u(i1,i2,i3+2)
     & -u(i1,i2,i3-2)) )*d22(2)*d12(2)
      rxr2(i1,i2,i3)=(rx(i1+1,i2,i3)-rx(i1-1,i2,i3))*d12(0)
      rxs2(i1,i2,i3)=(rx(i1,i2+1,i3)-rx(i1,i2-1,i3))*d12(1)
      rxt2(i1,i2,i3)=(rx(i1,i2,i3+1)-rx(i1,i2,i3-1))*d12(2)
      rxrr2(i1,i2,i3)=(-2.*rx(i1,i2,i3)+(rx(i1+1,i2,i3)+rx(i1-1,i2,i3))
     &  )*d22(0)
      rxss2(i1,i2,i3)=(-2.*rx(i1,i2,i3)+(rx(i1,i2+1,i3)+rx(i1,i2-1,i3))
     &  )*d22(1)
      rxrs2(i1,i2,i3)=(rxr2(i1,i2+1,i3)-rxr2(i1,i2-1,i3))*d12(1)
      ryr2(i1,i2,i3)=(ry(i1+1,i2,i3)-ry(i1-1,i2,i3))*d12(0)
      rys2(i1,i2,i3)=(ry(i1,i2+1,i3)-ry(i1,i2-1,i3))*d12(1)
      ryt2(i1,i2,i3)=(ry(i1,i2,i3+1)-ry(i1,i2,i3-1))*d12(2)
      ryrr2(i1,i2,i3)=(-2.*ry(i1,i2,i3)+(ry(i1+1,i2,i3)+ry(i1-1,i2,i3))
     &  )*d22(0)
      ryss2(i1,i2,i3)=(-2.*ry(i1,i2,i3)+(ry(i1,i2+1,i3)+ry(i1,i2-1,i3))
     &  )*d22(1)
      ryrs2(i1,i2,i3)=(ryr2(i1,i2+1,i3)-ryr2(i1,i2-1,i3))*d12(1)
      rzr2(i1,i2,i3)=(rz(i1+1,i2,i3)-rz(i1-1,i2,i3))*d12(0)
      rzs2(i1,i2,i3)=(rz(i1,i2+1,i3)-rz(i1,i2-1,i3))*d12(1)
      rzt2(i1,i2,i3)=(rz(i1,i2,i3+1)-rz(i1,i2,i3-1))*d12(2)
      rzrr2(i1,i2,i3)=(-2.*rz(i1,i2,i3)+(rz(i1+1,i2,i3)+rz(i1-1,i2,i3))
     &  )*d22(0)
      rzss2(i1,i2,i3)=(-2.*rz(i1,i2,i3)+(rz(i1,i2+1,i3)+rz(i1,i2-1,i3))
     &  )*d22(1)
      rzrs2(i1,i2,i3)=(rzr2(i1,i2+1,i3)-rzr2(i1,i2-1,i3))*d12(1)
      sxr2(i1,i2,i3)=(sx(i1+1,i2,i3)-sx(i1-1,i2,i3))*d12(0)
      sxs2(i1,i2,i3)=(sx(i1,i2+1,i3)-sx(i1,i2-1,i3))*d12(1)
      sxt2(i1,i2,i3)=(sx(i1,i2,i3+1)-sx(i1,i2,i3-1))*d12(2)
      sxrr2(i1,i2,i3)=(-2.*sx(i1,i2,i3)+(sx(i1+1,i2,i3)+sx(i1-1,i2,i3))
     &  )*d22(0)
      sxss2(i1,i2,i3)=(-2.*sx(i1,i2,i3)+(sx(i1,i2+1,i3)+sx(i1,i2-1,i3))
     &  )*d22(1)
      sxrs2(i1,i2,i3)=(sxr2(i1,i2+1,i3)-sxr2(i1,i2-1,i3))*d12(1)
      syr2(i1,i2,i3)=(sy(i1+1,i2,i3)-sy(i1-1,i2,i3))*d12(0)
      sys2(i1,i2,i3)=(sy(i1,i2+1,i3)-sy(i1,i2-1,i3))*d12(1)
      syt2(i1,i2,i3)=(sy(i1,i2,i3+1)-sy(i1,i2,i3-1))*d12(2)
      syrr2(i1,i2,i3)=(-2.*sy(i1,i2,i3)+(sy(i1+1,i2,i3)+sy(i1-1,i2,i3))
     &  )*d22(0)
      syss2(i1,i2,i3)=(-2.*sy(i1,i2,i3)+(sy(i1,i2+1,i3)+sy(i1,i2-1,i3))
     &  )*d22(1)
      syrs2(i1,i2,i3)=(syr2(i1,i2+1,i3)-syr2(i1,i2-1,i3))*d12(1)
      szr2(i1,i2,i3)=(sz(i1+1,i2,i3)-sz(i1-1,i2,i3))*d12(0)
      szs2(i1,i2,i3)=(sz(i1,i2+1,i3)-sz(i1,i2-1,i3))*d12(1)
      szt2(i1,i2,i3)=(sz(i1,i2,i3+1)-sz(i1,i2,i3-1))*d12(2)
      szrr2(i1,i2,i3)=(-2.*sz(i1,i2,i3)+(sz(i1+1,i2,i3)+sz(i1-1,i2,i3))
     &  )*d22(0)
      szss2(i1,i2,i3)=(-2.*sz(i1,i2,i3)+(sz(i1,i2+1,i3)+sz(i1,i2-1,i3))
     &  )*d22(1)
      szrs2(i1,i2,i3)=(szr2(i1,i2+1,i3)-szr2(i1,i2-1,i3))*d12(1)
      txr2(i1,i2,i3)=(tx(i1+1,i2,i3)-tx(i1-1,i2,i3))*d12(0)
      txs2(i1,i2,i3)=(tx(i1,i2+1,i3)-tx(i1,i2-1,i3))*d12(1)
      txt2(i1,i2,i3)=(tx(i1,i2,i3+1)-tx(i1,i2,i3-1))*d12(2)
      txrr2(i1,i2,i3)=(-2.*tx(i1,i2,i3)+(tx(i1+1,i2,i3)+tx(i1-1,i2,i3))
     &  )*d22(0)
      txss2(i1,i2,i3)=(-2.*tx(i1,i2,i3)+(tx(i1,i2+1,i3)+tx(i1,i2-1,i3))
     &  )*d22(1)
      txrs2(i1,i2,i3)=(txr2(i1,i2+1,i3)-txr2(i1,i2-1,i3))*d12(1)
      tyr2(i1,i2,i3)=(ty(i1+1,i2,i3)-ty(i1-1,i2,i3))*d12(0)
      tys2(i1,i2,i3)=(ty(i1,i2+1,i3)-ty(i1,i2-1,i3))*d12(1)
      tyt2(i1,i2,i3)=(ty(i1,i2,i3+1)-ty(i1,i2,i3-1))*d12(2)
      tyrr2(i1,i2,i3)=(-2.*ty(i1,i2,i3)+(ty(i1+1,i2,i3)+ty(i1-1,i2,i3))
     &  )*d22(0)
      tyss2(i1,i2,i3)=(-2.*ty(i1,i2,i3)+(ty(i1,i2+1,i3)+ty(i1,i2-1,i3))
     &  )*d22(1)
      tyrs2(i1,i2,i3)=(tyr2(i1,i2+1,i3)-tyr2(i1,i2-1,i3))*d12(1)
      tzr2(i1,i2,i3)=(tz(i1+1,i2,i3)-tz(i1-1,i2,i3))*d12(0)
      tzs2(i1,i2,i3)=(tz(i1,i2+1,i3)-tz(i1,i2-1,i3))*d12(1)
      tzt2(i1,i2,i3)=(tz(i1,i2,i3+1)-tz(i1,i2,i3-1))*d12(2)
      tzrr2(i1,i2,i3)=(-2.*tz(i1,i2,i3)+(tz(i1+1,i2,i3)+tz(i1-1,i2,i3))
     &  )*d22(0)
      tzss2(i1,i2,i3)=(-2.*tz(i1,i2,i3)+(tz(i1,i2+1,i3)+tz(i1,i2-1,i3))
     &  )*d22(1)
      tzrs2(i1,i2,i3)=(tzr2(i1,i2+1,i3)-tzr2(i1,i2-1,i3))*d12(1)
      ux21(i1,i2,i3)= rx(i1,i2,i3)*ur2(i1,i2,i3)
      uy21(i1,i2,i3)=0
      uz21(i1,i2,i3)=0
      ux22(i1,i2,i3)= rx(i1,i2,i3)*ur2(i1,i2,i3)+sx(i1,i2,i3)*us2(i1,
     & i2,i3)
      uy22(i1,i2,i3)= ry(i1,i2,i3)*ur2(i1,i2,i3)+sy(i1,i2,i3)*us2(i1,
     & i2,i3)
      uz22(i1,i2,i3)=0
      ux23(i1,i2,i3)=rx(i1,i2,i3)*ur2(i1,i2,i3)+sx(i1,i2,i3)*us2(i1,i2,
     & i3)+tx(i1,i2,i3)*ut2(i1,i2,i3)
      uy23(i1,i2,i3)=ry(i1,i2,i3)*ur2(i1,i2,i3)+sy(i1,i2,i3)*us2(i1,i2,
     & i3)+ty(i1,i2,i3)*ut2(i1,i2,i3)
      uz23(i1,i2,i3)=rz(i1,i2,i3)*ur2(i1,i2,i3)+sz(i1,i2,i3)*us2(i1,i2,
     & i3)+tz(i1,i2,i3)*ut2(i1,i2,i3)
      rxx21(i1,i2,i3)= rx(i1,i2,i3)*rxr2(i1,i2,i3)
      rxx22(i1,i2,i3)= rx(i1,i2,i3)*rxr2(i1,i2,i3)+sx(i1,i2,i3)*rxs2(
     & i1,i2,i3)
      rxy22(i1,i2,i3)= ry(i1,i2,i3)*rxr2(i1,i2,i3)+sy(i1,i2,i3)*rxs2(
     & i1,i2,i3)
      rxx23(i1,i2,i3)=rx(i1,i2,i3)*rxr2(i1,i2,i3)+sx(i1,i2,i3)*rxs2(i1,
     & i2,i3)+tx(i1,i2,i3)*rxt2(i1,i2,i3)
      rxy23(i1,i2,i3)=ry(i1,i2,i3)*rxr2(i1,i2,i3)+sy(i1,i2,i3)*rxs2(i1,
     & i2,i3)+ty(i1,i2,i3)*rxt2(i1,i2,i3)
      rxz23(i1,i2,i3)=rz(i1,i2,i3)*rxr2(i1,i2,i3)+sz(i1,i2,i3)*rxs2(i1,
     & i2,i3)+tz(i1,i2,i3)*rxt2(i1,i2,i3)
      ryx22(i1,i2,i3)= rx(i1,i2,i3)*ryr2(i1,i2,i3)+sx(i1,i2,i3)*rys2(
     & i1,i2,i3)
      ryy22(i1,i2,i3)= ry(i1,i2,i3)*ryr2(i1,i2,i3)+sy(i1,i2,i3)*rys2(
     & i1,i2,i3)
      ryx23(i1,i2,i3)=rx(i1,i2,i3)*ryr2(i1,i2,i3)+sx(i1,i2,i3)*rys2(i1,
     & i2,i3)+tx(i1,i2,i3)*ryt2(i1,i2,i3)
      ryy23(i1,i2,i3)=ry(i1,i2,i3)*ryr2(i1,i2,i3)+sy(i1,i2,i3)*rys2(i1,
     & i2,i3)+ty(i1,i2,i3)*ryt2(i1,i2,i3)
      ryz23(i1,i2,i3)=rz(i1,i2,i3)*ryr2(i1,i2,i3)+sz(i1,i2,i3)*rys2(i1,
     & i2,i3)+tz(i1,i2,i3)*ryt2(i1,i2,i3)
      rzx22(i1,i2,i3)= rx(i1,i2,i3)*rzr2(i1,i2,i3)+sx(i1,i2,i3)*rzs2(
     & i1,i2,i3)
      rzy22(i1,i2,i3)= ry(i1,i2,i3)*rzr2(i1,i2,i3)+sy(i1,i2,i3)*rzs2(
     & i1,i2,i3)
      rzx23(i1,i2,i3)=rx(i1,i2,i3)*rzr2(i1,i2,i3)+sx(i1,i2,i3)*rzs2(i1,
     & i2,i3)+tx(i1,i2,i3)*rzt2(i1,i2,i3)
      rzy23(i1,i2,i3)=ry(i1,i2,i3)*rzr2(i1,i2,i3)+sy(i1,i2,i3)*rzs2(i1,
     & i2,i3)+ty(i1,i2,i3)*rzt2(i1,i2,i3)
      rzz23(i1,i2,i3)=rz(i1,i2,i3)*rzr2(i1,i2,i3)+sz(i1,i2,i3)*rzs2(i1,
     & i2,i3)+tz(i1,i2,i3)*rzt2(i1,i2,i3)
      sxx22(i1,i2,i3)= rx(i1,i2,i3)*sxr2(i1,i2,i3)+sx(i1,i2,i3)*sxs2(
     & i1,i2,i3)
      sxy22(i1,i2,i3)= ry(i1,i2,i3)*sxr2(i1,i2,i3)+sy(i1,i2,i3)*sxs2(
     & i1,i2,i3)
      sxx23(i1,i2,i3)=rx(i1,i2,i3)*sxr2(i1,i2,i3)+sx(i1,i2,i3)*sxs2(i1,
     & i2,i3)+tx(i1,i2,i3)*sxt2(i1,i2,i3)
      sxy23(i1,i2,i3)=ry(i1,i2,i3)*sxr2(i1,i2,i3)+sy(i1,i2,i3)*sxs2(i1,
     & i2,i3)+ty(i1,i2,i3)*sxt2(i1,i2,i3)
      sxz23(i1,i2,i3)=rz(i1,i2,i3)*sxr2(i1,i2,i3)+sz(i1,i2,i3)*sxs2(i1,
     & i2,i3)+tz(i1,i2,i3)*sxt2(i1,i2,i3)
      syx22(i1,i2,i3)= rx(i1,i2,i3)*syr2(i1,i2,i3)+sx(i1,i2,i3)*sys2(
     & i1,i2,i3)
      syy22(i1,i2,i3)= ry(i1,i2,i3)*syr2(i1,i2,i3)+sy(i1,i2,i3)*sys2(
     & i1,i2,i3)
      syx23(i1,i2,i3)=rx(i1,i2,i3)*syr2(i1,i2,i3)+sx(i1,i2,i3)*sys2(i1,
     & i2,i3)+tx(i1,i2,i3)*syt2(i1,i2,i3)
      syy23(i1,i2,i3)=ry(i1,i2,i3)*syr2(i1,i2,i3)+sy(i1,i2,i3)*sys2(i1,
     & i2,i3)+ty(i1,i2,i3)*syt2(i1,i2,i3)
      syz23(i1,i2,i3)=rz(i1,i2,i3)*syr2(i1,i2,i3)+sz(i1,i2,i3)*sys2(i1,
     & i2,i3)+tz(i1,i2,i3)*syt2(i1,i2,i3)
      szx22(i1,i2,i3)= rx(i1,i2,i3)*szr2(i1,i2,i3)+sx(i1,i2,i3)*szs2(
     & i1,i2,i3)
      szy22(i1,i2,i3)= ry(i1,i2,i3)*szr2(i1,i2,i3)+sy(i1,i2,i3)*szs2(
     & i1,i2,i3)
      szx23(i1,i2,i3)=rx(i1,i2,i3)*szr2(i1,i2,i3)+sx(i1,i2,i3)*szs2(i1,
     & i2,i3)+tx(i1,i2,i3)*szt2(i1,i2,i3)
      szy23(i1,i2,i3)=ry(i1,i2,i3)*szr2(i1,i2,i3)+sy(i1,i2,i3)*szs2(i1,
     & i2,i3)+ty(i1,i2,i3)*szt2(i1,i2,i3)
      szz23(i1,i2,i3)=rz(i1,i2,i3)*szr2(i1,i2,i3)+sz(i1,i2,i3)*szs2(i1,
     & i2,i3)+tz(i1,i2,i3)*szt2(i1,i2,i3)
      txx22(i1,i2,i3)= rx(i1,i2,i3)*txr2(i1,i2,i3)+sx(i1,i2,i3)*txs2(
     & i1,i2,i3)
      txy22(i1,i2,i3)= ry(i1,i2,i3)*txr2(i1,i2,i3)+sy(i1,i2,i3)*txs2(
     & i1,i2,i3)
      txx23(i1,i2,i3)=rx(i1,i2,i3)*txr2(i1,i2,i3)+sx(i1,i2,i3)*txs2(i1,
     & i2,i3)+tx(i1,i2,i3)*txt2(i1,i2,i3)
      txy23(i1,i2,i3)=ry(i1,i2,i3)*txr2(i1,i2,i3)+sy(i1,i2,i3)*txs2(i1,
     & i2,i3)+ty(i1,i2,i3)*txt2(i1,i2,i3)
      txz23(i1,i2,i3)=rz(i1,i2,i3)*txr2(i1,i2,i3)+sz(i1,i2,i3)*txs2(i1,
     & i2,i3)+tz(i1,i2,i3)*txt2(i1,i2,i3)
      tyx22(i1,i2,i3)= rx(i1,i2,i3)*tyr2(i1,i2,i3)+sx(i1,i2,i3)*tys2(
     & i1,i2,i3)
      tyy22(i1,i2,i3)= ry(i1,i2,i3)*tyr2(i1,i2,i3)+sy(i1,i2,i3)*tys2(
     & i1,i2,i3)
      tyx23(i1,i2,i3)=rx(i1,i2,i3)*tyr2(i1,i2,i3)+sx(i1,i2,i3)*tys2(i1,
     & i2,i3)+tx(i1,i2,i3)*tyt2(i1,i2,i3)
      tyy23(i1,i2,i3)=ry(i1,i2,i3)*tyr2(i1,i2,i3)+sy(i1,i2,i3)*tys2(i1,
     & i2,i3)+ty(i1,i2,i3)*tyt2(i1,i2,i3)
      tyz23(i1,i2,i3)=rz(i1,i2,i3)*tyr2(i1,i2,i3)+sz(i1,i2,i3)*tys2(i1,
     & i2,i3)+tz(i1,i2,i3)*tyt2(i1,i2,i3)
      tzx22(i1,i2,i3)= rx(i1,i2,i3)*tzr2(i1,i2,i3)+sx(i1,i2,i3)*tzs2(
     & i1,i2,i3)
      tzy22(i1,i2,i3)= ry(i1,i2,i3)*tzr2(i1,i2,i3)+sy(i1,i2,i3)*tzs2(
     & i1,i2,i3)
      tzx23(i1,i2,i3)=rx(i1,i2,i3)*tzr2(i1,i2,i3)+sx(i1,i2,i3)*tzs2(i1,
     & i2,i3)+tx(i1,i2,i3)*tzt2(i1,i2,i3)
      tzy23(i1,i2,i3)=ry(i1,i2,i3)*tzr2(i1,i2,i3)+sy(i1,i2,i3)*tzs2(i1,
     & i2,i3)+ty(i1,i2,i3)*tzt2(i1,i2,i3)
      tzz23(i1,i2,i3)=rz(i1,i2,i3)*tzr2(i1,i2,i3)+sz(i1,i2,i3)*tzs2(i1,
     & i2,i3)+tz(i1,i2,i3)*tzt2(i1,i2,i3)
      uxx21(i1,i2,i3)=(rx(i1,i2,i3)**2)*urr2(i1,i2,i3)+(rxx22(i1,i2,i3)
     & )*ur2(i1,i2,i3)
      uyy21(i1,i2,i3)=0
      uxy21(i1,i2,i3)=0
      uxz21(i1,i2,i3)=0
      uyz21(i1,i2,i3)=0
      uzz21(i1,i2,i3)=0
      ulaplacian21(i1,i2,i3)=uxx21(i1,i2,i3)
      uxx22(i1,i2,i3)=(rx(i1,i2,i3)**2)*urr2(i1,i2,i3)+2.*(rx(i1,i2,i3)
     & *sx(i1,i2,i3))*urs2(i1,i2,i3)+(sx(i1,i2,i3)**2)*uss2(i1,i2,i3)+
     & (rxx22(i1,i2,i3))*ur2(i1,i2,i3)+(sxx22(i1,i2,i3))*us2(i1,i2,i3)
      uyy22(i1,i2,i3)=(ry(i1,i2,i3)**2)*urr2(i1,i2,i3)+2.*(ry(i1,i2,i3)
     & *sy(i1,i2,i3))*urs2(i1,i2,i3)+(sy(i1,i2,i3)**2)*uss2(i1,i2,i3)+
     & (ryy22(i1,i2,i3))*ur2(i1,i2,i3)+(syy22(i1,i2,i3))*us2(i1,i2,i3)
      uxy22(i1,i2,i3)=rx(i1,i2,i3)*ry(i1,i2,i3)*urr2(i1,i2,i3)+(rx(i1,
     & i2,i3)*sy(i1,i2,i3)+ry(i1,i2,i3)*sx(i1,i2,i3))*urs2(i1,i2,i3)+
     & sx(i1,i2,i3)*sy(i1,i2,i3)*uss2(i1,i2,i3)+rxy22(i1,i2,i3)*ur2(
     & i1,i2,i3)+sxy22(i1,i2,i3)*us2(i1,i2,i3)
      uxz22(i1,i2,i3)=0
      uyz22(i1,i2,i3)=0
      uzz22(i1,i2,i3)=0
      ulaplacian22(i1,i2,i3)=(rx(i1,i2,i3)**2+ry(i1,i2,i3)**2)*urr2(i1,
     & i2,i3)+2.*(rx(i1,i2,i3)*sx(i1,i2,i3)+ ry(i1,i2,i3)*sy(i1,i2,i3)
     & )*urs2(i1,i2,i3)+(sx(i1,i2,i3)**2+sy(i1,i2,i3)**2)*uss2(i1,i2,
     & i3)+(rxx22(i1,i2,i3)+ryy22(i1,i2,i3))*ur2(i1,i2,i3)+(sxx22(i1,
     & i2,i3)+syy22(i1,i2,i3))*us2(i1,i2,i3)
      uxx23(i1,i2,i3)=rx(i1,i2,i3)**2*urr2(i1,i2,i3)+sx(i1,i2,i3)**2*
     & uss2(i1,i2,i3)+tx(i1,i2,i3)**2*utt2(i1,i2,i3)+2.*rx(i1,i2,i3)*
     & sx(i1,i2,i3)*urs2(i1,i2,i3)+2.*rx(i1,i2,i3)*tx(i1,i2,i3)*urt2(
     & i1,i2,i3)+2.*sx(i1,i2,i3)*tx(i1,i2,i3)*ust2(i1,i2,i3)+rxx23(i1,
     & i2,i3)*ur2(i1,i2,i3)+sxx23(i1,i2,i3)*us2(i1,i2,i3)+txx23(i1,i2,
     & i3)*ut2(i1,i2,i3)
      uyy23(i1,i2,i3)=ry(i1,i2,i3)**2*urr2(i1,i2,i3)+sy(i1,i2,i3)**2*
     & uss2(i1,i2,i3)+ty(i1,i2,i3)**2*utt2(i1,i2,i3)+2.*ry(i1,i2,i3)*
     & sy(i1,i2,i3)*urs2(i1,i2,i3)+2.*ry(i1,i2,i3)*ty(i1,i2,i3)*urt2(
     & i1,i2,i3)+2.*sy(i1,i2,i3)*ty(i1,i2,i3)*ust2(i1,i2,i3)+ryy23(i1,
     & i2,i3)*ur2(i1,i2,i3)+syy23(i1,i2,i3)*us2(i1,i2,i3)+tyy23(i1,i2,
     & i3)*ut2(i1,i2,i3)
      uzz23(i1,i2,i3)=rz(i1,i2,i3)**2*urr2(i1,i2,i3)+sz(i1,i2,i3)**2*
     & uss2(i1,i2,i3)+tz(i1,i2,i3)**2*utt2(i1,i2,i3)+2.*rz(i1,i2,i3)*
     & sz(i1,i2,i3)*urs2(i1,i2,i3)+2.*rz(i1,i2,i3)*tz(i1,i2,i3)*urt2(
     & i1,i2,i3)+2.*sz(i1,i2,i3)*tz(i1,i2,i3)*ust2(i1,i2,i3)+rzz23(i1,
     & i2,i3)*ur2(i1,i2,i3)+szz23(i1,i2,i3)*us2(i1,i2,i3)+tzz23(i1,i2,
     & i3)*ut2(i1,i2,i3)
      uxy23(i1,i2,i3)=rx(i1,i2,i3)*ry(i1,i2,i3)*urr2(i1,i2,i3)+sx(i1,
     & i2,i3)*sy(i1,i2,i3)*uss2(i1,i2,i3)+tx(i1,i2,i3)*ty(i1,i2,i3)*
     & utt2(i1,i2,i3)+(rx(i1,i2,i3)*sy(i1,i2,i3)+ry(i1,i2,i3)*sx(i1,
     & i2,i3))*urs2(i1,i2,i3)+(rx(i1,i2,i3)*ty(i1,i2,i3)+ry(i1,i2,i3)*
     & tx(i1,i2,i3))*urt2(i1,i2,i3)+(sx(i1,i2,i3)*ty(i1,i2,i3)+sy(i1,
     & i2,i3)*tx(i1,i2,i3))*ust2(i1,i2,i3)+rxy23(i1,i2,i3)*ur2(i1,i2,
     & i3)+sxy23(i1,i2,i3)*us2(i1,i2,i3)+txy23(i1,i2,i3)*ut2(i1,i2,i3)
      uxz23(i1,i2,i3)=rx(i1,i2,i3)*rz(i1,i2,i3)*urr2(i1,i2,i3)+sx(i1,
     & i2,i3)*sz(i1,i2,i3)*uss2(i1,i2,i3)+tx(i1,i2,i3)*tz(i1,i2,i3)*
     & utt2(i1,i2,i3)+(rx(i1,i2,i3)*sz(i1,i2,i3)+rz(i1,i2,i3)*sx(i1,
     & i2,i3))*urs2(i1,i2,i3)+(rx(i1,i2,i3)*tz(i1,i2,i3)+rz(i1,i2,i3)*
     & tx(i1,i2,i3))*urt2(i1,i2,i3)+(sx(i1,i2,i3)*tz(i1,i2,i3)+sz(i1,
     & i2,i3)*tx(i1,i2,i3))*ust2(i1,i2,i3)+rxz23(i1,i2,i3)*ur2(i1,i2,
     & i3)+sxz23(i1,i2,i3)*us2(i1,i2,i3)+txz23(i1,i2,i3)*ut2(i1,i2,i3)
      uyz23(i1,i2,i3)=ry(i1,i2,i3)*rz(i1,i2,i3)*urr2(i1,i2,i3)+sy(i1,
     & i2,i3)*sz(i1,i2,i3)*uss2(i1,i2,i3)+ty(i1,i2,i3)*tz(i1,i2,i3)*
     & utt2(i1,i2,i3)+(ry(i1,i2,i3)*sz(i1,i2,i3)+rz(i1,i2,i3)*sy(i1,
     & i2,i3))*urs2(i1,i2,i3)+(ry(i1,i2,i3)*tz(i1,i2,i3)+rz(i1,i2,i3)*
     & ty(i1,i2,i3))*urt2(i1,i2,i3)+(sy(i1,i2,i3)*tz(i1,i2,i3)+sz(i1,
     & i2,i3)*ty(i1,i2,i3))*ust2(i1,i2,i3)+ryz23(i1,i2,i3)*ur2(i1,i2,
     & i3)+syz23(i1,i2,i3)*us2(i1,i2,i3)+tyz23(i1,i2,i3)*ut2(i1,i2,i3)
      ulaplacian23(i1,i2,i3)=(rx(i1,i2,i3)**2+ry(i1,i2,i3)**2+rz(i1,i2,
     & i3)**2)*urr2(i1,i2,i3)+(sx(i1,i2,i3)**2+sy(i1,i2,i3)**2+sz(i1,
     & i2,i3)**2)*uss2(i1,i2,i3)+(tx(i1,i2,i3)**2+ty(i1,i2,i3)**2+tz(
     & i1,i2,i3)**2)*utt2(i1,i2,i3)+2.*(rx(i1,i2,i3)*sx(i1,i2,i3)+ ry(
     & i1,i2,i3)*sy(i1,i2,i3)+rz(i1,i2,i3)*sz(i1,i2,i3))*urs2(i1,i2,
     & i3)+2.*(rx(i1,i2,i3)*tx(i1,i2,i3)+ ry(i1,i2,i3)*ty(i1,i2,i3)+
     & rz(i1,i2,i3)*tz(i1,i2,i3))*urt2(i1,i2,i3)+2.*(sx(i1,i2,i3)*tx(
     & i1,i2,i3)+ sy(i1,i2,i3)*ty(i1,i2,i3)+sz(i1,i2,i3)*tz(i1,i2,i3))
     & *ust2(i1,i2,i3)+(rxx23(i1,i2,i3)+ryy23(i1,i2,i3)+rzz23(i1,i2,
     & i3))*ur2(i1,i2,i3)+(sxx23(i1,i2,i3)+syy23(i1,i2,i3)+szz23(i1,
     & i2,i3))*us2(i1,i2,i3)+(txx23(i1,i2,i3)+tyy23(i1,i2,i3)+tzz23(
     & i1,i2,i3))*ut2(i1,i2,i3)
c============================================================================================
c Define derivatives for a rectangular grid
c
c============================================================================================
      h12(kd) = 1./(2.*dx(kd))
      h22(kd) = 1./(dx(kd)**2)
      ux23r(i1,i2,i3)=(u(i1+1,i2,i3)-u(i1-1,i2,i3))*h12(0)
      uy23r(i1,i2,i3)=(u(i1,i2+1,i3)-u(i1,i2-1,i3))*h12(1)
      uz23r(i1,i2,i3)=(u(i1,i2,i3+1)-u(i1,i2,i3-1))*h12(2)
      uxx23r(i1,i2,i3)=(-2.*u(i1,i2,i3)+(u(i1+1,i2,i3)+u(i1-1,i2,i3)) )
     & *h22(0)
      uyy23r(i1,i2,i3)=(-2.*u(i1,i2,i3)+(u(i1,i2+1,i3)+u(i1,i2-1,i3)) )
     & *h22(1)
      uxy23r(i1,i2,i3)=(ux23r(i1,i2+1,i3)-ux23r(i1,i2-1,i3))*h12(1)
      uzz23r(i1,i2,i3)=(-2.*u(i1,i2,i3)+(u(i1,i2,i3+1)+u(i1,i2,i3-1)) )
     & *h22(2)
      uxz23r(i1,i2,i3)=(ux23r(i1,i2,i3+1)-ux23r(i1,i2,i3-1))*h12(2)
      uyz23r(i1,i2,i3)=(uy23r(i1,i2,i3+1)-uy23r(i1,i2,i3-1))*h12(2)
      ux21r(i1,i2,i3)= ux23r(i1,i2,i3)
      uy21r(i1,i2,i3)= uy23r(i1,i2,i3)
      uz21r(i1,i2,i3)= uz23r(i1,i2,i3)
      uxx21r(i1,i2,i3)= uxx23r(i1,i2,i3)
      uyy21r(i1,i2,i3)= uyy23r(i1,i2,i3)
      uzz21r(i1,i2,i3)= uzz23r(i1,i2,i3)
      uxy21r(i1,i2,i3)= uxy23r(i1,i2,i3)
      uxz21r(i1,i2,i3)= uxz23r(i1,i2,i3)
      uyz21r(i1,i2,i3)= uyz23r(i1,i2,i3)
      ulaplacian21r(i1,i2,i3)=uxx23r(i1,i2,i3)
      ux22r(i1,i2,i3)= ux23r(i1,i2,i3)
      uy22r(i1,i2,i3)= uy23r(i1,i2,i3)
      uz22r(i1,i2,i3)= uz23r(i1,i2,i3)
      uxx22r(i1,i2,i3)= uxx23r(i1,i2,i3)
      uyy22r(i1,i2,i3)= uyy23r(i1,i2,i3)
      uzz22r(i1,i2,i3)= uzz23r(i1,i2,i3)
      uxy22r(i1,i2,i3)= uxy23r(i1,i2,i3)
      uxz22r(i1,i2,i3)= uxz23r(i1,i2,i3)
      uyz22r(i1,i2,i3)= uyz23r(i1,i2,i3)
      ulaplacian22r(i1,i2,i3)=uxx23r(i1,i2,i3)+uyy23r(i1,i2,i3)
      ulaplacian23r(i1,i2,i3)=uxx23r(i1,i2,i3)+uyy23r(i1,i2,i3)+uzz23r(
     & i1,i2,i3)
      uxxx22r(i1,i2,i3)=(-2.*(u(i1+1,i2,i3)-u(i1-1,i2,i3))+(u(i1+2,i2,
     & i3)-u(i1-2,i2,i3)) )*h22(0)*h12(0)
      uyyy22r(i1,i2,i3)=(-2.*(u(i1,i2+1,i3)-u(i1,i2-1,i3))+(u(i1,i2+2,
     & i3)-u(i1,i2-2,i3)) )*h22(1)*h12(1)
      uxxy22r(i1,i2,i3,kd)=( uxx22r(i1,i2+1,i3)-uxx22r(i1,i2-1,i3))/(
     & 2.*dx(1))
      uxyy22r(i1,i2,i3,kd)=( uyy22r(i1+1,i2,i3)-uyy22r(i1-1,i2,i3))/(
     & 2.*dx(0))
      uxxxx22r(i1,i2,i3)=(6.*u(i1,i2,i3)-4.*(u(i1+1,i2,i3)+u(i1-1,i2,
     & i3))+(u(i1+2,i2,i3)+u(i1-2,i2,i3)) )/(dx(0)**4)
      uyyyy22r(i1,i2,i3)=(6.*u(i1,i2,i3)-4.*(u(i1,i2+1,i3)+u(i1,i2-1,
     & i3))+(u(i1,i2+2,i3)+u(i1,i2-2,i3)) )/(dx(1)**4)
      uxxyy22r(i1,i2,i3)=( 4.*u(i1,i2,i3)     -2.*(u(i1+1,i2,i3)+u(i1-
     & 1,i2,i3)+u(i1,i2+1,i3)+u(i1,i2-1,i3))   +   (u(i1+1,i2+1,i3)+u(
     & i1-1,i2+1,i3)+u(i1+1,i2-1,i3)+u(i1-1,i2-1,i3)) )/(dx(0)**2*dx(
     & 1)**2)
      ! 2D laplacian squared = u.xxxx + 2 u.xxyy + u.yyyy
      uLapSq22r(i1,i2,i3)= ( 6.*u(i1,i2,i3)   - 4.*(u(i1+1,i2,i3)+u(i1-
     & 1,i2,i3))    +(u(i1+2,i2,i3)+u(i1-2,i2,i3)) )/(dx(0)**4) +( 6.*
     & u(i1,i2,i3)    -4.*(u(i1,i2+1,i3)+u(i1,i2-1,i3))    +(u(i1,i2+
     & 2,i3)+u(i1,i2-2,i3)) )/(dx(1)**4)  +( 8.*u(i1,i2,i3)     -4.*(
     & u(i1+1,i2,i3)+u(i1-1,i2,i3)+u(i1,i2+1,i3)+u(i1,i2-1,i3))   +2.*
     & (u(i1+1,i2+1,i3)+u(i1-1,i2+1,i3)+u(i1+1,i2-1,i3)+u(i1-1,i2-1,
     & i3)) )/(dx(0)**2*dx(1)**2)
      uxxx23r(i1,i2,i3)=(-2.*(u(i1+1,i2,i3)-u(i1-1,i2,i3))+(u(i1+2,i2,
     & i3)-u(i1-2,i2,i3)) )*h22(0)*h12(0)
      uyyy23r(i1,i2,i3)=(-2.*(u(i1,i2+1,i3)-u(i1,i2-1,i3))+(u(i1,i2+2,
     & i3)-u(i1,i2-2,i3)) )*h22(1)*h12(1)
      uzzz23r(i1,i2,i3)=(-2.*(u(i1,i2,i3+1)-u(i1,i2,i3-1))+(u(i1,i2,i3+
     & 2)-u(i1,i2,i3-2)) )*h22(1)*h12(2)
      uxxy23r(i1,i2,i3)=( uxx22r(i1,i2+1,i3)-uxx22r(i1,i2-1,i3))/(2.*
     & dx(1))
      uxyy23r(i1,i2,i3)=( uyy22r(i1+1,i2,i3)-uyy22r(i1-1,i2,i3))/(2.*
     & dx(0))
      uxxz23r(i1,i2,i3)=( uxx22r(i1,i2,i3+1)-uxx22r(i1,i2,i3-1))/(2.*
     & dx(2))
      uyyz23r(i1,i2,i3)=( uyy22r(i1,i2,i3+1)-uyy22r(i1,i2,i3-1))/(2.*
     & dx(2))
      uxzz23r(i1,i2,i3)=( uzz22r(i1+1,i2,i3)-uzz22r(i1-1,i2,i3))/(2.*
     & dx(0))
      uyzz23r(i1,i2,i3)=( uzz22r(i1,i2+1,i3)-uzz22r(i1,i2-1,i3))/(2.*
     & dx(1))
      uxxxx23r(i1,i2,i3)=(6.*u(i1,i2,i3)-4.*(u(i1+1,i2,i3)+u(i1-1,i2,
     & i3))+(u(i1+2,i2,i3)+u(i1-2,i2,i3)) )/(dx(0)**4)
      uyyyy23r(i1,i2,i3)=(6.*u(i1,i2,i3)-4.*(u(i1,i2+1,i3)+u(i1,i2-1,
     & i3))+(u(i1,i2+2,i3)+u(i1,i2-2,i3)) )/(dx(1)**4)
      uzzzz23r(i1,i2,i3)=(6.*u(i1,i2,i3)-4.*(u(i1,i2,i3+1)+u(i1,i2,i3-
     & 1))+(u(i1,i2,i3+2)+u(i1,i2,i3-2)) )/(dx(2)**4)
      uxxyy23r(i1,i2,i3)=( 4.*u(i1,i2,i3)     -2.*(u(i1+1,i2,i3)+u(i1-
     & 1,i2,i3)+u(i1,i2+1,i3)+u(i1,i2-1,i3))   +   (u(i1+1,i2+1,i3)+u(
     & i1-1,i2+1,i3)+u(i1+1,i2-1,i3)+u(i1-1,i2-1,i3)) )/(dx(0)**2*dx(
     & 1)**2)
      uxxzz23r(i1,i2,i3)=( 4.*u(i1,i2,i3)     -2.*(u(i1+1,i2,i3)+u(i1-
     & 1,i2,i3)+u(i1,i2,i3+1)+u(i1,i2,i3-1))   +   (u(i1+1,i2,i3+1)+u(
     & i1-1,i2,i3+1)+u(i1+1,i2,i3-1)+u(i1-1,i2,i3-1)) )/(dx(0)**2*dx(
     & 2)**2)
      uyyzz23r(i1,i2,i3)=( 4.*u(i1,i2,i3)     -2.*(u(i1,i2+1,i3)  +u(
     & i1,i2-1,i3)+  u(i1,i2  ,i3+1)+u(i1,i2  ,i3-1))   +   (u(i1,i2+
     & 1,i3+1)+u(i1,i2-1,i3+1)+u(i1,i2+1,i3-1)+u(i1,i2-1,i3-1)) )/(dx(
     & 1)**2*dx(2)**2)
      d14(kd) = 1./(12.*dr(kd))
      d24(kd) = 1./(12.*dr(kd)**2)
      ur4(i1,i2,i3)=(8.*(u(i1+1,i2,i3)-u(i1-1,i2,i3))-(u(i1+2,i2,i3)-u(
     & i1-2,i2,i3)))*d14(0)
      us4(i1,i2,i3)=(8.*(u(i1,i2+1,i3)-u(i1,i2-1,i3))-(u(i1,i2+2,i3)-u(
     & i1,i2-2,i3)))*d14(1)
      ut4(i1,i2,i3)=(8.*(u(i1,i2,i3+1)-u(i1,i2,i3-1))-(u(i1,i2,i3+2)-u(
     & i1,i2,i3-2)))*d14(2)
      urr4(i1,i2,i3)=(-30.*u(i1,i2,i3)+16.*(u(i1+1,i2,i3)+u(i1-1,i2,i3)
     & )-(u(i1+2,i2,i3)+u(i1-2,i2,i3)) )*d24(0)
      uss4(i1,i2,i3)=(-30.*u(i1,i2,i3)+16.*(u(i1,i2+1,i3)+u(i1,i2-1,i3)
     & )-(u(i1,i2+2,i3)+u(i1,i2-2,i3)) )*d24(1)
      utt4(i1,i2,i3)=(-30.*u(i1,i2,i3)+16.*(u(i1,i2,i3+1)+u(i1,i2,i3-1)
     & )-(u(i1,i2,i3+2)+u(i1,i2,i3-2)) )*d24(2)
      urs4(i1,i2,i3)=(8.*(ur4(i1,i2+1,i3)-ur4(i1,i2-1,i3))-(ur4(i1,i2+
     & 2,i3)-ur4(i1,i2-2,i3)))*d14(1)
      urt4(i1,i2,i3)=(8.*(ur4(i1,i2,i3+1)-ur4(i1,i2,i3-1))-(ur4(i1,i2,
     & i3+2)-ur4(i1,i2,i3-2)))*d14(2)
      ust4(i1,i2,i3)=(8.*(us4(i1,i2,i3+1)-us4(i1,i2,i3-1))-(us4(i1,i2,
     & i3+2)-us4(i1,i2,i3-2)))*d14(2)
      rxr4(i1,i2,i3)=(8.*(rx(i1+1,i2,i3)-rx(i1-1,i2,i3))-(rx(i1+2,i2,
     & i3)-rx(i1-2,i2,i3)))*d14(0)
      rxs4(i1,i2,i3)=(8.*(rx(i1,i2+1,i3)-rx(i1,i2-1,i3))-(rx(i1,i2+2,
     & i3)-rx(i1,i2-2,i3)))*d14(1)
      rxt4(i1,i2,i3)=(8.*(rx(i1,i2,i3+1)-rx(i1,i2,i3-1))-(rx(i1,i2,i3+
     & 2)-rx(i1,i2,i3-2)))*d14(2)
      ryr4(i1,i2,i3)=(8.*(ry(i1+1,i2,i3)-ry(i1-1,i2,i3))-(ry(i1+2,i2,
     & i3)-ry(i1-2,i2,i3)))*d14(0)
      rys4(i1,i2,i3)=(8.*(ry(i1,i2+1,i3)-ry(i1,i2-1,i3))-(ry(i1,i2+2,
     & i3)-ry(i1,i2-2,i3)))*d14(1)
      ryt4(i1,i2,i3)=(8.*(ry(i1,i2,i3+1)-ry(i1,i2,i3-1))-(ry(i1,i2,i3+
     & 2)-ry(i1,i2,i3-2)))*d14(2)
      rzr4(i1,i2,i3)=(8.*(rz(i1+1,i2,i3)-rz(i1-1,i2,i3))-(rz(i1+2,i2,
     & i3)-rz(i1-2,i2,i3)))*d14(0)
      rzs4(i1,i2,i3)=(8.*(rz(i1,i2+1,i3)-rz(i1,i2-1,i3))-(rz(i1,i2+2,
     & i3)-rz(i1,i2-2,i3)))*d14(1)
      rzt4(i1,i2,i3)=(8.*(rz(i1,i2,i3+1)-rz(i1,i2,i3-1))-(rz(i1,i2,i3+
     & 2)-rz(i1,i2,i3-2)))*d14(2)
      sxr4(i1,i2,i3)=(8.*(sx(i1+1,i2,i3)-sx(i1-1,i2,i3))-(sx(i1+2,i2,
     & i3)-sx(i1-2,i2,i3)))*d14(0)
      sxs4(i1,i2,i3)=(8.*(sx(i1,i2+1,i3)-sx(i1,i2-1,i3))-(sx(i1,i2+2,
     & i3)-sx(i1,i2-2,i3)))*d14(1)
      sxt4(i1,i2,i3)=(8.*(sx(i1,i2,i3+1)-sx(i1,i2,i3-1))-(sx(i1,i2,i3+
     & 2)-sx(i1,i2,i3-2)))*d14(2)
      syr4(i1,i2,i3)=(8.*(sy(i1+1,i2,i3)-sy(i1-1,i2,i3))-(sy(i1+2,i2,
     & i3)-sy(i1-2,i2,i3)))*d14(0)
      sys4(i1,i2,i3)=(8.*(sy(i1,i2+1,i3)-sy(i1,i2-1,i3))-(sy(i1,i2+2,
     & i3)-sy(i1,i2-2,i3)))*d14(1)
      syt4(i1,i2,i3)=(8.*(sy(i1,i2,i3+1)-sy(i1,i2,i3-1))-(sy(i1,i2,i3+
     & 2)-sy(i1,i2,i3-2)))*d14(2)
      szr4(i1,i2,i3)=(8.*(sz(i1+1,i2,i3)-sz(i1-1,i2,i3))-(sz(i1+2,i2,
     & i3)-sz(i1-2,i2,i3)))*d14(0)
      szs4(i1,i2,i3)=(8.*(sz(i1,i2+1,i3)-sz(i1,i2-1,i3))-(sz(i1,i2+2,
     & i3)-sz(i1,i2-2,i3)))*d14(1)
      szt4(i1,i2,i3)=(8.*(sz(i1,i2,i3+1)-sz(i1,i2,i3-1))-(sz(i1,i2,i3+
     & 2)-sz(i1,i2,i3-2)))*d14(2)
      txr4(i1,i2,i3)=(8.*(tx(i1+1,i2,i3)-tx(i1-1,i2,i3))-(tx(i1+2,i2,
     & i3)-tx(i1-2,i2,i3)))*d14(0)
      txs4(i1,i2,i3)=(8.*(tx(i1,i2+1,i3)-tx(i1,i2-1,i3))-(tx(i1,i2+2,
     & i3)-tx(i1,i2-2,i3)))*d14(1)
      txt4(i1,i2,i3)=(8.*(tx(i1,i2,i3+1)-tx(i1,i2,i3-1))-(tx(i1,i2,i3+
     & 2)-tx(i1,i2,i3-2)))*d14(2)
      tyr4(i1,i2,i3)=(8.*(ty(i1+1,i2,i3)-ty(i1-1,i2,i3))-(ty(i1+2,i2,
     & i3)-ty(i1-2,i2,i3)))*d14(0)
      tys4(i1,i2,i3)=(8.*(ty(i1,i2+1,i3)-ty(i1,i2-1,i3))-(ty(i1,i2+2,
     & i3)-ty(i1,i2-2,i3)))*d14(1)
      tyt4(i1,i2,i3)=(8.*(ty(i1,i2,i3+1)-ty(i1,i2,i3-1))-(ty(i1,i2,i3+
     & 2)-ty(i1,i2,i3-2)))*d14(2)
      tzr4(i1,i2,i3)=(8.*(tz(i1+1,i2,i3)-tz(i1-1,i2,i3))-(tz(i1+2,i2,
     & i3)-tz(i1-2,i2,i3)))*d14(0)
      tzs4(i1,i2,i3)=(8.*(tz(i1,i2+1,i3)-tz(i1,i2-1,i3))-(tz(i1,i2+2,
     & i3)-tz(i1,i2-2,i3)))*d14(1)
      tzt4(i1,i2,i3)=(8.*(tz(i1,i2,i3+1)-tz(i1,i2,i3-1))-(tz(i1,i2,i3+
     & 2)-tz(i1,i2,i3-2)))*d14(2)
      ux41(i1,i2,i3)= rx(i1,i2,i3)*ur4(i1,i2,i3)
      uy41(i1,i2,i3)=0
      uz41(i1,i2,i3)=0
      ux42(i1,i2,i3)= rx(i1,i2,i3)*ur4(i1,i2,i3)+sx(i1,i2,i3)*us4(i1,
     & i2,i3)
      uy42(i1,i2,i3)= ry(i1,i2,i3)*ur4(i1,i2,i3)+sy(i1,i2,i3)*us4(i1,
     & i2,i3)
      uz42(i1,i2,i3)=0
      ux43(i1,i2,i3)=rx(i1,i2,i3)*ur4(i1,i2,i3)+sx(i1,i2,i3)*us4(i1,i2,
     & i3)+tx(i1,i2,i3)*ut4(i1,i2,i3)
      uy43(i1,i2,i3)=ry(i1,i2,i3)*ur4(i1,i2,i3)+sy(i1,i2,i3)*us4(i1,i2,
     & i3)+ty(i1,i2,i3)*ut4(i1,i2,i3)
      uz43(i1,i2,i3)=rz(i1,i2,i3)*ur4(i1,i2,i3)+sz(i1,i2,i3)*us4(i1,i2,
     & i3)+tz(i1,i2,i3)*ut4(i1,i2,i3)
      rxx41(i1,i2,i3)= rx(i1,i2,i3)*rxr4(i1,i2,i3)
      rxx42(i1,i2,i3)= rx(i1,i2,i3)*rxr4(i1,i2,i3)+sx(i1,i2,i3)*rxs4(
     & i1,i2,i3)
      rxy42(i1,i2,i3)= ry(i1,i2,i3)*rxr4(i1,i2,i3)+sy(i1,i2,i3)*rxs4(
     & i1,i2,i3)
      rxx43(i1,i2,i3)=rx(i1,i2,i3)*rxr4(i1,i2,i3)+sx(i1,i2,i3)*rxs4(i1,
     & i2,i3)+tx(i1,i2,i3)*rxt4(i1,i2,i3)
      rxy43(i1,i2,i3)=ry(i1,i2,i3)*rxr4(i1,i2,i3)+sy(i1,i2,i3)*rxs4(i1,
     & i2,i3)+ty(i1,i2,i3)*rxt4(i1,i2,i3)
      rxz43(i1,i2,i3)=rz(i1,i2,i3)*rxr4(i1,i2,i3)+sz(i1,i2,i3)*rxs4(i1,
     & i2,i3)+tz(i1,i2,i3)*rxt4(i1,i2,i3)
      ryx42(i1,i2,i3)= rx(i1,i2,i3)*ryr4(i1,i2,i3)+sx(i1,i2,i3)*rys4(
     & i1,i2,i3)
      ryy42(i1,i2,i3)= ry(i1,i2,i3)*ryr4(i1,i2,i3)+sy(i1,i2,i3)*rys4(
     & i1,i2,i3)
      ryx43(i1,i2,i3)=rx(i1,i2,i3)*ryr4(i1,i2,i3)+sx(i1,i2,i3)*rys4(i1,
     & i2,i3)+tx(i1,i2,i3)*ryt4(i1,i2,i3)
      ryy43(i1,i2,i3)=ry(i1,i2,i3)*ryr4(i1,i2,i3)+sy(i1,i2,i3)*rys4(i1,
     & i2,i3)+ty(i1,i2,i3)*ryt4(i1,i2,i3)
      ryz43(i1,i2,i3)=rz(i1,i2,i3)*ryr4(i1,i2,i3)+sz(i1,i2,i3)*rys4(i1,
     & i2,i3)+tz(i1,i2,i3)*ryt4(i1,i2,i3)
      rzx42(i1,i2,i3)= rx(i1,i2,i3)*rzr4(i1,i2,i3)+sx(i1,i2,i3)*rzs4(
     & i1,i2,i3)
      rzy42(i1,i2,i3)= ry(i1,i2,i3)*rzr4(i1,i2,i3)+sy(i1,i2,i3)*rzs4(
     & i1,i2,i3)
      rzx43(i1,i2,i3)=rx(i1,i2,i3)*rzr4(i1,i2,i3)+sx(i1,i2,i3)*rzs4(i1,
     & i2,i3)+tx(i1,i2,i3)*rzt4(i1,i2,i3)
      rzy43(i1,i2,i3)=ry(i1,i2,i3)*rzr4(i1,i2,i3)+sy(i1,i2,i3)*rzs4(i1,
     & i2,i3)+ty(i1,i2,i3)*rzt4(i1,i2,i3)
      rzz43(i1,i2,i3)=rz(i1,i2,i3)*rzr4(i1,i2,i3)+sz(i1,i2,i3)*rzs4(i1,
     & i2,i3)+tz(i1,i2,i3)*rzt4(i1,i2,i3)
      sxx42(i1,i2,i3)= rx(i1,i2,i3)*sxr4(i1,i2,i3)+sx(i1,i2,i3)*sxs4(
     & i1,i2,i3)
      sxy42(i1,i2,i3)= ry(i1,i2,i3)*sxr4(i1,i2,i3)+sy(i1,i2,i3)*sxs4(
     & i1,i2,i3)
      sxx43(i1,i2,i3)=rx(i1,i2,i3)*sxr4(i1,i2,i3)+sx(i1,i2,i3)*sxs4(i1,
     & i2,i3)+tx(i1,i2,i3)*sxt4(i1,i2,i3)
      sxy43(i1,i2,i3)=ry(i1,i2,i3)*sxr4(i1,i2,i3)+sy(i1,i2,i3)*sxs4(i1,
     & i2,i3)+ty(i1,i2,i3)*sxt4(i1,i2,i3)
      sxz43(i1,i2,i3)=rz(i1,i2,i3)*sxr4(i1,i2,i3)+sz(i1,i2,i3)*sxs4(i1,
     & i2,i3)+tz(i1,i2,i3)*sxt4(i1,i2,i3)
      syx42(i1,i2,i3)= rx(i1,i2,i3)*syr4(i1,i2,i3)+sx(i1,i2,i3)*sys4(
     & i1,i2,i3)
      syy42(i1,i2,i3)= ry(i1,i2,i3)*syr4(i1,i2,i3)+sy(i1,i2,i3)*sys4(
     & i1,i2,i3)
      syx43(i1,i2,i3)=rx(i1,i2,i3)*syr4(i1,i2,i3)+sx(i1,i2,i3)*sys4(i1,
     & i2,i3)+tx(i1,i2,i3)*syt4(i1,i2,i3)
      syy43(i1,i2,i3)=ry(i1,i2,i3)*syr4(i1,i2,i3)+sy(i1,i2,i3)*sys4(i1,
     & i2,i3)+ty(i1,i2,i3)*syt4(i1,i2,i3)
      syz43(i1,i2,i3)=rz(i1,i2,i3)*syr4(i1,i2,i3)+sz(i1,i2,i3)*sys4(i1,
     & i2,i3)+tz(i1,i2,i3)*syt4(i1,i2,i3)
      szx42(i1,i2,i3)= rx(i1,i2,i3)*szr4(i1,i2,i3)+sx(i1,i2,i3)*szs4(
     & i1,i2,i3)
      szy42(i1,i2,i3)= ry(i1,i2,i3)*szr4(i1,i2,i3)+sy(i1,i2,i3)*szs4(
     & i1,i2,i3)
      szx43(i1,i2,i3)=rx(i1,i2,i3)*szr4(i1,i2,i3)+sx(i1,i2,i3)*szs4(i1,
     & i2,i3)+tx(i1,i2,i3)*szt4(i1,i2,i3)
      szy43(i1,i2,i3)=ry(i1,i2,i3)*szr4(i1,i2,i3)+sy(i1,i2,i3)*szs4(i1,
     & i2,i3)+ty(i1,i2,i3)*szt4(i1,i2,i3)
      szz43(i1,i2,i3)=rz(i1,i2,i3)*szr4(i1,i2,i3)+sz(i1,i2,i3)*szs4(i1,
     & i2,i3)+tz(i1,i2,i3)*szt4(i1,i2,i3)
      txx42(i1,i2,i3)= rx(i1,i2,i3)*txr4(i1,i2,i3)+sx(i1,i2,i3)*txs4(
     & i1,i2,i3)
      txy42(i1,i2,i3)= ry(i1,i2,i3)*txr4(i1,i2,i3)+sy(i1,i2,i3)*txs4(
     & i1,i2,i3)
      txx43(i1,i2,i3)=rx(i1,i2,i3)*txr4(i1,i2,i3)+sx(i1,i2,i3)*txs4(i1,
     & i2,i3)+tx(i1,i2,i3)*txt4(i1,i2,i3)
      txy43(i1,i2,i3)=ry(i1,i2,i3)*txr4(i1,i2,i3)+sy(i1,i2,i3)*txs4(i1,
     & i2,i3)+ty(i1,i2,i3)*txt4(i1,i2,i3)
      txz43(i1,i2,i3)=rz(i1,i2,i3)*txr4(i1,i2,i3)+sz(i1,i2,i3)*txs4(i1,
     & i2,i3)+tz(i1,i2,i3)*txt4(i1,i2,i3)
      tyx42(i1,i2,i3)= rx(i1,i2,i3)*tyr4(i1,i2,i3)+sx(i1,i2,i3)*tys4(
     & i1,i2,i3)
      tyy42(i1,i2,i3)= ry(i1,i2,i3)*tyr4(i1,i2,i3)+sy(i1,i2,i3)*tys4(
     & i1,i2,i3)
      tyx43(i1,i2,i3)=rx(i1,i2,i3)*tyr4(i1,i2,i3)+sx(i1,i2,i3)*tys4(i1,
     & i2,i3)+tx(i1,i2,i3)*tyt4(i1,i2,i3)
      tyy43(i1,i2,i3)=ry(i1,i2,i3)*tyr4(i1,i2,i3)+sy(i1,i2,i3)*tys4(i1,
     & i2,i3)+ty(i1,i2,i3)*tyt4(i1,i2,i3)
      tyz43(i1,i2,i3)=rz(i1,i2,i3)*tyr4(i1,i2,i3)+sz(i1,i2,i3)*tys4(i1,
     & i2,i3)+tz(i1,i2,i3)*tyt4(i1,i2,i3)
      tzx42(i1,i2,i3)= rx(i1,i2,i3)*tzr4(i1,i2,i3)+sx(i1,i2,i3)*tzs4(
     & i1,i2,i3)
      tzy42(i1,i2,i3)= ry(i1,i2,i3)*tzr4(i1,i2,i3)+sy(i1,i2,i3)*tzs4(
     & i1,i2,i3)
      tzx43(i1,i2,i3)=rx(i1,i2,i3)*tzr4(i1,i2,i3)+sx(i1,i2,i3)*tzs4(i1,
     & i2,i3)+tx(i1,i2,i3)*tzt4(i1,i2,i3)
      tzy43(i1,i2,i3)=ry(i1,i2,i3)*tzr4(i1,i2,i3)+sy(i1,i2,i3)*tzs4(i1,
     & i2,i3)+ty(i1,i2,i3)*tzt4(i1,i2,i3)
      tzz43(i1,i2,i3)=rz(i1,i2,i3)*tzr4(i1,i2,i3)+sz(i1,i2,i3)*tzs4(i1,
     & i2,i3)+tz(i1,i2,i3)*tzt4(i1,i2,i3)
      uxx41(i1,i2,i3)=(rx(i1,i2,i3)**2)*urr4(i1,i2,i3)+(rxx42(i1,i2,i3)
     & )*ur4(i1,i2,i3)
      uyy41(i1,i2,i3)=0
      uxy41(i1,i2,i3)=0
      uxz41(i1,i2,i3)=0
      uyz41(i1,i2,i3)=0
      uzz41(i1,i2,i3)=0
      ulaplacian41(i1,i2,i3)=uxx41(i1,i2,i3)
      uxx42(i1,i2,i3)=(rx(i1,i2,i3)**2)*urr4(i1,i2,i3)+2.*(rx(i1,i2,i3)
     & *sx(i1,i2,i3))*urs4(i1,i2,i3)+(sx(i1,i2,i3)**2)*uss4(i1,i2,i3)+
     & (rxx42(i1,i2,i3))*ur4(i1,i2,i3)+(sxx42(i1,i2,i3))*us4(i1,i2,i3)
      uyy42(i1,i2,i3)=(ry(i1,i2,i3)**2)*urr4(i1,i2,i3)+2.*(ry(i1,i2,i3)
     & *sy(i1,i2,i3))*urs4(i1,i2,i3)+(sy(i1,i2,i3)**2)*uss4(i1,i2,i3)+
     & (ryy42(i1,i2,i3))*ur4(i1,i2,i3)+(syy42(i1,i2,i3))*us4(i1,i2,i3)
      uxy42(i1,i2,i3)=rx(i1,i2,i3)*ry(i1,i2,i3)*urr4(i1,i2,i3)+(rx(i1,
     & i2,i3)*sy(i1,i2,i3)+ry(i1,i2,i3)*sx(i1,i2,i3))*urs4(i1,i2,i3)+
     & sx(i1,i2,i3)*sy(i1,i2,i3)*uss4(i1,i2,i3)+rxy42(i1,i2,i3)*ur4(
     & i1,i2,i3)+sxy42(i1,i2,i3)*us4(i1,i2,i3)
      uxz42(i1,i2,i3)=0
      uyz42(i1,i2,i3)=0
      uzz42(i1,i2,i3)=0
      ulaplacian42(i1,i2,i3)=(rx(i1,i2,i3)**2+ry(i1,i2,i3)**2)*urr4(i1,
     & i2,i3)+2.*(rx(i1,i2,i3)*sx(i1,i2,i3)+ ry(i1,i2,i3)*sy(i1,i2,i3)
     & )*urs4(i1,i2,i3)+(sx(i1,i2,i3)**2+sy(i1,i2,i3)**2)*uss4(i1,i2,
     & i3)+(rxx42(i1,i2,i3)+ryy42(i1,i2,i3))*ur4(i1,i2,i3)+(sxx42(i1,
     & i2,i3)+syy42(i1,i2,i3))*us4(i1,i2,i3)
      uxx43(i1,i2,i3)=rx(i1,i2,i3)**2*urr4(i1,i2,i3)+sx(i1,i2,i3)**2*
     & uss4(i1,i2,i3)+tx(i1,i2,i3)**2*utt4(i1,i2,i3)+2.*rx(i1,i2,i3)*
     & sx(i1,i2,i3)*urs4(i1,i2,i3)+2.*rx(i1,i2,i3)*tx(i1,i2,i3)*urt4(
     & i1,i2,i3)+2.*sx(i1,i2,i3)*tx(i1,i2,i3)*ust4(i1,i2,i3)+rxx43(i1,
     & i2,i3)*ur4(i1,i2,i3)+sxx43(i1,i2,i3)*us4(i1,i2,i3)+txx43(i1,i2,
     & i3)*ut4(i1,i2,i3)
      uyy43(i1,i2,i3)=ry(i1,i2,i3)**2*urr4(i1,i2,i3)+sy(i1,i2,i3)**2*
     & uss4(i1,i2,i3)+ty(i1,i2,i3)**2*utt4(i1,i2,i3)+2.*ry(i1,i2,i3)*
     & sy(i1,i2,i3)*urs4(i1,i2,i3)+2.*ry(i1,i2,i3)*ty(i1,i2,i3)*urt4(
     & i1,i2,i3)+2.*sy(i1,i2,i3)*ty(i1,i2,i3)*ust4(i1,i2,i3)+ryy43(i1,
     & i2,i3)*ur4(i1,i2,i3)+syy43(i1,i2,i3)*us4(i1,i2,i3)+tyy43(i1,i2,
     & i3)*ut4(i1,i2,i3)
      uzz43(i1,i2,i3)=rz(i1,i2,i3)**2*urr4(i1,i2,i3)+sz(i1,i2,i3)**2*
     & uss4(i1,i2,i3)+tz(i1,i2,i3)**2*utt4(i1,i2,i3)+2.*rz(i1,i2,i3)*
     & sz(i1,i2,i3)*urs4(i1,i2,i3)+2.*rz(i1,i2,i3)*tz(i1,i2,i3)*urt4(
     & i1,i2,i3)+2.*sz(i1,i2,i3)*tz(i1,i2,i3)*ust4(i1,i2,i3)+rzz43(i1,
     & i2,i3)*ur4(i1,i2,i3)+szz43(i1,i2,i3)*us4(i1,i2,i3)+tzz43(i1,i2,
     & i3)*ut4(i1,i2,i3)
      uxy43(i1,i2,i3)=rx(i1,i2,i3)*ry(i1,i2,i3)*urr4(i1,i2,i3)+sx(i1,
     & i2,i3)*sy(i1,i2,i3)*uss4(i1,i2,i3)+tx(i1,i2,i3)*ty(i1,i2,i3)*
     & utt4(i1,i2,i3)+(rx(i1,i2,i3)*sy(i1,i2,i3)+ry(i1,i2,i3)*sx(i1,
     & i2,i3))*urs4(i1,i2,i3)+(rx(i1,i2,i3)*ty(i1,i2,i3)+ry(i1,i2,i3)*
     & tx(i1,i2,i3))*urt4(i1,i2,i3)+(sx(i1,i2,i3)*ty(i1,i2,i3)+sy(i1,
     & i2,i3)*tx(i1,i2,i3))*ust4(i1,i2,i3)+rxy43(i1,i2,i3)*ur4(i1,i2,
     & i3)+sxy43(i1,i2,i3)*us4(i1,i2,i3)+txy43(i1,i2,i3)*ut4(i1,i2,i3)
      uxz43(i1,i2,i3)=rx(i1,i2,i3)*rz(i1,i2,i3)*urr4(i1,i2,i3)+sx(i1,
     & i2,i3)*sz(i1,i2,i3)*uss4(i1,i2,i3)+tx(i1,i2,i3)*tz(i1,i2,i3)*
     & utt4(i1,i2,i3)+(rx(i1,i2,i3)*sz(i1,i2,i3)+rz(i1,i2,i3)*sx(i1,
     & i2,i3))*urs4(i1,i2,i3)+(rx(i1,i2,i3)*tz(i1,i2,i3)+rz(i1,i2,i3)*
     & tx(i1,i2,i3))*urt4(i1,i2,i3)+(sx(i1,i2,i3)*tz(i1,i2,i3)+sz(i1,
     & i2,i3)*tx(i1,i2,i3))*ust4(i1,i2,i3)+rxz43(i1,i2,i3)*ur4(i1,i2,
     & i3)+sxz43(i1,i2,i3)*us4(i1,i2,i3)+txz43(i1,i2,i3)*ut4(i1,i2,i3)
      uyz43(i1,i2,i3)=ry(i1,i2,i3)*rz(i1,i2,i3)*urr4(i1,i2,i3)+sy(i1,
     & i2,i3)*sz(i1,i2,i3)*uss4(i1,i2,i3)+ty(i1,i2,i3)*tz(i1,i2,i3)*
     & utt4(i1,i2,i3)+(ry(i1,i2,i3)*sz(i1,i2,i3)+rz(i1,i2,i3)*sy(i1,
     & i2,i3))*urs4(i1,i2,i3)+(ry(i1,i2,i3)*tz(i1,i2,i3)+rz(i1,i2,i3)*
     & ty(i1,i2,i3))*urt4(i1,i2,i3)+(sy(i1,i2,i3)*tz(i1,i2,i3)+sz(i1,
     & i2,i3)*ty(i1,i2,i3))*ust4(i1,i2,i3)+ryz43(i1,i2,i3)*ur4(i1,i2,
     & i3)+syz43(i1,i2,i3)*us4(i1,i2,i3)+tyz43(i1,i2,i3)*ut4(i1,i2,i3)
      ulaplacian43(i1,i2,i3)=(rx(i1,i2,i3)**2+ry(i1,i2,i3)**2+rz(i1,i2,
     & i3)**2)*urr4(i1,i2,i3)+(sx(i1,i2,i3)**2+sy(i1,i2,i3)**2+sz(i1,
     & i2,i3)**2)*uss4(i1,i2,i3)+(tx(i1,i2,i3)**2+ty(i1,i2,i3)**2+tz(
     & i1,i2,i3)**2)*utt4(i1,i2,i3)+2.*(rx(i1,i2,i3)*sx(i1,i2,i3)+ ry(
     & i1,i2,i3)*sy(i1,i2,i3)+rz(i1,i2,i3)*sz(i1,i2,i3))*urs4(i1,i2,
     & i3)+2.*(rx(i1,i2,i3)*tx(i1,i2,i3)+ ry(i1,i2,i3)*ty(i1,i2,i3)+
     & rz(i1,i2,i3)*tz(i1,i2,i3))*urt4(i1,i2,i3)+2.*(sx(i1,i2,i3)*tx(
     & i1,i2,i3)+ sy(i1,i2,i3)*ty(i1,i2,i3)+sz(i1,i2,i3)*tz(i1,i2,i3))
     & *ust4(i1,i2,i3)+(rxx43(i1,i2,i3)+ryy43(i1,i2,i3)+rzz43(i1,i2,
     & i3))*ur4(i1,i2,i3)+(sxx43(i1,i2,i3)+syy43(i1,i2,i3)+szz43(i1,
     & i2,i3))*us4(i1,i2,i3)+(txx43(i1,i2,i3)+tyy43(i1,i2,i3)+tzz43(
     & i1,i2,i3))*ut4(i1,i2,i3)
c============================================================================================
c Define derivatives for a rectangular grid
c
c============================================================================================
      h41(kd) = 1./(12.*dx(kd))
      h42(kd) = 1./(12.*dx(kd)**2)
      ux43r(i1,i2,i3)=(8.*(u(i1+1,i2,i3)-u(i1-1,i2,i3))-(u(i1+2,i2,i3)-
     & u(i1-2,i2,i3)))*h41(0)
      uy43r(i1,i2,i3)=(8.*(u(i1,i2+1,i3)-u(i1,i2-1,i3))-(u(i1,i2+2,i3)-
     & u(i1,i2-2,i3)))*h41(1)
      uz43r(i1,i2,i3)=(8.*(u(i1,i2,i3+1)-u(i1,i2,i3-1))-(u(i1,i2,i3+2)-
     & u(i1,i2,i3-2)))*h41(2)
      uxx43r(i1,i2,i3)=( -30.*u(i1,i2,i3)+16.*(u(i1+1,i2,i3)+u(i1-1,i2,
     & i3))-(u(i1+2,i2,i3)+u(i1-2,i2,i3)) )*h42(0)
      uyy43r(i1,i2,i3)=( -30.*u(i1,i2,i3)+16.*(u(i1,i2+1,i3)+u(i1,i2-1,
     & i3))-(u(i1,i2+2,i3)+u(i1,i2-2,i3)) )*h42(1)
      uzz43r(i1,i2,i3)=( -30.*u(i1,i2,i3)+16.*(u(i1,i2,i3+1)+u(i1,i2,
     & i3-1))-(u(i1,i2,i3+2)+u(i1,i2,i3-2)) )*h42(2)
      uxy43r(i1,i2,i3)=( (u(i1+2,i2+2,i3)-u(i1-2,i2+2,i3)- u(i1+2,i2-2,
     & i3)+u(i1-2,i2-2,i3)) +8.*(u(i1-1,i2+2,i3)-u(i1-1,i2-2,i3)-u(i1+
     & 1,i2+2,i3)+u(i1+1,i2-2,i3) +u(i1+2,i2-1,i3)-u(i1-2,i2-1,i3)-u(
     & i1+2,i2+1,i3)+u(i1-2,i2+1,i3))+64.*(u(i1+1,i2+1,i3)-u(i1-1,i2+
     & 1,i3)- u(i1+1,i2-1,i3)+u(i1-1,i2-1,i3)))*(h41(0)*h41(1))
      uxz43r(i1,i2,i3)=( (u(i1+2,i2,i3+2)-u(i1-2,i2,i3+2)-u(i1+2,i2,i3-
     & 2)+u(i1-2,i2,i3-2)) +8.*(u(i1-1,i2,i3+2)-u(i1-1,i2,i3-2)-u(i1+
     & 1,i2,i3+2)+u(i1+1,i2,i3-2) +u(i1+2,i2,i3-1)-u(i1-2,i2,i3-1)- u(
     & i1+2,i2,i3+1)+u(i1-2,i2,i3+1)) +64.*(u(i1+1,i2,i3+1)-u(i1-1,i2,
     & i3+1)-u(i1+1,i2,i3-1)+u(i1-1,i2,i3-1)) )*(h41(0)*h41(2))
      uyz43r(i1,i2,i3)=( (u(i1,i2+2,i3+2)-u(i1,i2-2,i3+2)-u(i1,i2+2,i3-
     & 2)+u(i1,i2-2,i3-2)) +8.*(u(i1,i2-1,i3+2)-u(i1,i2-1,i3-2)-u(i1,
     & i2+1,i3+2)+u(i1,i2+1,i3-2) +u(i1,i2+2,i3-1)-u(i1,i2-2,i3-1)-u(
     & i1,i2+2,i3+1)+u(i1,i2-2,i3+1)) +64.*(u(i1,i2+1,i3+1)-u(i1,i2-1,
     & i3+1)-u(i1,i2+1,i3-1)+u(i1,i2-1,i3-1)) )*(h41(1)*h41(2))
      ux41r(i1,i2,i3)= ux43r(i1,i2,i3)
      uy41r(i1,i2,i3)= uy43r(i1,i2,i3)
      uz41r(i1,i2,i3)= uz43r(i1,i2,i3)
      uxx41r(i1,i2,i3)= uxx43r(i1,i2,i3)
      uyy41r(i1,i2,i3)= uyy43r(i1,i2,i3)
      uzz41r(i1,i2,i3)= uzz43r(i1,i2,i3)
      uxy41r(i1,i2,i3)= uxy43r(i1,i2,i3)
      uxz41r(i1,i2,i3)= uxz43r(i1,i2,i3)
      uyz41r(i1,i2,i3)= uyz43r(i1,i2,i3)
      ulaplacian41r(i1,i2,i3)=uxx43r(i1,i2,i3)
      ux42r(i1,i2,i3)= ux43r(i1,i2,i3)
      uy42r(i1,i2,i3)= uy43r(i1,i2,i3)
      uz42r(i1,i2,i3)= uz43r(i1,i2,i3)
      uxx42r(i1,i2,i3)= uxx43r(i1,i2,i3)
      uyy42r(i1,i2,i3)= uyy43r(i1,i2,i3)
      uzz42r(i1,i2,i3)= uzz43r(i1,i2,i3)
      uxy42r(i1,i2,i3)= uxy43r(i1,i2,i3)
      uxz42r(i1,i2,i3)= uxz43r(i1,i2,i3)
      uyz42r(i1,i2,i3)= uyz43r(i1,i2,i3)
      ulaplacian42r(i1,i2,i3)=uxx43r(i1,i2,i3)+uyy43r(i1,i2,i3)
      ulaplacian43r(i1,i2,i3)=uxx43r(i1,i2,i3)+uyy43r(i1,i2,i3)+uzz43r(
     & i1,i2,i3)
!....end statement function

      nd              =ipar(0)
      direction       =ipar(1)
      sparseStencil   =ipar(2)
      orderOfAccuracy =ipar(3)
      n1a             =ipar(4)
      n1b             =ipar(5)
      n1c             =ipar(6)
      n2a             =ipar(7)
      n2b             =ipar(8)
      n2c             =ipar(9)
      n3a             =ipar(10)
      n3b             =ipar(11)
      n3c             =ipar(12)
      bc(0,0)         =ipar(13)
      bc(1,0)         =ipar(14)
      bc(0,1)         =ipar(15)
      bc(1,1)         =ipar(16)
      bc(0,2)         =ipar(17)
      bc(1,2)         =ipar(18)
      bcOptionD       =ipar(19)  ! BC option for Dirichlet BC's
      bcOptionN       =ipar(20)  ! BC option for Neumann BC's
      orderOfExtrapD  =ipar(21)  ! for dirichlet
      orderOfExtrapN  =ipar(22)  ! for neumann
      gridType        =ipar(23)

      level           =ipar(31)
      equationToSolve =ipar(32)
      useBoundaryForcing=ipar(33)
      isNeumannBC(0)  =ipar(34)
      isNeumannBC(1)  =ipar(35)

      myid            =ipar(36)

      dx(0)           =rpar(0)
      dx(1)           =rpar(1)
      dx(2)           =rpar(2)
      dr(0)           =rpar(3) ! **** added
      dr(1)           =rpar(4)
      dr(2)           =rpar(5)

      bogus=1.e20
      if( .true. )then

        n1=bogus
        n1r=bogus
        n1rr=bogus
        n1s=bogus
        n1ss=bogus
        n1t=bogus
        n1tt=bogus
        n1rs=bogus
        n1rt=bogus
        n1st=bogus
        n2=bogus
        n2r=bogus
        n2rr=bogus
        n2s=bogus
        n2ss=bogus
        n2t=bogus
        n2tt=bogus
        n2rs=bogus
        n2rt=bogus
        n2st=bogus
        n3=bogus
        n3r=bogus
        n3rr=bogus
        n3s=bogus
        n3ss=bogus
        n3t=bogus
        n3tt=bogus
        n3rs=bogus
        n3rt=bogus
        n3st=bogus
        an1=bogus
        an1s=bogus
        an1ss=bogus
        an2=bogus
        an2s=bogus
        an2ss=bogus
        an1r=bogus
        an1rr=bogus
        an2r=bogus
        an2rs=bogus
        an2rr=bogus
        ff=bogus
        ffs=bogus
        ffr=bogus
        g=bogus
        gs=bogus
        gss=bogus
        gr=bogus
        grr=bogus
        grs=bogus
        grt=bogus
        gt=bogus
        gst=bogus
        gtt=bogus
        fft=bogus
        ffst=bogus
        fftt=bogus
        ffst=bogus
        fftt=bogus
        ffst=bogus
        fftt=bogus
        ffst=bogus
        fftt=bogus
        ffst=bogus
        fftt=bogus
        c11=bogus
        c11r=bogus
        c11s=bogus
        c12=bogus
        c12r=bogus
        c12s=bogus
        c22=bogus
        c22r=bogus
        c22s=bogus
        c1=bogus
        c1r=bogus
        c1s=bogus
        c2=bogus
        c2r=bogus
        c2s=bogus

        a0=bogus
        a0r=bogus
        a0s=bogus
        a0t=bogus
        a0rr=bogus
        a0ss=bogus
        a0tt=bogus
        a0rs=bogus
        a0rt=bogus
        a0st=bogus

        b0=bogus
        b1=bogus
        b2=bogus
        b3=bogus
        bf=bogus
        br2=bogus
        b0=bogus
        b1=bogus
        b2=bogus
        b3=bogus
        cxx=bogus
        cyy=bogus
        czz=bogus
        cxy=bogus
        cxz=bogus
        cyz=bogus
        cx=bogus
        cy=bogus
        cz=bogus
        c0=bogus
        cRR=bogus
        cSS=bogus
        cTT=bogus
        cRS=bogus
        cRT=bogus
        cST=bogus
        ccR=bogus
        ccS=bogus
        ccT=bogus
        ccT=bogus
        cRRr=bogus
        cSSr=bogus
        cTTr=bogus
        cRSr=bogus
        cRTr=bogus
        cSTr=bogus
        ccRr=bogus
        ccSr=bogus
        ccTr=bogus
        c0r=bogus
        cRRt=bogus
        cSSt=bogus
        cTTt=bogus
        cRSt=bogus
        cRTt=bogus
        cSTt=bogus
        ccRt=bogus
        ccSt=bogus
        ccTt=bogus
        c0t=bogus

        ani=bogus
        anir=bogus
        anis=bogus
        anit=bogus
        anirr=bogus
        anirs=bogus
        anirt=bogus
        aniss=bogus
        anist=bogus
        anitt=bogus
        anR=bogus
        anRr=bogus
        anRs=bogus
        anRt=bogus
        anRrr=bogus
        anRrs=bogus
        anRrt=bogus
        anRss=bogus
        anRst=bogus
        anRtt=bogus
        anS=bogus
        anSr=bogus
        anSs=bogus
        anSt=bogus
        anSrr=bogus
        anSrs=bogus
        anSrt=bogus
        anSss=bogus
        anSst=bogus
        anStt=bogus
        anT=bogus
        anTr=bogus
        anTs=bogus
        anTt=bogus
        anTrr=bogus
        anTrs=bogus
        anTrt=bogus
        anTss=bogus
        anTst=bogus
        anTtt=bogus

        br=bogus
        brr=bogus
        brrr=bogus
        bs=bogus
        bss=bogus
        bsss=bogus
        bt=bogus
        btt=bogus
        bttt=bogus
        brs=bogus
        brt=bogus
        bst=bogus
        brrs=bogus
        brrt=bogus
        brss=bogus
        brtt=bogus
        bsst=bogus
        bstt=bogus
        brst=bogus
        br2=bogus
        bn1=bogus
        bn2=bogus
        bn3=bogus
        bn3=bogus
        bn3=bogus

       ajrxxr=bogus
       ajrxxs=bogus
       ajrxxt=bogus
       ajrxyr=bogus
       ajrxys=bogus
       ajrxyt=bogus
       ajrxzr=bogus
       ajrxzs=bogus
       ajrxzt=bogus
       ajryxr=bogus
       ajryxs=bogus
       ajryxt=bogus
       ajryyr=bogus
       ajryys=bogus
       ajryyt=bogus
       ajryzr=bogus
       ajryzs=bogus
       ajryzt=bogus
       ajrzxr=bogus
       ajrzxs=bogus
       ajrzxt=bogus
       ajrzyr=bogus
       ajrzys=bogus
       ajrzyt=bogus
       ajrzzr=bogus
       ajrzzs=bogus
       ajrzzt=bogus
       ajsxxr=bogus
       ajsxxs=bogus
       ajsxxt=bogus
       ajsxyr=bogus
       ajsxys=bogus
       ajsxyt=bogus
       ajsxzr=bogus
       ajsxzs=bogus
       ajsxzt=bogus
       ajsyxr=bogus
       ajsyxs=bogus
       ajsyxt=bogus
       ajsyyr=bogus
       ajsyys=bogus
       ajsyyt=bogus
       ajsyzr=bogus
       ajsyzs=bogus
       ajsyzt=bogus
       ajszxr=bogus
       ajszxs=bogus
       ajszxt=bogus
       ajszyr=bogus
       ajszys=bogus
       ajszyt=bogus
       ajszzr=bogus
       ajszzs=bogus
       ajszzt=bogus
       ajtxxr=bogus
       ajtxxs=bogus
       ajtxxt=bogus
       ajtxyr=bogus
       ajtxys=bogus
       ajtxyt=bogus
       ajtxzr=bogus
       ajtxzs=bogus
       ajtxzt=bogus
       ajtyxr=bogus
       ajtyxs=bogus
       ajtyxt=bogus
       ajtyyr=bogus
       ajtyys=bogus
       ajtyyt=bogus
       ajtyzr=bogus
       ajtyzs=bogus
       ajtyzt=bogus
       ajtzxr=bogus
       ajtzxs=bogus
       ajtzxt=bogus
       ajtzyr=bogus
       ajtzys=bogus
       ajtzyt=bogus
       ajtzzr=bogus
       ajtzzs=bogus
       ajtzzt=bogus
      end if



      ! Initialize a0 and derivatives (a0 is the coeff u in the Mixed BC) -- for now a0 is constant (a0 is set later)
       a0=0.
       a0r=0.
       a0s=0.
       a0t=0.
       a0rr=0.
       a0ss=0.
       a0tt=0.
       a0rs=0.
       a0rt=0.
       a0st=0.

      ! write(*,'(''lineSmoothBuild: level,bcOptionD,bcOptionN='',3i2)') level,bcOptionD,bcOptionN

      axis=direction ! do axis=0,nd
      axisp1=mod(axis+1,nd)
      axisp2=mod(axis+2,nd)


      width = orderOfAccuracy+1   ! 3 or 5

      width2=3  ! for 2nd order

      ! md =  diagonal term
      if( nd.eq.2 )then
        md=(width*width)/2      ! 4 or 12
        md2=(3*3)/2             ! for a 2nd order-accurate stencil
      else if( nd.eq.3 )then
        md=(width*width*width)/2 ! 13 or 62
        md2=(3*3*3)/2
      else
        md=width/2              ! 1
        md2=3/2
      end if

      ! form the tridiagonal matrices 
      if( direction.eq.0 )then
        mdm2=md-2
        mdm1=md-1
        mdp1=md+1
        mdp2=md+2

        md2m1=md2-1
        md2p1=md2+1

        ms2 = 1 ! shift for 2nd-order stencil in a fourth order operator
      else if( direction.eq.1 )then
        mdm2=md-2*width
        mdm1=md-  width
        mdp1=md+  width
        mdp2=md+2*width

        md2m1=md2-width2
        md2p1=md2+width2

        ms2 = width ! shift for 2nd-order stencil in a fourth order operator
      else if( direction.eq.2 )then
        mdm2=md-2*width**2
        mdm1=md-  width**2
        mdp1=md+  width**2
        mdp2=md+2*width**2

        md2m1=md2-width2**2
        md2p1=md2+width2**2

        ms2 = width*width ! shift for 2nd-order stencil in a fourth order operator
      else
        write(*,*) 'lineSmoothFactor:ERROR: invalid direction! '
      end if



      if( sparseStencil.eq.constantCoefficients .or. 
     & sparseStencil.eq.sparseConstantCoefficients ) then

        ! ================================================
        ! ========== constant coefficients ===============
        ! ================================================

        if( orderOfAccuracy.eq.2 )then

          do i3=n3a,n3b
          do i2=n2a,n2b
          do i1=n1a,n1b
          if( mask(i1,i2,i3) .gt. 0 ) then
            a(i1,i2,i3)=cc(mdm1)
            b(i1,i2,i3)=cc(md)
            c(i1,i2,i3)=cc(mdp1)
!  write(*,'('' i1,i2,i3,a,b,c='',3i3,3f8.2)') i1,i2,i3,a(i1,i2,i3),b(i1,i2,i3),c(i1,i2,i3)
          else
            a(i1,i2,i3)=0.
            b(i1,i2,i3)=1.
            c(i1,i2,i3)=0.
            end if
          end do
          end do
          end do

        else if( orderOfAccuracy.eq.4 )then

          do i3=n3a,n3b
          do i2=n2a,n2b
          do i1=n1a,n1b
          if( mask(i1,i2,i3) .gt. 0 ) then
            a(i1,i2,i3)=cc(mdm2)
            b(i1,i2,i3)=cc(mdm1)
            c(i1,i2,i3)=cc(md)
            d(i1,i2,i3)=cc(mdp1)
            e(i1,i2,i3)=cc(mdp2)
          else
            a(i1,i2,i3)=0.
            b(i1,i2,i3)=0.
            c(i1,i2,i3)=1.
            d(i1,i2,i3)=0.
            e(i1,i2,i3)=0.
            end if
          end do
          end do
          end do

        else
          write(*,*) 'lineSmoothBuild: invalid orderOfAccuracy=',
     & orderOfAccuracy
          stop 6
        end if

        dxi = 1./dx(direction)
        dx2i = dxi*dxi
        dxm = 1./dx(0)**2 + 1./dx(1)**2
        if( nd.eq.3 )then
          dxm=dxm+1./dx(2)**2
        end if

        is1=0
        is2=0
        is3=0
        do side=0,1
          if( axis.eq.0 )then
            is1=1-2*side
          else if( axis.eq.1 )then
            is2=1-2*side
          else
            is3=1-2*side
          end if
          if( bc(side,axis).gt.0 )then

            if( bc(side,axis).eq.parallelGhostBoundary )then
              ! parallel ghost boundaries get a dirichlet condition
              if( orderOfAccuracy.eq.2 )then
                 m1a=n1a
                 m1b=n1b
                 m2a=n2a
                 m2b=n2b
                 m3a=n3a
                 m3b=n3b
                 if( axis.eq.0 )then
                  if( side.eq.0 )then
                    m1a=n1a+0
                  else
                    m1a=n1b-0
                  end if
                  m1b=m1a
                 else if( axis.eq.1 )then
                  if( side.eq.0 )then
                    m2a=n2a+0
                  else
                    m2a=n2b-0
                  end if
                  m2b=m2a
                 else
                  if( side.eq.0 )then
                    m3a=n3a+0
                  else
                    m3a=n3b-0
                  end if
                  m3b=m3a
                 end if
                do i3=m3a,m3b
                do i2=m2a,m2b
                do i1=m1a,m1b
                 if( mask(i1,i2,i3) .gt. 0 ) then
                  a(i1,i2,i3)=0.
                  b(i1,i2,i3)=1.
                  c(i1,i2,i3)=0.
                 end if
                end do
                end do
                end do
              else if( orderOfAccuracy.eq.4 )then
                ! NOTE: peta-diagonal matrix always has "c" on the diagonal
                 m1a=n1a
                 m1b=n1b
                 m2a=n2a
                 m2b=n2b
                 m3a=n3a
                 m3b=n3b
                 if( axis.eq.0 )then
                  if( side.eq.0 )then
                    m1a=n1a+0
                  else
                    m1a=n1b-0
                  end if
                  m1b=m1a
                 else if( axis.eq.1 )then
                  if( side.eq.0 )then
                    m2a=n2a+0
                  else
                    m2a=n2b-0
                  end if
                  m2b=m2a
                 else
                  if( side.eq.0 )then
                    m3a=n3a+0
                  else
                    m3a=n3b-0
                  end if
                  m3b=m3a
                 end if
                do i3=m3a,m3b
                do i2=m2a,m2b
                do i1=m1a,m1b
                 if( mask(i1,i2,i3) .gt. 0 ) then
                  a(i1,i2,i3)=0.
                  b(i1,i2,i3)=0.
                  c(i1,i2,i3)=1.
                  d(i1,i2,i3)=0.
                  e(i1,i2,i3)=0.
                 end if
                 j1=i1+is1 ! (j1,j2,j3) is the 1st parallel ghost
                 j2=i2+is2
                 j3=i3+is3
                 if( mask(j1,j2,j3) .gt. 0 ) then
                  a(j1,j2,j3)=0.
                  b(j1,j2,j3)=0.
                  c(j1,j2,j3)=1.
                  d(j1,j2,j3)=0.
                  e(j1,j2,j3)=0.
                 end if
                end do
                end do
                end do
              end if

            else if( bc(side,axis).eq.extrapolation )then

            ! **********************************************************
            ! ******************** Dirichlet BC ************************
            ! **********************************************************

              if( orderOfAccuracy.eq.2 )then

                 m1a=n1a
                 m1b=n1b
                 m2a=n2a
                 m2b=n2b
                 m3a=n3a
                 m3b=n3b
                 if( axis.eq.0 )then
                  if( side.eq.0 )then
                    m1a=n1a+0
                  else
                    m1a=n1b-0
                  end if
                  m1b=m1a
                 else if( axis.eq.1 )then
                  if( side.eq.0 )then
                    m2a=n2a+0
                  else
                    m2a=n2b-0
                  end if
                  m2b=m2a
                 else
                  if( side.eq.0 )then
                    m3a=n3a+0
                  else
                    m3a=n3b-0
                  end if
                  m3b=m3a
                 end if
                do i3=m3a,m3b
                do i2=m2a,m2b
                do i1=m1a,m1b
                 if( mask(i1,i2,i3) .gt. 0 ) then
           a(i1,i2,i3)=0.
           b(i1,i2,i3)=1.
           c(i1,i2,i3)=0.
                 end if
                end do
                end do
                end do

              else if( orderOfAccuracy.eq.4 )then

                 l1a=n1a
                 l1b=n1b
                 l2a=n2a
                 l2b=n2b
                 l3a=n3a
                 l3b=n3b
                 if( axis.eq.0 )then
                  if( side.eq.0 )then
                    l1a=n1a+0
                  else
                    l1a=n1b-0
                  end if
                  l1b=l1a
                 else if( axis.eq.1 )then
                  if( side.eq.0 )then
                    l2a=n2a+0
                  else
                    l2a=n2b-0
                  end if
                  l2b=l2a
                 else
                  if( side.eq.0 )then
                    l3a=n3a+0
                  else
                    l3a=n3b-0
                  end if
                  l3b=l3a
                 end if
                 m1a=n1a
                 m1b=n1b
                 m2a=n2a
                 m2b=n2b
                 m3a=n3a
                 m3b=n3b
                 if( axis.eq.0 )then
                  if( side.eq.0 )then
                    m1a=n1a+1
                  else
                    m1a=n1b-1
                  end if
                  m1b=m1a
                 else if( axis.eq.1 )then
                  if( side.eq.0 )then
                    m2a=n2a+1
                  else
                    m2a=n2b-1
                  end if
                  m2b=m2a
                 else
                  if( side.eq.0 )then
                    m3a=n3a+1
                  else
                    m3a=n3b-1
                  end if
                  m3b=m3a
                 end if

                if( side.eq.0 )then
                 ! 1st ghost line on left:
                 !       [  c  d  e  a  b ]
                 !      i= -1 -0  1  2  3
                  if( bcOptionD.eq.0 )then
                   ! extrapolate
                   ! write(*,'(''+++++extrapFirstGhost [left]: l1='',6i3)') l1a,l1b,l2a,l2b,l3a,l3b
                    ! 1st ghost line on left:
                    !       [  c  d  e  a  b ]
                    !      i= -1 -0  1  2  3
                    if( orderOfExtrapD.eq.4 )then
                     do i3=l3a,l3b
                     do i2=l2a,l2b
                     do i1=l1a,l1b
                       c(i1,i2,i3)= 1.
                       d(i1,i2,i3)=-4.
                       e(i1,i2,i3)= 6.
                       a(i1,i2,i3)=-4.
                       b(i1,i2,i3)= 1.
                     end do
                     end do
                     end do
                    else if( orderOfExtrapD.eq.2 )then
                     do i3=l3a,l3b
                     do i2=l2a,l2b
                     do i1=l1a,l1b
                       c(i1,i2,i3)= 1.
                       d(i1,i2,i3)=-2.
                       e(i1,i2,i3)= 1.
                       a(i1,i2,i3)= 0.
                       b(i1,i2,i3)= 0.
                     end do
                     end do
                     end do
                    else
                      stop 63
                    end if
                  else if( bcOptionD.eq.1 )then
                    ! use eqn to 2nd order on the boundary
                    if( equationToSolve.ne.laplaceEquation )then
                      write(*,*) "Ogmg:LSB:ERROR: equation.ne.laplace 
     & bcOptionD=",bcOptionD
                      stop 5051
                    end if

                    do i3=l3a,l3b
                    do i2=l2a,l2b
                    do i1=l1a,l1b
                     j1=i1+is1 ! (j1,j2,j3) is the boundary point
                     j2=i2+is2
                     j3=i3+is3
                     if( mask(j1,j2,j3).gt.0 ) then
                    c(i1,i2,i3)= dx2i
                    d(i1,i2,i3)=-2.*dxm
                    e(i1,i2,i3)= dx2i
                    a(i1,i2,i3)= 0.
                    b(i1,i2,i3)= 0.
                     else if( mask(j1,j2,j3).lt.0 ) then
                         c(i1,i2,i3)= 1.
                         d(i1,i2,i3)=-4.
                         e(i1,i2,i3)= 6.
                         a(i1,i2,i3)=-4.
                         b(i1,i2,i3)= 1.
                     end if
                    end do
                    end do
                    end do
                  else if( bcOptionD.eq.2 )then
                     ! 1st ghost line on left:
                     !       [  b  c  d  e  a ]
                     !     i=[ -2 -1  0  1  2 ]
                     do i3=l3a,l3b
                     do i2=l2a,l2b
                     do i1=l1a,l1b
                        b(i1,i2,i3)= 0.
                        c(i1,i2,i3)= 1.
                        d(i1,i2,i3)=-2.
                        e(i1,i2,i3)= 1.
                        a(i1,i2,i3)= 0.
                     end do
                     end do
                     end do
                  else
                    stop 71
                  end if
                  ! boundary on left:
                  !       [  b  c  d  e  a ]
                  !      i= -1  0  1  2  3
                  do i3=m3a,m3b
                  do i2=m2a,m2b
                  do i1=m1a,m1b
                   if( mask(i1,i2,i3) .gt. 0 ) then
                  b(i1,i2,i3)=0.
                  c(i1,i2,i3)=1.
                  d(i1,i2,i3)=0.
                  e(i1,i2,i3)=0.
                  a(i1,i2,i3)=0.
                   end if
                  end do
                  end do
                  end do

                else ! side.eq.1

                  ! 1st ghost line on right:
                  !       [  d  e  a  b  c ]
                  !   i=n+[ -3 -2 -1  0  1 ]

                  if( bcOptionD.eq.0 )then
                    ! extrapolate
                   ! write(*,'(''+++++extrapFirstGhost [right]: l1='',6i3)') l1a,l1b,l2a,l2b,l3a,l3b
                    ! 1st ghost line on right:
                    !       [  d  e  a  b  c ]
                    !   i=n+[ -3 -2 -1  0  1 ]
                    if( orderOfExtrapD.eq.4 )then
                     do i3=l3a,l3b
                     do i2=l2a,l2b
                     do i1=l1a,l1b
                       d(i1,i2,i3)= 1.
                       e(i1,i2,i3)=-4.
                       a(i1,i2,i3)= 6.
                       b(i1,i2,i3)=-4.
                       c(i1,i2,i3)= 1.
                     end do
                     end do
                     end do
                    else if( orderOfExtrapD.eq.2 )then
                     do i3=l3a,l3b
                     do i2=l2a,l2b
                     do i1=l1a,l1b
                       d(i1,i2,i3)= 0.
                       e(i1,i2,i3)= 0.
                       a(i1,i2,i3)= 1.
                       b(i1,i2,i3)=-2.
                       c(i1,i2,i3)= 1.
                     end do
                     end do
                     end do
                    else
                      stop 64
                    end if

                  else if( bcOptionD.eq.1 )then
                    ! use eqn to 2nd order on the boundary for first ghost
                    if( equationToSolve.ne.laplaceEquation )then
                      write(*,'("Ogmg:LSB:ERROR: equation!=laplace")')
                      stop 5052
                    end if
                    do i3=l3a,l3b
                    do i2=l2a,l2b
                    do i1=l1a,l1b
                     j1=i1+is1 ! (j1,j2,j3) is the boundary point
                     j2=i2+is2
                     j3=i3+is3
                     if( mask(j1,j2,j3).gt.0 ) then
                    d(i1,i2,i3)= 0.
                    e(i1,i2,i3)= 0.
                    a(i1,i2,i3)= dx2i
                    b(i1,i2,i3)=-2.*dxm
                    c(i1,i2,i3)= dx2i
                     else if( mask(j1,j2,j3).lt.0 ) then
                         c(i1,i2,i3)= 1.
                         b(i1,i2,i3)=-4.
                         a(i1,i2,i3)= 6.
                         e(i1,i2,i3)=-4.
                         d(i1,i2,i3)= 1.
                     end if
                    end do
                    end do
                    end do
                  else if( bcOptionD.eq.2 )then
                    ! 1st ghost line on right:
                    !       [  e  a  b  c  d ]
                    !  i=n+ [ -2 -1  0  1  2 ]
                     do i3=l3a,l3b
                     do i2=l2a,l2b
                     do i1=l1a,l1b
                       e(i1,i2,i3)= 0.
                       a(i1,i2,i3)= 1.
                       b(i1,i2,i3)=-2.
                       c(i1,i2,i3)= 1.
                       d(i1,i2,i3)= 0.
                     end do
                     end do
                     end do
                  else
                    stop 6
                  end if
                  ! boundary on right:
                  !       [  e  a  b  c  d ]
                  !   i=n+[ -3 -2 -1  0  1 ]
                  do i3=m3a,m3b
                  do i2=m2a,m2b
                  do i1=m1a,m1b
                   if( mask(i1,i2,i3) .gt. 0 ) then
                  e(i1,i2,i3)=0.
                  a(i1,i2,i3)=0.
                  b(i1,i2,i3)=0.
                  c(i1,i2,i3)=1.
                  d(i1,i2,i3)=0.
                   end if
                  end do
                  end do
                  end do
                end if
              else
                write(*,*) 'lineSmoothBuild: invalid orderOfAccuracy=',
     & orderOfAccuracy
                stop 6
              end if

            else if( axis.eq.direction )then ! only apply Neumman BC if axis==direction

              ! ********************************************************
              ! *****************NEUMANN RECTANGULAR *******************
              ! ********************************************************
  	      ! apply a neumann or mixed BC on this side.

              !    a0*u + a1*u.n = f
                   a0=bcData(0,side,axis)
              a1=bcData(1,side,axis)
              if( a0.eq.0. .and. a1.eq.0. )then
                write(*,*) 'lineSmoothBuild:ERROR: a0 and a1 are both 
     & zero'
                write(*,*) 'side,axis,a0,a1,dxi=',side,axis,a0,a1,dxi
                stop 5
              end if 
              if( orderOfAccuracy.eq.2 )then

                m1a=n1a
                m1b=n1b
                m2a=n2a
                m2b=n2b
                m3a=n3a
                m3b=n3b
                if( axis.eq.0 )then
                 if( side.eq.0 )then
                   m1a=n1a+0
                 else
                   m1a=n1b-0
                 end if
                 m1b=m1a
                else if( axis.eq.1 )then
                 if( side.eq.0 )then
                   m2a=n2a+0
                 else
                   m2a=n2b-0
                 end if
                 m2b=m2a
                else
                 if( side.eq.0 )then
                   m3a=n3a+0
                 else
                   m3a=n3b-0
                 end if
                 m3b=m3a
                end if

               if( side.eq.0 )then
                 !       [  b  c  a  ]
                 !         -1  0  1  
                do i3=m3a,m3b
                do i2=m2a,m2b
                do i1=m1a,m1b
                  j1=i1+is1 ! (j1,j2,j3) is the boundary point
                  j2=i2+is2
                  j3=i3+is3
                  if( mask(j1,j2,j3).gt.0 ) then
             b(i1,i2,i3)= a1*dxi*.5
             c(i1,i2,i3)= a0
             a(i1,i2,i3)=-a1*dxi*.5
                  else if( mask(j1,j2,j3).lt.0 )then
                      b(i1,i2,i3)= 1.
                      c(i1,i2,i3)=-2.
                      a(i1,i2,i3)= 1.
                  end if
                end do
                end do
                end do
               else
                 !       [  c  a  b  ]
                 !         -1  0  1  
                do i3=m3a,m3b
                do i2=m2a,m2b
                do i1=m1a,m1b
                  j1=i1+is1 ! (j1,j2,j3) is the boundary point
                  j2=i2+is2
                  j3=i3+is3
                  if( mask(j1,j2,j3).gt.0 ) then
            c(i1,i2,i3)=-a1*dxi*.5
            a(i1,i2,i3)= a0
            b(i1,i2,i3)= a1*dxi*.5
                  else if( mask(j1,j2,j3).lt.0 )then
                      c(i1,i2,i3)= 1.
                      a(i1,i2,i3)=-2.
                      b(i1,i2,i3)= 1.
                  end if
                end do
                end do
                end do
               end if

              else if( orderOfAccuracy.eq.4 )then

                l1a=n1a
                l1b=n1b
                l2a=n2a
                l2b=n2b
                l3a=n3a
                l3b=n3b
                if( axis.eq.0 )then
                 if( side.eq.0 )then
                   l1a=n1a+0
                 else
                   l1a=n1b-0
                 end if
                 l1b=l1a
                else if( axis.eq.1 )then
                 if( side.eq.0 )then
                   l2a=n2a+0
                 else
                   l2a=n2b-0
                 end if
                 l2b=l2a
                else
                 if( side.eq.0 )then
                   l3a=n3a+0
                 else
                   l3a=n3b-0
                 end if
                 l3b=l3a
                end if
                m1a=n1a
                m1b=n1b
                m2a=n2a
                m2b=n2b
                m3a=n3a
                m3b=n3b
                if( axis.eq.0 )then
                 if( side.eq.0 )then
                   m1a=n1a+1
                 else
                   m1a=n1b-1
                 end if
                 m1b=m1a
                else if( axis.eq.1 )then
                 if( side.eq.0 )then
                   m2a=n2a+1
                 else
                   m2a=n2b-1
                 end if
                 m2b=m2a
                else
                 if( side.eq.0 )then
                   m3a=n3a+1
                 else
                   m3a=n3b-1
                 end if
                 m3b=m3a
                end if

               if( side.eq.0 )then
                 ! 2nd ghost line on left:
                 !       [  c  d  e  a  b ]
                 !     i=[ -2 -1  0  1  2 ]
                if( bcOptionN.eq.0 )then
                 ! extrapolate 2nd ghost
                 do i3=l3a,l3b
                 do i2=l2a,l2b
                 do i1=l1a,l1b
                  ! *wdh* 110309: 
                    if( orderOfExtrapN.eq.4 )then
                      c(i1,i2,i3)= 1.
                      d(i1,i2,i3)=-4.
                      e(i1,i2,i3)= 6.
                      a(i1,i2,i3)=-4.
                      b(i1,i2,i3)= 1.
                    else if( orderOfExtrapN.eq.5 )then
                      ! 5-th order extrap (NOTE: this does not fit entirely in the matrix so we need a residual)
                      c(i1,i2,i3)=  1.
                      d(i1,i2,i3)= -5.
                      e(i1,i2,i3)= 10.
                      a(i1,i2,i3)=-10.
                      b(i1,i2,i3)=  5.
                    else if( orderOfExtrapN.eq.2 )then
                      c(i1,i2,i3)= 0.
                      d(i1,i2,i3)= 1.
                      e(i1,i2,i3)=-2.
                      a(i1,i2,i3)= 1.
                      b(i1,i2,i3)= 0.
                    else
                      stop 18520
                    end if
	           ! c(i1,i2,i3)= 1.
	           ! d(i1,i2,i3)=-4.
	           ! e(i1,i2,i3)= 6.
	           ! a(i1,i2,i3)=-4.
	           ! b(i1,i2,i3)= 1.
                 end do
                 end do
                 end do
                else if( bcOptionN.eq.1 )then
                 ! u.xxx = 
                  if( equationToSolve.ne.laplaceEquation )then
                    write(*,'("Ogmg:LSB:ERROR: equation!=laplace")')
                    write(*,'("equationToSolve=",i2)') equationToSolve
                    write(*,'("gridType=",i2)') gridType
                    write(*,'("sparseStencil=",i2)') sparseStencil
                    ! stop 5053
                  end if
                  nsign = 2*side-1
                  diag=(a0/(a1*nsign))*dx(axis)  ! u_xx * dx^3
                  write(*,'('' neumannAndEquationRectangular: a0,a1,
     & diag='',3f6.2)') a0,a1,diag
                  do j3=l3a,l3b
                  do j2=l2a,l2b
                  do j1=l1a,l1b
                   i1=j1+2*is1 ! (i1,i2,i3) is the boundary point
                   i2=j2+2*is2 ! (j1,j2,j3) is the 2nd ghost line
                   i3=j3+2*is3
                   if( mask(i1,i2,i3).gt.0 ) then
                     ! This is the operator for urrr*dr^3
                     c(j1,j2,j3)=-.5
                     d(j1,j2,j3)= 1.  + diag
                     e(j1,j2,j3)=   -2.*diag
                     a(j1,j2,j3)=-1.  + diag
                     b(j1,j2,j3)= .5
                   else if( mask(i1,i2,i3).lt.0 ) then
                       b(j1,j2,j3)= 1.
                       c(j1,j2,j3)=-4.
                       d(j1,j2,j3)= 6.
                       e(j1,j2,j3)=-4.
                       a(j1,j2,j3)= 1.
                   end if
                  end do
                  end do
                  end do
!$$$                 beginLoop(l1a,l1b,l2a,l2b,l3a,l3b)
!$$$                  j1=i1+is1 ! (j1,j2,j3) is the boundary point
!$$$                  j2=i2+is2
!$$$                  j3=i3+is3
!$$$  	          if( mask(j1,j2,j3).gt.0 ) then
!$$$	           c(i1,i2,i3)=-1.
!$$$	           d(i1,i2,i3)= 2.
!$$$	           e(i1,i2,i3)= 0.
!$$$	           a(i1,i2,i3)=-2.
!$$$	           b(i1,i2,i3)= 1.
!$$$                  else if( mask(j1,j2,j3).lt.0 ) then
!$$$                    fillExtrapolation4(i1,i2,i3,b,c,d,e,a)
!$$$                  end if
!$$$                 endLoop()

                else if( bcOptionN.eq.2 )then
                   ! 2nd ghost line on left:
                   !       [  c  d  e  a  b ]
                   !     i=[ -2 -1  0  1  2 ]
                   ! *wdh* 11023 - fixed (was setting symmetry on first ghost)
                   do i3=l3a,l3b
                   do i2=l2a,l2b
                   do i1=l1a,l1b
                      c(i1,i2,i3)= 1.
                      d(i1,i2,i3)= 0.
                      e(i1,i2,i3)= 0.
                      a(i1,i2,i3)= 0.
                      b(i1,i2,i3)=-1.
                   end do
                   end do
                   end do
                else if( bcOptionN.eq.3 )then
                  ! mixed BC for both first and second ghost lines

                  ! *new* 110308 -- apply real 2nd-order approximations on two ghost 
                  ! write(*,'(">>>lineSmoothBuild: 2nd order Neumann/mixed on TWO lines")')

                   ! write(*,'("lineSmoothOpt:mixedToSecondOrder: side,axis=",2i2, " a0,a1=",2f6.2)') side,axis,a0,a1
                   is = 1-2*side
                   do i3=m3a,m3b
                   do i2=m2a,m2b
                   do i1=m1a,m1b
                    j1=i1+is1 ! (j1,j2,j3) is the boundary point
                    j2=i2+is2
                    j3=i3+is3
                    k1=i1-is1 ! (k1,k2,k3) is the 2nd ghost line
                    k2=i2-is2
                    k3=i3-is3
                    if( mask(j1,j2,j3).gt.0 ) then
                       t1 = (-is*a1)/(2.*dx(axis))
                       ! 1st ghost line on left:
                       !       [  b  c  d  e  a ]
                       !     i=[ -2 -1  0  1  2 ]
                       b(i1,i2,i3)= 0.
                       c(i1,i2,i3)= -t1
                       d(i1,i2,i3)= a0
                       e(i1,i2,i3)=  t1
                       a(i1,i2,i3)= 0.
                       ! Fill second ghost line on left
                       ! 2nd ghost line on left:
                       !       [  c  d  e  a  b ]
                       !     i=[ -2 -1  0  1  2 ]
                       c(k1,k2,k3)= -t1*.5
                       d(k1,k2,k3)= 0.
                       e(k1,k2,k3)= a0
                       a(k1,k2,k3)= 0.
                       b(k1,k2,k3)=  t1*.5
                      ! write(*,'("lineSmoothBuild: i1,i2=",2i3," [B C A]=",3e10.2)') i1,i2,B(i1,i2,i3),C(i1,i2,i3),A(i1,i2,i3)
                    else if( mask(j1,j2,j3).lt.0 )then
                     ! What order should this be?
                      ! 1st ghost line on left: -- extrap to order=2 -- this should be fine for lower levels
                        if( 2.eq.4 )then
                          b(i1,i2,i3)= 1.
                          c(i1,i2,i3)=-4.
                          d(i1,i2,i3)= 6.
                          e(i1,i2,i3)=-4.
                          a(i1,i2,i3)= 1.
                        else if( 2.eq.5 )then
                          ! 5-th order extrap (NOTE: this does not fit entirely in the matrix so we need a residual)
                          b(i1,i2,i3)=  1.
                          c(i1,i2,i3)= -5.
                          d(i1,i2,i3)= 10.
                          e(i1,i2,i3)=-10.
                          a(i1,i2,i3)=  5.
                        else if( 2.eq.2 )then
                          b(i1,i2,i3)= 0.
                          c(i1,i2,i3)= 1.
                          d(i1,i2,i3)=-2.
                          e(i1,i2,i3)= 1.
                          a(i1,i2,i3)= 0.
                        else
                          stop 18520
                        end if
                      ! 2nd ghost on left: -extrap to order 4 (this is like D_0^2 when D+D-u=0)
                        c(k1,k2,k3)= 1.
                        d(k1,k2,k3)=-4.
                        e(k1,k2,k3)= 6.
                        a(k1,k2,k3)=-4.
                        b(k1,k2,k3)= 1.
                    end if
                   end do
                   end do
                   end do
                else
                  stop 12
                end if
                 ! 1st ghost line on left:
                 !       [  b  c  d  e  a ]
                 !     i=[ -2 -1  0  1  2 ]
                if( bcOptionN.eq.0 .or. bcOptionN.eq.1 )then
                 do i3=m3a,m3b
                 do i2=m2a,m2b
                 do i1=m1a,m1b
                  j1=i1+is1 ! (j1,j2,j3) is the boundary point
                  j2=i2+is2
                  j3=i3+is3
                  if( mask(j1,j2,j3).gt.0 ) then
                 b(i1,i2,i3)=-a1*dxi/12.
                 c(i1,i2,i3)= a1*dxi*8./12.
                 d(i1,i2,i3)= a0
                 e(i1,i2,i3)=-a1*dxi*8./12.
                 a(i1,i2,i3)= a1*dxi/12.
                  else if( mask(j1,j2,j3).lt.0 ) then
                      b(i1,i2,i3)= 1.
                      c(i1,i2,i3)=-4.
                      d(i1,i2,i3)= 6.
                      e(i1,i2,i3)=-4.
                      a(i1,i2,i3)= 1.
                  end if
                 end do
                 end do
                 end do
                else if( bcOptionN.eq.2 ) then
                   ! 1st ghost line on left:
                   !       [  b  c  d  e  a ]
                   !     i=[ -2 -1  0  1  2 ]
                   do i3=m3a,m3b
                   do i2=m2a,m2b
                   do i1=m1a,m1b
                      b(i1,i2,i3)= 0.
                      c(i1,i2,i3)= 1.
                      d(i1,i2,i3)= 0.
                      e(i1,i2,i3)=-1.
                      a(i1,i2,i3)= 0.
                   end do
                   end do
                   end do
                else if( bcOptionN.eq.3 )then
                  ! mixed BC already done
                else
                  stop 14
                end if

               else ! side==1

                 ! 2nd ghost line on right:
                 !       [  d  e  a  b  c ]
                 !   i=n+[ -2 -1  0  1  2 ]
                 if( bcOptionN.eq.0 )then
                  ! extrapolate 2nd ghost
                  do i3=l3a,l3b
                  do i2=l2a,l2b
                  do i1=l1a,l1b
                     if( orderOfExtrapN.eq.4 )then
                       c(i1,i2,i3)= 1.
                       b(i1,i2,i3)=-4.
                       a(i1,i2,i3)= 6.
                       e(i1,i2,i3)=-4.
                       d(i1,i2,i3)= 1.
                     else if( orderOfExtrapN.eq.5 )then
                       ! 5-th order extrap (NOTE: this does not fit entirely in the matrix so we need a residual)
                       c(i1,i2,i3)=  1.
                       b(i1,i2,i3)= -5.
                       a(i1,i2,i3)= 10.
                       e(i1,i2,i3)=-10.
                       d(i1,i2,i3)=  5.
                     else if( orderOfExtrapN.eq.2 )then
                       c(i1,i2,i3)= 0.
                       b(i1,i2,i3)= 1.
                       a(i1,i2,i3)=-2.
                       e(i1,i2,i3)= 1.
                       d(i1,i2,i3)= 0.
                     else
                       stop 18520
                     end if
	           ! d(i1,i2,i3)= 1.
	           ! e(i1,i2,i3)=-4.
	           ! a(i1,i2,i3)= 6.
	           ! b(i1,i2,i3)=-4.
	           ! c(i1,i2,i3)= 1.
                  end do
                  end do
                  end do
                 else if( bcOptionN.eq.1 )then
                  ! u.xxx = 
                   if( equationToSolve.ne.laplaceEquation )then
                     write(*,'("Ogmg:LSB:ERROR: equation!=laplace")')
                     write(*,'("equationToSolve=",i2)') equationToSolve
                     write(*,'("gridType=",i2)') gridType
                     write(*,'("sparseStencil=",i2)') sparseStencil
                     ! stop 5053
                   end if
                   nsign = 2*side-1
                   diag=(a0/(a1*nsign))*dx(axis)  ! u_xx * dx^3
                   write(*,'('' neumannAndEquationRectangular: a0,a1,
     & diag='',3f6.2)') a0,a1,diag
                   do j3=l3a,l3b
                   do j2=l2a,l2b
                   do j1=l1a,l1b
                    i1=j1+2*is1 ! (i1,i2,i3) is the boundary point
                    i2=j2+2*is2 ! (j1,j2,j3) is the 2nd ghost line
                    i3=j3+2*is3
                    if( mask(i1,i2,i3).gt.0 ) then
                      ! This is the operator for urrr*dr^3
                      d(j1,j2,j3)=-.5
                      e(j1,j2,j3)= 1.  + diag
                      a(j1,j2,j3)=   -2.*diag
                      b(j1,j2,j3)=-1.  + diag
                      c(j1,j2,j3)= .5
                    else if( mask(i1,i2,i3).lt.0 ) then
                        b(j1,j2,j3)= 1.
                        c(j1,j2,j3)=-4.
                        d(j1,j2,j3)= 6.
                        e(j1,j2,j3)=-4.
                        a(j1,j2,j3)= 1.
                    end if
                   end do
                   end do
                   end do

!$$$                  beginLoop(l1a,l1b,l2a,l2b,l3a,l3b)
!$$$                   j1=i1+is1 ! (j1,j2,j3) is the boundary point
!$$$                   j2=i2+is2
!$$$                   j3=i3+is3
!$$$  	           if( mask(j1,j2,j3).gt.0 ) then
!$$$	            d(i1,i2,i3)=-1.
!$$$	            e(i1,i2,i3)= 2.
!$$$	            a(i1,i2,i3)= 0.
!$$$	            b(i1,i2,i3)=-2.
!$$$	            c(i1,i2,i3)= 1.
!$$$                   else if( mask(j1,j2,j3).lt.0 ) then
!$$$                     fillExtrapolation4(i1,i2,i3,b,c,d,e,a)
!$$$                   end if
!$$$                  endLoop()

                 else if( bcOptionN.eq.2 )then
                   ! 2nd ghost line on right:
                   !       [  d  e  a  b  c ]
                   !   i=n+[ -2 -1  0  1  2 ]
                   do i3=l3a,l3b
                   do i2=l2a,l2b
                   do i1=l1a,l1b
                      d(i1,i2,i3)=-1.
                      e(i1,i2,i3)= 0.
                      a(i1,i2,i3)= 0.
                      b(i1,i2,i3)= 0.
                      c(i1,i2,i3)= 1.
                   end do
                   end do
                   end do
                 else if( bcOptionN.eq.3 )then
                   ! mixed BC for both first and second ghost lines

                  ! *new* 110308 -- apply real 2nd-order approximations on two ghost 
                  ! write(*,'(">>>lineSmoothBuild: 2nd order Neumann/mixed on TWO lines")')

                    ! write(*,'("lineSmoothOpt:mixedToSecondOrder: side,axis=",2i2, " a0,a1=",2f6.2)') side,axis,a0,a1
                    is = 1-2*side
                    do i3=m3a,m3b
                    do i2=m2a,m2b
                    do i1=m1a,m1b
                     j1=i1+is1 ! (j1,j2,j3) is the boundary point
                     j2=i2+is2
                     j3=i3+is3
                     k1=i1-is1 ! (k1,k2,k3) is the 2nd ghost line
                     k2=i2-is2
                     k3=i3-is3
                     if( mask(j1,j2,j3).gt.0 ) then
                        t1 = (-is*a1)/(2.*dx(axis))
                        ! 1st ghost line on right:
                        !       [  e  a  b  c  d ]
                        !  i=n+ [ -2 -1  0  1  2 ]
                        e(i1,i2,i3)= 0.
                        a(i1,i2,i3)= -t1
                        b(i1,i2,i3)= a0
                        c(i1,i2,i3)=  t1
                        d(i1,i2,i3)= 0.
                        ! 2nd ghost line on right:
                        !       [  d  e  a  b  c ]
                        !   i=n+[ -2 -1  0  1  2 ]
                        d(k1,k2,k3)= -t1*.5
                        e(k1,k2,k3)=  0.
                        a(k1,k2,k3)= a0
                        b(k1,k2,k3)=  0.
                        c(k1,k2,k3)=  t1*.5
                       ! write(*,'("lineSmoothBuild: i1,i2=",2i3," [B C A]=",3e10.2)') i1,i2,B(i1,i2,i3),C(i1,i2,i3),A(i1,i2,i3)
                     else if( mask(j1,j2,j3).lt.0 )then
                      ! What order should this be?
                       ! 1st ghost line on right: -- extrap to order=2 -- this should be fine for lower levels
                       ! note: reverse order since we extrap last ghost
                         if( 2.eq.4 )then
                           d(i1,i2,i3)= 1.
                           c(i1,i2,i3)=-4.
                           b(i1,i2,i3)= 6.
                           a(i1,i2,i3)=-4.
                           e(i1,i2,i3)= 1.
                         else if( 2.eq.5 )then
                           ! 5-th order extrap (NOTE: this does not fit entirely in the matrix so we need a residual)
                           d(i1,i2,i3)=  1.
                           c(i1,i2,i3)= -5.
                           b(i1,i2,i3)= 10.
                           a(i1,i2,i3)=-10.
                           e(i1,i2,i3)=  5.
                         else if( 2.eq.2 )then
                           d(i1,i2,i3)= 0.
                           c(i1,i2,i3)= 1.
                           b(i1,i2,i3)=-2.
                           a(i1,i2,i3)= 1.
                           e(i1,i2,i3)= 0.
                         else
                           stop 18520
                         end if
                       ! 2nd ghost on right:
                       ! note: reverse order of c,d,e,a,b
                         c(k1,k2,k3)= 1.
                         b(k1,k2,k3)=-4.
                         a(k1,k2,k3)= 6.
                         e(k1,k2,k3)=-4.
                         d(k1,k2,k3)= 1.
                     end if
                    end do
                    end do
                    end do
                 else
                   stop 12
                 end if

                 ! 1st ghost line on right:
                 !       [  e  a  b  c  d ]
                 !  i=n+ [ -2 -1  0  1  2 ]
                 if( bcOptionN.eq.0 .or. bcOptionN.eq.1 )then
                  do i3=m3a,m3b
                  do i2=m2a,m2b
                  do i1=m1a,m1b
                   j1=i1+is1 ! (j1,j2,j3) is the boundary point
                   j2=i2+is2
                   j3=i3+is3
                   if( mask(j1,j2,j3).gt.0 ) then
                  e(i1,i2,i3)= a1*dxi/12.
                  a(i1,i2,i3)=-a1*dxi*8./12.
                  b(i1,i2,i3)= a0
                  c(i1,i2,i3)= a1*dxi*8./12.
                  d(i1,i2,i3)=-a1*dxi/12.
                   else if( mask(j1,j2,j3).lt.0 ) then
                       d(i1,i2,i3)= 1.
                       c(i1,i2,i3)=-4.
                       b(i1,i2,i3)= 6.
                       a(i1,i2,i3)=-4.
                       e(i1,i2,i3)= 1.
                   end if
                  end do
                  end do
                  end do
                 else if( bcOptionN.eq.2 ) then
                   ! 1st ghost line on right:
                   !       [  e  a  b  c  d ]
                   !  i=n+ [ -2 -1  0  1  2 ]
                    do i3=m3a,m3b
                    do i2=m2a,m2b
                    do i1=m1a,m1b
                      e(i1,i2,i3)= 0.
                      a(i1,i2,i3)=-1.
                      b(i1,i2,i3)= 0.
                      c(i1,i2,i3)= 1.
                      d(i1,i2,i3)= 0.
                    end do
                    end do
                    end do
                 else if( bcOptionN.eq.3 )then
                   ! mixed BC alread done
                  else
                   stop 14
                 end if
               end if  ! side

              else
                write(*,*) 'lineSmoothBuild: invalid orderOfAccuracy=',
     & orderOfAccuracy
                stop 6
              end if

            end if
          end if

        end do ! end do side
      
      else

        ! ================================================================
        ! ========== Curvilinear and variable coefficients ===============
        ! ================================================================

        if( orderOfAccuracy.eq.2 )then
         do i3=n3a,n3b
         do i2=n2a,n2b
         do i1=n1a,n1b
        if( mask(i1,i2,i3) .gt. 0 ) then
          a(i1,i2,i3)=coeff(mdm1,i1,i2,i3)
          b(i1,i2,i3)=coeff(md  ,i1,i2,i3)
          c(i1,i2,i3)=coeff(mdp1,i1,i2,i3)
          else
          a(i1,i2,i3)=0.
          b(i1,i2,i3)=1.
          c(i1,i2,i3)=0.
        end if
         end do
         end do
         end do

        else if( orderOfAccuracy.eq.4 )then

         do i3=n3a,n3b
         do i2=n2a,n2b
         do i1=n1a,n1b
        if( mask(i1,i2,i3) .gt. 0 ) then
          a(i1,i2,i3)=coeff(mdm2,i1,i2,i3)
          b(i1,i2,i3)=coeff(mdm1,i1,i2,i3)
          c(i1,i2,i3)=coeff(md  ,i1,i2,i3)
          d(i1,i2,i3)=coeff(mdp1,i1,i2,i3)
          e(i1,i2,i3)=coeff(mdp2,i1,i2,i3)
          else
          a(i1,i2,i3)=0.
          b(i1,i2,i3)=0.
          c(i1,i2,i3)=1.
          d(i1,i2,i3)=0.
          e(i1,i2,i3)=0.
        end if
         end do
         end do
         end do

        else
          write(*,*) 'lineSmoothBuild: invalid orderOfAccuracy=',
     & orderOfAccuracy
          stop 6
        end if

        ! fix up boundary conditions 
        axis=direction
        is1=0
        is2=0
        is3=0
        do side=0,1
          if( axis.eq.0 )then
            is1=1-2*side
          else if( axis.eq.1 )then
            is2=1-2*side
          else
            is3=1-2*side
          end if

          if( bc(side,axis).eq.parallelGhostBoundary )then

            ! parallel ghost boundaries get a dirichlet condition
            if( orderOfAccuracy.eq.2 )then
               m1a=n1a
               m1b=n1b
               m2a=n2a
               m2b=n2b
               m3a=n3a
               m3b=n3b
               if( axis.eq.0 )then
                if( side.eq.0 )then
                  m1a=n1a+0
                else
                  m1a=n1b-0
                end if
                m1b=m1a
               else if( axis.eq.1 )then
                if( side.eq.0 )then
                  m2a=n2a+0
                else
                  m2a=n2b-0
                end if
                m2b=m2a
               else
                if( side.eq.0 )then
                  m3a=n3a+0
                else
                  m3a=n3b-0
                end if
                m3b=m3a
               end if
              do i3=m3a,m3b
              do i2=m2a,m2b
              do i1=m1a,m1b
               if( mask(i1,i2,i3) .gt. 0 ) then
                a(i1,i2,i3)=0.
                b(i1,i2,i3)=1.
                c(i1,i2,i3)=0.
               end if
              end do
              end do
              end do
            else if( orderOfAccuracy.eq.4 )then
              ! NOTE: peta-diagonal matrix always has "c" on the diagonal
               m1a=n1a
               m1b=n1b
               m2a=n2a
               m2b=n2b
               m3a=n3a
               m3b=n3b
               if( axis.eq.0 )then
                if( side.eq.0 )then
                  m1a=n1a+0
                else
                  m1a=n1b-0
                end if
                m1b=m1a
               else if( axis.eq.1 )then
                if( side.eq.0 )then
                  m2a=n2a+0
                else
                  m2a=n2b-0
                end if
                m2b=m2a
               else
                if( side.eq.0 )then
                  m3a=n3a+0
                else
                  m3a=n3b-0
                end if
                m3b=m3a
               end if
              do i3=m3a,m3b
              do i2=m2a,m2b
              do i1=m1a,m1b
               if( mask(i1,i2,i3) .gt. 0 ) then
                a(i1,i2,i3)=0.
                b(i1,i2,i3)=0.
                c(i1,i2,i3)=1.
                d(i1,i2,i3)=0.
                e(i1,i2,i3)=0.
               end if
               j1=i1+is1 ! (j1,j2,j3) is the 1st parallel ghost
               j2=i2+is2
               j3=i3+is3
               if( mask(j1,j2,j3) .gt. 0 ) then
                a(j1,j2,j3)=0.
                b(j1,j2,j3)=0.
                c(j1,j2,j3)=1.
                d(j1,j2,j3)=0.
                e(j1,j2,j3)=0.
               end if
              end do
              end do
              end do
            end if

          else if( bc(side,direction).gt.0 .and. bc(side,direction)
     & .eq.extrapolation )then

            ! ******************************************************************
            ! **********************DIRICHLET VAR*******************************
            ! ******************************************************************

            ! Add extrapolation BC's on "dirichlet" BC's
            if( orderOfAccuracy.eq.4 )then

               l1a=n1a
               l1b=n1b
               l2a=n2a
               l2b=n2b
               l3a=n3a
               l3b=n3b
               if( axis.eq.0 )then
                if( side.eq.0 )then
                  l1a=n1a+0
                else
                  l1a=n1b-0
                end if
                l1b=l1a
               else if( axis.eq.1 )then
                if( side.eq.0 )then
                  l2a=n2a+0
                else
                  l2a=n2b-0
                end if
                l2b=l2a
               else
                if( side.eq.0 )then
                  l3a=n3a+0
                else
                  l3a=n3b-0
                end if
                l3b=l3a
               end if
      ! write(*,'(''+++++lineSmoothOpt: bcOptionD,l1='',i2,2x,6i3)') bcOptionD,l1a,l1b,l2a,l2b,l3a,l3b

              if( side.eq.0 )then
               ! 1st ghost line on left:
               !       [  c  d  e  a  b ]
               !      i= -1 -0  1  2  3
                if( bcOptionD.eq.0 )then
                 ! extrapolate
                  ! write(*,'(''+++++extrapFirstGhost [left]: l1='',6i3)') l1a,l1b,l2a,l2b,l3a,l3b
                   ! 1st ghost line on left:
                   !       [  c  d  e  a  b ]
                   !      i= -1 -0  1  2  3
                   if( orderOfExtrapD.eq.4 )then
                    do i3=l3a,l3b
                    do i2=l2a,l2b
                    do i1=l1a,l1b
                      c(i1,i2,i3)= 1.
                      d(i1,i2,i3)=-4.
                      e(i1,i2,i3)= 6.
                      a(i1,i2,i3)=-4.
                      b(i1,i2,i3)= 1.
                    end do
                    end do
                    end do
                   else if( orderOfExtrapD.eq.2 )then
                    do i3=l3a,l3b
                    do i2=l2a,l2b
                    do i1=l1a,l1b
                      c(i1,i2,i3)= 1.
                      d(i1,i2,i3)=-2.
                      e(i1,i2,i3)= 1.
                      a(i1,i2,i3)= 0.
                      b(i1,i2,i3)= 0.
                    end do
                    end do
                    end do
                   else
                     stop 63
                   end if
                else if( bcOptionD.eq.1 )then
                  ! use eqn to 2nd order on the boundary
                  ! **** we could store the eqn coeff's in coeff
                  !  
                  !  20 21 22 23 24
                  !  15 16 17 18 19
                  !  10 11 12 13 14
                  !   5  6  7  8  9
                  !   0  1  2  3  4
                  !
                  ! The 2nd-order stencil is shifted to the right or left in the 4th order stencil
                  do i3=l3a,l3b
                  do i2=l2a,l2b
                  do i1=l1a,l1b
                   j1=i1+is1 ! (j1,j2,j3) is the boundary point
                   j2=i2+is2
                   j3=i3+is3
                   if( mask(j1,j2,j3).gt.0 ) then
                  c(i1,i2,i3)=coeff(mdm1+ms2,i1,i2,i3)
                  d(i1,i2,i3)=coeff(md  +ms2,i1,i2,i3)
                  e(i1,i2,i3)=coeff(mdp1+ms2,i1,i2,i3)
                  a(i1,i2,i3)=0.
                  b(i1,i2,i3)=0.
                    ! write(*,'('' lineSmooth:BC:EQN2:i1,i2,mdm1,md,mdp1,c,d,e='',5i3,3e10.2)') i1,i2,mdm1,md,mdp1,c(i1,i2,i3),d(i1,i2,i3),e(i1,i2,i3)
                   else if( mask(j1,j2,j3).lt.0 ) then
                       c(i1,i2,i3)= 1.
                       d(i1,i2,i3)=-4.
                       e(i1,i2,i3)= 6.
                       a(i1,i2,i3)=-4.
                       b(i1,i2,i3)= 1.
                   end if
                  end do
                  end do
                  end do
                else if( bcOptionD.eq.2 )then
                   ! 1st ghost line on left:
                   !       [  b  c  d  e  a ]
                   !     i=[ -2 -1  0  1  2 ]
                   do i3=l3a,l3b
                   do i2=l2a,l2b
                   do i1=l1a,l1b
                      b(i1,i2,i3)= 0.
                      c(i1,i2,i3)= 1.
                      d(i1,i2,i3)=-2.
                      e(i1,i2,i3)= 1.
                      a(i1,i2,i3)= 0.
                   end do
                   end do
                   end do
                else
                  stop 6
                end if

              else  ! side==1 :

                ! 1st ghost line on right:
                !       [  d  e  a  b  c ]
                !   i=n+[ -3 -2 -1  0  1 ]
                if( bcOptionD.eq.0 )then
                 ! extrapolate
                  ! write(*,'(''+++++extrapFirstGhost [right]: l1='',6i3)') l1a,l1b,l2a,l2b,l3a,l3b
                   ! 1st ghost line on right:
                   !       [  d  e  a  b  c ]
                   !   i=n+[ -3 -2 -1  0  1 ]
                   if( orderOfExtrapD.eq.4 )then
                    do i3=l3a,l3b
                    do i2=l2a,l2b
                    do i1=l1a,l1b
                      d(i1,i2,i3)= 1.
                      e(i1,i2,i3)=-4.
                      a(i1,i2,i3)= 6.
                      b(i1,i2,i3)=-4.
                      c(i1,i2,i3)= 1.
                    end do
                    end do
                    end do
                   else if( orderOfExtrapD.eq.2 )then
                    do i3=l3a,l3b
                    do i2=l2a,l2b
                    do i1=l1a,l1b
                      d(i1,i2,i3)= 0.
                      e(i1,i2,i3)= 0.
                      a(i1,i2,i3)= 1.
                      b(i1,i2,i3)=-2.
                      c(i1,i2,i3)= 1.
                    end do
                    end do
                    end do
                   else
                     stop 64
                   end if
                else if( bcOptionD.eq.1 )then
                  ! use eqn to 2nd order on the boundary
                  ! **** we could store the eqn coeff's in coeff
                  do i3=l3a,l3b
                  do i2=l2a,l2b
                  do i1=l1a,l1b
                   j1=i1+is1 ! (j1,j2,j3) is the boundary point
                   j2=i2+is2
                   j3=i3+is3
                   if( mask(j1,j2,j3).gt.0 ) then
                  d(i1,i2,i3)= 0.
                  e(i1,i2,i3)= 0.
                  a(i1,i2,i3)=coeff(mdm1-ms2,i1,i2,i3)
                  b(i1,i2,i3)=coeff(md  -ms2,i1,i2,i3)
                  c(i1,i2,i3)=coeff(mdp1-ms2,i1,i2,i3)
                    ! write(*,'('' lineSmooth:BC:EQN2:i1,i2,mdm1,md,mdp1,a,b,c='',5i3,3e10.2)') i1,i2,mdm1,md,mdp1,a(i1,i2,i3),b(i1,i2,i3),c(i1,i2,i3)
                    ! write(*,'(" coeff on ghost=",(20f5.2)') (coeff(mm,i1,i2,i3),mm=0,ndc-1)

                   else if( mask(j1,j2,j3).lt.0 ) then
                       c(i1,i2,i3)= 1.
                       b(i1,i2,i3)=-4.
                       a(i1,i2,i3)= 6.
                       e(i1,i2,i3)=-4.
                       d(i1,i2,i3)= 1.
                   end if
                  end do
                  end do
                  end do
                 else if( bcOptionD.eq.2 )then
                   ! 1st ghost line on right:
                   !       [  e  a  b  c  d ]
                   !  i=n+ [ -2 -1  0  1  2 ]
                    do i3=l3a,l3b
                    do i2=l2a,l2b
                    do i1=l1a,l1b
                      e(i1,i2,i3)= 0.
                      a(i1,i2,i3)= 1.
                      b(i1,i2,i3)=-2.
                      c(i1,i2,i3)= 1.
                      d(i1,i2,i3)= 0.
                    end do
                    end do
                    end do
                 else
                   stop 6
                end if
              end if

            end if

          else if( bc(side,direction).gt.0 .and. bc(side,direction)
     & .ne.extrapolation )then

            ! ***********************************************************************
            ! *****************  Neumann or mixed BC  *******************************
            ! ***********************************************************************

            !    a0*u + a1*u.n = f
                 a0=bcData(0,side,axis)
            a1=bcData(1,side,axis)

            if( orderOfAccuracy.eq.2 )then

             ! ------------------------------------------------------------
             ! ----------- 2nd order accuracy Neumann or mixed BC ---------
             ! ------------------------------------------------------------

             if( bcOptionN.eq.2 )then
               a0=0.
               a1=1.
             end if
              m1a=n1a
              m1b=n1b
              m2a=n2a
              m2b=n2b
              m3a=n3a
              m3b=n3b
              if( direction.eq.0 )then
               if( side.eq.0 )then
                 m1a=n1a+0
               else
                 m1a=n1b-0
               end if
               m1b=m1a
              else if( direction.eq.1 )then
               if( side.eq.0 )then
                 m2a=n2a+0
               else
                 m2a=n2b-0
               end if
               m2b=m2a
              else
               if( side.eq.0 )then
                 m3a=n3a+0
               else
                 m3a=n3b-0
               end if
               m3b=m3a
              end if
             if( side.eq.0 )then
               !       [  b  c  a  ]
               !         -1  0  1  
              ! *wdh* 110220: bcOptionN==3 should use true mixed-BC
              ! *wdh* if( bcOptionN.eq.2 .or. bcOptionN.eq.3 )then
              if( bcOptionN.eq.2 )then
               ! symmetry or mixed-symmetry condition (used on lower levels)
               ! write(*,'("lineSmoothBuild: Use mixed-symmetry BC for Neumann, level=",i3," a0,a1=",2f5.2)') level,a0,a1
               if( a0.eq.0. .and. a1.eq.0. )then
                 write(*,'("lineSmoothBuild:ERROR: mixed-symmetry BC 
     & for Neumann: a0=0 and a1=0!")')
                 stop 9021
               end if
                 !       [  b  c  a  ]
                 !         -1  0  1  
                dxi=1.
                do i3=m3a,m3b
                do i2=m2a,m2b
                do i1=m1a,m1b
                  j1=i1+is1 ! (j1,j2,j3) is the boundary point
                  j2=i2+is2
                  j3=i3+is3
                  if( mask(j1,j2,j3).gt.0 ) then
             b(i1,i2,i3)= a1*dxi*.5
             c(i1,i2,i3)= a0
             a(i1,i2,i3)=-a1*dxi*.5
                  else if( mask(j1,j2,j3).lt.0 )then
                      b(i1,i2,i3)= 1.
                      c(i1,i2,i3)=-2.
                      a(i1,i2,i3)= 1.
                  end if
                end do
                end do
                end do

              else if( bcOptionN.eq.3 )then
                ! Use true mixed or Neumann BC

                ! write(*,'("lineSmoothBuild: Use mixed/Neumann BC left level=",i3," a0,a1=",2f5.2," dx=",e8.2)') level,a0,a1,dx(direction)

                if( gridType.eq.rectangular )then
                 dxi = 1./dx(direction)
                 do i3=m3a,m3b
                 do i2=m2a,m2b
                 do i1=m1a,m1b
                  j1=i1+is1 ! (j1,j2,j3) is the boundary point
                  j2=i2+is2
                  j3=i3+is3
                  if( mask(j1,j2,j3).gt.0 ) then
             b(i1,i2,i3)= a1*dxi*.5
             c(i1,i2,i3)= a0
             a(i1,i2,i3)=-a1*dxi*.5

                    ! write(*,'("lineSmoothBuild: i1,i2=",2i3," [b c a]=",3e10.2)') i1,i2,b(i1,i2,i3),c(i1,i2,i3),a(i1,i2,i3)

                  else if( mask(j1,j2,j3).lt.0 )then
                      b(i1,i2,i3)= 1.
                      c(i1,i2,i3)=-2.
                      a(i1,i2,i3)= 1.
                  end if
                 end do
                 end do
                 end do
                else
                 ! curvilinear-grid  mixed BC 
                  ! write(*,'("lineSmoothOpt:mixedToSecondOrder: side,axis=",2i2, " a0,a1=",2f6.2)') side,axis,a0,a1
                  is = 1-2*side
                  do i3=m3a,m3b
                  do i2=m2a,m2b
                  do i1=m1a,m1b
                   j1=i1+is1 ! (j1,j2,j3) is the boundary point
                   j2=i2+is2
                   j3=i3+is3
                   if( mask(j1,j2,j3).gt.0 ) then
                     ! Curvilinear:
                     ! (an1,an2,an3) is the outward normal
                     an1 = rsxy(j1,j2,j3,axis,0)
                     an2 = rsxy(j1,j2,j3,axis,1)
                     if( nd.eq.2 )then
                      aNormi = (-is)/sqrt(an1**2+an2**2)
                      an1=an1*aNormi
                      an2=an2*aNormi
                      t1=a1*( an1*rsxy(j1,j2,j3,axis,0)+an2*rsxy(j1,j2,
     & j3,axis,1) )/(2.*dr(axis))
                     else
                      an3 = rsxy(j1,j2,j3,axis,2)
                      aNormi = (-is)/sqrt(an1**2+an2**2+an3**2)
                      an1=an1*aNormi
                      an2=an2*aNormi
                      an3=an3*aNormi
                      t1=a1*( an1*rsxy(j1,j2,j3,axis,0)+an2*rsxy(j1,j2,
     & j3,axis,1)+an3*rsxy(j1,j2,j3,axis,2) )/(2.*dr(axis))
                     end if
                     b(i1,i2,i3)= -t1
                     c(i1,i2,i3)= a0
                     a(i1,i2,i3)=  t1
                     ! write(*,'("lineSmoothBuild: i1,i2=",2i3," [b c a]=",3e10.2)') i1,i2,b(i1,i2,i3),c(i1,i2,i3),a(i1,i2,i3)
                   else if( mask(j1,j2,j3).lt.0 )then
                      b(i1,i2,i3)= 1.
                      c(i1,i2,i3)=-2.
                      a(i1,i2,i3)= 1.
                   end if
                  end do
                  end do
                  end do

                end if

              else
               ! use equation in coeff
               ! write(*,'("lineSmoothBuild: Mixed/neumann BC: use coeff, level=",i3," a0,a1=",2f5.2)') level,a0,a1

               do i3=m3a,m3b
               do i2=m2a,m2b
               do i1=m1a,m1b
                j1=i1+is1 ! (j1,j2,j3) is the boundary point
                j2=i2+is2
                j3=i3+is3
                  if( mask(j1,j2,j3).gt.0 ) then
                 b(i1,i2,i3)=coeff(mdm1,i1,i2,i3)  ! note: c
                 c(i1,i2,i3)=coeff(md  ,i1,i2,i3)
                 a(i1,i2,i3)=coeff(mdp1,i1,i2,i3)

                ! write(*,'("lineSmoothBuild: i1,i2=",2i3," [b c a]=",3e10.2)') i1,i2,b(i1,i2,i3),c(i1,i2,i3),a(i1,i2,i3)

                else if( mask(j1,j2,j3).lt.0 ) then
                   b(i1,i2,i3)= 1.
                   c(i1,i2,i3)=-2.
                   a(i1,i2,i3)= 1.
                end if
               end do
               end do
               end do
              end if

             else
               !       [  c  a  b  ]
               !         -1  0  1  
              ! *wdh* 110220: bcOptionN==3 should use true mixed-BC
              ! *wdh* 110220 if( bcOptionN.eq.2 .or. bcOptionN.eq.3 )then
              if( bcOptionN.eq.2 )then
               ! mixed-symmetry condition (used on lower levels)
               ! write(*,'("lineSmoothBuild: Use mixed-symmetry BC for Neumann, level=",i3," a0,a1=",2f5.2)') level,a0,a1
               if( a0.eq.0. .and. a1.eq.0. )then
                 write(*,'("lineSmoothBuild:ERROR: mixed-symmetry BC 
     & for Neumann: a0=0 and a1=0!")')
                 stop 9022
               end if
                 !       [  c  a  b  ]
                 !         -1  0  1  
                dxi=1.
                do i3=m3a,m3b
                do i2=m2a,m2b
                do i1=m1a,m1b
                  j1=i1+is1 ! (j1,j2,j3) is the boundary point
                  j2=i2+is2
                  j3=i3+is3
                  if( mask(j1,j2,j3).gt.0 ) then
            c(i1,i2,i3)=-a1*dxi*.5
            a(i1,i2,i3)= a0
            b(i1,i2,i3)= a1*dxi*.5
                  else if( mask(j1,j2,j3).lt.0 )then
                      c(i1,i2,i3)= 1.
                      a(i1,i2,i3)=-2.
                      b(i1,i2,i3)= 1.
                  end if
                end do
                end do
                end do

              else if( bcOptionN.eq.3 )then
                ! -- Use true mixed or Neumann BC --

                ! write(*,'("lineSmoothBuild: Use mixed/Neumann BC right level=",i3," a0,a1=",2f5.2)') level,a0,a1

                if( gridType.eq.rectangular )then
                 dxi = 1./dx(direction)
                 do i3=m3a,m3b
                 do i2=m2a,m2b
                 do i1=m1a,m1b
                  j1=i1+is1 ! (j1,j2,j3) is the boundary point
                  j2=i2+is2
                  j3=i3+is3
                  if( mask(j1,j2,j3).gt.0 ) then
            c(i1,i2,i3)=-a1*dxi*.5
            a(i1,i2,i3)= a0
            b(i1,i2,i3)= a1*dxi*.5
                  else if( mask(j1,j2,j3).lt.0 )then
                      c(i1,i2,i3)= 1.
                      a(i1,i2,i3)=-2.
                      b(i1,i2,i3)= 1.
                  end if
                 end do
                 end do
                 end do
                else

                 ! curvilinear-grid  mixed BC 
                  ! write(*,'("lineSmoothOpt:mixedToSecondOrder: side,axis=",2i2, " a0,a1=",2f6.2)') side,axis,a0,a1
                  is = 1-2*side
                  do i3=m3a,m3b
                  do i2=m2a,m2b
                  do i1=m1a,m1b
                   j1=i1+is1 ! (j1,j2,j3) is the boundary point
                   j2=i2+is2
                   j3=i3+is3
                   if( mask(j1,j2,j3).gt.0 ) then
                     ! Curvilinear:
                     ! (an1,an2,an3) is the outward normal
                     an1 = rsxy(j1,j2,j3,axis,0)
                     an2 = rsxy(j1,j2,j3,axis,1)
                     if( nd.eq.2 )then
                      aNormi = (-is)/sqrt(an1**2+an2**2)
                      an1=an1*aNormi
                      an2=an2*aNormi
                      t1=a1*( an1*rsxy(j1,j2,j3,axis,0)+an2*rsxy(j1,j2,
     & j3,axis,1) )/(2.*dr(axis))
                     else
                      an3 = rsxy(j1,j2,j3,axis,2)
                      aNormi = (-is)/sqrt(an1**2+an2**2+an3**2)
                      an1=an1*aNormi
                      an2=an2*aNormi
                      an3=an3*aNormi
                      t1=a1*( an1*rsxy(j1,j2,j3,axis,0)+an2*rsxy(j1,j2,
     & j3,axis,1)+an3*rsxy(j1,j2,j3,axis,2) )/(2.*dr(axis))
                     end if
                     c(i1,i2,i3)= -t1
                     a(i1,i2,i3)= a0
                     b(i1,i2,i3)=  t1
                     ! write(*,'("lineSmoothBuild: i1,i2=",2i3," [c a b]=",3e10.2)') i1,i2,c(i1,i2,i3),a(i1,i2,i3),b(i1,i2,i3)
                   else if( mask(j1,j2,j3).lt.0 )then
                      c(i1,i2,i3)= 1.
                      a(i1,i2,i3)=-2.
                      b(i1,i2,i3)= 1.
                   end if
                  end do
                  end do
                  end do

                end if

              else
               do i3=m3a,m3b
               do i2=m2a,m2b
               do i1=m1a,m1b
                j1=i1+is1 ! (j1,j2,j3) is the boundary point
                j2=i2+is2
                j3=i3+is3
                  if( mask(j1,j2,j3).gt.0 ) then
                 c(i1,i2,i3)=coeff(mdm1,i1,i2,i3)  ! note: c
                 a(i1,i2,i3)=coeff(md  ,i1,i2,i3)
                 b(i1,i2,i3)=coeff(mdp1,i1,i2,i3)
                else if( mask(j1,j2,j3).lt.0 ) then
                   c(i1,i2,i3)= 1.
                   a(i1,i2,i3)=-2.
                   b(i1,i2,i3)= 1.
                end if
               end do
               end do
               end do
              end if
             end if

            else if( orderOfAccuracy.eq.4 )then

              ! -----------------------------------------------
              ! ---------- Order 4 Neumann/Mixed --------------
              ! -----------------------------------------------

              !    a0*u + a1*u.n = f
                   a0=bcData(0,side,axis)
              a1=bcData(1,side,axis)
              if( a0.eq.0. .and. a1.eq.0. )then
                write(*,*) 'lineSmoothBuild:ERROR: a0 and a1 are both 
     & zero'
                write(*,*) 'side,axis,a0,a1,dxi=',side,axis,a0,a1,dxi
                stop 5
              end if 

              l1a=n1a
              l1b=n1b
              l2a=n2a
              l2b=n2b
              l3a=n3a
              l3b=n3b
              if( axis.eq.0 )then
               if( side.eq.0 )then
                 l1a=n1a+0
               else
                 l1a=n1b-0
               end if
               l1b=l1a
              else if( axis.eq.1 )then
               if( side.eq.0 )then
                 l2a=n2a+0
               else
                 l2a=n2b-0
               end if
               l2b=l2a
              else
               if( side.eq.0 )then
                 l3a=n3a+0
               else
                 l3a=n3b-0
               end if
               l3b=l3a
              end if
              m1a=n1a
              m1b=n1b
              m2a=n2a
              m2b=n2b
              m3a=n3a
              m3b=n3b
              if( axis.eq.0 )then
               if( side.eq.0 )then
                 m1a=n1a+1
               else
                 m1a=n1b-1
               end if
               m1b=m1a
              else if( axis.eq.1 )then
               if( side.eq.0 )then
                 m2a=n2a+1
               else
                 m2a=n2b-1
               end if
               m2b=m2a
              else
               if( side.eq.0 )then
                 m3a=n3a+1
               else
                 m3a=n3b-1
               end if
               m3b=m3a
              end if

             ! write(*,*) "lineSmoothBuild: order=4 bcOptionN=",bcOptionN

             if( side.eq.0 )then
               ! 2nd ghost line on left:
               !       [  c  d  e  a  b ]
               !    i= [ -2 -1  0  1  2 ]
              if( bcOptionN.eq.0 )then
               ! extrapolate 2nd ghost
               do i3=l3a,l3b
               do i2=l2a,l2b
               do i1=l1a,l1b
                  if( orderOfExtrapN.eq.4 )then
                    c(i1,i2,i3)= 1.
                    d(i1,i2,i3)=-4.
                    e(i1,i2,i3)= 6.
                    a(i1,i2,i3)=-4.
                    b(i1,i2,i3)= 1.
                  else if( orderOfExtrapN.eq.5 )then
                    ! 5-th order extrap (NOTE: this does not fit entirely in the matrix so we need a residual)
                    c(i1,i2,i3)=  1.
                    d(i1,i2,i3)= -5.
                    e(i1,i2,i3)= 10.
                    a(i1,i2,i3)=-10.
                    b(i1,i2,i3)=  5.
                  else if( orderOfExtrapN.eq.2 )then
                    c(i1,i2,i3)= 0.
                    d(i1,i2,i3)= 1.
                    e(i1,i2,i3)=-2.
                    a(i1,i2,i3)= 1.
                    b(i1,i2,i3)= 0.
                  else
                    stop 18520
                  end if
	        !  c(i1,i2,i3)= 1.
	        !  d(i1,i2,i3)=-4.
	        !  e(i1,i2,i3)= 6.
	        !  a(i1,i2,i3)=-4.
	        !  b(i1,i2,i3)= 1.
               end do
               end do
               end do
              else if( bcOptionN.eq.1 )then
               ! u.rrr = 

               if( gridType.eq.rectangular )then ! *wdh* 100506
                 if( equationToSolve.ne.laplaceEquation )then
                   write(*,'("Ogmg:LSB:ERROR: equation!=laplace")')
                   write(*,'("equationToSolve=",i2)') equationToSolve
                   write(*,'("gridType=",i2)') gridType
                   write(*,'("sparseStencil=",i2)') sparseStencil
                   ! stop 5053
                 end if
                 nsign = 2*side-1
                 diag=(a0/(a1*nsign))*dx(axis)  ! u_xx * dx^3
                 write(*,'('' neumannAndEquationRectangular: a0,a1,
     & diag='',3f6.2)') a0,a1,diag
                 do j3=l3a,l3b
                 do j2=l2a,l2b
                 do j1=l1a,l1b
                  i1=j1+2*is1 ! (i1,i2,i3) is the boundary point
                  i2=j2+2*is2 ! (j1,j2,j3) is the 2nd ghost line
                  i3=j3+2*is3
                  if( mask(i1,i2,i3).gt.0 ) then
                    ! This is the operator for urrr*dr^3
                    c(j1,j2,j3)=-.5
                    d(j1,j2,j3)= 1.  + diag
                    e(j1,j2,j3)=   -2.*diag
                    a(j1,j2,j3)=-1.  + diag
                    b(j1,j2,j3)= .5
                  else if( mask(i1,i2,i3).lt.0 ) then
                      b(j1,j2,j3)= 1.
                      c(j1,j2,j3)=-4.
                      d(j1,j2,j3)= 6.
                      e(j1,j2,j3)=-4.
                      a(j1,j2,j3)= 1.
                  end if
                 end do
                 end do
                 end do
               else ! curvilinear case
                if( axis.eq.0 .and. nd.eq.2 )then
                    ! NOTE: This routine fills in the equation at the 2ND GHOST LINE
                   if( equationToSolve.ne.laplaceEquation )then
                     write(*,'("Ogmg:LSB:ERROR: equation!=laplace")')
                     write(*,'("equationToSolve=",i2)') equationToSolve
                     write(*,'("gridType=",i2)') gridType
                     write(*,'("sparseStencil=",i2)') sparseStencil
                     stop 5054
                   end if
                   nsign = 2*side-1
                   ! write(*,'(''MGLS: neumannAndEquationCurvilinear: a0,a1='',2f6.2)') a0,a1
                   diag=0. ! for now
                   do j3=l3a,l3b
                   do j2=l2a,l2b
                   do j1=l1a,l1b
                    i1=j1+2*is1 ! (i1,i2,i3) is the boundary point
                    i2=j2+2*is2 ! (j1,j2,j3) is the 2nd ghost line
                    i3=j3+2*is3
                    if( mask(i1,i2,i3).gt.0 ) then
                       rxi=rx(i1,i2,i3)
                       ryi=ry(i1,i2,i3)
                       sxi=sx(i1,i2,i3)
                       syi=sy(i1,i2,i3)
                       rxr=rxr2(i1,i2,i3)
                       rxs=rxs2(i1,i2,i3)
                       ryr=ryr2(i1,i2,i3)
                       rys=rys2(i1,i2,i3)
                       sxr=sxr2(i1,i2,i3)
                       sxs=sxs2(i1,i2,i3)
                       syr=syr2(i1,i2,i3)
                       sys=sys2(i1,i2,i3)
                       rxx=rxx22(i1,i2,i3)
                       ryy=ryy22(i1,i2,i3)
                       rxrr=rxrr2(i1,i2,i3)
                       rxrs=rxrs2(i1,i2,i3)
                       rxss=rxss2(i1,i2,i3)
                       ryrr=ryrr2(i1,i2,i3)
                       ryrs=ryrs2(i1,i2,i3)
                       ryss=ryss2(i1,i2,i3)
                       sxx=sxx22(i1,i2,i3)
                       syy=syy22(i1,i2,i3)
                       sxrr=sxrr2(i1,i2,i3)
                       sxrs=sxrs2(i1,i2,i3)
                       sxss=sxss2(i1,i2,i3)
                       syrr=syrr2(i1,i2,i3)
                       syrs=syrs2(i1,i2,i3)
                       syss=syss2(i1,i2,i3)
                       rxxr=rxi*rxrr+rxr*rxr + sxi*rxrs + sxr*rxs
                       ryyr=ryi*ryrr+ryr*ryr + syi*ryrs + syr*rys
                       rxxs=rxi*rxrs+rxs*rxr + sxi*rxss + sxs*rxs
                       ryys=ryi*ryrs+rys*ryr + syi*ryss + sys*rys
                       sxxr=rxi*sxrr+rxr*sxr + sxi*sxrs + sxr*sxs
                       syyr=ryi*syrr+ryr*syr + syi*syrs + syr*sys
                       sxxs=rxi*sxrs+rxs*sxr + sxi*sxss + sxs*sxs
                       syys=ryi*syrs+rys*syr + syi*syss + sys*sys
                       alpha1=a1*nsign  ! nsign=2*side-1
                       alpha2=a1*nsign
                        rxNormI=1./sqrt(rxi**2+ryi**2)
                        rxNormIs=-(rxi*rxs+ryi*rys)*rxNormI**3
                        rxNormIss=-(rxi*rxss+ryi*ryss+rxs*rxs+rys*rys)*
     & rxNormI**3 -3.*(rxi*rxs+ryi*rys)*rxNormI**2*rxNormIs
                        n1=rxi*rxNormI
                        n1s=rxs*rxNormI + rxi*rxNormIs
                        n1ss=rxss*rxNormI + 2.*rxs*rxNormIs + rxi*
     & rxNormIss
                        n2=ryi*rxNormI
                        n2s=rys*rxNormI + ryi*rxNormIs
                        n2ss=ryss*rxNormI + 2.*rys*rxNormIs + ryi*
     & rxNormIss
                        an1=alpha1*(n1*rxi+n2*ryi)
                        an2=alpha2*(n1*sxi+n2*syi)
                        an1s=alpha1*(n1*rxs+n2*rys+n1s*rxi+n2s*ryi)
                        an1ss=alpha1*(n1*rxss+n2*ryss+2.*(n1s*rxs+n2s*
     & rys)+n1ss*rxi+n2ss*ryi)
                        an2s=alpha2*(n1*sxs+n2*sys + n1s*sxi+n2s*syi)
                        an2ss=alpha2*(n1*sxss+n2*syss + 2.*(n1s*sxs+
     & n2s*sys) + n1ss*sxi+n2ss*syi)
                       c11=rxi**2+ryi**2
                       c11r=2.*(rxi*rxr+ryi*ryr)
                       c11s=2.*(rxi*rxs+ryi*rys)
                       c12=2.*(rxi*sxi+ryi*syi)
                       c12r=2.*(rxr*sxi+rxi*sxr + ryr*syi+ ryi*syr)
                       c12s=2.*(rxs*sxi+rxi*sxs + rys*syi+ ryi*sys)
                       c22=sxi**2+syi**2
                       c22r=2.*(sxi*sxr+syi*syr)
                       c22s=2.*(sxi*sxs+syi*sys)
                       c1=rxx+ryy
                       c1r=rxxr+ryyr
                       c1s=rxxs+ryys
                       c2=sxx+syy
                       c2r=sxxr+syyr
                       c2s=sxxs+syys
                       c0=0.
                       c0r=0.
                       c0s=0.
c Coefficients of u(i1-2,i2,i3) u(i1-1,i2,i3) u(i1,i2,i3) u(i1+1,i2,i3) u(i1+2,i2,i3)
c um2=-1/2/dr**3
c um1=1/dr**3+1/dr**2*br2
c u0 =-b0-2/dr**2*br2
c up1=1/dr**2*br2-1/dr**3
c up2=1/2/dr**3
                       b0=-(c12*c1*an1**2*an2*c0+c1s*an1*a0*c12**2*an2-
     & c22s*an1*c12**2*an1s*a0-c0s*an1**2*c12**2*an2+2*an2s*c12**3*
     & an1s*a0+c12**2*an1ss*a0*c22*an1-2*c12**2*an2s*c1*an1*a0-c0r*
     & an1**3*c11*c22+c0r*an1**2*c11*c12*an2+c1r*an1**2*c11*a0*c22-
     & c22r*an1**2*c11*c1*a0-c1r*an1*c11*a0*c12*an2-c12r*an1**2*c11*
     & an2*c0+c12r*an1*c11*an2*c1*a0-c2*an1**2*c11*an2*c0+c2*an1*c11*
     & an2*c1*a0+c22r*an1**3*c11*c0-c22**2*c11*an1ss*a0*an1+c22*c11*
     & c1*an1*a0**2-c22*c11*c12*an1s*a0**2-2*c22*c11*an2s*c0*an1**2+2*
     & c22**2*c11*an1s**2*a0-c12*c1s*an1**2*a0*c22-c12*c22s*an1**3*c0-
     & c12*c2*an1**3*c0-c12*c1**2*an1*an2*a0+c12*c2*an1**2*c1*a0+2*
     & c12**2*an2s*c0*an1**2-an1ss*a0*c12**3*an2-2*c12**2*an1s*an2*c0*
     & an1+c12**3*an1s*a0**2+2*c22*c11*an2s*c1*an1*a0-2*c22*c11*an2s*
     & c12*an1s*a0+c12*c12s*an1*an1s*a0*c22-c12*c12s*an1*an2*c1*a0+
     & c12*c0s*an1**3*c22+c12*c1*an1*an1s*a0*c22+c12**2*a0*c0*an1**2-
     & 2*c12**2*an1s**2*a0*c22-c12**2*c1*an1*a0**2+2*c12**2*an1s*an2*
     & c1*a0+c22r*an1*c11*c12*an1s*a0-c12r*an1*c11*an1s*a0*c22-c0*an1*
     & c11*a0*c12*an2-c2*an1*c11*an1s*a0*c22+c22*c11*an1ss*a0*c12*an2-
     & 2*c22*c11*an1s*an2*c1*a0+2*c22*c11*an1s*an2*c0*an1+c12*c12s*
     & an1**2*an2*c0+c12*c22s*an1**2*c1*a0-c2*an1*c12**2*an1s*a0)/an1*
     & *2/(c12*an2-c22*an1)/c11**2
                       b1=1/an1**2*(2*c12**2*an2s*c1*an1*an2+c12*c12s*
     & an1**2*an2s*c22+c12*c12s*an1**2*a0*c22+c22r*an1**2*c11*c12*a0-
     & c22r*an1*c11*c12*an1s*an2+c22r*an1**2*c11*c1*an2+c1r*an1*c11*
     & an2**2*c12-c1r*an1**2*c11*an2*c22-c12*c12s*an1**2*an2*c2-c12*
     & c12s*an1*an1s*an2*c22-c2r*an1**2*c11*c12*an2+c12**2*a0*c1*an1*
     & an2+3*c12**2*an1s*an2*c2*an1-2*c12**2*an1s*an2s*an1*c22+2*c12**
     & 3*an2s**2*an1-c12r*an1*c11*c1*an2**2-c2*an1*c11*c1*an2**2+c0*
     & an1*c11*an2**2*c12-c0*an1**2*c11*an2*c22+c12r*an1**2*c11*an2*
     & c2-3*c22*c11*an2s*c12*a0*an1+2*c22*c11*an2s*c12*an1s*an2+c2**2*
     & an1**2*c11*an2-c22*c11*c12*a0**2*an1+2*c22*c11*an1s*c1*an2**2-
     & c22*c11*an1ss*an2**2*c12-2*c22*c11*an2s*c1*an1*an2+c22*c11*
     & an2ss*an1*c12*an2+c22*c11*a0*c12*an1s*an2-c22*c11*an1s*an2*c2*
     & an1+2*c22**2*c11*an1s*an2s*an1+2*c22**2*c11*an1s*a0*an1+c22**2*
     & c11*an1ss*an2*an1+3*an2s*c12**3*a0*an1-2*an2s*c12**3*an1s*an2-
     & an2ss*an1*c12**3*an2+2*c12**2*an1s**2*an2*c22-2*c12**2*an1s*c1*
     & an2**2+c12*c1**2*an1*an2**2-c12*c0*an1**3*c22+c12*c22s*an1**3*
     & c2-2*c12**2*an1s*a0*an1*c22-c12**2*an1ss*an2*c22*an1-a0*c12**3*
     & an1s*an2+c12**2*an2ss*an1**2*c22-2*c12**2*a0*c2*an1**2-3*c12**
     & 2*an2s*c2*an1**2-2*c12*c1*an1**2*an2*c2+c12*c1*an1**2*an2s*c22+
     & c12*c1*an1**2*a0*c22-2*c22*c11*c12*an2s**2*an1+c22*c11*an2s*c2*
     & an1**2-c12*c22s*an1**2*c1*an2+c12*c1s*an1**2*an2*c22-c22*c11*
     & a0*c1*an1*an2-c12r*an1**2*c11*an2s*c22-c12r*an1**2*c11*a0*c22+
     & c12r*an1*c11*an1s*an2*c22+c22r*an1**2*c11*c12*an2s+c12**3*a0**
     & 2*an1-c12*c2s*an1**3*c22-c22**2*c11*an2ss*an1**2-2*c22**2*c11*
     & an1s**2*an2-c22r*an1**3*c11*c2+c2r*an1**3*c11*c22-c12*c1*an1*
     & an1s*an2*c22+c12*c12s*an1*c1*an2**2+c22s*an1*c12**2*an1s*an2-
     & c1s*an1*an2**2*c12**2+c2s*an1**2*c12**2*an2-c22s*an1**2*c12**2*
     & a0+c0*an1**2*c12**2*an2-c22s*an1**2*c12**2*an2s+c12*c2**2*an1**
     & 3+an1ss*an2**2*c12**3)/(c12*an2-c22*an1)/c11**2
                       br2=1/an1*(-c11s*an1*c12**2*an2+2*c12**2*an2s*
     & c11*an1+c12**2*a0*c11*an1+2*c12*c1*an1*an2*c11+c12*c12s*an1*
     & an2*c11-c12*c2*an1**2*c11-c12*c22s*an1**2*c11+c12*c11s*an1**2*
     & c22-2*c22*c11**2*an2s*an1-c22*c11**2*a0*an1+2*c22*c11**2*an1s*
     & an2-c1*an1**2*c11*c22-c2*an1*c11**2*an2+c22r*an1**2*c11**2-
     & c12r*an1*c11**2*an2+c11r*an1*c11*c12*an2-c11r*an1**2*c11*c22-2*
     & c12**2*an1s*an2*c11)/(c12*an2-c22*an1)/c11**2
                       b3=-(an2*c12**2-an2*c22*c11-c22*an1*c12)
     & /an1/c11**2
                       bf=1/an1**2*(2*c12**2*an1s*an1*c22-c12*c1*an1**
     & 2*c22-c12*c12s*an1**2*c22+2*c22*c11*an2s*c12*an1+c22*c11*a0*
     & c12*an1-2*c22**2*c11*an1s*an1+c2*an1**2*c11*c22+c12r*an1**2*
     & c11*c22-c22r*an1**2*c11*c12-2*an2s*c12**3*an1-a0*c12**3*an1+c2*
     & an1**2*c12**2+c22s*an1**2*c12**2)/(c12*an2-c22*an1)/c11**2*gs+
     & 1/an1**2*(-c22*c11*an1*c12*an2+an1*c12**3*an2-c12**2*an1**2*
     & c22+c22**2*c11*an1**2)/(c12*an2-c22*an1)/c11**2*gss+1/an1**2*(-
     & 2*c12**2*an1s*an2*an1+c12*c1*an1**2*an2+c12*c12s*an1**2*an2+2*
     & c22*c11*an1s*an2*an1-c22*c11*a0*an1**2-2*c22*c11*an2s*an1**2-
     & c2*an1**2*c11*an2+c22r*an1**3*c11-c12r*an1**2*c11*an2+c12**2*
     & a0*an1**2+2*c12**2*an2s*an1**2-c12*c2*an1**3-c12*c22s*an1**3)/(
     & c12*an2-c22*an1)/c11**2*ff+1/an1**2*(-an1**2*c12**2*an2+c12*
     & an1**3*c22)/(c12*an2-c22*an1)/c11**2*ffs+1/an1**2*(-an1**3*c11*
     & c22+an1**2*c11*c12*an2)/(c12*an2-c22*an1)/c11**2*ffr+1/an1**2*(
     & -2*c12**2*an2s*c1*an1-c22s*an1*c12**2*an1s-c2*an1*c12**2*an1s+
     & c1s*an1*c12**2*an2-an1ss*c12**3*an2-2*c12**2*an1s**2*c22+c22r*
     & an1*c11*c12*an1s-c12r*an1*c11*an1s*c22+c12r*an1*c11*an2*c1-
     & c22r*an1**2*c11*c1-c0*an1*c11*c12*an2+2*an2s*c12**3*an1s-c2*
     & an1*c11*an1s*c22-c12*c1s*an1**2*c22+c12*c22s*an1**2*c1+c2*an1*
     & c11*an2*c1+c12**2*an1ss*c22*an1-c12**2*a0*c1*an1+c22*c11*an1ss*
     & c12*an2-2*c22*c11*an1s*an2*c1+c22*c11*a0*c1*an1-c22**2*c11*
     & an1ss*an1+c0*an1**2*c11*c22+c12*c12s*an1*an1s*c22-c12*c1**2*
     & an1*an2-c12*c12s*an1*an2*c1+c12*c2*an1**2*c1-2*c22*c11*an2s*
     & c12*an1s+a0*c12**3*an1s+c12*c1*an1*an1s*c22+2*c12**2*an1s*an2*
     & c1+2*c22**2*c11*an1s**2+2*c22*c11*an2s*c1*an1-c22*c11*a0*c12*
     & an1s-c1r*an1*c11*c12*an2+c1r*an1**2*c11*c22)/(c12*an2-c22*an1)
     & /c11**2*g
                      c(j1,j2,j3)=-.5/dr(axis)**3
                      d(j1,j2,j3)= 1./dr(axis)**3    +br2/dr(axis)**2
                      e(j1,j2,j3)=                -2.*br2/dr(axis)**2 -
     &  b0
                      a(j1,j2,j3)=-1./dr(axis)**3    +br2/dr(axis)**2
                      b(j1,j2,j3)= .5/dr(axis)**3
                      ! write(*,'("LS:neumannBC: myid=",i3," side,axis=",i2,i2," j1,j2=",i3,i3," b0,b1,b3,br2 =",4e11.3)') myid,side,axis,j1,j2, b0,b1,b3,br2
                      ! write(*,'("            : myid=",i3," c,d,e,a,b=",5e11.3)') myid,c(j1,j2,j3),d(j1,j2,j3),e(j1,j2,j3),a(j1,j2,j3),b(j1,j2,j3)
                    else if( mask(i1,i2,i3).lt.0 ) then
                        b(j1,j2,j3)= 1.
                        c(j1,j2,j3)=-4.
                        d(j1,j2,j3)= 6.
                        e(j1,j2,j3)=-4.
                        a(j1,j2,j3)= 1.
                    end if
                   end do
                   end do
                   end do
                else if( axis.eq.1 .and. nd.eq.2 )then
                    ! NOTE: This routine fills in the equation at the 2ND GHOST LINE
                   if( equationToSolve.ne.laplaceEquation )then
                     write(*,'("Ogmg:LSB:ERROR: equation!=laplace")')
                     write(*,'("equationToSolve=",i2)') equationToSolve
                     write(*,'("gridType=",i2)') gridType
                     write(*,'("sparseStencil=",i2)') sparseStencil
                     stop 5054
                   end if
                   nsign = 2*side-1
                   ! write(*,'(''MGLS: neumannAndEquationCurvilinear: a0,a1='',2f6.2)') a0,a1
                   diag=0. ! for now
                   do j3=l3a,l3b
                   do j2=l2a,l2b
                   do j1=l1a,l1b
                    i1=j1+2*is1 ! (i1,i2,i3) is the boundary point
                    i2=j2+2*is2 ! (j1,j2,j3) is the 2nd ghost line
                    i3=j3+2*is3
                    if( mask(i1,i2,i3).gt.0 ) then
                       rxi=rx(i1,i2,i3)
                       ryi=ry(i1,i2,i3)
                       sxi=sx(i1,i2,i3)
                       syi=sy(i1,i2,i3)
                       rxr=rxr2(i1,i2,i3)
                       rxs=rxs2(i1,i2,i3)
                       ryr=ryr2(i1,i2,i3)
                       rys=rys2(i1,i2,i3)
                       sxr=sxr2(i1,i2,i3)
                       sxs=sxs2(i1,i2,i3)
                       syr=syr2(i1,i2,i3)
                       sys=sys2(i1,i2,i3)
                       rxx=rxx22(i1,i2,i3)
                       ryy=ryy22(i1,i2,i3)
                       rxrr=rxrr2(i1,i2,i3)
                       rxrs=rxrs2(i1,i2,i3)
                       rxss=rxss2(i1,i2,i3)
                       ryrr=ryrr2(i1,i2,i3)
                       ryrs=ryrs2(i1,i2,i3)
                       ryss=ryss2(i1,i2,i3)
                       sxx=sxx22(i1,i2,i3)
                       syy=syy22(i1,i2,i3)
                       sxrr=sxrr2(i1,i2,i3)
                       sxrs=sxrs2(i1,i2,i3)
                       sxss=sxss2(i1,i2,i3)
                       syrr=syrr2(i1,i2,i3)
                       syrs=syrs2(i1,i2,i3)
                       syss=syss2(i1,i2,i3)
                       rxxr=rxi*rxrr+rxr*rxr + sxi*rxrs + sxr*rxs
                       ryyr=ryi*ryrr+ryr*ryr + syi*ryrs + syr*rys
                       rxxs=rxi*rxrs+rxs*rxr + sxi*rxss + sxs*rxs
                       ryys=ryi*ryrs+rys*ryr + syi*ryss + sys*rys
                       sxxr=rxi*sxrr+rxr*sxr + sxi*sxrs + sxr*sxs
                       syyr=ryi*syrr+ryr*syr + syi*syrs + syr*sys
                       sxxs=rxi*sxrs+rxs*sxr + sxi*sxss + sxs*sxs
                       syys=ryi*syrs+rys*syr + syi*syss + sys*sys
                       alpha1=a1*nsign  ! nsign=2*side-1
                       alpha2=a1*nsign
                        sxNormI=1./sqrt(sxi**2+syi**2)
                        sxNormIr=-(sxi*sxr+syi*syr)*sxNormI**3
                        sxNormIrr=-(sxi*sxrr+syi*syrr+sxr*sxr+syr*syr)*
     & sxNormI**3 -3.*(sxi*sxr+syi*syr)*sxNormI**2*sxNormIr
                        n1=sxi*sxNormI
                        n1r=sxr*sxNormI + sxi*sxNormIr
                        n1rr=sxrr*sxNormI + 2.*sxr*sxNormIr + sxi*
     & sxNormIrr
                        n2=syi*sxNormI
                        n2r=syr*sxNormI + syi*sxNormIr
                        n2rr=syrr*sxNormI + 2.*syr*sxNormIr + syi*
     & sxNormIrr
                        an1=alpha1*(n1*rxi+n2*ryi)
                        an2=alpha2*(n1*sxi+n2*syi)
                        an1r=alpha1*(n1*rxr+n1r*rxi + n2*ryr+n2r*ryi)
                        an1rr=alpha1*(n1*rxrr+n2*ryrr+ 2.*(n1r*rxr+n2r*
     & ryr) + n1rr*rxi+n2rr*ryi)
                        an2r=alpha2*(n1*sxr+n1r*sxi + n2*syr+n2r*syi)
                        an2rr=alpha2*(n1*sxrr+n2*syrr+ 2.*(n1r*sxr+n2r*
     & syr) + n1rr*sxi+n2rr*syi)
                       c11=rxi**2+ryi**2
                       c11r=2.*(rxi*rxr+ryi*ryr)
                       c11s=2.*(rxi*rxs+ryi*rys)
                       c12=2.*(rxi*sxi+ryi*syi)
                       c12r=2.*(rxr*sxi+rxi*sxr + ryr*syi+ ryi*syr)
                       c12s=2.*(rxs*sxi+rxi*sxs + rys*syi+ ryi*sys)
                       c22=sxi**2+syi**2
                       c22r=2.*(sxi*sxr+syi*syr)
                       c22s=2.*(sxi*sxs+syi*sys)
                       c1=rxx+ryy
                       c1r=rxxr+ryyr
                       c1s=rxxs+ryys
                       c2=sxx+syy
                       c2r=sxxr+syyr
                       c2s=sxxs+syys
                       c0=0.
                       c0r=0.
                       c0s=0.
c Coefficients of u(i1-2,i2,i3) u(i1-1,i2,i3) u(i1,i2,i3) u(i1+1,i2,i3) u(i1+2,i2,i3)
c um2=-1/2/dr**3
c um1=1/dr**3+1/dr**2*br2
c u0 =-b0-2/dr**2*br2
c up1=1/dr**2*br2-1/dr**3
c up2=1/2/dr**3
                       b0=-(c12*c2*an2**2*an1*c0+c2r*an2*a0*c12**2*an1-
     & c11r*an2*c12**2*an2r*a0-c0r*an2**2*c12**2*an1+2*an1r*c12**3*
     & an2r*a0+c12**2*an2rr*a0*c11*an2-2*c12**2*an1r*c2*an2*a0-c0s*
     & an2**3*c22*c11+c0s*an2**2*c22*c12*an1+c2s*an2**2*c22*a0*c11-
     & c11s*an2**2*c22*c2*a0-c2s*an2*c22*a0*c12*an1-c12s*an2**2*c22*
     & an1*c0+c12s*an2*c22*an1*c2*a0-c1*an2**2*c22*an1*c0+c1*an2*c22*
     & an1*c2*a0+c11s*an2**3*c22*c0-c11**2*c22*an2rr*a0*an2+c11*c22*
     & c2*an2*a0**2-c11*c22*c12*an2r*a0**2-2*c11*c22*an1r*c0*an2**2+2*
     & c11**2*c22*an2r**2*a0-c12*c2r*an2**2*a0*c11-c12*c11r*an2**3*c0-
     & c12*c1*an2**3*c0-c12*c2**2*an2*an1*a0+c12*c1*an2**2*c2*a0+2*
     & c12**2*an1r*c0*an2**2-an2rr*a0*c12**3*an1-2*c12**2*an2r*an1*c0*
     & an2+c12**3*an2r*a0**2+2*c11*c22*an1r*c2*an2*a0-2*c11*c22*an1r*
     & c12*an2r*a0+c12*c12r*an2*an2r*a0*c11-c12*c12r*an2*an1*c2*a0+
     & c12*c0r*an2**3*c11+c12*c2*an2*an2r*a0*c11+c12**2*a0*c0*an2**2-
     & 2*c12**2*an2r**2*a0*c11-c12**2*c2*an2*a0**2+2*c12**2*an2r*an1*
     & c2*a0+c11s*an2*c22*c12*an2r*a0-c12s*an2*c22*an2r*a0*c11-c0*an2*
     & c22*a0*c12*an1-c1*an2*c22*an2r*a0*c11+c11*c22*an2rr*a0*c12*an1-
     & 2*c11*c22*an2r*an1*c2*a0+2*c11*c22*an2r*an1*c0*an2+c12*c12r*
     & an2**2*an1*c0+c12*c11r*an2**2*c2*a0-c1*an2*c12**2*an2r*a0)/an2*
     & *2/(c12*an1-c11*an2)/c22**2
                       b1=1/an2**2*(2*c12**2*an1r*c2*an2*an1+c12*c12r*
     & an2**2*an1r*c11+c12*c12r*an2**2*a0*c11+c11s*an2**2*c22*c12*a0-
     & c11s*an2*c22*c12*an2r*an1+c11s*an2**2*c22*c2*an1+c2s*an2*c22*
     & an1**2*c12-c2s*an2**2*c22*an1*c11-c12*c12r*an2**2*an1*c1-c12*
     & c12r*an2*an2r*an1*c11-c1s*an2**2*c22*c12*an1+c12**2*a0*c2*an2*
     & an1+3*c12**2*an2r*an1*c1*an2-2*c12**2*an2r*an1r*an2*c11+2*c12**
     & 3*an1r**2*an2-c12s*an2*c22*c2*an1**2-c1*an2*c22*c2*an1**2+c0*
     & an2*c22*an1**2*c12-c0*an2**2*c22*an1*c11+c12s*an2**2*c22*an1*
     & c1-3*c11*c22*an1r*c12*a0*an2+2*c11*c22*an1r*c12*an2r*an1+c1**2*
     & an2**2*c22*an1-c11*c22*c12*a0**2*an2+2*c11*c22*an2r*c2*an1**2-
     & c11*c22*an2rr*an1**2*c12-2*c11*c22*an1r*c2*an2*an1+c11*c22*
     & an1rr*an2*c12*an1+c11*c22*a0*c12*an2r*an1-c11*c22*an2r*an1*c1*
     & an2+2*c11**2*c22*an2r*an1r*an2+2*c11**2*c22*an2r*a0*an2+c11**2*
     & c22*an2rr*an1*an2+3*an1r*c12**3*a0*an2-2*an1r*c12**3*an2r*an1-
     & an1rr*an2*c12**3*an1+2*c12**2*an2r**2*an1*c11-2*c12**2*an2r*c2*
     & an1**2+c12*c2**2*an2*an1**2-c12*c0*an2**3*c11+c12*c11r*an2**3*
     & c1-2*c12**2*an2r*a0*an2*c11-c12**2*an2rr*an1*c11*an2-a0*c12**3*
     & an2r*an1+c12**2*an1rr*an2**2*c11-2*c12**2*a0*c1*an2**2-3*c12**
     & 2*an1r*c1*an2**2-2*c12*c2*an2**2*an1*c1+c12*c2*an2**2*an1r*c11+
     & c12*c2*an2**2*a0*c11-2*c11*c22*c12*an1r**2*an2+c11*c22*an1r*c1*
     & an2**2-c12*c11r*an2**2*c2*an1+c12*c2r*an2**2*an1*c11-c11*c22*
     & a0*c2*an2*an1-c12s*an2**2*c22*an1r*c11-c12s*an2**2*c22*a0*c11+
     & c12s*an2*c22*an2r*an1*c11+c11s*an2**2*c22*c12*an1r+c12**3*a0**
     & 2*an2-c12*c1r*an2**3*c11-c11**2*c22*an1rr*an2**2-2*c11**2*c22*
     & an2r**2*an1-c11s*an2**3*c22*c1+c1s*an2**3*c22*c11-c12*c2*an2*
     & an2r*an1*c11+c12*c12r*an2*c2*an1**2+c11r*an2*c12**2*an2r*an1-
     & c2r*an2*an1**2*c12**2+c1r*an2**2*c12**2*an1-c11r*an2**2*c12**2*
     & a0+c0*an2**2*c12**2*an1-c11r*an2**2*c12**2*an1r+c12*c1**2*an2**
     & 3+an2rr*an1**2*c12**3)/(c12*an1-c11*an2)/c22**2
                       br2=1/an2*(-c22r*an2*c12**2*an1+2*c12**2*an1r*
     & c22*an2+c12**2*a0*c22*an2+2*c12*c2*an2*an1*c22+c12*c12r*an2*
     & an1*c22-c12*c1*an2**2*c22-c12*c11r*an2**2*c22+c12*c22r*an2**2*
     & c11-2*c11*c22**2*an1r*an2-c11*c22**2*a0*an2+2*c11*c22**2*an2r*
     & an1-c2*an2**2*c22*c11-c1*an2*c22**2*an1+c11s*an2**2*c22**2-
     & c12s*an2*c22**2*an1+c22s*an2*c22*c12*an1-c22s*an2**2*c22*c11-2*
     & c12**2*an2r*an1*c22)/(c12*an1-c11*an2)/c22**2
                       b3=-(an1*c12**2-an1*c11*c22-c11*an2*c12)
     & /an2/c22**2
                       bf=1/an2**2*(2*c12**2*an2r*an2*c11-c12*c2*an2**
     & 2*c11-c12*c12r*an2**2*c11+2*c11*c22*an1r*c12*an2+c11*c22*a0*
     & c12*an2-2*c11**2*c22*an2r*an2+c1*an2**2*c22*c11+c12s*an2**2*
     & c22*c11-c11s*an2**2*c22*c12-2*an1r*c12**3*an2-a0*c12**3*an2+c1*
     & an2**2*c12**2+c11r*an2**2*c12**2)/(c12*an1-c11*an2)/c22**2*gr+
     & 1/an2**2*(-c11*c22*an2*c12*an1+an2*c12**3*an1-c12**2*an2**2*
     & c11+c11**2*c22*an2**2)/(c12*an1-c11*an2)/c22**2*grr+1/an2**2*(-
     & 2*c12**2*an2r*an1*an2+c12*c2*an2**2*an1+c12*c12r*an2**2*an1+2*
     & c11*c22*an2r*an1*an2-c11*c22*a0*an2**2-2*c11*c22*an1r*an2**2-
     & c1*an2**2*c22*an1+c11s*an2**3*c22-c12s*an2**2*c22*an1+c12**2*
     & a0*an2**2+2*c12**2*an1r*an2**2-c12*c1*an2**3-c12*c11r*an2**3)/(
     & c12*an1-c11*an2)/c22**2*ff+1/an2**2*(-an2**2*c12**2*an1+c12*
     & an2**3*c11)/(c12*an1-c11*an2)/c22**2*ffr+1/an2**2*(-an2**3*c22*
     & c11+an2**2*c22*c12*an1)/(c12*an1-c11*an2)/c22**2*ffs+1/an2**2*(
     & -2*c12**2*an1r*c2*an2-c11r*an2*c12**2*an2r-c1*an2*c12**2*an2r+
     & c2r*an2*c12**2*an1-an2rr*c12**3*an1-2*c12**2*an2r**2*c11+c11s*
     & an2*c22*c12*an2r-c12s*an2*c22*an2r*c11+c12s*an2*c22*an1*c2-
     & c11s*an2**2*c22*c2-c0*an2*c22*c12*an1+2*an1r*c12**3*an2r-c1*
     & an2*c22*an2r*c11-c12*c2r*an2**2*c11+c12*c11r*an2**2*c2+c1*an2*
     & c22*an1*c2+c12**2*an2rr*c11*an2-c12**2*a0*c2*an2+c11*c22*an2rr*
     & c12*an1-2*c11*c22*an2r*an1*c2+c11*c22*a0*c2*an2-c11**2*c22*
     & an2rr*an2+c0*an2**2*c22*c11+c12*c12r*an2*an2r*c11-c12*c2**2*
     & an2*an1-c12*c12r*an2*an1*c2+c12*c1*an2**2*c2-2*c11*c22*an1r*
     & c12*an2r+a0*c12**3*an2r+c12*c2*an2*an2r*c11+2*c12**2*an2r*an1*
     & c2+2*c11**2*c22*an2r**2+2*c11*c22*an1r*c2*an2-c11*c22*a0*c12*
     & an2r-c2s*an2*c22*c12*an1+c2s*an2**2*c22*c11)/(c12*an1-c11*an2)
     & /c22**2*g
                      c(j1,j2,j3)=-.5/dr(axis)**3
                      d(j1,j2,j3)= 1./dr(axis)**3    +br2/dr(axis)**2
                      e(j1,j2,j3)=                -2.*br2/dr(axis)**2 -
     &  b0
                      a(j1,j2,j3)=-1./dr(axis)**3    +br2/dr(axis)**2
                      b(j1,j2,j3)= .5/dr(axis)**3
                      ! write(*,'("LS:neumannBC: myid=",i3," side,axis=",i2,i2," j1,j2=",i3,i3," b0,b1,b3,br2 =",4e11.3)') myid,side,axis,j1,j2, b0,b1,b3,br2
                      ! write(*,'("            : myid=",i3," c,d,e,a,b=",5e11.3)') myid,c(j1,j2,j3),d(j1,j2,j3),e(j1,j2,j3),a(j1,j2,j3),b(j1,j2,j3)
                    else if( mask(i1,i2,i3).lt.0 ) then
                        b(j1,j2,j3)= 1.
                        c(j1,j2,j3)=-4.
                        d(j1,j2,j3)= 6.
                        e(j1,j2,j3)=-4.
                        a(j1,j2,j3)= 1.
                    end if
                   end do
                   end do
                   end do

                else if( axis.eq.0 .and. nd.eq.3 )then
                   if( equationToSolve.ne.laplaceEquation )then
                     write(*,'("Ogmg:LSB:ERROR: equation!=laplace")')
                     write(*,'("equationToSolve=",i2)') equationToSolve
                     write(*,'("gridType=",i2)') gridType
                     write(*,'("sparseStencil=",i2)') sparseStencil
                     stop 5054
                   end if
                   nsign = 2*side-1
                   ! write(*,'(''MGLS: neumannAndEquationCurvilinear: a0,a1='',2f6.2)') a0,a1
                   diag=0. ! for now
                   do j3=l3a,l3b
                   do j2=l2a,l2b
                   do j1=l1a,l1b
                    i1=j1+2*is1 ! (i1,i2,i3) is the boundary point
                    i2=j2+2*is2 ! (j1,j2,j3) is the 2nd ghost line
                    i3=j3+2*is3
                    if( mask(i1,i2,i3).gt.0 ) then
                     ! We need 2 parameteric and 1 real derivative. Do this for now: 
                      ! this next call will define the jacobian and its derivatives (parameteric and spatial)
                      ajrx = rsxy(i1,i2,i3,0,0)
                      ajrxr = (rsxy(i1-2,i2,i3,0,0)-8.*rsxy(i1-1,i2,i3,
     & 0,0)+8.*rsxy(i1+1,i2,i3,0,0)-rsxy(i1+2,i2,i3,0,0))/(12.*dr(0))
                      ajrxs = (rsxy(i1,i2-2,i3,0,0)-8.*rsxy(i1,i2-1,i3,
     & 0,0)+8.*rsxy(i1,i2+1,i3,0,0)-rsxy(i1,i2+2,i3,0,0))/(12.*dr(1))
                      ajrxt = (rsxy(i1,i2,i3-2,0,0)-8.*rsxy(i1,i2,i3-1,
     & 0,0)+8.*rsxy(i1,i2,i3+1,0,0)-rsxy(i1,i2,i3+2,0,0))/(12.*dr(2))
                      ajrxrr = (-rsxy(i1-2,i2,i3,0,0)+16.*rsxy(i1-1,i2,
     & i3,0,0)-30.*rsxy(i1,i2,i3,0,0)+16.*rsxy(i1+1,i2,i3,0,0)-rsxy(
     & i1+2,i2,i3,0,0))/(12.*dr(0)**2)
                      ajrxrs = ((rsxy(i1-2,i2-2,i3,0,0)-8.*rsxy(i1-2,
     & i2-1,i3,0,0)+8.*rsxy(i1-2,i2+1,i3,0,0)-rsxy(i1-2,i2+2,i3,0,0))
     & /(12.*dr(1))-8.*(rsxy(i1-1,i2-2,i3,0,0)-8.*rsxy(i1-1,i2-1,i3,0,
     & 0)+8.*rsxy(i1-1,i2+1,i3,0,0)-rsxy(i1-1,i2+2,i3,0,0))/(12.*dr(1)
     & )+8.*(rsxy(i1+1,i2-2,i3,0,0)-8.*rsxy(i1+1,i2-1,i3,0,0)+8.*rsxy(
     & i1+1,i2+1,i3,0,0)-rsxy(i1+1,i2+2,i3,0,0))/(12.*dr(1))-(rsxy(i1+
     & 2,i2-2,i3,0,0)-8.*rsxy(i1+2,i2-1,i3,0,0)+8.*rsxy(i1+2,i2+1,i3,
     & 0,0)-rsxy(i1+2,i2+2,i3,0,0))/(12.*dr(1)))/(12.*dr(0))
                      ajrxss = (-rsxy(i1,i2-2,i3,0,0)+16.*rsxy(i1,i2-1,
     & i3,0,0)-30.*rsxy(i1,i2,i3,0,0)+16.*rsxy(i1,i2+1,i3,0,0)-rsxy(
     & i1,i2+2,i3,0,0))/(12.*dr(1)**2)
                      ajrxrt = ((rsxy(i1-2,i2,i3-2,0,0)-8.*rsxy(i1-2,
     & i2,i3-1,0,0)+8.*rsxy(i1-2,i2,i3+1,0,0)-rsxy(i1-2,i2,i3+2,0,0))
     & /(12.*dr(2))-8.*(rsxy(i1-1,i2,i3-2,0,0)-8.*rsxy(i1-1,i2,i3-1,0,
     & 0)+8.*rsxy(i1-1,i2,i3+1,0,0)-rsxy(i1-1,i2,i3+2,0,0))/(12.*dr(2)
     & )+8.*(rsxy(i1+1,i2,i3-2,0,0)-8.*rsxy(i1+1,i2,i3-1,0,0)+8.*rsxy(
     & i1+1,i2,i3+1,0,0)-rsxy(i1+1,i2,i3+2,0,0))/(12.*dr(2))-(rsxy(i1+
     & 2,i2,i3-2,0,0)-8.*rsxy(i1+2,i2,i3-1,0,0)+8.*rsxy(i1+2,i2,i3+1,
     & 0,0)-rsxy(i1+2,i2,i3+2,0,0))/(12.*dr(2)))/(12.*dr(0))
                      ajrxst = ((rsxy(i1,i2-2,i3-2,0,0)-8.*rsxy(i1,i2-
     & 2,i3-1,0,0)+8.*rsxy(i1,i2-2,i3+1,0,0)-rsxy(i1,i2-2,i3+2,0,0))/(
     & 12.*dr(2))-8.*(rsxy(i1,i2-1,i3-2,0,0)-8.*rsxy(i1,i2-1,i3-1,0,0)
     & +8.*rsxy(i1,i2-1,i3+1,0,0)-rsxy(i1,i2-1,i3+2,0,0))/(12.*dr(2))+
     & 8.*(rsxy(i1,i2+1,i3-2,0,0)-8.*rsxy(i1,i2+1,i3-1,0,0)+8.*rsxy(
     & i1,i2+1,i3+1,0,0)-rsxy(i1,i2+1,i3+2,0,0))/(12.*dr(2))-(rsxy(i1,
     & i2+2,i3-2,0,0)-8.*rsxy(i1,i2+2,i3-1,0,0)+8.*rsxy(i1,i2+2,i3+1,
     & 0,0)-rsxy(i1,i2+2,i3+2,0,0))/(12.*dr(2)))/(12.*dr(1))
                      ajrxtt = (-rsxy(i1,i2,i3-2,0,0)+16.*rsxy(i1,i2,
     & i3-1,0,0)-30.*rsxy(i1,i2,i3,0,0)+16.*rsxy(i1,i2,i3+1,0,0)-rsxy(
     & i1,i2,i3+2,0,0))/(12.*dr(2)**2)
                      ajsx = rsxy(i1,i2,i3,1,0)
                      ajsxr = (rsxy(i1-2,i2,i3,1,0)-8.*rsxy(i1-1,i2,i3,
     & 1,0)+8.*rsxy(i1+1,i2,i3,1,0)-rsxy(i1+2,i2,i3,1,0))/(12.*dr(0))
                      ajsxs = (rsxy(i1,i2-2,i3,1,0)-8.*rsxy(i1,i2-1,i3,
     & 1,0)+8.*rsxy(i1,i2+1,i3,1,0)-rsxy(i1,i2+2,i3,1,0))/(12.*dr(1))
                      ajsxt = (rsxy(i1,i2,i3-2,1,0)-8.*rsxy(i1,i2,i3-1,
     & 1,0)+8.*rsxy(i1,i2,i3+1,1,0)-rsxy(i1,i2,i3+2,1,0))/(12.*dr(2))
                      ajsxrr = (-rsxy(i1-2,i2,i3,1,0)+16.*rsxy(i1-1,i2,
     & i3,1,0)-30.*rsxy(i1,i2,i3,1,0)+16.*rsxy(i1+1,i2,i3,1,0)-rsxy(
     & i1+2,i2,i3,1,0))/(12.*dr(0)**2)
                      ajsxrs = ((rsxy(i1-2,i2-2,i3,1,0)-8.*rsxy(i1-2,
     & i2-1,i3,1,0)+8.*rsxy(i1-2,i2+1,i3,1,0)-rsxy(i1-2,i2+2,i3,1,0))
     & /(12.*dr(1))-8.*(rsxy(i1-1,i2-2,i3,1,0)-8.*rsxy(i1-1,i2-1,i3,1,
     & 0)+8.*rsxy(i1-1,i2+1,i3,1,0)-rsxy(i1-1,i2+2,i3,1,0))/(12.*dr(1)
     & )+8.*(rsxy(i1+1,i2-2,i3,1,0)-8.*rsxy(i1+1,i2-1,i3,1,0)+8.*rsxy(
     & i1+1,i2+1,i3,1,0)-rsxy(i1+1,i2+2,i3,1,0))/(12.*dr(1))-(rsxy(i1+
     & 2,i2-2,i3,1,0)-8.*rsxy(i1+2,i2-1,i3,1,0)+8.*rsxy(i1+2,i2+1,i3,
     & 1,0)-rsxy(i1+2,i2+2,i3,1,0))/(12.*dr(1)))/(12.*dr(0))
                      ajsxss = (-rsxy(i1,i2-2,i3,1,0)+16.*rsxy(i1,i2-1,
     & i3,1,0)-30.*rsxy(i1,i2,i3,1,0)+16.*rsxy(i1,i2+1,i3,1,0)-rsxy(
     & i1,i2+2,i3,1,0))/(12.*dr(1)**2)
                      ajsxrt = ((rsxy(i1-2,i2,i3-2,1,0)-8.*rsxy(i1-2,
     & i2,i3-1,1,0)+8.*rsxy(i1-2,i2,i3+1,1,0)-rsxy(i1-2,i2,i3+2,1,0))
     & /(12.*dr(2))-8.*(rsxy(i1-1,i2,i3-2,1,0)-8.*rsxy(i1-1,i2,i3-1,1,
     & 0)+8.*rsxy(i1-1,i2,i3+1,1,0)-rsxy(i1-1,i2,i3+2,1,0))/(12.*dr(2)
     & )+8.*(rsxy(i1+1,i2,i3-2,1,0)-8.*rsxy(i1+1,i2,i3-1,1,0)+8.*rsxy(
     & i1+1,i2,i3+1,1,0)-rsxy(i1+1,i2,i3+2,1,0))/(12.*dr(2))-(rsxy(i1+
     & 2,i2,i3-2,1,0)-8.*rsxy(i1+2,i2,i3-1,1,0)+8.*rsxy(i1+2,i2,i3+1,
     & 1,0)-rsxy(i1+2,i2,i3+2,1,0))/(12.*dr(2)))/(12.*dr(0))
                      ajsxst = ((rsxy(i1,i2-2,i3-2,1,0)-8.*rsxy(i1,i2-
     & 2,i3-1,1,0)+8.*rsxy(i1,i2-2,i3+1,1,0)-rsxy(i1,i2-2,i3+2,1,0))/(
     & 12.*dr(2))-8.*(rsxy(i1,i2-1,i3-2,1,0)-8.*rsxy(i1,i2-1,i3-1,1,0)
     & +8.*rsxy(i1,i2-1,i3+1,1,0)-rsxy(i1,i2-1,i3+2,1,0))/(12.*dr(2))+
     & 8.*(rsxy(i1,i2+1,i3-2,1,0)-8.*rsxy(i1,i2+1,i3-1,1,0)+8.*rsxy(
     & i1,i2+1,i3+1,1,0)-rsxy(i1,i2+1,i3+2,1,0))/(12.*dr(2))-(rsxy(i1,
     & i2+2,i3-2,1,0)-8.*rsxy(i1,i2+2,i3-1,1,0)+8.*rsxy(i1,i2+2,i3+1,
     & 1,0)-rsxy(i1,i2+2,i3+2,1,0))/(12.*dr(2)))/(12.*dr(1))
                      ajsxtt = (-rsxy(i1,i2,i3-2,1,0)+16.*rsxy(i1,i2,
     & i3-1,1,0)-30.*rsxy(i1,i2,i3,1,0)+16.*rsxy(i1,i2,i3+1,1,0)-rsxy(
     & i1,i2,i3+2,1,0))/(12.*dr(2)**2)
                      ajtx = rsxy(i1,i2,i3,2,0)
                      ajtxr = (rsxy(i1-2,i2,i3,2,0)-8.*rsxy(i1-1,i2,i3,
     & 2,0)+8.*rsxy(i1+1,i2,i3,2,0)-rsxy(i1+2,i2,i3,2,0))/(12.*dr(0))
                      ajtxs = (rsxy(i1,i2-2,i3,2,0)-8.*rsxy(i1,i2-1,i3,
     & 2,0)+8.*rsxy(i1,i2+1,i3,2,0)-rsxy(i1,i2+2,i3,2,0))/(12.*dr(1))
                      ajtxt = (rsxy(i1,i2,i3-2,2,0)-8.*rsxy(i1,i2,i3-1,
     & 2,0)+8.*rsxy(i1,i2,i3+1,2,0)-rsxy(i1,i2,i3+2,2,0))/(12.*dr(2))
                      ajtxrr = (-rsxy(i1-2,i2,i3,2,0)+16.*rsxy(i1-1,i2,
     & i3,2,0)-30.*rsxy(i1,i2,i3,2,0)+16.*rsxy(i1+1,i2,i3,2,0)-rsxy(
     & i1+2,i2,i3,2,0))/(12.*dr(0)**2)
                      ajtxrs = ((rsxy(i1-2,i2-2,i3,2,0)-8.*rsxy(i1-2,
     & i2-1,i3,2,0)+8.*rsxy(i1-2,i2+1,i3,2,0)-rsxy(i1-2,i2+2,i3,2,0))
     & /(12.*dr(1))-8.*(rsxy(i1-1,i2-2,i3,2,0)-8.*rsxy(i1-1,i2-1,i3,2,
     & 0)+8.*rsxy(i1-1,i2+1,i3,2,0)-rsxy(i1-1,i2+2,i3,2,0))/(12.*dr(1)
     & )+8.*(rsxy(i1+1,i2-2,i3,2,0)-8.*rsxy(i1+1,i2-1,i3,2,0)+8.*rsxy(
     & i1+1,i2+1,i3,2,0)-rsxy(i1+1,i2+2,i3,2,0))/(12.*dr(1))-(rsxy(i1+
     & 2,i2-2,i3,2,0)-8.*rsxy(i1+2,i2-1,i3,2,0)+8.*rsxy(i1+2,i2+1,i3,
     & 2,0)-rsxy(i1+2,i2+2,i3,2,0))/(12.*dr(1)))/(12.*dr(0))
                      ajtxss = (-rsxy(i1,i2-2,i3,2,0)+16.*rsxy(i1,i2-1,
     & i3,2,0)-30.*rsxy(i1,i2,i3,2,0)+16.*rsxy(i1,i2+1,i3,2,0)-rsxy(
     & i1,i2+2,i3,2,0))/(12.*dr(1)**2)
                      ajtxrt = ((rsxy(i1-2,i2,i3-2,2,0)-8.*rsxy(i1-2,
     & i2,i3-1,2,0)+8.*rsxy(i1-2,i2,i3+1,2,0)-rsxy(i1-2,i2,i3+2,2,0))
     & /(12.*dr(2))-8.*(rsxy(i1-1,i2,i3-2,2,0)-8.*rsxy(i1-1,i2,i3-1,2,
     & 0)+8.*rsxy(i1-1,i2,i3+1,2,0)-rsxy(i1-1,i2,i3+2,2,0))/(12.*dr(2)
     & )+8.*(rsxy(i1+1,i2,i3-2,2,0)-8.*rsxy(i1+1,i2,i3-1,2,0)+8.*rsxy(
     & i1+1,i2,i3+1,2,0)-rsxy(i1+1,i2,i3+2,2,0))/(12.*dr(2))-(rsxy(i1+
     & 2,i2,i3-2,2,0)-8.*rsxy(i1+2,i2,i3-1,2,0)+8.*rsxy(i1+2,i2,i3+1,
     & 2,0)-rsxy(i1+2,i2,i3+2,2,0))/(12.*dr(2)))/(12.*dr(0))
                      ajtxst = ((rsxy(i1,i2-2,i3-2,2,0)-8.*rsxy(i1,i2-
     & 2,i3-1,2,0)+8.*rsxy(i1,i2-2,i3+1,2,0)-rsxy(i1,i2-2,i3+2,2,0))/(
     & 12.*dr(2))-8.*(rsxy(i1,i2-1,i3-2,2,0)-8.*rsxy(i1,i2-1,i3-1,2,0)
     & +8.*rsxy(i1,i2-1,i3+1,2,0)-rsxy(i1,i2-1,i3+2,2,0))/(12.*dr(2))+
     & 8.*(rsxy(i1,i2+1,i3-2,2,0)-8.*rsxy(i1,i2+1,i3-1,2,0)+8.*rsxy(
     & i1,i2+1,i3+1,2,0)-rsxy(i1,i2+1,i3+2,2,0))/(12.*dr(2))-(rsxy(i1,
     & i2+2,i3-2,2,0)-8.*rsxy(i1,i2+2,i3-1,2,0)+8.*rsxy(i1,i2+2,i3+1,
     & 2,0)-rsxy(i1,i2+2,i3+2,2,0))/(12.*dr(2)))/(12.*dr(1))
                      ajtxtt = (-rsxy(i1,i2,i3-2,2,0)+16.*rsxy(i1,i2,
     & i3-1,2,0)-30.*rsxy(i1,i2,i3,2,0)+16.*rsxy(i1,i2,i3+1,2,0)-rsxy(
     & i1,i2,i3+2,2,0))/(12.*dr(2)**2)
                      ajry = rsxy(i1,i2,i3,0,1)
                      ajryr = (rsxy(i1-2,i2,i3,0,1)-8.*rsxy(i1-1,i2,i3,
     & 0,1)+8.*rsxy(i1+1,i2,i3,0,1)-rsxy(i1+2,i2,i3,0,1))/(12.*dr(0))
                      ajrys = (rsxy(i1,i2-2,i3,0,1)-8.*rsxy(i1,i2-1,i3,
     & 0,1)+8.*rsxy(i1,i2+1,i3,0,1)-rsxy(i1,i2+2,i3,0,1))/(12.*dr(1))
                      ajryt = (rsxy(i1,i2,i3-2,0,1)-8.*rsxy(i1,i2,i3-1,
     & 0,1)+8.*rsxy(i1,i2,i3+1,0,1)-rsxy(i1,i2,i3+2,0,1))/(12.*dr(2))
                      ajryrr = (-rsxy(i1-2,i2,i3,0,1)+16.*rsxy(i1-1,i2,
     & i3,0,1)-30.*rsxy(i1,i2,i3,0,1)+16.*rsxy(i1+1,i2,i3,0,1)-rsxy(
     & i1+2,i2,i3,0,1))/(12.*dr(0)**2)
                      ajryrs = ((rsxy(i1-2,i2-2,i3,0,1)-8.*rsxy(i1-2,
     & i2-1,i3,0,1)+8.*rsxy(i1-2,i2+1,i3,0,1)-rsxy(i1-2,i2+2,i3,0,1))
     & /(12.*dr(1))-8.*(rsxy(i1-1,i2-2,i3,0,1)-8.*rsxy(i1-1,i2-1,i3,0,
     & 1)+8.*rsxy(i1-1,i2+1,i3,0,1)-rsxy(i1-1,i2+2,i3,0,1))/(12.*dr(1)
     & )+8.*(rsxy(i1+1,i2-2,i3,0,1)-8.*rsxy(i1+1,i2-1,i3,0,1)+8.*rsxy(
     & i1+1,i2+1,i3,0,1)-rsxy(i1+1,i2+2,i3,0,1))/(12.*dr(1))-(rsxy(i1+
     & 2,i2-2,i3,0,1)-8.*rsxy(i1+2,i2-1,i3,0,1)+8.*rsxy(i1+2,i2+1,i3,
     & 0,1)-rsxy(i1+2,i2+2,i3,0,1))/(12.*dr(1)))/(12.*dr(0))
                      ajryss = (-rsxy(i1,i2-2,i3,0,1)+16.*rsxy(i1,i2-1,
     & i3,0,1)-30.*rsxy(i1,i2,i3,0,1)+16.*rsxy(i1,i2+1,i3,0,1)-rsxy(
     & i1,i2+2,i3,0,1))/(12.*dr(1)**2)
                      ajryrt = ((rsxy(i1-2,i2,i3-2,0,1)-8.*rsxy(i1-2,
     & i2,i3-1,0,1)+8.*rsxy(i1-2,i2,i3+1,0,1)-rsxy(i1-2,i2,i3+2,0,1))
     & /(12.*dr(2))-8.*(rsxy(i1-1,i2,i3-2,0,1)-8.*rsxy(i1-1,i2,i3-1,0,
     & 1)+8.*rsxy(i1-1,i2,i3+1,0,1)-rsxy(i1-1,i2,i3+2,0,1))/(12.*dr(2)
     & )+8.*(rsxy(i1+1,i2,i3-2,0,1)-8.*rsxy(i1+1,i2,i3-1,0,1)+8.*rsxy(
     & i1+1,i2,i3+1,0,1)-rsxy(i1+1,i2,i3+2,0,1))/(12.*dr(2))-(rsxy(i1+
     & 2,i2,i3-2,0,1)-8.*rsxy(i1+2,i2,i3-1,0,1)+8.*rsxy(i1+2,i2,i3+1,
     & 0,1)-rsxy(i1+2,i2,i3+2,0,1))/(12.*dr(2)))/(12.*dr(0))
                      ajryst = ((rsxy(i1,i2-2,i3-2,0,1)-8.*rsxy(i1,i2-
     & 2,i3-1,0,1)+8.*rsxy(i1,i2-2,i3+1,0,1)-rsxy(i1,i2-2,i3+2,0,1))/(
     & 12.*dr(2))-8.*(rsxy(i1,i2-1,i3-2,0,1)-8.*rsxy(i1,i2-1,i3-1,0,1)
     & +8.*rsxy(i1,i2-1,i3+1,0,1)-rsxy(i1,i2-1,i3+2,0,1))/(12.*dr(2))+
     & 8.*(rsxy(i1,i2+1,i3-2,0,1)-8.*rsxy(i1,i2+1,i3-1,0,1)+8.*rsxy(
     & i1,i2+1,i3+1,0,1)-rsxy(i1,i2+1,i3+2,0,1))/(12.*dr(2))-(rsxy(i1,
     & i2+2,i3-2,0,1)-8.*rsxy(i1,i2+2,i3-1,0,1)+8.*rsxy(i1,i2+2,i3+1,
     & 0,1)-rsxy(i1,i2+2,i3+2,0,1))/(12.*dr(2)))/(12.*dr(1))
                      ajrytt = (-rsxy(i1,i2,i3-2,0,1)+16.*rsxy(i1,i2,
     & i3-1,0,1)-30.*rsxy(i1,i2,i3,0,1)+16.*rsxy(i1,i2,i3+1,0,1)-rsxy(
     & i1,i2,i3+2,0,1))/(12.*dr(2)**2)
                      ajsy = rsxy(i1,i2,i3,1,1)
                      ajsyr = (rsxy(i1-2,i2,i3,1,1)-8.*rsxy(i1-1,i2,i3,
     & 1,1)+8.*rsxy(i1+1,i2,i3,1,1)-rsxy(i1+2,i2,i3,1,1))/(12.*dr(0))
                      ajsys = (rsxy(i1,i2-2,i3,1,1)-8.*rsxy(i1,i2-1,i3,
     & 1,1)+8.*rsxy(i1,i2+1,i3,1,1)-rsxy(i1,i2+2,i3,1,1))/(12.*dr(1))
                      ajsyt = (rsxy(i1,i2,i3-2,1,1)-8.*rsxy(i1,i2,i3-1,
     & 1,1)+8.*rsxy(i1,i2,i3+1,1,1)-rsxy(i1,i2,i3+2,1,1))/(12.*dr(2))
                      ajsyrr = (-rsxy(i1-2,i2,i3,1,1)+16.*rsxy(i1-1,i2,
     & i3,1,1)-30.*rsxy(i1,i2,i3,1,1)+16.*rsxy(i1+1,i2,i3,1,1)-rsxy(
     & i1+2,i2,i3,1,1))/(12.*dr(0)**2)
                      ajsyrs = ((rsxy(i1-2,i2-2,i3,1,1)-8.*rsxy(i1-2,
     & i2-1,i3,1,1)+8.*rsxy(i1-2,i2+1,i3,1,1)-rsxy(i1-2,i2+2,i3,1,1))
     & /(12.*dr(1))-8.*(rsxy(i1-1,i2-2,i3,1,1)-8.*rsxy(i1-1,i2-1,i3,1,
     & 1)+8.*rsxy(i1-1,i2+1,i3,1,1)-rsxy(i1-1,i2+2,i3,1,1))/(12.*dr(1)
     & )+8.*(rsxy(i1+1,i2-2,i3,1,1)-8.*rsxy(i1+1,i2-1,i3,1,1)+8.*rsxy(
     & i1+1,i2+1,i3,1,1)-rsxy(i1+1,i2+2,i3,1,1))/(12.*dr(1))-(rsxy(i1+
     & 2,i2-2,i3,1,1)-8.*rsxy(i1+2,i2-1,i3,1,1)+8.*rsxy(i1+2,i2+1,i3,
     & 1,1)-rsxy(i1+2,i2+2,i3,1,1))/(12.*dr(1)))/(12.*dr(0))
                      ajsyss = (-rsxy(i1,i2-2,i3,1,1)+16.*rsxy(i1,i2-1,
     & i3,1,1)-30.*rsxy(i1,i2,i3,1,1)+16.*rsxy(i1,i2+1,i3,1,1)-rsxy(
     & i1,i2+2,i3,1,1))/(12.*dr(1)**2)
                      ajsyrt = ((rsxy(i1-2,i2,i3-2,1,1)-8.*rsxy(i1-2,
     & i2,i3-1,1,1)+8.*rsxy(i1-2,i2,i3+1,1,1)-rsxy(i1-2,i2,i3+2,1,1))
     & /(12.*dr(2))-8.*(rsxy(i1-1,i2,i3-2,1,1)-8.*rsxy(i1-1,i2,i3-1,1,
     & 1)+8.*rsxy(i1-1,i2,i3+1,1,1)-rsxy(i1-1,i2,i3+2,1,1))/(12.*dr(2)
     & )+8.*(rsxy(i1+1,i2,i3-2,1,1)-8.*rsxy(i1+1,i2,i3-1,1,1)+8.*rsxy(
     & i1+1,i2,i3+1,1,1)-rsxy(i1+1,i2,i3+2,1,1))/(12.*dr(2))-(rsxy(i1+
     & 2,i2,i3-2,1,1)-8.*rsxy(i1+2,i2,i3-1,1,1)+8.*rsxy(i1+2,i2,i3+1,
     & 1,1)-rsxy(i1+2,i2,i3+2,1,1))/(12.*dr(2)))/(12.*dr(0))
                      ajsyst = ((rsxy(i1,i2-2,i3-2,1,1)-8.*rsxy(i1,i2-
     & 2,i3-1,1,1)+8.*rsxy(i1,i2-2,i3+1,1,1)-rsxy(i1,i2-2,i3+2,1,1))/(
     & 12.*dr(2))-8.*(rsxy(i1,i2-1,i3-2,1,1)-8.*rsxy(i1,i2-1,i3-1,1,1)
     & +8.*rsxy(i1,i2-1,i3+1,1,1)-rsxy(i1,i2-1,i3+2,1,1))/(12.*dr(2))+
     & 8.*(rsxy(i1,i2+1,i3-2,1,1)-8.*rsxy(i1,i2+1,i3-1,1,1)+8.*rsxy(
     & i1,i2+1,i3+1,1,1)-rsxy(i1,i2+1,i3+2,1,1))/(12.*dr(2))-(rsxy(i1,
     & i2+2,i3-2,1,1)-8.*rsxy(i1,i2+2,i3-1,1,1)+8.*rsxy(i1,i2+2,i3+1,
     & 1,1)-rsxy(i1,i2+2,i3+2,1,1))/(12.*dr(2)))/(12.*dr(1))
                      ajsytt = (-rsxy(i1,i2,i3-2,1,1)+16.*rsxy(i1,i2,
     & i3-1,1,1)-30.*rsxy(i1,i2,i3,1,1)+16.*rsxy(i1,i2,i3+1,1,1)-rsxy(
     & i1,i2,i3+2,1,1))/(12.*dr(2)**2)
                      ajty = rsxy(i1,i2,i3,2,1)
                      ajtyr = (rsxy(i1-2,i2,i3,2,1)-8.*rsxy(i1-1,i2,i3,
     & 2,1)+8.*rsxy(i1+1,i2,i3,2,1)-rsxy(i1+2,i2,i3,2,1))/(12.*dr(0))
                      ajtys = (rsxy(i1,i2-2,i3,2,1)-8.*rsxy(i1,i2-1,i3,
     & 2,1)+8.*rsxy(i1,i2+1,i3,2,1)-rsxy(i1,i2+2,i3,2,1))/(12.*dr(1))
                      ajtyt = (rsxy(i1,i2,i3-2,2,1)-8.*rsxy(i1,i2,i3-1,
     & 2,1)+8.*rsxy(i1,i2,i3+1,2,1)-rsxy(i1,i2,i3+2,2,1))/(12.*dr(2))
                      ajtyrr = (-rsxy(i1-2,i2,i3,2,1)+16.*rsxy(i1-1,i2,
     & i3,2,1)-30.*rsxy(i1,i2,i3,2,1)+16.*rsxy(i1+1,i2,i3,2,1)-rsxy(
     & i1+2,i2,i3,2,1))/(12.*dr(0)**2)
                      ajtyrs = ((rsxy(i1-2,i2-2,i3,2,1)-8.*rsxy(i1-2,
     & i2-1,i3,2,1)+8.*rsxy(i1-2,i2+1,i3,2,1)-rsxy(i1-2,i2+2,i3,2,1))
     & /(12.*dr(1))-8.*(rsxy(i1-1,i2-2,i3,2,1)-8.*rsxy(i1-1,i2-1,i3,2,
     & 1)+8.*rsxy(i1-1,i2+1,i3,2,1)-rsxy(i1-1,i2+2,i3,2,1))/(12.*dr(1)
     & )+8.*(rsxy(i1+1,i2-2,i3,2,1)-8.*rsxy(i1+1,i2-1,i3,2,1)+8.*rsxy(
     & i1+1,i2+1,i3,2,1)-rsxy(i1+1,i2+2,i3,2,1))/(12.*dr(1))-(rsxy(i1+
     & 2,i2-2,i3,2,1)-8.*rsxy(i1+2,i2-1,i3,2,1)+8.*rsxy(i1+2,i2+1,i3,
     & 2,1)-rsxy(i1+2,i2+2,i3,2,1))/(12.*dr(1)))/(12.*dr(0))
                      ajtyss = (-rsxy(i1,i2-2,i3,2,1)+16.*rsxy(i1,i2-1,
     & i3,2,1)-30.*rsxy(i1,i2,i3,2,1)+16.*rsxy(i1,i2+1,i3,2,1)-rsxy(
     & i1,i2+2,i3,2,1))/(12.*dr(1)**2)
                      ajtyrt = ((rsxy(i1-2,i2,i3-2,2,1)-8.*rsxy(i1-2,
     & i2,i3-1,2,1)+8.*rsxy(i1-2,i2,i3+1,2,1)-rsxy(i1-2,i2,i3+2,2,1))
     & /(12.*dr(2))-8.*(rsxy(i1-1,i2,i3-2,2,1)-8.*rsxy(i1-1,i2,i3-1,2,
     & 1)+8.*rsxy(i1-1,i2,i3+1,2,1)-rsxy(i1-1,i2,i3+2,2,1))/(12.*dr(2)
     & )+8.*(rsxy(i1+1,i2,i3-2,2,1)-8.*rsxy(i1+1,i2,i3-1,2,1)+8.*rsxy(
     & i1+1,i2,i3+1,2,1)-rsxy(i1+1,i2,i3+2,2,1))/(12.*dr(2))-(rsxy(i1+
     & 2,i2,i3-2,2,1)-8.*rsxy(i1+2,i2,i3-1,2,1)+8.*rsxy(i1+2,i2,i3+1,
     & 2,1)-rsxy(i1+2,i2,i3+2,2,1))/(12.*dr(2)))/(12.*dr(0))
                      ajtyst = ((rsxy(i1,i2-2,i3-2,2,1)-8.*rsxy(i1,i2-
     & 2,i3-1,2,1)+8.*rsxy(i1,i2-2,i3+1,2,1)-rsxy(i1,i2-2,i3+2,2,1))/(
     & 12.*dr(2))-8.*(rsxy(i1,i2-1,i3-2,2,1)-8.*rsxy(i1,i2-1,i3-1,2,1)
     & +8.*rsxy(i1,i2-1,i3+1,2,1)-rsxy(i1,i2-1,i3+2,2,1))/(12.*dr(2))+
     & 8.*(rsxy(i1,i2+1,i3-2,2,1)-8.*rsxy(i1,i2+1,i3-1,2,1)+8.*rsxy(
     & i1,i2+1,i3+1,2,1)-rsxy(i1,i2+1,i3+2,2,1))/(12.*dr(2))-(rsxy(i1,
     & i2+2,i3-2,2,1)-8.*rsxy(i1,i2+2,i3-1,2,1)+8.*rsxy(i1,i2+2,i3+1,
     & 2,1)-rsxy(i1,i2+2,i3+2,2,1))/(12.*dr(2)))/(12.*dr(1))
                      ajtytt = (-rsxy(i1,i2,i3-2,2,1)+16.*rsxy(i1,i2,
     & i3-1,2,1)-30.*rsxy(i1,i2,i3,2,1)+16.*rsxy(i1,i2,i3+1,2,1)-rsxy(
     & i1,i2,i3+2,2,1))/(12.*dr(2)**2)
                      ajrz = rsxy(i1,i2,i3,0,2)
                      ajrzr = (rsxy(i1-2,i2,i3,0,2)-8.*rsxy(i1-1,i2,i3,
     & 0,2)+8.*rsxy(i1+1,i2,i3,0,2)-rsxy(i1+2,i2,i3,0,2))/(12.*dr(0))
                      ajrzs = (rsxy(i1,i2-2,i3,0,2)-8.*rsxy(i1,i2-1,i3,
     & 0,2)+8.*rsxy(i1,i2+1,i3,0,2)-rsxy(i1,i2+2,i3,0,2))/(12.*dr(1))
                      ajrzt = (rsxy(i1,i2,i3-2,0,2)-8.*rsxy(i1,i2,i3-1,
     & 0,2)+8.*rsxy(i1,i2,i3+1,0,2)-rsxy(i1,i2,i3+2,0,2))/(12.*dr(2))
                      ajrzrr = (-rsxy(i1-2,i2,i3,0,2)+16.*rsxy(i1-1,i2,
     & i3,0,2)-30.*rsxy(i1,i2,i3,0,2)+16.*rsxy(i1+1,i2,i3,0,2)-rsxy(
     & i1+2,i2,i3,0,2))/(12.*dr(0)**2)
                      ajrzrs = ((rsxy(i1-2,i2-2,i3,0,2)-8.*rsxy(i1-2,
     & i2-1,i3,0,2)+8.*rsxy(i1-2,i2+1,i3,0,2)-rsxy(i1-2,i2+2,i3,0,2))
     & /(12.*dr(1))-8.*(rsxy(i1-1,i2-2,i3,0,2)-8.*rsxy(i1-1,i2-1,i3,0,
     & 2)+8.*rsxy(i1-1,i2+1,i3,0,2)-rsxy(i1-1,i2+2,i3,0,2))/(12.*dr(1)
     & )+8.*(rsxy(i1+1,i2-2,i3,0,2)-8.*rsxy(i1+1,i2-1,i3,0,2)+8.*rsxy(
     & i1+1,i2+1,i3,0,2)-rsxy(i1+1,i2+2,i3,0,2))/(12.*dr(1))-(rsxy(i1+
     & 2,i2-2,i3,0,2)-8.*rsxy(i1+2,i2-1,i3,0,2)+8.*rsxy(i1+2,i2+1,i3,
     & 0,2)-rsxy(i1+2,i2+2,i3,0,2))/(12.*dr(1)))/(12.*dr(0))
                      ajrzss = (-rsxy(i1,i2-2,i3,0,2)+16.*rsxy(i1,i2-1,
     & i3,0,2)-30.*rsxy(i1,i2,i3,0,2)+16.*rsxy(i1,i2+1,i3,0,2)-rsxy(
     & i1,i2+2,i3,0,2))/(12.*dr(1)**2)
                      ajrzrt = ((rsxy(i1-2,i2,i3-2,0,2)-8.*rsxy(i1-2,
     & i2,i3-1,0,2)+8.*rsxy(i1-2,i2,i3+1,0,2)-rsxy(i1-2,i2,i3+2,0,2))
     & /(12.*dr(2))-8.*(rsxy(i1-1,i2,i3-2,0,2)-8.*rsxy(i1-1,i2,i3-1,0,
     & 2)+8.*rsxy(i1-1,i2,i3+1,0,2)-rsxy(i1-1,i2,i3+2,0,2))/(12.*dr(2)
     & )+8.*(rsxy(i1+1,i2,i3-2,0,2)-8.*rsxy(i1+1,i2,i3-1,0,2)+8.*rsxy(
     & i1+1,i2,i3+1,0,2)-rsxy(i1+1,i2,i3+2,0,2))/(12.*dr(2))-(rsxy(i1+
     & 2,i2,i3-2,0,2)-8.*rsxy(i1+2,i2,i3-1,0,2)+8.*rsxy(i1+2,i2,i3+1,
     & 0,2)-rsxy(i1+2,i2,i3+2,0,2))/(12.*dr(2)))/(12.*dr(0))
                      ajrzst = ((rsxy(i1,i2-2,i3-2,0,2)-8.*rsxy(i1,i2-
     & 2,i3-1,0,2)+8.*rsxy(i1,i2-2,i3+1,0,2)-rsxy(i1,i2-2,i3+2,0,2))/(
     & 12.*dr(2))-8.*(rsxy(i1,i2-1,i3-2,0,2)-8.*rsxy(i1,i2-1,i3-1,0,2)
     & +8.*rsxy(i1,i2-1,i3+1,0,2)-rsxy(i1,i2-1,i3+2,0,2))/(12.*dr(2))+
     & 8.*(rsxy(i1,i2+1,i3-2,0,2)-8.*rsxy(i1,i2+1,i3-1,0,2)+8.*rsxy(
     & i1,i2+1,i3+1,0,2)-rsxy(i1,i2+1,i3+2,0,2))/(12.*dr(2))-(rsxy(i1,
     & i2+2,i3-2,0,2)-8.*rsxy(i1,i2+2,i3-1,0,2)+8.*rsxy(i1,i2+2,i3+1,
     & 0,2)-rsxy(i1,i2+2,i3+2,0,2))/(12.*dr(2)))/(12.*dr(1))
                      ajrztt = (-rsxy(i1,i2,i3-2,0,2)+16.*rsxy(i1,i2,
     & i3-1,0,2)-30.*rsxy(i1,i2,i3,0,2)+16.*rsxy(i1,i2,i3+1,0,2)-rsxy(
     & i1,i2,i3+2,0,2))/(12.*dr(2)**2)
                      ajsz = rsxy(i1,i2,i3,1,2)
                      ajszr = (rsxy(i1-2,i2,i3,1,2)-8.*rsxy(i1-1,i2,i3,
     & 1,2)+8.*rsxy(i1+1,i2,i3,1,2)-rsxy(i1+2,i2,i3,1,2))/(12.*dr(0))
                      ajszs = (rsxy(i1,i2-2,i3,1,2)-8.*rsxy(i1,i2-1,i3,
     & 1,2)+8.*rsxy(i1,i2+1,i3,1,2)-rsxy(i1,i2+2,i3,1,2))/(12.*dr(1))
                      ajszt = (rsxy(i1,i2,i3-2,1,2)-8.*rsxy(i1,i2,i3-1,
     & 1,2)+8.*rsxy(i1,i2,i3+1,1,2)-rsxy(i1,i2,i3+2,1,2))/(12.*dr(2))
                      ajszrr = (-rsxy(i1-2,i2,i3,1,2)+16.*rsxy(i1-1,i2,
     & i3,1,2)-30.*rsxy(i1,i2,i3,1,2)+16.*rsxy(i1+1,i2,i3,1,2)-rsxy(
     & i1+2,i2,i3,1,2))/(12.*dr(0)**2)
                      ajszrs = ((rsxy(i1-2,i2-2,i3,1,2)-8.*rsxy(i1-2,
     & i2-1,i3,1,2)+8.*rsxy(i1-2,i2+1,i3,1,2)-rsxy(i1-2,i2+2,i3,1,2))
     & /(12.*dr(1))-8.*(rsxy(i1-1,i2-2,i3,1,2)-8.*rsxy(i1-1,i2-1,i3,1,
     & 2)+8.*rsxy(i1-1,i2+1,i3,1,2)-rsxy(i1-1,i2+2,i3,1,2))/(12.*dr(1)
     & )+8.*(rsxy(i1+1,i2-2,i3,1,2)-8.*rsxy(i1+1,i2-1,i3,1,2)+8.*rsxy(
     & i1+1,i2+1,i3,1,2)-rsxy(i1+1,i2+2,i3,1,2))/(12.*dr(1))-(rsxy(i1+
     & 2,i2-2,i3,1,2)-8.*rsxy(i1+2,i2-1,i3,1,2)+8.*rsxy(i1+2,i2+1,i3,
     & 1,2)-rsxy(i1+2,i2+2,i3,1,2))/(12.*dr(1)))/(12.*dr(0))
                      ajszss = (-rsxy(i1,i2-2,i3,1,2)+16.*rsxy(i1,i2-1,
     & i3,1,2)-30.*rsxy(i1,i2,i3,1,2)+16.*rsxy(i1,i2+1,i3,1,2)-rsxy(
     & i1,i2+2,i3,1,2))/(12.*dr(1)**2)
                      ajszrt = ((rsxy(i1-2,i2,i3-2,1,2)-8.*rsxy(i1-2,
     & i2,i3-1,1,2)+8.*rsxy(i1-2,i2,i3+1,1,2)-rsxy(i1-2,i2,i3+2,1,2))
     & /(12.*dr(2))-8.*(rsxy(i1-1,i2,i3-2,1,2)-8.*rsxy(i1-1,i2,i3-1,1,
     & 2)+8.*rsxy(i1-1,i2,i3+1,1,2)-rsxy(i1-1,i2,i3+2,1,2))/(12.*dr(2)
     & )+8.*(rsxy(i1+1,i2,i3-2,1,2)-8.*rsxy(i1+1,i2,i3-1,1,2)+8.*rsxy(
     & i1+1,i2,i3+1,1,2)-rsxy(i1+1,i2,i3+2,1,2))/(12.*dr(2))-(rsxy(i1+
     & 2,i2,i3-2,1,2)-8.*rsxy(i1+2,i2,i3-1,1,2)+8.*rsxy(i1+2,i2,i3+1,
     & 1,2)-rsxy(i1+2,i2,i3+2,1,2))/(12.*dr(2)))/(12.*dr(0))
                      ajszst = ((rsxy(i1,i2-2,i3-2,1,2)-8.*rsxy(i1,i2-
     & 2,i3-1,1,2)+8.*rsxy(i1,i2-2,i3+1,1,2)-rsxy(i1,i2-2,i3+2,1,2))/(
     & 12.*dr(2))-8.*(rsxy(i1,i2-1,i3-2,1,2)-8.*rsxy(i1,i2-1,i3-1,1,2)
     & +8.*rsxy(i1,i2-1,i3+1,1,2)-rsxy(i1,i2-1,i3+2,1,2))/(12.*dr(2))+
     & 8.*(rsxy(i1,i2+1,i3-2,1,2)-8.*rsxy(i1,i2+1,i3-1,1,2)+8.*rsxy(
     & i1,i2+1,i3+1,1,2)-rsxy(i1,i2+1,i3+2,1,2))/(12.*dr(2))-(rsxy(i1,
     & i2+2,i3-2,1,2)-8.*rsxy(i1,i2+2,i3-1,1,2)+8.*rsxy(i1,i2+2,i3+1,
     & 1,2)-rsxy(i1,i2+2,i3+2,1,2))/(12.*dr(2)))/(12.*dr(1))
                      ajsztt = (-rsxy(i1,i2,i3-2,1,2)+16.*rsxy(i1,i2,
     & i3-1,1,2)-30.*rsxy(i1,i2,i3,1,2)+16.*rsxy(i1,i2,i3+1,1,2)-rsxy(
     & i1,i2,i3+2,1,2))/(12.*dr(2)**2)
                      ajtz = rsxy(i1,i2,i3,2,2)
                      ajtzr = (rsxy(i1-2,i2,i3,2,2)-8.*rsxy(i1-1,i2,i3,
     & 2,2)+8.*rsxy(i1+1,i2,i3,2,2)-rsxy(i1+2,i2,i3,2,2))/(12.*dr(0))
                      ajtzs = (rsxy(i1,i2-2,i3,2,2)-8.*rsxy(i1,i2-1,i3,
     & 2,2)+8.*rsxy(i1,i2+1,i3,2,2)-rsxy(i1,i2+2,i3,2,2))/(12.*dr(1))
                      ajtzt = (rsxy(i1,i2,i3-2,2,2)-8.*rsxy(i1,i2,i3-1,
     & 2,2)+8.*rsxy(i1,i2,i3+1,2,2)-rsxy(i1,i2,i3+2,2,2))/(12.*dr(2))
                      ajtzrr = (-rsxy(i1-2,i2,i3,2,2)+16.*rsxy(i1-1,i2,
     & i3,2,2)-30.*rsxy(i1,i2,i3,2,2)+16.*rsxy(i1+1,i2,i3,2,2)-rsxy(
     & i1+2,i2,i3,2,2))/(12.*dr(0)**2)
                      ajtzrs = ((rsxy(i1-2,i2-2,i3,2,2)-8.*rsxy(i1-2,
     & i2-1,i3,2,2)+8.*rsxy(i1-2,i2+1,i3,2,2)-rsxy(i1-2,i2+2,i3,2,2))
     & /(12.*dr(1))-8.*(rsxy(i1-1,i2-2,i3,2,2)-8.*rsxy(i1-1,i2-1,i3,2,
     & 2)+8.*rsxy(i1-1,i2+1,i3,2,2)-rsxy(i1-1,i2+2,i3,2,2))/(12.*dr(1)
     & )+8.*(rsxy(i1+1,i2-2,i3,2,2)-8.*rsxy(i1+1,i2-1,i3,2,2)+8.*rsxy(
     & i1+1,i2+1,i3,2,2)-rsxy(i1+1,i2+2,i3,2,2))/(12.*dr(1))-(rsxy(i1+
     & 2,i2-2,i3,2,2)-8.*rsxy(i1+2,i2-1,i3,2,2)+8.*rsxy(i1+2,i2+1,i3,
     & 2,2)-rsxy(i1+2,i2+2,i3,2,2))/(12.*dr(1)))/(12.*dr(0))
                      ajtzss = (-rsxy(i1,i2-2,i3,2,2)+16.*rsxy(i1,i2-1,
     & i3,2,2)-30.*rsxy(i1,i2,i3,2,2)+16.*rsxy(i1,i2+1,i3,2,2)-rsxy(
     & i1,i2+2,i3,2,2))/(12.*dr(1)**2)
                      ajtzrt = ((rsxy(i1-2,i2,i3-2,2,2)-8.*rsxy(i1-2,
     & i2,i3-1,2,2)+8.*rsxy(i1-2,i2,i3+1,2,2)-rsxy(i1-2,i2,i3+2,2,2))
     & /(12.*dr(2))-8.*(rsxy(i1-1,i2,i3-2,2,2)-8.*rsxy(i1-1,i2,i3-1,2,
     & 2)+8.*rsxy(i1-1,i2,i3+1,2,2)-rsxy(i1-1,i2,i3+2,2,2))/(12.*dr(2)
     & )+8.*(rsxy(i1+1,i2,i3-2,2,2)-8.*rsxy(i1+1,i2,i3-1,2,2)+8.*rsxy(
     & i1+1,i2,i3+1,2,2)-rsxy(i1+1,i2,i3+2,2,2))/(12.*dr(2))-(rsxy(i1+
     & 2,i2,i3-2,2,2)-8.*rsxy(i1+2,i2,i3-1,2,2)+8.*rsxy(i1+2,i2,i3+1,
     & 2,2)-rsxy(i1+2,i2,i3+2,2,2))/(12.*dr(2)))/(12.*dr(0))
                      ajtzst = ((rsxy(i1,i2-2,i3-2,2,2)-8.*rsxy(i1,i2-
     & 2,i3-1,2,2)+8.*rsxy(i1,i2-2,i3+1,2,2)-rsxy(i1,i2-2,i3+2,2,2))/(
     & 12.*dr(2))-8.*(rsxy(i1,i2-1,i3-2,2,2)-8.*rsxy(i1,i2-1,i3-1,2,2)
     & +8.*rsxy(i1,i2-1,i3+1,2,2)-rsxy(i1,i2-1,i3+2,2,2))/(12.*dr(2))+
     & 8.*(rsxy(i1,i2+1,i3-2,2,2)-8.*rsxy(i1,i2+1,i3-1,2,2)+8.*rsxy(
     & i1,i2+1,i3+1,2,2)-rsxy(i1,i2+1,i3+2,2,2))/(12.*dr(2))-(rsxy(i1,
     & i2+2,i3-2,2,2)-8.*rsxy(i1,i2+2,i3-1,2,2)+8.*rsxy(i1,i2+2,i3+1,
     & 2,2)-rsxy(i1,i2+2,i3+2,2,2))/(12.*dr(2)))/(12.*dr(1))
                      ajtztt = (-rsxy(i1,i2,i3-2,2,2)+16.*rsxy(i1,i2,
     & i3-1,2,2)-30.*rsxy(i1,i2,i3,2,2)+16.*rsxy(i1,i2,i3+1,2,2)-rsxy(
     & i1,i2,i3+2,2,2))/(12.*dr(2)**2)
                      ajrxx = ajrx*ajrxr+ajsx*ajrxs+ajtx*ajrxt
                      ajrxy = ajry*ajrxr+ajsy*ajrxs+ajty*ajrxt
                      ajrxz = ajrz*ajrxr+ajsz*ajrxs+ajtz*ajrxt
                      ajsxx = ajrx*ajsxr+ajsx*ajsxs+ajtx*ajsxt
                      ajsxy = ajry*ajsxr+ajsy*ajsxs+ajty*ajsxt
                      ajsxz = ajrz*ajsxr+ajsz*ajsxs+ajtz*ajsxt
                      ajtxx = ajrx*ajtxr+ajsx*ajtxs+ajtx*ajtxt
                      ajtxy = ajry*ajtxr+ajsy*ajtxs+ajty*ajtxt
                      ajtxz = ajrz*ajtxr+ajsz*ajtxs+ajtz*ajtxt
                      ajryx = ajrx*ajryr+ajsx*ajrys+ajtx*ajryt
                      ajryy = ajry*ajryr+ajsy*ajrys+ajty*ajryt
                      ajryz = ajrz*ajryr+ajsz*ajrys+ajtz*ajryt
                      ajsyx = ajrx*ajsyr+ajsx*ajsys+ajtx*ajsyt
                      ajsyy = ajry*ajsyr+ajsy*ajsys+ajty*ajsyt
                      ajsyz = ajrz*ajsyr+ajsz*ajsys+ajtz*ajsyt
                      ajtyx = ajrx*ajtyr+ajsx*ajtys+ajtx*ajtyt
                      ajtyy = ajry*ajtyr+ajsy*ajtys+ajty*ajtyt
                      ajtyz = ajrz*ajtyr+ajsz*ajtys+ajtz*ajtyt
                      ajrzx = ajrx*ajrzr+ajsx*ajrzs+ajtx*ajrzt
                      ajrzy = ajry*ajrzr+ajsy*ajrzs+ajty*ajrzt
                      ajrzz = ajrz*ajrzr+ajsz*ajrzs+ajtz*ajrzt
                      ajszx = ajrx*ajszr+ajsx*ajszs+ajtx*ajszt
                      ajszy = ajry*ajszr+ajsy*ajszs+ajty*ajszt
                      ajszz = ajrz*ajszr+ajsz*ajszs+ajtz*ajszt
                      ajtzx = ajrx*ajtzr+ajsx*ajtzs+ajtx*ajtzt
                      ajtzy = ajry*ajtzr+ajsy*ajtzs+ajty*ajtzt
                      ajtzz = ajrz*ajtzr+ajsz*ajtzs+ajtz*ajtzt
                      t1 = ajrx**2
                      t6 = ajsx**2
                      t14 = ajtx**2
                      ajrxxx = t1*ajrxrr+2*ajrx*ajsx*ajrxrs+t6*ajrxss+
     & 2*ajrx*ajtx*ajrxrt+2*ajsx*ajtx*ajrxst+t14*ajrxtt+ajrxx*ajrxr+
     & ajsxx*ajrxs+ajtxx*ajrxt
                      ajrxxy = ajry*ajrx*ajrxrr+(ajsy*ajrx+ajry*ajsx)*
     & ajrxrs+ajsy*ajsx*ajrxss+(ajry*ajtx+ajty*ajrx)*ajrxrt+(ajty*
     & ajsx+ajsy*ajtx)*ajrxst+ajty*ajtx*ajrxtt+ajrxy*ajrxr+ajsxy*
     & ajrxs+ajtxy*ajrxt
                      t1 = ajry**2
                      t6 = ajsy**2
                      t14 = ajty**2
                      ajrxyy = t1*ajrxrr+2*ajry*ajsy*ajrxrs+t6*ajrxss+
     & 2*ajry*ajty*ajrxrt+2*ajsy*ajty*ajrxst+t14*ajrxtt+ajryy*ajrxr+
     & ajsyy*ajrxs+ajtyy*ajrxt
                      ajrxxz = ajrz*ajrx*ajrxrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajrxrs+ajsz*ajsx*ajrxss+(ajrz*ajtx+ajtz*ajrx)*ajrxrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajrxst+ajtz*ajtx*ajrxtt+ajrxz*ajrxr+ajsxz*
     & ajrxs+ajtxz*ajrxt
                      ajrxyz = ajrz*ajry*ajrxrr+(ajsz*ajry+ajrz*ajsy)*
     & ajrxrs+ajsz*ajsy*ajrxss+(ajrz*ajty+ajtz*ajry)*ajrxrt+(ajtz*
     & ajsy+ajsz*ajty)*ajrxst+ajtz*ajty*ajrxtt+ajryz*ajrxr+ajsyz*
     & ajrxs+ajtyz*ajrxt
                      t1 = ajrz**2
                      t6 = ajsz**2
                      t14 = ajtz**2
                      ajrxzz = t1*ajrxrr+2*ajrz*ajsz*ajrxrs+t6*ajrxss+
     & 2*ajrz*ajtz*ajrxrt+2*ajsz*ajtz*ajrxst+t14*ajrxtt+ajrzz*ajrxr+
     & ajszz*ajrxs+ajtzz*ajrxt
                      t1 = ajrx**2
                      t6 = ajsx**2
                      t14 = ajtx**2
                      ajsxxx = t1*ajsxrr+2*ajrx*ajsx*ajsxrs+t6*ajsxss+
     & 2*ajrx*ajtx*ajsxrt+2*ajsx*ajtx*ajsxst+t14*ajsxtt+ajrxx*ajsxr+
     & ajsxx*ajsxs+ajtxx*ajsxt
                      ajsxxy = ajry*ajrx*ajsxrr+(ajsy*ajrx+ajry*ajsx)*
     & ajsxrs+ajsy*ajsx*ajsxss+(ajry*ajtx+ajty*ajrx)*ajsxrt+(ajty*
     & ajsx+ajsy*ajtx)*ajsxst+ajty*ajtx*ajsxtt+ajrxy*ajsxr+ajsxy*
     & ajsxs+ajtxy*ajsxt
                      t1 = ajry**2
                      t6 = ajsy**2
                      t14 = ajty**2
                      ajsxyy = t1*ajsxrr+2*ajry*ajsy*ajsxrs+t6*ajsxss+
     & 2*ajry*ajty*ajsxrt+2*ajsy*ajty*ajsxst+t14*ajsxtt+ajryy*ajsxr+
     & ajsyy*ajsxs+ajtyy*ajsxt
                      ajsxxz = ajrz*ajrx*ajsxrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajsxrs+ajsz*ajsx*ajsxss+(ajrz*ajtx+ajtz*ajrx)*ajsxrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajsxst+ajtz*ajtx*ajsxtt+ajrxz*ajsxr+ajsxz*
     & ajsxs+ajtxz*ajsxt
                      ajsxyz = ajrz*ajry*ajsxrr+(ajsz*ajry+ajrz*ajsy)*
     & ajsxrs+ajsz*ajsy*ajsxss+(ajrz*ajty+ajtz*ajry)*ajsxrt+(ajtz*
     & ajsy+ajsz*ajty)*ajsxst+ajtz*ajty*ajsxtt+ajryz*ajsxr+ajsyz*
     & ajsxs+ajtyz*ajsxt
                      t1 = ajrz**2
                      t6 = ajsz**2
                      t14 = ajtz**2
                      ajsxzz = t1*ajsxrr+2*ajrz*ajsz*ajsxrs+t6*ajsxss+
     & 2*ajrz*ajtz*ajsxrt+2*ajsz*ajtz*ajsxst+t14*ajsxtt+ajrzz*ajsxr+
     & ajszz*ajsxs+ajtzz*ajsxt
                      t1 = ajrx**2
                      t6 = ajsx**2
                      t14 = ajtx**2
                      ajtxxx = t1*ajtxrr+2*ajrx*ajsx*ajtxrs+t6*ajtxss+
     & 2*ajrx*ajtx*ajtxrt+2*ajsx*ajtx*ajtxst+t14*ajtxtt+ajrxx*ajtxr+
     & ajsxx*ajtxs+ajtxx*ajtxt
                      ajtxxy = ajry*ajrx*ajtxrr+(ajsy*ajrx+ajry*ajsx)*
     & ajtxrs+ajsy*ajsx*ajtxss+(ajry*ajtx+ajty*ajrx)*ajtxrt+(ajty*
     & ajsx+ajsy*ajtx)*ajtxst+ajty*ajtx*ajtxtt+ajrxy*ajtxr+ajsxy*
     & ajtxs+ajtxy*ajtxt
                      t1 = ajry**2
                      t6 = ajsy**2
                      t14 = ajty**2
                      ajtxyy = t1*ajtxrr+2*ajry*ajsy*ajtxrs+t6*ajtxss+
     & 2*ajry*ajty*ajtxrt+2*ajsy*ajty*ajtxst+t14*ajtxtt+ajryy*ajtxr+
     & ajsyy*ajtxs+ajtyy*ajtxt
                      ajtxxz = ajrz*ajrx*ajtxrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajtxrs+ajsz*ajsx*ajtxss+(ajrz*ajtx+ajtz*ajrx)*ajtxrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajtxst+ajtz*ajtx*ajtxtt+ajrxz*ajtxr+ajsxz*
     & ajtxs+ajtxz*ajtxt
                      ajtxyz = ajrz*ajry*ajtxrr+(ajsz*ajry+ajrz*ajsy)*
     & ajtxrs+ajsz*ajsy*ajtxss+(ajrz*ajty+ajtz*ajry)*ajtxrt+(ajtz*
     & ajsy+ajsz*ajty)*ajtxst+ajtz*ajty*ajtxtt+ajryz*ajtxr+ajsyz*
     & ajtxs+ajtyz*ajtxt
                      t1 = ajrz**2
                      t6 = ajsz**2
                      t14 = ajtz**2
                      ajtxzz = t1*ajtxrr+2*ajrz*ajsz*ajtxrs+t6*ajtxss+
     & 2*ajrz*ajtz*ajtxrt+2*ajsz*ajtz*ajtxst+t14*ajtxtt+ajrzz*ajtxr+
     & ajszz*ajtxs+ajtzz*ajtxt
                      t1 = ajrx**2
                      t6 = ajsx**2
                      t14 = ajtx**2
                      ajryxx = t1*ajryrr+2*ajrx*ajsx*ajryrs+t6*ajryss+
     & 2*ajrx*ajtx*ajryrt+2*ajsx*ajtx*ajryst+t14*ajrytt+ajrxx*ajryr+
     & ajsxx*ajrys+ajtxx*ajryt
                      ajryxy = ajry*ajrx*ajryrr+(ajsy*ajrx+ajry*ajsx)*
     & ajryrs+ajsy*ajsx*ajryss+(ajry*ajtx+ajty*ajrx)*ajryrt+(ajty*
     & ajsx+ajsy*ajtx)*ajryst+ajty*ajtx*ajrytt+ajrxy*ajryr+ajsxy*
     & ajrys+ajtxy*ajryt
                      t1 = ajry**2
                      t6 = ajsy**2
                      t14 = ajty**2
                      ajryyy = t1*ajryrr+2*ajry*ajsy*ajryrs+t6*ajryss+
     & 2*ajry*ajty*ajryrt+2*ajsy*ajty*ajryst+t14*ajrytt+ajryy*ajryr+
     & ajsyy*ajrys+ajtyy*ajryt
                      ajryxz = ajrz*ajrx*ajryrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajryrs+ajsz*ajsx*ajryss+(ajrz*ajtx+ajtz*ajrx)*ajryrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajryst+ajtz*ajtx*ajrytt+ajrxz*ajryr+ajsxz*
     & ajrys+ajtxz*ajryt
                      ajryyz = ajrz*ajry*ajryrr+(ajsz*ajry+ajrz*ajsy)*
     & ajryrs+ajsz*ajsy*ajryss+(ajrz*ajty+ajtz*ajry)*ajryrt+(ajtz*
     & ajsy+ajsz*ajty)*ajryst+ajtz*ajty*ajrytt+ajryz*ajryr+ajsyz*
     & ajrys+ajtyz*ajryt
                      t1 = ajrz**2
                      t6 = ajsz**2
                      t14 = ajtz**2
                      ajryzz = t1*ajryrr+2*ajrz*ajsz*ajryrs+t6*ajryss+
     & 2*ajrz*ajtz*ajryrt+2*ajsz*ajtz*ajryst+t14*ajrytt+ajrzz*ajryr+
     & ajszz*ajrys+ajtzz*ajryt
                      t1 = ajrx**2
                      t6 = ajsx**2
                      t14 = ajtx**2
                      ajsyxx = t1*ajsyrr+2*ajrx*ajsx*ajsyrs+t6*ajsyss+
     & 2*ajrx*ajtx*ajsyrt+2*ajsx*ajtx*ajsyst+t14*ajsytt+ajrxx*ajsyr+
     & ajsxx*ajsys+ajtxx*ajsyt
                      ajsyxy = ajry*ajrx*ajsyrr+(ajsy*ajrx+ajry*ajsx)*
     & ajsyrs+ajsy*ajsx*ajsyss+(ajry*ajtx+ajty*ajrx)*ajsyrt+(ajty*
     & ajsx+ajsy*ajtx)*ajsyst+ajty*ajtx*ajsytt+ajrxy*ajsyr+ajsxy*
     & ajsys+ajtxy*ajsyt
                      t1 = ajry**2
                      t6 = ajsy**2
                      t14 = ajty**2
                      ajsyyy = t1*ajsyrr+2*ajry*ajsy*ajsyrs+t6*ajsyss+
     & 2*ajry*ajty*ajsyrt+2*ajsy*ajty*ajsyst+t14*ajsytt+ajryy*ajsyr+
     & ajsyy*ajsys+ajtyy*ajsyt
                      ajsyxz = ajrz*ajrx*ajsyrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajsyrs+ajsz*ajsx*ajsyss+(ajrz*ajtx+ajtz*ajrx)*ajsyrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajsyst+ajtz*ajtx*ajsytt+ajrxz*ajsyr+ajsxz*
     & ajsys+ajtxz*ajsyt
                      ajsyyz = ajrz*ajry*ajsyrr+(ajsz*ajry+ajrz*ajsy)*
     & ajsyrs+ajsz*ajsy*ajsyss+(ajrz*ajty+ajtz*ajry)*ajsyrt+(ajtz*
     & ajsy+ajsz*ajty)*ajsyst+ajtz*ajty*ajsytt+ajryz*ajsyr+ajsyz*
     & ajsys+ajtyz*ajsyt
                      t1 = ajrz**2
                      t6 = ajsz**2
                      t14 = ajtz**2
                      ajsyzz = t1*ajsyrr+2*ajrz*ajsz*ajsyrs+t6*ajsyss+
     & 2*ajrz*ajtz*ajsyrt+2*ajsz*ajtz*ajsyst+t14*ajsytt+ajrzz*ajsyr+
     & ajszz*ajsys+ajtzz*ajsyt
                      t1 = ajrx**2
                      t6 = ajsx**2
                      t14 = ajtx**2
                      ajtyxx = t1*ajtyrr+2*ajrx*ajsx*ajtyrs+t6*ajtyss+
     & 2*ajrx*ajtx*ajtyrt+2*ajsx*ajtx*ajtyst+t14*ajtytt+ajrxx*ajtyr+
     & ajsxx*ajtys+ajtxx*ajtyt
                      ajtyxy = ajry*ajrx*ajtyrr+(ajsy*ajrx+ajry*ajsx)*
     & ajtyrs+ajsy*ajsx*ajtyss+(ajry*ajtx+ajty*ajrx)*ajtyrt+(ajty*
     & ajsx+ajsy*ajtx)*ajtyst+ajty*ajtx*ajtytt+ajrxy*ajtyr+ajsxy*
     & ajtys+ajtxy*ajtyt
                      t1 = ajry**2
                      t6 = ajsy**2
                      t14 = ajty**2
                      ajtyyy = t1*ajtyrr+2*ajry*ajsy*ajtyrs+t6*ajtyss+
     & 2*ajry*ajty*ajtyrt+2*ajsy*ajty*ajtyst+t14*ajtytt+ajryy*ajtyr+
     & ajsyy*ajtys+ajtyy*ajtyt
                      ajtyxz = ajrz*ajrx*ajtyrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajtyrs+ajsz*ajsx*ajtyss+(ajrz*ajtx+ajtz*ajrx)*ajtyrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajtyst+ajtz*ajtx*ajtytt+ajrxz*ajtyr+ajsxz*
     & ajtys+ajtxz*ajtyt
                      ajtyyz = ajrz*ajry*ajtyrr+(ajsz*ajry+ajrz*ajsy)*
     & ajtyrs+ajsz*ajsy*ajtyss+(ajrz*ajty+ajtz*ajry)*ajtyrt+(ajtz*
     & ajsy+ajsz*ajty)*ajtyst+ajtz*ajty*ajtytt+ajryz*ajtyr+ajsyz*
     & ajtys+ajtyz*ajtyt
                      t1 = ajrz**2
                      t6 = ajsz**2
                      t14 = ajtz**2
                      ajtyzz = t1*ajtyrr+2*ajrz*ajsz*ajtyrs+t6*ajtyss+
     & 2*ajrz*ajtz*ajtyrt+2*ajsz*ajtz*ajtyst+t14*ajtytt+ajrzz*ajtyr+
     & ajszz*ajtys+ajtzz*ajtyt
                      t1 = ajrx**2
                      t6 = ajsx**2
                      t14 = ajtx**2
                      ajrzxx = t1*ajrzrr+2*ajrx*ajsx*ajrzrs+t6*ajrzss+
     & 2*ajrx*ajtx*ajrzrt+2*ajsx*ajtx*ajrzst+t14*ajrztt+ajrxx*ajrzr+
     & ajsxx*ajrzs+ajtxx*ajrzt
                      ajrzxy = ajry*ajrx*ajrzrr+(ajsy*ajrx+ajry*ajsx)*
     & ajrzrs+ajsy*ajsx*ajrzss+(ajry*ajtx+ajty*ajrx)*ajrzrt+(ajty*
     & ajsx+ajsy*ajtx)*ajrzst+ajty*ajtx*ajrztt+ajrxy*ajrzr+ajsxy*
     & ajrzs+ajtxy*ajrzt
                      t1 = ajry**2
                      t6 = ajsy**2
                      t14 = ajty**2
                      ajrzyy = t1*ajrzrr+2*ajry*ajsy*ajrzrs+t6*ajrzss+
     & 2*ajry*ajty*ajrzrt+2*ajsy*ajty*ajrzst+t14*ajrztt+ajryy*ajrzr+
     & ajsyy*ajrzs+ajtyy*ajrzt
                      ajrzxz = ajrz*ajrx*ajrzrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajrzrs+ajsz*ajsx*ajrzss+(ajrz*ajtx+ajtz*ajrx)*ajrzrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajrzst+ajtz*ajtx*ajrztt+ajrxz*ajrzr+ajsxz*
     & ajrzs+ajtxz*ajrzt
                      ajrzyz = ajrz*ajry*ajrzrr+(ajsz*ajry+ajrz*ajsy)*
     & ajrzrs+ajsz*ajsy*ajrzss+(ajrz*ajty+ajtz*ajry)*ajrzrt+(ajtz*
     & ajsy+ajsz*ajty)*ajrzst+ajtz*ajty*ajrztt+ajryz*ajrzr+ajsyz*
     & ajrzs+ajtyz*ajrzt
                      t1 = ajrz**2
                      t6 = ajsz**2
                      t14 = ajtz**2
                      ajrzzz = t1*ajrzrr+2*ajrz*ajsz*ajrzrs+t6*ajrzss+
     & 2*ajrz*ajtz*ajrzrt+2*ajsz*ajtz*ajrzst+t14*ajrztt+ajrzz*ajrzr+
     & ajszz*ajrzs+ajtzz*ajrzt
                      t1 = ajrx**2
                      t6 = ajsx**2
                      t14 = ajtx**2
                      ajszxx = t1*ajszrr+2*ajrx*ajsx*ajszrs+t6*ajszss+
     & 2*ajrx*ajtx*ajszrt+2*ajsx*ajtx*ajszst+t14*ajsztt+ajrxx*ajszr+
     & ajsxx*ajszs+ajtxx*ajszt
                      ajszxy = ajry*ajrx*ajszrr+(ajsy*ajrx+ajry*ajsx)*
     & ajszrs+ajsy*ajsx*ajszss+(ajry*ajtx+ajty*ajrx)*ajszrt+(ajty*
     & ajsx+ajsy*ajtx)*ajszst+ajty*ajtx*ajsztt+ajrxy*ajszr+ajsxy*
     & ajszs+ajtxy*ajszt
                      t1 = ajry**2
                      t6 = ajsy**2
                      t14 = ajty**2
                      ajszyy = t1*ajszrr+2*ajry*ajsy*ajszrs+t6*ajszss+
     & 2*ajry*ajty*ajszrt+2*ajsy*ajty*ajszst+t14*ajsztt+ajryy*ajszr+
     & ajsyy*ajszs+ajtyy*ajszt
                      ajszxz = ajrz*ajrx*ajszrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajszrs+ajsz*ajsx*ajszss+(ajrz*ajtx+ajtz*ajrx)*ajszrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajszst+ajtz*ajtx*ajsztt+ajrxz*ajszr+ajsxz*
     & ajszs+ajtxz*ajszt
                      ajszyz = ajrz*ajry*ajszrr+(ajsz*ajry+ajrz*ajsy)*
     & ajszrs+ajsz*ajsy*ajszss+(ajrz*ajty+ajtz*ajry)*ajszrt+(ajtz*
     & ajsy+ajsz*ajty)*ajszst+ajtz*ajty*ajsztt+ajryz*ajszr+ajsyz*
     & ajszs+ajtyz*ajszt
                      t1 = ajrz**2
                      t6 = ajsz**2
                      t14 = ajtz**2
                      ajszzz = t1*ajszrr+2*ajrz*ajsz*ajszrs+t6*ajszss+
     & 2*ajrz*ajtz*ajszrt+2*ajsz*ajtz*ajszst+t14*ajsztt+ajrzz*ajszr+
     & ajszz*ajszs+ajtzz*ajszt
                      t1 = ajrx**2
                      t6 = ajsx**2
                      t14 = ajtx**2
                      ajtzxx = t1*ajtzrr+2*ajrx*ajsx*ajtzrs+t6*ajtzss+
     & 2*ajrx*ajtx*ajtzrt+2*ajsx*ajtx*ajtzst+t14*ajtztt+ajrxx*ajtzr+
     & ajsxx*ajtzs+ajtxx*ajtzt
                      ajtzxy = ajry*ajrx*ajtzrr+(ajsy*ajrx+ajry*ajsx)*
     & ajtzrs+ajsy*ajsx*ajtzss+(ajry*ajtx+ajty*ajrx)*ajtzrt+(ajty*
     & ajsx+ajsy*ajtx)*ajtzst+ajty*ajtx*ajtztt+ajrxy*ajtzr+ajsxy*
     & ajtzs+ajtxy*ajtzt
                      t1 = ajry**2
                      t6 = ajsy**2
                      t14 = ajty**2
                      ajtzyy = t1*ajtzrr+2*ajry*ajsy*ajtzrs+t6*ajtzss+
     & 2*ajry*ajty*ajtzrt+2*ajsy*ajty*ajtzst+t14*ajtztt+ajryy*ajtzr+
     & ajsyy*ajtzs+ajtyy*ajtzt
                      ajtzxz = ajrz*ajrx*ajtzrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajtzrs+ajsz*ajsx*ajtzss+(ajrz*ajtx+ajtz*ajrx)*ajtzrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajtzst+ajtz*ajtx*ajtztt+ajrxz*ajtzr+ajsxz*
     & ajtzs+ajtxz*ajtzt
                      ajtzyz = ajrz*ajry*ajtzrr+(ajsz*ajry+ajrz*ajsy)*
     & ajtzrs+ajsz*ajsy*ajtzss+(ajrz*ajty+ajtz*ajry)*ajtzrt+(ajtz*
     & ajsy+ajsz*ajty)*ajtzst+ajtz*ajty*ajtztt+ajryz*ajtzr+ajsyz*
     & ajtzs+ajtyz*ajtzt
                      t1 = ajrz**2
                      t6 = ajsz**2
                      t14 = ajtz**2
                      ajtzzz = t1*ajtzrr+2*ajrz*ajsz*ajtzrs+t6*ajtzss+
     & 2*ajrz*ajtz*ajtzrt+2*ajsz*ajtz*ajtzst+t14*ajtztt+ajrzz*ajtzr+
     & ajszz*ajtzs+ajtzz*ajtzt
                      ! define these derivatives of the mapping (which are not normally computed by the standard macros):
                     ajrxxr=ajrx*ajrxrr + ajsx*ajrxrs + ajtx*ajrxrt + 
     & ajrxr*ajrxr +ajsxr*ajrxs + ajtxr*ajrxt
                     ajrxxs=ajrx*ajrxrs + ajsx*ajrxss + ajtx*ajrxst + 
     & ajrxs*ajrxr +ajsxs*ajrxs + ajtxs*ajrxt
                     ajrxxt=ajrx*ajrxrt + ajsx*ajrxst + ajtx*ajrxtt + 
     & ajrxt*ajrxr +ajsxt*ajrxs + ajtxt*ajrxt
                     ajrxyr=ajry*ajrxrr + ajsy*ajrxrs + ajty*ajrxrt + 
     & ajryr*ajrxr +ajsyr*ajrxs + ajtyr*ajrxt
                     ajrxys=ajry*ajrxrs + ajsy*ajrxss + ajty*ajrxst + 
     & ajrys*ajrxr +ajsys*ajrxs + ajtys*ajrxt
                     ajrxyt=ajry*ajrxrt + ajsy*ajrxst + ajty*ajrxtt + 
     & ajryt*ajrxr +ajsyt*ajrxs + ajtyt*ajrxt
                     ajrxzr=ajrz*ajrxrr + ajsz*ajrxrs + ajtz*ajrxrt + 
     & ajrzr*ajrxr +ajszr*ajrxs + ajtzr*ajrxt
                     ajrxzs=ajrz*ajrxrs + ajsz*ajrxss + ajtz*ajrxst + 
     & ajrzs*ajrxr +ajszs*ajrxs + ajtzs*ajrxt
                     ajrxzt=ajrz*ajrxrt + ajsz*ajrxst + ajtz*ajrxtt + 
     & ajrzt*ajrxr +ajszt*ajrxs + ajtzt*ajrxt
                     ajryxr=ajrx*ajryrr + ajsx*ajryrs + ajtx*ajryrt + 
     & ajrxr*ajryr +ajsxr*ajrys + ajtxr*ajryt
                     ajryxs=ajrx*ajryrs + ajsx*ajryss + ajtx*ajryst + 
     & ajrxs*ajryr +ajsxs*ajrys + ajtxs*ajryt
                     ajryxt=ajrx*ajryrt + ajsx*ajryst + ajtx*ajrytt + 
     & ajrxt*ajryr +ajsxt*ajrys + ajtxt*ajryt
                     ajryyr=ajry*ajryrr + ajsy*ajryrs + ajty*ajryrt + 
     & ajryr*ajryr +ajsyr*ajrys + ajtyr*ajryt
                     ajryys=ajry*ajryrs + ajsy*ajryss + ajty*ajryst + 
     & ajrys*ajryr +ajsys*ajrys + ajtys*ajryt
                     ajryyt=ajry*ajryrt + ajsy*ajryst + ajty*ajrytt + 
     & ajryt*ajryr +ajsyt*ajrys + ajtyt*ajryt
                     ajryzr=ajrz*ajryrr + ajsz*ajryrs + ajtz*ajryrt + 
     & ajrzr*ajryr +ajszr*ajrys + ajtzr*ajryt
                     ajryzs=ajrz*ajryrs + ajsz*ajryss + ajtz*ajryst + 
     & ajrzs*ajryr +ajszs*ajrys + ajtzs*ajryt
                     ajryzt=ajrz*ajryrt + ajsz*ajryst + ajtz*ajrytt + 
     & ajrzt*ajryr +ajszt*ajrys + ajtzt*ajryt
                     ajrzxr=ajrx*ajrzrr + ajsx*ajrzrs + ajtx*ajrzrt + 
     & ajrxr*ajrzr +ajsxr*ajrzs + ajtxr*ajrzt
                     ajrzxs=ajrx*ajrzrs + ajsx*ajrzss + ajtx*ajrzst + 
     & ajrxs*ajrzr +ajsxs*ajrzs + ajtxs*ajrzt
                     ajrzxt=ajrx*ajrzrt + ajsx*ajrzst + ajtx*ajrztt + 
     & ajrxt*ajrzr +ajsxt*ajrzs + ajtxt*ajrzt
                     ajrzyr=ajry*ajrzrr + ajsy*ajrzrs + ajty*ajrzrt + 
     & ajryr*ajrzr +ajsyr*ajrzs + ajtyr*ajrzt
                     ajrzys=ajry*ajrzrs + ajsy*ajrzss + ajty*ajrzst + 
     & ajrys*ajrzr +ajsys*ajrzs + ajtys*ajrzt
                     ajrzyt=ajry*ajrzrt + ajsy*ajrzst + ajty*ajrztt + 
     & ajryt*ajrzr +ajsyt*ajrzs + ajtyt*ajrzt
                     ajrzzr=ajrz*ajrzrr + ajsz*ajrzrs + ajtz*ajrzrt + 
     & ajrzr*ajrzr +ajszr*ajrzs + ajtzr*ajrzt
                     ajrzzs=ajrz*ajrzrs + ajsz*ajrzss + ajtz*ajrzst + 
     & ajrzs*ajrzr +ajszs*ajrzs + ajtzs*ajrzt
                     ajrzzt=ajrz*ajrzrt + ajsz*ajrzst + ajtz*ajrztt + 
     & ajrzt*ajrzr +ajszt*ajrzs + ajtzt*ajrzt
                     ajsxxr=ajrx*ajsxrr + ajsx*ajsxrs + ajtx*ajsxrt + 
     & ajrxr*ajsxr +ajsxr*ajsxs + ajtxr*ajsxt
                     ajsxxs=ajrx*ajsxrs + ajsx*ajsxss + ajtx*ajsxst + 
     & ajrxs*ajsxr +ajsxs*ajsxs + ajtxs*ajsxt
                     ajsxxt=ajrx*ajsxrt + ajsx*ajsxst + ajtx*ajsxtt + 
     & ajrxt*ajsxr +ajsxt*ajsxs + ajtxt*ajsxt
                     ajsxyr=ajry*ajsxrr + ajsy*ajsxrs + ajty*ajsxrt + 
     & ajryr*ajsxr +ajsyr*ajsxs + ajtyr*ajsxt
                     ajsxys=ajry*ajsxrs + ajsy*ajsxss + ajty*ajsxst + 
     & ajrys*ajsxr +ajsys*ajsxs + ajtys*ajsxt
                     ajsxyt=ajry*ajsxrt + ajsy*ajsxst + ajty*ajsxtt + 
     & ajryt*ajsxr +ajsyt*ajsxs + ajtyt*ajsxt
                     ajsxzr=ajrz*ajsxrr + ajsz*ajsxrs + ajtz*ajsxrt + 
     & ajrzr*ajsxr +ajszr*ajsxs + ajtzr*ajsxt
                     ajsxzs=ajrz*ajsxrs + ajsz*ajsxss + ajtz*ajsxst + 
     & ajrzs*ajsxr +ajszs*ajsxs + ajtzs*ajsxt
                     ajsxzt=ajrz*ajsxrt + ajsz*ajsxst + ajtz*ajsxtt + 
     & ajrzt*ajsxr +ajszt*ajsxs + ajtzt*ajsxt
                     ajsyxr=ajrx*ajsyrr + ajsx*ajsyrs + ajtx*ajsyrt + 
     & ajrxr*ajsyr +ajsxr*ajsys + ajtxr*ajsyt
                     ajsyxs=ajrx*ajsyrs + ajsx*ajsyss + ajtx*ajsyst + 
     & ajrxs*ajsyr +ajsxs*ajsys + ajtxs*ajsyt
                     ajsyxt=ajrx*ajsyrt + ajsx*ajsyst + ajtx*ajsytt + 
     & ajrxt*ajsyr +ajsxt*ajsys + ajtxt*ajsyt
                     ajsyyr=ajry*ajsyrr + ajsy*ajsyrs + ajty*ajsyrt + 
     & ajryr*ajsyr +ajsyr*ajsys + ajtyr*ajsyt
                     ajsyys=ajry*ajsyrs + ajsy*ajsyss + ajty*ajsyst + 
     & ajrys*ajsyr +ajsys*ajsys + ajtys*ajsyt
                     ajsyyt=ajry*ajsyrt + ajsy*ajsyst + ajty*ajsytt + 
     & ajryt*ajsyr +ajsyt*ajsys + ajtyt*ajsyt
                     ajsyzr=ajrz*ajsyrr + ajsz*ajsyrs + ajtz*ajsyrt + 
     & ajrzr*ajsyr +ajszr*ajsys + ajtzr*ajsyt
                     ajsyzs=ajrz*ajsyrs + ajsz*ajsyss + ajtz*ajsyst + 
     & ajrzs*ajsyr +ajszs*ajsys + ajtzs*ajsyt
                     ajsyzt=ajrz*ajsyrt + ajsz*ajsyst + ajtz*ajsytt + 
     & ajrzt*ajsyr +ajszt*ajsys + ajtzt*ajsyt
                     ajszxr=ajrx*ajszrr + ajsx*ajszrs + ajtx*ajszrt + 
     & ajrxr*ajszr +ajsxr*ajszs + ajtxr*ajszt
                     ajszxs=ajrx*ajszrs + ajsx*ajszss + ajtx*ajszst + 
     & ajrxs*ajszr +ajsxs*ajszs + ajtxs*ajszt
                     ajszxt=ajrx*ajszrt + ajsx*ajszst + ajtx*ajsztt + 
     & ajrxt*ajszr +ajsxt*ajszs + ajtxt*ajszt
                     ajszyr=ajry*ajszrr + ajsy*ajszrs + ajty*ajszrt + 
     & ajryr*ajszr +ajsyr*ajszs + ajtyr*ajszt
                     ajszys=ajry*ajszrs + ajsy*ajszss + ajty*ajszst + 
     & ajrys*ajszr +ajsys*ajszs + ajtys*ajszt
                     ajszyt=ajry*ajszrt + ajsy*ajszst + ajty*ajsztt + 
     & ajryt*ajszr +ajsyt*ajszs + ajtyt*ajszt
                     ajszzr=ajrz*ajszrr + ajsz*ajszrs + ajtz*ajszrt + 
     & ajrzr*ajszr +ajszr*ajszs + ajtzr*ajszt
                     ajszzs=ajrz*ajszrs + ajsz*ajszss + ajtz*ajszst + 
     & ajrzs*ajszr +ajszs*ajszs + ajtzs*ajszt
                     ajszzt=ajrz*ajszrt + ajsz*ajszst + ajtz*ajsztt + 
     & ajrzt*ajszr +ajszt*ajszs + ajtzt*ajszt
                     ajtxxr=ajrx*ajtxrr + ajsx*ajtxrs + ajtx*ajtxrt + 
     & ajrxr*ajtxr +ajsxr*ajtxs + ajtxr*ajtxt
                     ajtxxs=ajrx*ajtxrs + ajsx*ajtxss + ajtx*ajtxst + 
     & ajrxs*ajtxr +ajsxs*ajtxs + ajtxs*ajtxt
                     ajtxxt=ajrx*ajtxrt + ajsx*ajtxst + ajtx*ajtxtt + 
     & ajrxt*ajtxr +ajsxt*ajtxs + ajtxt*ajtxt
                     ajtxyr=ajry*ajtxrr + ajsy*ajtxrs + ajty*ajtxrt + 
     & ajryr*ajtxr +ajsyr*ajtxs + ajtyr*ajtxt
                     ajtxys=ajry*ajtxrs + ajsy*ajtxss + ajty*ajtxst + 
     & ajrys*ajtxr +ajsys*ajtxs + ajtys*ajtxt
                     ajtxyt=ajry*ajtxrt + ajsy*ajtxst + ajty*ajtxtt + 
     & ajryt*ajtxr +ajsyt*ajtxs + ajtyt*ajtxt
                     ajtxzr=ajrz*ajtxrr + ajsz*ajtxrs + ajtz*ajtxrt + 
     & ajrzr*ajtxr +ajszr*ajtxs + ajtzr*ajtxt
                     ajtxzs=ajrz*ajtxrs + ajsz*ajtxss + ajtz*ajtxst + 
     & ajrzs*ajtxr +ajszs*ajtxs + ajtzs*ajtxt
                     ajtxzt=ajrz*ajtxrt + ajsz*ajtxst + ajtz*ajtxtt + 
     & ajrzt*ajtxr +ajszt*ajtxs + ajtzt*ajtxt
                     ajtyxr=ajrx*ajtyrr + ajsx*ajtyrs + ajtx*ajtyrt + 
     & ajrxr*ajtyr +ajsxr*ajtys + ajtxr*ajtyt
                     ajtyxs=ajrx*ajtyrs + ajsx*ajtyss + ajtx*ajtyst + 
     & ajrxs*ajtyr +ajsxs*ajtys + ajtxs*ajtyt
                     ajtyxt=ajrx*ajtyrt + ajsx*ajtyst + ajtx*ajtytt + 
     & ajrxt*ajtyr +ajsxt*ajtys + ajtxt*ajtyt
                     ajtyyr=ajry*ajtyrr + ajsy*ajtyrs + ajty*ajtyrt + 
     & ajryr*ajtyr +ajsyr*ajtys + ajtyr*ajtyt
                     ajtyys=ajry*ajtyrs + ajsy*ajtyss + ajty*ajtyst + 
     & ajrys*ajtyr +ajsys*ajtys + ajtys*ajtyt
                     ajtyyt=ajry*ajtyrt + ajsy*ajtyst + ajty*ajtytt + 
     & ajryt*ajtyr +ajsyt*ajtys + ajtyt*ajtyt
                     ajtyzr=ajrz*ajtyrr + ajsz*ajtyrs + ajtz*ajtyrt + 
     & ajrzr*ajtyr +ajszr*ajtys + ajtzr*ajtyt
                     ajtyzs=ajrz*ajtyrs + ajsz*ajtyss + ajtz*ajtyst + 
     & ajrzs*ajtyr +ajszs*ajtys + ajtzs*ajtyt
                     ajtyzt=ajrz*ajtyrt + ajsz*ajtyst + ajtz*ajtytt + 
     & ajrzt*ajtyr +ajszt*ajtys + ajtzt*ajtyt
                     ajtzxr=ajrx*ajtzrr + ajsx*ajtzrs + ajtx*ajtzrt + 
     & ajrxr*ajtzr +ajsxr*ajtzs + ajtxr*ajtzt
                     ajtzxs=ajrx*ajtzrs + ajsx*ajtzss + ajtx*ajtzst + 
     & ajrxs*ajtzr +ajsxs*ajtzs + ajtxs*ajtzt
                     ajtzxt=ajrx*ajtzrt + ajsx*ajtzst + ajtx*ajtztt + 
     & ajrxt*ajtzr +ajsxt*ajtzs + ajtxt*ajtzt
                     ajtzyr=ajry*ajtzrr + ajsy*ajtzrs + ajty*ajtzrt + 
     & ajryr*ajtzr +ajsyr*ajtzs + ajtyr*ajtzt
                     ajtzys=ajry*ajtzrs + ajsy*ajtzss + ajty*ajtzst + 
     & ajrys*ajtzr +ajsys*ajtzs + ajtys*ajtzt
                     ajtzyt=ajry*ajtzrt + ajsy*ajtzst + ajty*ajtztt + 
     & ajryt*ajtzr +ajsyt*ajtzs + ajtyt*ajtzt
                     ajtzzr=ajrz*ajtzrr + ajsz*ajtzrs + ajtz*ajtzrt + 
     & ajrzr*ajtzr +ajszr*ajtzs + ajtzr*ajtzt
                     ajtzzs=ajrz*ajtzrs + ajsz*ajtzss + ajtz*ajtzst + 
     & ajrzs*ajtzr +ajszs*ajtzs + ajtzs*ajtzt
                     ajtzzt=ajrz*ajtzrt + ajsz*ajtzst + ajtz*ajtztt + 
     & ajrzt*ajtzr +ajszt*ajtzs + ajtzt*ajtzt
                     ! ***************************************************************
                     ! PDE: cxx*uxx + cyy*uyy + czz*uzz + cxy*uxy + cxz*uxz + cyz*uyz + cx*ux + cy*uy + cz*uz + c0 *u = f 
                     ! PDE: cRR*urr + cSS*uss + cTT*utt + cRS*urs + cRT*urt + cST*ust  + ccR*ur + ccS*us + ccT*ut + c0 *u = f 
                     ! =============== Start: Laplace operator: ==================== 
                      cxx=1.
                      cyy=1.
                      czz=1.
                      cxy=0.
                      cxz=0.
                      cyz=0.
                      cx=0.
                      cy=0.
                      cz=0.
                      c0=0.
                      cRR=cxx*ajrx**2+cyy*ajry**2+czz*ajrz**2 +cxy*
     & ajrx*ajry+cxz*ajrx*ajrz+cyz*ajry*ajrz
                      cSS=cxx*ajsx**2+cyy*ajsy**2+czz*ajsz**2 +cxy*
     & ajsx*ajsy+cxz*ajsx*ajsz+cyz*ajsy*ajsz
                      cTT=cxx*ajtx**2+cyy*ajty**2+czz*ajtz**2 +cxy*
     & ajtx*ajty+cxz*ajtx*ajtz+cyz*ajty*ajtz
                      cRS=2.*(cxx*ajrx*ajsx+cyy*ajry*ajsy+czz*ajrz*
     & ajsz) +cxy*(ajrx*ajsy+ajry*ajsx)+cxz*(ajrx*ajsz+ajrz*ajsx)+cyz*
     & (ajry*ajsz+ajrz*ajsy)
                      cRT=2.*(cxx*ajrx*ajtx+cyy*ajry*ajty+czz*ajrz*
     & ajtz) +cxy*(ajrx*ajty+ajry*ajtx)+cxz*(ajrx*ajtz+ajrz*ajtx)+cyz*
     & (ajry*ajtz+ajrz*ajty)
                      cST=2.*(cxx*ajsx*ajtx+cyy*ajsy*ajty+czz*ajsz*
     & ajtz) +cxy*(ajsx*ajty+ajsy*ajtx)+cxz*(ajsx*ajtz+ajsz*ajtx)+cyz*
     & (ajsy*ajtz+ajsz*ajty)
                      ccR=cxx*ajrxx+cyy*ajryy+czz*ajrzz +cxy*ajrxy+cxz*
     & ajrxz+cyz*ajryz + cx*ajrx+cy*ajry+cz*ajrz
                      ccS=cxx*ajsxx+cyy*ajsyy+czz*ajszz +cxy*ajsxy+cxz*
     & ajsxz+cyz*ajsyz + cx*ajsx+cy*ajsy+cz*ajsz
                      ccT=cxx*ajtxx+cyy*ajtyy+czz*ajtzz +cxy*ajtxy+cxz*
     & ajtxz+cyz*ajtyz + cx*ajtx+cy*ajty+cz*ajtz
                     ! m=1...
                      cRRr=2.*(ajrx*ajrxr+ajry*ajryr+ajrz*ajrzr)
                      cRSr=2.*(ajrxr*ajsx+ajrx*ajsxr + ajryr*ajsy+ 
     & ajry*ajsyr + ajrzr*ajsz+ ajrz*ajszr)
                      cRTr=2.*(ajrxr*ajtx+ajrx*ajtxr + ajryr*ajty+ 
     & ajry*ajtyr + ajrzr*ajtz+ ajrz*ajtzr)
                      ccRr=ajrxxr+ajryyr+ajrzzr
                      cRRs=2.*(ajrx*ajrxs+ajry*ajrys+ajrz*ajrzs)
                      cRSs=2.*(ajrxs*ajsx+ajrx*ajsxs + ajrys*ajsy+ 
     & ajry*ajsys + ajrzs*ajsz+ ajrz*ajszs)
                      cRTs=2.*(ajrxs*ajtx+ajrx*ajtxs + ajrys*ajty+ 
     & ajry*ajtys + ajrzs*ajtz+ ajrz*ajtzs)
                      ccRs=ajrxxs+ajryys+ajrzzs
                      cRRt=2.*(ajrx*ajrxt+ajry*ajryt+ajrz*ajrzt)
                      cRSt=2.*(ajrxt*ajsx+ajrx*ajsxt + ajryt*ajsy+ 
     & ajry*ajsyt + ajrzt*ajsz+ ajrz*ajszt)
                      cRTt=2.*(ajrxt*ajtx+ajrx*ajtxt + ajryt*ajty+ 
     & ajry*ajtyt + ajrzt*ajtz+ ajrz*ajtzt)
                      ccRt=ajrxxt+ajryyt+ajrzzt
                     ! m=2...
                      cSSr=2.*(ajsx*ajsxr+ajsy*ajsyr+ajsz*ajszr)
                      cSTr=2.*(ajsxr*ajtx+ajsx*ajtxr + ajsyr*ajty+ 
     & ajsy*ajtyr + ajszr*ajtz+ ajsz*ajtzr)
                      ccSr=ajsxxr+ajsyyr+ajszzr
                      cSSs=2.*(ajsx*ajsxs+ajsy*ajsys+ajsz*ajszs)
                      cSTs=2.*(ajsxs*ajtx+ajsx*ajtxs + ajsys*ajty+ 
     & ajsy*ajtys + ajszs*ajtz+ ajsz*ajtzs)
                      ccSs=ajsxxs+ajsyys+ajszzs
                      cSSt=2.*(ajsx*ajsxt+ajsy*ajsyt+ajsz*ajszt)
                      cSTt=2.*(ajsxt*ajtx+ajsx*ajtxt + ajsyt*ajty+ 
     & ajsy*ajtyt + ajszt*ajtz+ ajsz*ajtzt)
                      ccSt=ajsxxt+ajsyyt+ajszzt
                     ! m=3...
                      cTTr=2.*(ajtx*ajtxr+ajty*ajtyr+ajtz*ajtzr)
                      ccTr=ajtxxr+ajtyyr+ajtzzr
                      cTTs=2.*(ajtx*ajtxs+ajty*ajtys+ajtz*ajtzs)
                      ccTs=ajtxxs+ajtyys+ajtzzs
                      cTTt=2.*(ajtx*ajtxt+ajty*ajtyt+ajtz*ajtzt)
                      ccTt=ajtxxt+ajtyyt+ajtzzt
                      c0r=0.
                      c0s=0.
                      c0t=0.
                     ! =============== End: Laplace operator: ==================== 
                     ! ---------------- Start: Boundary condition: --------------- 
                     ! BC: a1*u.n + a0*u = g 
                     ! nsign=2*side-1
                     ! a1=1.
                     ! a0=0.
                      ! ---------------- Start r direction ---------------
                      ! Outward normal : (n1,n2,n3) 
                      ani=nsign/sqrt(ajrx**2+ajry**2+ajrz**2)
                      n1=ajrx*ani
                      n2=ajry*ani
                      n3=ajrz*ani
                      ! BC : anR*ur + anS*us + anT*ut + a0*u 
                      anR=a1*(n1*ajrx+n2*ajry+n3*ajrz)
                      anS=a1*(n1*ajsx+n2*ajsy+n3*ajsz)
                      anT=a1*(n1*ajtx+n2*ajty+n3*ajtz)
                     ! >>>>>>>
                      anis=-(ajrx*ajrxs+ajry*ajrys+ajrz*ajrzs)*ani**3
                      aniss=-(ajrx*ajrxss+ajry*ajryss+ajrz*ajrzss+
     & ajrxs*ajrxs+ajrys*ajrys+ajrzs*ajrzs)*ani**3 -3.*(ajrx*ajrxs+
     & ajry*ajrys+ajrz*ajrzs)*ani**2*anis
                      n1s=ajrxs*ani + ajrx*anis
                      n1ss=ajrxss*ani + 2.*ajrxs*anis + ajrx*aniss
                      n2s=ajrys*ani + ajry*anis
                      n2ss=ajryss*ani + 2.*ajrys*anis + ajry*aniss
                      n3s=ajrzs*ani + ajrz*anis
                      n3ss=ajrzss*ani + 2.*ajrzs*anis + ajrz*aniss
                      anRs =a1*(n1*ajrxs+n2*ajrys+n3*ajrzs+n1s*ajrx+
     & n2s*ajry+n3s*ajrz)
                      anRss=a1*(n1*ajrxss+n2*ajryss+n3*ajrzss+2.*(n1s*
     & ajrxs+n2s*ajrys+n3s*ajrzs)+n1ss*ajrx+n2ss*ajry+n3ss*ajrz)
                      anSs =a1*(n1*ajsxs+n2*ajsys+n3*ajszs+n1s*ajsx+
     & n2s*ajsy+n3s*ajsz)
                      anSss=a1*(n1*ajsxss+n2*ajsyss+n3*ajszss+2.*(n1s*
     & ajsxs+n2s*ajsys+n3s*ajszs)+n1ss*ajsx+n2ss*ajsy+n3ss*ajsz)
                      anTs =a1*(n1*ajtxs+n2*ajtys+n3*ajtzs+n1s*ajtx+
     & n2s*ajty+n3s*ajtz)
                      anTss=a1*(n1*ajtxss+n2*ajtyss+n3*ajtzss+2.*(n1s*
     & ajtxs+n2s*ajtys+n3s*ajtzs)+n1ss*ajtx+n2ss*ajty+n3ss*ajtz)
                     ! <<<<<<<
                     ! >>>>>>>
                      anit=-(ajrx*ajrxt+ajry*ajryt+ajrz*ajrzt)*ani**3
                      anitt=-(ajrx*ajrxtt+ajry*ajrytt+ajrz*ajrztt+
     & ajrxt*ajrxt+ajryt*ajryt+ajrzt*ajrzt)*ani**3 -3.*(ajrx*ajrxt+
     & ajry*ajryt+ajrz*ajrzt)*ani**2*anit
                      anist=-(ajrx*ajrxst+ajry*ajryst+ajrz*ajrzst+
     & ajrxs*ajrxt+ajrys*ajryt+ajrzs*ajrzt)*ani**3 -3.*(ajrx*ajrxs+
     & ajry*ajrys+ajrz*ajrzs)*ani**2*anit
                      n1t=ajrxt*ani + ajrx*anit
                      n1tt=ajrxtt*ani + 2.*ajrxt*anit + ajrx*anitt
                      n1st=ajrxst*ani + ajrxt*anis + ajrxs*anit + ajrx*
     & anist
                      n2t=ajryt*ani + ajry*anit
                      n2tt=ajrytt*ani + 2.*ajryt*anit + ajry*anitt
                      n2st=ajryst*ani + ajryt*anis + ajrys*anit + ajry*
     & anist
                      n3t=ajrzt*ani + ajrz*anit
                      n3tt=ajrztt*ani + 2.*ajrzt*anit + ajrz*anitt
                      n3st=ajrzst*ani + ajrzt*anis + ajrzs*anit + ajrz*
     & anist
                      anRt =a1*(n1*ajrxt+n2*ajryt+n3*ajrzt+n1t*ajrx+
     & n2t*ajry+n3t*ajrz)
                      anRtt=a1*(n1*ajrxtt+n2*ajrytt+n3*ajrztt+2.*(n1t*
     & ajrxt+n2t*ajryt+n3t*ajrzt)+n1tt*ajrx+n2tt*ajry+n3tt*ajrz)
                      anRst=a1*(n1*ajrxst+n2*ajryst+n3*ajrzst +n1s*
     & ajrxt+n2s*ajryt+n3s*ajrzt +n1t*ajrxs+n2t*ajrys+n3t*ajrzs +n1st*
     & ajrx+n2st*ajry+n3st*ajrz)
                      anSt =a1*(n1*ajsxt+n2*ajsyt+n3*ajszt+n1t*ajsx+
     & n2t*ajsy+n3t*ajsz)
                      anStt=a1*(n1*ajsxtt+n2*ajsytt+n3*ajsztt+2.*(n1t*
     & ajsxt+n2t*ajsyt+n3t*ajszt)+n1tt*ajsx+n2tt*ajsy+n3tt*ajsz)
                      anSst=a1*(n1*ajsxst+n2*ajsyst+n3*ajszst +n1s*
     & ajsxt+n2s*ajsyt+n3s*ajszt +n1t*ajsxs+n2t*ajsys+n3t*ajszs +n1st*
     & ajsx+n2st*ajsy+n3st*ajsz)
                      anTt =a1*(n1*ajtxt+n2*ajtyt+n3*ajtzt+n1t*ajtx+
     & n2t*ajty+n3t*ajtz)
                      anTtt=a1*(n1*ajtxtt+n2*ajtytt+n3*ajtztt+2.*(n1t*
     & ajtxt+n2t*ajtyt+n3t*ajtzt)+n1tt*ajtx+n2tt*ajty+n3tt*ajtz)
                      anTst=a1*(n1*ajtxst+n2*ajtyst+n3*ajtzst +n1s*
     & ajtxt+n2s*ajtyt+n3s*ajtzt +n1t*ajtxs+n2t*ajtys+n3t*ajtzs +n1st*
     & ajtx+n2st*ajty+n3st*ajtz)
                     ! <<<<<<<
                      ! Here are the expressions for the normal derivatives
                     bn3 = 1
                     bn2 = 0
                     bn2 = 0
                     bn1 = 0
                     b0  = -(-c0r*anR**3*cRR**2+cRRr*anR**3*cRR*c0-cRS*
     & cRRs*anR**3*c0+cRS*c0s*anR**3*cRR-cRS**2*cRR*a0ss*anR**2-2*cRS*
     & *2*cRR*anRs**2*a0+cRRs*anR**2*cRS**2*a0s+cSS*cRR**2*a0ss*anR**
     & 2+2*cSS*cRR**2*anRs**2*a0+cRT*c0t*anR**3*cRR-cRT*cRRt*anR**3*
     & c0-cRT**2*cRR*a0tt*anR**2-2*cRT**2*cRR*anRt**2*a0+cRRt*anR**2*
     & cRT**2*a0t+cST*cRR**2*a0st*anR**2+cTT*cRR**2*a0tt*anR**2+2*cTT*
     & cRR**2*anRt**2*a0-ccR**2*anR**2*cRR*a0+ccR*anR**3*cRR*c0+ccS*
     & anR**2*cRR**2*a0s+ccT*anR**2*cRR**2*a0t+c0*anR**2*cRR**2*a0+
     & cRSr*anR**2*cRR**2*a0s+cRTr*anR**2*cRR**2*a0t+ccRr*anR**2*cRR**
     & 2*a0-cRRr*anR**2*cRR*cRS*a0s+cRRr*anR*cRR*cRS*anRs*a0-cRRr*anR*
     & *2*cRR*cRT*a0t+cRRr*anR*cRR*cRT*anRt*a0-cRRr*anR**2*cRR*ccR*a0+
     & 2*cRS**2*cRR*anRs*a0s*anR+cRS**2*cRR*anRss*anR*a0-2*cRS*cRT*
     & cRR*a0st*anR**2+2*cRS*cRT*cRR*anRs*a0t*anR-4*cRS*cRT*cRR*anRs*
     & anRt*a0+2*cRS*cRT*cRR*anRt*a0s*anR+2*cRS*cRT*cRR*anRst*anR*a0-
     & 2*cRS*ccR*anR**2*cRR*a0s+2*cRS*ccR*anR*cRR*anRs*a0-cRS*cRSs*
     & anR**2*cRR*a0s+cRS*cRSs*anR*cRR*anRs*a0-cRS*cRTs*anR**2*cRR*
     & a0t+cRS*cRTs*anR*cRR*anRt*a0-cRS*ccRs*anR**2*cRR*a0-cRRs*anR*
     & cRS**2*anRs*a0+cRS*cRRs*anR**2*cRT*a0t-cRS*cRRs*anR*cRT*anRt*
     & a0+cRS*cRRs*anR**2*ccR*a0-2*cSS*cRR**2*anRs*a0s*anR-cSS*cRR**2*
     & anRss*anR*a0+2*cRT**2*cRR*anRt*a0t*anR+cRT**2*cRR*anRtt*anR*a0-
     & 2*cRT*ccR*anR**2*cRR*a0t+2*cRT*ccR*anR*cRR*anRt*a0-cRT*cRSt*
     & anR**2*cRR*a0s+cRT*cRSt*anR*cRR*anRs*a0-cRT*cRTt*anR**2*cRR*
     & a0t+cRT*cRTt*anR*cRR*anRt*a0-cRT*ccRt*anR**2*cRR*a0+cRT*cRRt*
     & anR**2*cRS*a0s-cRT*cRRt*anR*cRS*anRs*a0-cRRt*anR*cRT**2*anRt*
     & a0+cRT*cRRt*anR**2*ccR*a0-cST*cRR**2*anRs*a0t*anR+2*cST*cRR**2*
     & anRs*anRt*a0-cST*cRR**2*anRt*a0s*anR-cST*cRR**2*anRst*anR*a0-2*
     & cTT*cRR**2*anRt*a0t*anR-cTT*cRR**2*anRtt*anR*a0-ccS*anR*cRR**2*
     & anRs*a0-ccT*anR*cRR**2*anRt*a0-cRSr*anR*cRR**2*anRs*a0-cRTr*
     & anR*cRR**2*anRt*a0)/anR**3/cRR**3
                      ! ---------------- Start s direction ---------------
                      ! ---------------- Start t direction ---------------
                     ! write(*,'(''LS:matrix: side,axis,axisp1,b0,b1,b3,br2 ='',2i2,i3,4e11.3)') side,axis,axisp1,b0,b1,b3,br2
                     ! bn2 = -(-cRRr*anR**3*cRR+cRT*cRRt*anR**3+cRS*cRRs*anR**3-ccR*anR**3*cRR)/anR**3/cRR**2
                     ! write(*,'("LS-NE4:matrix: i1,i2=",2i3," Values:")') i1,i2
                     ! write(*,'("  cRR,anR,cRRr,cRT,cRRt,cRS,cRRs,ccR=",8e11.3)') cRR,anR,cRRr,cRT,cRRt,cRS,cRRs,ccR
                  ! b0  = -(2*cRS**2*anRs*a0s*anR+cRS**2*anRss*anR*a0-2*cRS*cRT*a0st*anR**2-cRS*ccR*anR**2*a0s-cRS*cRSs*anR**2*a0s-cRS*cRTs*anR**2*a0t-cRS*ccRs*anR**2*a0+cSS*cRR*a0ss*anR**2+2*cSS*cRR*anRs**2*a0-cRT*ccR*anR**2*a0t-cRT*cRSt*anR**2*a0s+cRT*c0t*anR**3-c0r*anR**3*cRR-cRS**2*a0ss*anR**2-2*cRS**2*anRs**2*a0+cRS*c0s*anR**3-cRT**2*a0tt*anR**2-2*cRT**2*anRt**2*a0+2*cRS*cRT*anRs*a0t*anR-4*cRS*cRT*anRs*anRt*a0+2*cRS*cRT*anRt*a0s*anR+2*cRS*cRT*anRst*anR*a0+cRS*ccR*anR*anRs*a0+cRS*cRSs*anR*anRs*a0+cRS*cRTs*anR*anRt*a0-2*cSS*cRR*anRs*a0s*anR-cSS*cRR*anRss*anR*a0-cRT*cRTt*anR**2*a0t-cRT*ccRt*anR**2*a0+cRT**2*anRtt*anR*a0+2*cRT**2*anRt*a0t*anR+cST*cRR*a0st*anR**2+cTT*cRR*a0tt*anR**2+2*cTT*cRR*anRt**2*a0+ccS*anR**2*cRR*a0s+ccT*anR**2*cRR*a0t+c0*anR**2*cRR*a0+cRSr*anR**2*cRR*a0s+cRTr*anR**2*cRR*a0t+ccRr*anR**2*cRR*a0+cRT*ccR*anR*anRt*a0+cRT*cRSt*anR*anRs*a0+cRT*cRTt*anR*anRt*a0-cST*cRR*anRs*a0t*anR+2*cST*cRR*anRs*anRt*a0-cST*cRR*anRt*a0s*anR-cST*cRR*anRst*anR*a0-cTT*cRR*anRtt*anR*a0-2*cTT*cRR*anRt*a0t*anR-ccS*anR*cRR*anRs*a0-ccT*anR*cRR*anRt*a0-cRSr*anR*cRR*anRs*a0-cRTr*anR*cRR*anRt*a0)/anR**3/cRR**2
                     ! write(*,'("anRs,a0s,anRss,a0st,cRTs,a0t,a0,cSS,a0ss=",9e10.2)') anRs,a0s,anRss,a0st,cRTs,a0t,a0,cSS,a0ss
                     ! write(*,'(" b0,bn2 =",4e11.3)') b0,bn2
                     c(j1,j2,j3)=-.5/dr(axis)**3
                     d(j1,j2,j3)= 1./dr(axis)**3    +bn2/dr(axis)**2
                     e(j1,j2,j3)=                -2.*bn2/dr(axis)**2 - 
     & b0
                     a(j1,j2,j3)=-1./dr(axis)**3    +bn2/dr(axis)**2
                     b(j1,j2,j3)= .5/dr(axis)**3
                    else if( mask(i1,i2,i3).lt.0 ) then
                        b(j1,j2,j3)= 1.
                        c(j1,j2,j3)=-4.
                        d(j1,j2,j3)= 6.
                        e(j1,j2,j3)=-4.
                        a(j1,j2,j3)= 1.
                    end if
                   end do
                   end do
                   end do
                else if( axis.eq.1 .and. nd.eq.3 )then
                   if( equationToSolve.ne.laplaceEquation )then
                     write(*,'("Ogmg:LSB:ERROR: equation!=laplace")')
                     write(*,'("equationToSolve=",i2)') equationToSolve
                     write(*,'("gridType=",i2)') gridType
                     write(*,'("sparseStencil=",i2)') sparseStencil
                     stop 5054
                   end if
                   nsign = 2*side-1
                   ! write(*,'(''MGLS: neumannAndEquationCurvilinear: a0,a1='',2f6.2)') a0,a1
                   diag=0. ! for now
                   do j3=l3a,l3b
                   do j2=l2a,l2b
                   do j1=l1a,l1b
                    i1=j1+2*is1 ! (i1,i2,i3) is the boundary point
                    i2=j2+2*is2 ! (j1,j2,j3) is the 2nd ghost line
                    i3=j3+2*is3
                    if( mask(i1,i2,i3).gt.0 ) then
                     ! We need 2 parameteric and 1 real derivative. Do this for now: 
                      ! this next call will define the jacobian and its derivatives (parameteric and spatial)
                      ajrx = rsxy(i1,i2,i3,0,0)
                      ajrxr = (rsxy(i1-2,i2,i3,0,0)-8.*rsxy(i1-1,i2,i3,
     & 0,0)+8.*rsxy(i1+1,i2,i3,0,0)-rsxy(i1+2,i2,i3,0,0))/(12.*dr(0))
                      ajrxs = (rsxy(i1,i2-2,i3,0,0)-8.*rsxy(i1,i2-1,i3,
     & 0,0)+8.*rsxy(i1,i2+1,i3,0,0)-rsxy(i1,i2+2,i3,0,0))/(12.*dr(1))
                      ajrxt = (rsxy(i1,i2,i3-2,0,0)-8.*rsxy(i1,i2,i3-1,
     & 0,0)+8.*rsxy(i1,i2,i3+1,0,0)-rsxy(i1,i2,i3+2,0,0))/(12.*dr(2))
                      ajrxrr = (-rsxy(i1-2,i2,i3,0,0)+16.*rsxy(i1-1,i2,
     & i3,0,0)-30.*rsxy(i1,i2,i3,0,0)+16.*rsxy(i1+1,i2,i3,0,0)-rsxy(
     & i1+2,i2,i3,0,0))/(12.*dr(0)**2)
                      ajrxrs = ((rsxy(i1-2,i2-2,i3,0,0)-8.*rsxy(i1-2,
     & i2-1,i3,0,0)+8.*rsxy(i1-2,i2+1,i3,0,0)-rsxy(i1-2,i2+2,i3,0,0))
     & /(12.*dr(1))-8.*(rsxy(i1-1,i2-2,i3,0,0)-8.*rsxy(i1-1,i2-1,i3,0,
     & 0)+8.*rsxy(i1-1,i2+1,i3,0,0)-rsxy(i1-1,i2+2,i3,0,0))/(12.*dr(1)
     & )+8.*(rsxy(i1+1,i2-2,i3,0,0)-8.*rsxy(i1+1,i2-1,i3,0,0)+8.*rsxy(
     & i1+1,i2+1,i3,0,0)-rsxy(i1+1,i2+2,i3,0,0))/(12.*dr(1))-(rsxy(i1+
     & 2,i2-2,i3,0,0)-8.*rsxy(i1+2,i2-1,i3,0,0)+8.*rsxy(i1+2,i2+1,i3,
     & 0,0)-rsxy(i1+2,i2+2,i3,0,0))/(12.*dr(1)))/(12.*dr(0))
                      ajrxss = (-rsxy(i1,i2-2,i3,0,0)+16.*rsxy(i1,i2-1,
     & i3,0,0)-30.*rsxy(i1,i2,i3,0,0)+16.*rsxy(i1,i2+1,i3,0,0)-rsxy(
     & i1,i2+2,i3,0,0))/(12.*dr(1)**2)
                      ajrxrt = ((rsxy(i1-2,i2,i3-2,0,0)-8.*rsxy(i1-2,
     & i2,i3-1,0,0)+8.*rsxy(i1-2,i2,i3+1,0,0)-rsxy(i1-2,i2,i3+2,0,0))
     & /(12.*dr(2))-8.*(rsxy(i1-1,i2,i3-2,0,0)-8.*rsxy(i1-1,i2,i3-1,0,
     & 0)+8.*rsxy(i1-1,i2,i3+1,0,0)-rsxy(i1-1,i2,i3+2,0,0))/(12.*dr(2)
     & )+8.*(rsxy(i1+1,i2,i3-2,0,0)-8.*rsxy(i1+1,i2,i3-1,0,0)+8.*rsxy(
     & i1+1,i2,i3+1,0,0)-rsxy(i1+1,i2,i3+2,0,0))/(12.*dr(2))-(rsxy(i1+
     & 2,i2,i3-2,0,0)-8.*rsxy(i1+2,i2,i3-1,0,0)+8.*rsxy(i1+2,i2,i3+1,
     & 0,0)-rsxy(i1+2,i2,i3+2,0,0))/(12.*dr(2)))/(12.*dr(0))
                      ajrxst = ((rsxy(i1,i2-2,i3-2,0,0)-8.*rsxy(i1,i2-
     & 2,i3-1,0,0)+8.*rsxy(i1,i2-2,i3+1,0,0)-rsxy(i1,i2-2,i3+2,0,0))/(
     & 12.*dr(2))-8.*(rsxy(i1,i2-1,i3-2,0,0)-8.*rsxy(i1,i2-1,i3-1,0,0)
     & +8.*rsxy(i1,i2-1,i3+1,0,0)-rsxy(i1,i2-1,i3+2,0,0))/(12.*dr(2))+
     & 8.*(rsxy(i1,i2+1,i3-2,0,0)-8.*rsxy(i1,i2+1,i3-1,0,0)+8.*rsxy(
     & i1,i2+1,i3+1,0,0)-rsxy(i1,i2+1,i3+2,0,0))/(12.*dr(2))-(rsxy(i1,
     & i2+2,i3-2,0,0)-8.*rsxy(i1,i2+2,i3-1,0,0)+8.*rsxy(i1,i2+2,i3+1,
     & 0,0)-rsxy(i1,i2+2,i3+2,0,0))/(12.*dr(2)))/(12.*dr(1))
                      ajrxtt = (-rsxy(i1,i2,i3-2,0,0)+16.*rsxy(i1,i2,
     & i3-1,0,0)-30.*rsxy(i1,i2,i3,0,0)+16.*rsxy(i1,i2,i3+1,0,0)-rsxy(
     & i1,i2,i3+2,0,0))/(12.*dr(2)**2)
                      ajsx = rsxy(i1,i2,i3,1,0)
                      ajsxr = (rsxy(i1-2,i2,i3,1,0)-8.*rsxy(i1-1,i2,i3,
     & 1,0)+8.*rsxy(i1+1,i2,i3,1,0)-rsxy(i1+2,i2,i3,1,0))/(12.*dr(0))
                      ajsxs = (rsxy(i1,i2-2,i3,1,0)-8.*rsxy(i1,i2-1,i3,
     & 1,0)+8.*rsxy(i1,i2+1,i3,1,0)-rsxy(i1,i2+2,i3,1,0))/(12.*dr(1))
                      ajsxt = (rsxy(i1,i2,i3-2,1,0)-8.*rsxy(i1,i2,i3-1,
     & 1,0)+8.*rsxy(i1,i2,i3+1,1,0)-rsxy(i1,i2,i3+2,1,0))/(12.*dr(2))
                      ajsxrr = (-rsxy(i1-2,i2,i3,1,0)+16.*rsxy(i1-1,i2,
     & i3,1,0)-30.*rsxy(i1,i2,i3,1,0)+16.*rsxy(i1+1,i2,i3,1,0)-rsxy(
     & i1+2,i2,i3,1,0))/(12.*dr(0)**2)
                      ajsxrs = ((rsxy(i1-2,i2-2,i3,1,0)-8.*rsxy(i1-2,
     & i2-1,i3,1,0)+8.*rsxy(i1-2,i2+1,i3,1,0)-rsxy(i1-2,i2+2,i3,1,0))
     & /(12.*dr(1))-8.*(rsxy(i1-1,i2-2,i3,1,0)-8.*rsxy(i1-1,i2-1,i3,1,
     & 0)+8.*rsxy(i1-1,i2+1,i3,1,0)-rsxy(i1-1,i2+2,i3,1,0))/(12.*dr(1)
     & )+8.*(rsxy(i1+1,i2-2,i3,1,0)-8.*rsxy(i1+1,i2-1,i3,1,0)+8.*rsxy(
     & i1+1,i2+1,i3,1,0)-rsxy(i1+1,i2+2,i3,1,0))/(12.*dr(1))-(rsxy(i1+
     & 2,i2-2,i3,1,0)-8.*rsxy(i1+2,i2-1,i3,1,0)+8.*rsxy(i1+2,i2+1,i3,
     & 1,0)-rsxy(i1+2,i2+2,i3,1,0))/(12.*dr(1)))/(12.*dr(0))
                      ajsxss = (-rsxy(i1,i2-2,i3,1,0)+16.*rsxy(i1,i2-1,
     & i3,1,0)-30.*rsxy(i1,i2,i3,1,0)+16.*rsxy(i1,i2+1,i3,1,0)-rsxy(
     & i1,i2+2,i3,1,0))/(12.*dr(1)**2)
                      ajsxrt = ((rsxy(i1-2,i2,i3-2,1,0)-8.*rsxy(i1-2,
     & i2,i3-1,1,0)+8.*rsxy(i1-2,i2,i3+1,1,0)-rsxy(i1-2,i2,i3+2,1,0))
     & /(12.*dr(2))-8.*(rsxy(i1-1,i2,i3-2,1,0)-8.*rsxy(i1-1,i2,i3-1,1,
     & 0)+8.*rsxy(i1-1,i2,i3+1,1,0)-rsxy(i1-1,i2,i3+2,1,0))/(12.*dr(2)
     & )+8.*(rsxy(i1+1,i2,i3-2,1,0)-8.*rsxy(i1+1,i2,i3-1,1,0)+8.*rsxy(
     & i1+1,i2,i3+1,1,0)-rsxy(i1+1,i2,i3+2,1,0))/(12.*dr(2))-(rsxy(i1+
     & 2,i2,i3-2,1,0)-8.*rsxy(i1+2,i2,i3-1,1,0)+8.*rsxy(i1+2,i2,i3+1,
     & 1,0)-rsxy(i1+2,i2,i3+2,1,0))/(12.*dr(2)))/(12.*dr(0))
                      ajsxst = ((rsxy(i1,i2-2,i3-2,1,0)-8.*rsxy(i1,i2-
     & 2,i3-1,1,0)+8.*rsxy(i1,i2-2,i3+1,1,0)-rsxy(i1,i2-2,i3+2,1,0))/(
     & 12.*dr(2))-8.*(rsxy(i1,i2-1,i3-2,1,0)-8.*rsxy(i1,i2-1,i3-1,1,0)
     & +8.*rsxy(i1,i2-1,i3+1,1,0)-rsxy(i1,i2-1,i3+2,1,0))/(12.*dr(2))+
     & 8.*(rsxy(i1,i2+1,i3-2,1,0)-8.*rsxy(i1,i2+1,i3-1,1,0)+8.*rsxy(
     & i1,i2+1,i3+1,1,0)-rsxy(i1,i2+1,i3+2,1,0))/(12.*dr(2))-(rsxy(i1,
     & i2+2,i3-2,1,0)-8.*rsxy(i1,i2+2,i3-1,1,0)+8.*rsxy(i1,i2+2,i3+1,
     & 1,0)-rsxy(i1,i2+2,i3+2,1,0))/(12.*dr(2)))/(12.*dr(1))
                      ajsxtt = (-rsxy(i1,i2,i3-2,1,0)+16.*rsxy(i1,i2,
     & i3-1,1,0)-30.*rsxy(i1,i2,i3,1,0)+16.*rsxy(i1,i2,i3+1,1,0)-rsxy(
     & i1,i2,i3+2,1,0))/(12.*dr(2)**2)
                      ajtx = rsxy(i1,i2,i3,2,0)
                      ajtxr = (rsxy(i1-2,i2,i3,2,0)-8.*rsxy(i1-1,i2,i3,
     & 2,0)+8.*rsxy(i1+1,i2,i3,2,0)-rsxy(i1+2,i2,i3,2,0))/(12.*dr(0))
                      ajtxs = (rsxy(i1,i2-2,i3,2,0)-8.*rsxy(i1,i2-1,i3,
     & 2,0)+8.*rsxy(i1,i2+1,i3,2,0)-rsxy(i1,i2+2,i3,2,0))/(12.*dr(1))
                      ajtxt = (rsxy(i1,i2,i3-2,2,0)-8.*rsxy(i1,i2,i3-1,
     & 2,0)+8.*rsxy(i1,i2,i3+1,2,0)-rsxy(i1,i2,i3+2,2,0))/(12.*dr(2))
                      ajtxrr = (-rsxy(i1-2,i2,i3,2,0)+16.*rsxy(i1-1,i2,
     & i3,2,0)-30.*rsxy(i1,i2,i3,2,0)+16.*rsxy(i1+1,i2,i3,2,0)-rsxy(
     & i1+2,i2,i3,2,0))/(12.*dr(0)**2)
                      ajtxrs = ((rsxy(i1-2,i2-2,i3,2,0)-8.*rsxy(i1-2,
     & i2-1,i3,2,0)+8.*rsxy(i1-2,i2+1,i3,2,0)-rsxy(i1-2,i2+2,i3,2,0))
     & /(12.*dr(1))-8.*(rsxy(i1-1,i2-2,i3,2,0)-8.*rsxy(i1-1,i2-1,i3,2,
     & 0)+8.*rsxy(i1-1,i2+1,i3,2,0)-rsxy(i1-1,i2+2,i3,2,0))/(12.*dr(1)
     & )+8.*(rsxy(i1+1,i2-2,i3,2,0)-8.*rsxy(i1+1,i2-1,i3,2,0)+8.*rsxy(
     & i1+1,i2+1,i3,2,0)-rsxy(i1+1,i2+2,i3,2,0))/(12.*dr(1))-(rsxy(i1+
     & 2,i2-2,i3,2,0)-8.*rsxy(i1+2,i2-1,i3,2,0)+8.*rsxy(i1+2,i2+1,i3,
     & 2,0)-rsxy(i1+2,i2+2,i3,2,0))/(12.*dr(1)))/(12.*dr(0))
                      ajtxss = (-rsxy(i1,i2-2,i3,2,0)+16.*rsxy(i1,i2-1,
     & i3,2,0)-30.*rsxy(i1,i2,i3,2,0)+16.*rsxy(i1,i2+1,i3,2,0)-rsxy(
     & i1,i2+2,i3,2,0))/(12.*dr(1)**2)
                      ajtxrt = ((rsxy(i1-2,i2,i3-2,2,0)-8.*rsxy(i1-2,
     & i2,i3-1,2,0)+8.*rsxy(i1-2,i2,i3+1,2,0)-rsxy(i1-2,i2,i3+2,2,0))
     & /(12.*dr(2))-8.*(rsxy(i1-1,i2,i3-2,2,0)-8.*rsxy(i1-1,i2,i3-1,2,
     & 0)+8.*rsxy(i1-1,i2,i3+1,2,0)-rsxy(i1-1,i2,i3+2,2,0))/(12.*dr(2)
     & )+8.*(rsxy(i1+1,i2,i3-2,2,0)-8.*rsxy(i1+1,i2,i3-1,2,0)+8.*rsxy(
     & i1+1,i2,i3+1,2,0)-rsxy(i1+1,i2,i3+2,2,0))/(12.*dr(2))-(rsxy(i1+
     & 2,i2,i3-2,2,0)-8.*rsxy(i1+2,i2,i3-1,2,0)+8.*rsxy(i1+2,i2,i3+1,
     & 2,0)-rsxy(i1+2,i2,i3+2,2,0))/(12.*dr(2)))/(12.*dr(0))
                      ajtxst = ((rsxy(i1,i2-2,i3-2,2,0)-8.*rsxy(i1,i2-
     & 2,i3-1,2,0)+8.*rsxy(i1,i2-2,i3+1,2,0)-rsxy(i1,i2-2,i3+2,2,0))/(
     & 12.*dr(2))-8.*(rsxy(i1,i2-1,i3-2,2,0)-8.*rsxy(i1,i2-1,i3-1,2,0)
     & +8.*rsxy(i1,i2-1,i3+1,2,0)-rsxy(i1,i2-1,i3+2,2,0))/(12.*dr(2))+
     & 8.*(rsxy(i1,i2+1,i3-2,2,0)-8.*rsxy(i1,i2+1,i3-1,2,0)+8.*rsxy(
     & i1,i2+1,i3+1,2,0)-rsxy(i1,i2+1,i3+2,2,0))/(12.*dr(2))-(rsxy(i1,
     & i2+2,i3-2,2,0)-8.*rsxy(i1,i2+2,i3-1,2,0)+8.*rsxy(i1,i2+2,i3+1,
     & 2,0)-rsxy(i1,i2+2,i3+2,2,0))/(12.*dr(2)))/(12.*dr(1))
                      ajtxtt = (-rsxy(i1,i2,i3-2,2,0)+16.*rsxy(i1,i2,
     & i3-1,2,0)-30.*rsxy(i1,i2,i3,2,0)+16.*rsxy(i1,i2,i3+1,2,0)-rsxy(
     & i1,i2,i3+2,2,0))/(12.*dr(2)**2)
                      ajry = rsxy(i1,i2,i3,0,1)
                      ajryr = (rsxy(i1-2,i2,i3,0,1)-8.*rsxy(i1-1,i2,i3,
     & 0,1)+8.*rsxy(i1+1,i2,i3,0,1)-rsxy(i1+2,i2,i3,0,1))/(12.*dr(0))
                      ajrys = (rsxy(i1,i2-2,i3,0,1)-8.*rsxy(i1,i2-1,i3,
     & 0,1)+8.*rsxy(i1,i2+1,i3,0,1)-rsxy(i1,i2+2,i3,0,1))/(12.*dr(1))
                      ajryt = (rsxy(i1,i2,i3-2,0,1)-8.*rsxy(i1,i2,i3-1,
     & 0,1)+8.*rsxy(i1,i2,i3+1,0,1)-rsxy(i1,i2,i3+2,0,1))/(12.*dr(2))
                      ajryrr = (-rsxy(i1-2,i2,i3,0,1)+16.*rsxy(i1-1,i2,
     & i3,0,1)-30.*rsxy(i1,i2,i3,0,1)+16.*rsxy(i1+1,i2,i3,0,1)-rsxy(
     & i1+2,i2,i3,0,1))/(12.*dr(0)**2)
                      ajryrs = ((rsxy(i1-2,i2-2,i3,0,1)-8.*rsxy(i1-2,
     & i2-1,i3,0,1)+8.*rsxy(i1-2,i2+1,i3,0,1)-rsxy(i1-2,i2+2,i3,0,1))
     & /(12.*dr(1))-8.*(rsxy(i1-1,i2-2,i3,0,1)-8.*rsxy(i1-1,i2-1,i3,0,
     & 1)+8.*rsxy(i1-1,i2+1,i3,0,1)-rsxy(i1-1,i2+2,i3,0,1))/(12.*dr(1)
     & )+8.*(rsxy(i1+1,i2-2,i3,0,1)-8.*rsxy(i1+1,i2-1,i3,0,1)+8.*rsxy(
     & i1+1,i2+1,i3,0,1)-rsxy(i1+1,i2+2,i3,0,1))/(12.*dr(1))-(rsxy(i1+
     & 2,i2-2,i3,0,1)-8.*rsxy(i1+2,i2-1,i3,0,1)+8.*rsxy(i1+2,i2+1,i3,
     & 0,1)-rsxy(i1+2,i2+2,i3,0,1))/(12.*dr(1)))/(12.*dr(0))
                      ajryss = (-rsxy(i1,i2-2,i3,0,1)+16.*rsxy(i1,i2-1,
     & i3,0,1)-30.*rsxy(i1,i2,i3,0,1)+16.*rsxy(i1,i2+1,i3,0,1)-rsxy(
     & i1,i2+2,i3,0,1))/(12.*dr(1)**2)
                      ajryrt = ((rsxy(i1-2,i2,i3-2,0,1)-8.*rsxy(i1-2,
     & i2,i3-1,0,1)+8.*rsxy(i1-2,i2,i3+1,0,1)-rsxy(i1-2,i2,i3+2,0,1))
     & /(12.*dr(2))-8.*(rsxy(i1-1,i2,i3-2,0,1)-8.*rsxy(i1-1,i2,i3-1,0,
     & 1)+8.*rsxy(i1-1,i2,i3+1,0,1)-rsxy(i1-1,i2,i3+2,0,1))/(12.*dr(2)
     & )+8.*(rsxy(i1+1,i2,i3-2,0,1)-8.*rsxy(i1+1,i2,i3-1,0,1)+8.*rsxy(
     & i1+1,i2,i3+1,0,1)-rsxy(i1+1,i2,i3+2,0,1))/(12.*dr(2))-(rsxy(i1+
     & 2,i2,i3-2,0,1)-8.*rsxy(i1+2,i2,i3-1,0,1)+8.*rsxy(i1+2,i2,i3+1,
     & 0,1)-rsxy(i1+2,i2,i3+2,0,1))/(12.*dr(2)))/(12.*dr(0))
                      ajryst = ((rsxy(i1,i2-2,i3-2,0,1)-8.*rsxy(i1,i2-
     & 2,i3-1,0,1)+8.*rsxy(i1,i2-2,i3+1,0,1)-rsxy(i1,i2-2,i3+2,0,1))/(
     & 12.*dr(2))-8.*(rsxy(i1,i2-1,i3-2,0,1)-8.*rsxy(i1,i2-1,i3-1,0,1)
     & +8.*rsxy(i1,i2-1,i3+1,0,1)-rsxy(i1,i2-1,i3+2,0,1))/(12.*dr(2))+
     & 8.*(rsxy(i1,i2+1,i3-2,0,1)-8.*rsxy(i1,i2+1,i3-1,0,1)+8.*rsxy(
     & i1,i2+1,i3+1,0,1)-rsxy(i1,i2+1,i3+2,0,1))/(12.*dr(2))-(rsxy(i1,
     & i2+2,i3-2,0,1)-8.*rsxy(i1,i2+2,i3-1,0,1)+8.*rsxy(i1,i2+2,i3+1,
     & 0,1)-rsxy(i1,i2+2,i3+2,0,1))/(12.*dr(2)))/(12.*dr(1))
                      ajrytt = (-rsxy(i1,i2,i3-2,0,1)+16.*rsxy(i1,i2,
     & i3-1,0,1)-30.*rsxy(i1,i2,i3,0,1)+16.*rsxy(i1,i2,i3+1,0,1)-rsxy(
     & i1,i2,i3+2,0,1))/(12.*dr(2)**2)
                      ajsy = rsxy(i1,i2,i3,1,1)
                      ajsyr = (rsxy(i1-2,i2,i3,1,1)-8.*rsxy(i1-1,i2,i3,
     & 1,1)+8.*rsxy(i1+1,i2,i3,1,1)-rsxy(i1+2,i2,i3,1,1))/(12.*dr(0))
                      ajsys = (rsxy(i1,i2-2,i3,1,1)-8.*rsxy(i1,i2-1,i3,
     & 1,1)+8.*rsxy(i1,i2+1,i3,1,1)-rsxy(i1,i2+2,i3,1,1))/(12.*dr(1))
                      ajsyt = (rsxy(i1,i2,i3-2,1,1)-8.*rsxy(i1,i2,i3-1,
     & 1,1)+8.*rsxy(i1,i2,i3+1,1,1)-rsxy(i1,i2,i3+2,1,1))/(12.*dr(2))
                      ajsyrr = (-rsxy(i1-2,i2,i3,1,1)+16.*rsxy(i1-1,i2,
     & i3,1,1)-30.*rsxy(i1,i2,i3,1,1)+16.*rsxy(i1+1,i2,i3,1,1)-rsxy(
     & i1+2,i2,i3,1,1))/(12.*dr(0)**2)
                      ajsyrs = ((rsxy(i1-2,i2-2,i3,1,1)-8.*rsxy(i1-2,
     & i2-1,i3,1,1)+8.*rsxy(i1-2,i2+1,i3,1,1)-rsxy(i1-2,i2+2,i3,1,1))
     & /(12.*dr(1))-8.*(rsxy(i1-1,i2-2,i3,1,1)-8.*rsxy(i1-1,i2-1,i3,1,
     & 1)+8.*rsxy(i1-1,i2+1,i3,1,1)-rsxy(i1-1,i2+2,i3,1,1))/(12.*dr(1)
     & )+8.*(rsxy(i1+1,i2-2,i3,1,1)-8.*rsxy(i1+1,i2-1,i3,1,1)+8.*rsxy(
     & i1+1,i2+1,i3,1,1)-rsxy(i1+1,i2+2,i3,1,1))/(12.*dr(1))-(rsxy(i1+
     & 2,i2-2,i3,1,1)-8.*rsxy(i1+2,i2-1,i3,1,1)+8.*rsxy(i1+2,i2+1,i3,
     & 1,1)-rsxy(i1+2,i2+2,i3,1,1))/(12.*dr(1)))/(12.*dr(0))
                      ajsyss = (-rsxy(i1,i2-2,i3,1,1)+16.*rsxy(i1,i2-1,
     & i3,1,1)-30.*rsxy(i1,i2,i3,1,1)+16.*rsxy(i1,i2+1,i3,1,1)-rsxy(
     & i1,i2+2,i3,1,1))/(12.*dr(1)**2)
                      ajsyrt = ((rsxy(i1-2,i2,i3-2,1,1)-8.*rsxy(i1-2,
     & i2,i3-1,1,1)+8.*rsxy(i1-2,i2,i3+1,1,1)-rsxy(i1-2,i2,i3+2,1,1))
     & /(12.*dr(2))-8.*(rsxy(i1-1,i2,i3-2,1,1)-8.*rsxy(i1-1,i2,i3-1,1,
     & 1)+8.*rsxy(i1-1,i2,i3+1,1,1)-rsxy(i1-1,i2,i3+2,1,1))/(12.*dr(2)
     & )+8.*(rsxy(i1+1,i2,i3-2,1,1)-8.*rsxy(i1+1,i2,i3-1,1,1)+8.*rsxy(
     & i1+1,i2,i3+1,1,1)-rsxy(i1+1,i2,i3+2,1,1))/(12.*dr(2))-(rsxy(i1+
     & 2,i2,i3-2,1,1)-8.*rsxy(i1+2,i2,i3-1,1,1)+8.*rsxy(i1+2,i2,i3+1,
     & 1,1)-rsxy(i1+2,i2,i3+2,1,1))/(12.*dr(2)))/(12.*dr(0))
                      ajsyst = ((rsxy(i1,i2-2,i3-2,1,1)-8.*rsxy(i1,i2-
     & 2,i3-1,1,1)+8.*rsxy(i1,i2-2,i3+1,1,1)-rsxy(i1,i2-2,i3+2,1,1))/(
     & 12.*dr(2))-8.*(rsxy(i1,i2-1,i3-2,1,1)-8.*rsxy(i1,i2-1,i3-1,1,1)
     & +8.*rsxy(i1,i2-1,i3+1,1,1)-rsxy(i1,i2-1,i3+2,1,1))/(12.*dr(2))+
     & 8.*(rsxy(i1,i2+1,i3-2,1,1)-8.*rsxy(i1,i2+1,i3-1,1,1)+8.*rsxy(
     & i1,i2+1,i3+1,1,1)-rsxy(i1,i2+1,i3+2,1,1))/(12.*dr(2))-(rsxy(i1,
     & i2+2,i3-2,1,1)-8.*rsxy(i1,i2+2,i3-1,1,1)+8.*rsxy(i1,i2+2,i3+1,
     & 1,1)-rsxy(i1,i2+2,i3+2,1,1))/(12.*dr(2)))/(12.*dr(1))
                      ajsytt = (-rsxy(i1,i2,i3-2,1,1)+16.*rsxy(i1,i2,
     & i3-1,1,1)-30.*rsxy(i1,i2,i3,1,1)+16.*rsxy(i1,i2,i3+1,1,1)-rsxy(
     & i1,i2,i3+2,1,1))/(12.*dr(2)**2)
                      ajty = rsxy(i1,i2,i3,2,1)
                      ajtyr = (rsxy(i1-2,i2,i3,2,1)-8.*rsxy(i1-1,i2,i3,
     & 2,1)+8.*rsxy(i1+1,i2,i3,2,1)-rsxy(i1+2,i2,i3,2,1))/(12.*dr(0))
                      ajtys = (rsxy(i1,i2-2,i3,2,1)-8.*rsxy(i1,i2-1,i3,
     & 2,1)+8.*rsxy(i1,i2+1,i3,2,1)-rsxy(i1,i2+2,i3,2,1))/(12.*dr(1))
                      ajtyt = (rsxy(i1,i2,i3-2,2,1)-8.*rsxy(i1,i2,i3-1,
     & 2,1)+8.*rsxy(i1,i2,i3+1,2,1)-rsxy(i1,i2,i3+2,2,1))/(12.*dr(2))
                      ajtyrr = (-rsxy(i1-2,i2,i3,2,1)+16.*rsxy(i1-1,i2,
     & i3,2,1)-30.*rsxy(i1,i2,i3,2,1)+16.*rsxy(i1+1,i2,i3,2,1)-rsxy(
     & i1+2,i2,i3,2,1))/(12.*dr(0)**2)
                      ajtyrs = ((rsxy(i1-2,i2-2,i3,2,1)-8.*rsxy(i1-2,
     & i2-1,i3,2,1)+8.*rsxy(i1-2,i2+1,i3,2,1)-rsxy(i1-2,i2+2,i3,2,1))
     & /(12.*dr(1))-8.*(rsxy(i1-1,i2-2,i3,2,1)-8.*rsxy(i1-1,i2-1,i3,2,
     & 1)+8.*rsxy(i1-1,i2+1,i3,2,1)-rsxy(i1-1,i2+2,i3,2,1))/(12.*dr(1)
     & )+8.*(rsxy(i1+1,i2-2,i3,2,1)-8.*rsxy(i1+1,i2-1,i3,2,1)+8.*rsxy(
     & i1+1,i2+1,i3,2,1)-rsxy(i1+1,i2+2,i3,2,1))/(12.*dr(1))-(rsxy(i1+
     & 2,i2-2,i3,2,1)-8.*rsxy(i1+2,i2-1,i3,2,1)+8.*rsxy(i1+2,i2+1,i3,
     & 2,1)-rsxy(i1+2,i2+2,i3,2,1))/(12.*dr(1)))/(12.*dr(0))
                      ajtyss = (-rsxy(i1,i2-2,i3,2,1)+16.*rsxy(i1,i2-1,
     & i3,2,1)-30.*rsxy(i1,i2,i3,2,1)+16.*rsxy(i1,i2+1,i3,2,1)-rsxy(
     & i1,i2+2,i3,2,1))/(12.*dr(1)**2)
                      ajtyrt = ((rsxy(i1-2,i2,i3-2,2,1)-8.*rsxy(i1-2,
     & i2,i3-1,2,1)+8.*rsxy(i1-2,i2,i3+1,2,1)-rsxy(i1-2,i2,i3+2,2,1))
     & /(12.*dr(2))-8.*(rsxy(i1-1,i2,i3-2,2,1)-8.*rsxy(i1-1,i2,i3-1,2,
     & 1)+8.*rsxy(i1-1,i2,i3+1,2,1)-rsxy(i1-1,i2,i3+2,2,1))/(12.*dr(2)
     & )+8.*(rsxy(i1+1,i2,i3-2,2,1)-8.*rsxy(i1+1,i2,i3-1,2,1)+8.*rsxy(
     & i1+1,i2,i3+1,2,1)-rsxy(i1+1,i2,i3+2,2,1))/(12.*dr(2))-(rsxy(i1+
     & 2,i2,i3-2,2,1)-8.*rsxy(i1+2,i2,i3-1,2,1)+8.*rsxy(i1+2,i2,i3+1,
     & 2,1)-rsxy(i1+2,i2,i3+2,2,1))/(12.*dr(2)))/(12.*dr(0))
                      ajtyst = ((rsxy(i1,i2-2,i3-2,2,1)-8.*rsxy(i1,i2-
     & 2,i3-1,2,1)+8.*rsxy(i1,i2-2,i3+1,2,1)-rsxy(i1,i2-2,i3+2,2,1))/(
     & 12.*dr(2))-8.*(rsxy(i1,i2-1,i3-2,2,1)-8.*rsxy(i1,i2-1,i3-1,2,1)
     & +8.*rsxy(i1,i2-1,i3+1,2,1)-rsxy(i1,i2-1,i3+2,2,1))/(12.*dr(2))+
     & 8.*(rsxy(i1,i2+1,i3-2,2,1)-8.*rsxy(i1,i2+1,i3-1,2,1)+8.*rsxy(
     & i1,i2+1,i3+1,2,1)-rsxy(i1,i2+1,i3+2,2,1))/(12.*dr(2))-(rsxy(i1,
     & i2+2,i3-2,2,1)-8.*rsxy(i1,i2+2,i3-1,2,1)+8.*rsxy(i1,i2+2,i3+1,
     & 2,1)-rsxy(i1,i2+2,i3+2,2,1))/(12.*dr(2)))/(12.*dr(1))
                      ajtytt = (-rsxy(i1,i2,i3-2,2,1)+16.*rsxy(i1,i2,
     & i3-1,2,1)-30.*rsxy(i1,i2,i3,2,1)+16.*rsxy(i1,i2,i3+1,2,1)-rsxy(
     & i1,i2,i3+2,2,1))/(12.*dr(2)**2)
                      ajrz = rsxy(i1,i2,i3,0,2)
                      ajrzr = (rsxy(i1-2,i2,i3,0,2)-8.*rsxy(i1-1,i2,i3,
     & 0,2)+8.*rsxy(i1+1,i2,i3,0,2)-rsxy(i1+2,i2,i3,0,2))/(12.*dr(0))
                      ajrzs = (rsxy(i1,i2-2,i3,0,2)-8.*rsxy(i1,i2-1,i3,
     & 0,2)+8.*rsxy(i1,i2+1,i3,0,2)-rsxy(i1,i2+2,i3,0,2))/(12.*dr(1))
                      ajrzt = (rsxy(i1,i2,i3-2,0,2)-8.*rsxy(i1,i2,i3-1,
     & 0,2)+8.*rsxy(i1,i2,i3+1,0,2)-rsxy(i1,i2,i3+2,0,2))/(12.*dr(2))
                      ajrzrr = (-rsxy(i1-2,i2,i3,0,2)+16.*rsxy(i1-1,i2,
     & i3,0,2)-30.*rsxy(i1,i2,i3,0,2)+16.*rsxy(i1+1,i2,i3,0,2)-rsxy(
     & i1+2,i2,i3,0,2))/(12.*dr(0)**2)
                      ajrzrs = ((rsxy(i1-2,i2-2,i3,0,2)-8.*rsxy(i1-2,
     & i2-1,i3,0,2)+8.*rsxy(i1-2,i2+1,i3,0,2)-rsxy(i1-2,i2+2,i3,0,2))
     & /(12.*dr(1))-8.*(rsxy(i1-1,i2-2,i3,0,2)-8.*rsxy(i1-1,i2-1,i3,0,
     & 2)+8.*rsxy(i1-1,i2+1,i3,0,2)-rsxy(i1-1,i2+2,i3,0,2))/(12.*dr(1)
     & )+8.*(rsxy(i1+1,i2-2,i3,0,2)-8.*rsxy(i1+1,i2-1,i3,0,2)+8.*rsxy(
     & i1+1,i2+1,i3,0,2)-rsxy(i1+1,i2+2,i3,0,2))/(12.*dr(1))-(rsxy(i1+
     & 2,i2-2,i3,0,2)-8.*rsxy(i1+2,i2-1,i3,0,2)+8.*rsxy(i1+2,i2+1,i3,
     & 0,2)-rsxy(i1+2,i2+2,i3,0,2))/(12.*dr(1)))/(12.*dr(0))
                      ajrzss = (-rsxy(i1,i2-2,i3,0,2)+16.*rsxy(i1,i2-1,
     & i3,0,2)-30.*rsxy(i1,i2,i3,0,2)+16.*rsxy(i1,i2+1,i3,0,2)-rsxy(
     & i1,i2+2,i3,0,2))/(12.*dr(1)**2)
                      ajrzrt = ((rsxy(i1-2,i2,i3-2,0,2)-8.*rsxy(i1-2,
     & i2,i3-1,0,2)+8.*rsxy(i1-2,i2,i3+1,0,2)-rsxy(i1-2,i2,i3+2,0,2))
     & /(12.*dr(2))-8.*(rsxy(i1-1,i2,i3-2,0,2)-8.*rsxy(i1-1,i2,i3-1,0,
     & 2)+8.*rsxy(i1-1,i2,i3+1,0,2)-rsxy(i1-1,i2,i3+2,0,2))/(12.*dr(2)
     & )+8.*(rsxy(i1+1,i2,i3-2,0,2)-8.*rsxy(i1+1,i2,i3-1,0,2)+8.*rsxy(
     & i1+1,i2,i3+1,0,2)-rsxy(i1+1,i2,i3+2,0,2))/(12.*dr(2))-(rsxy(i1+
     & 2,i2,i3-2,0,2)-8.*rsxy(i1+2,i2,i3-1,0,2)+8.*rsxy(i1+2,i2,i3+1,
     & 0,2)-rsxy(i1+2,i2,i3+2,0,2))/(12.*dr(2)))/(12.*dr(0))
                      ajrzst = ((rsxy(i1,i2-2,i3-2,0,2)-8.*rsxy(i1,i2-
     & 2,i3-1,0,2)+8.*rsxy(i1,i2-2,i3+1,0,2)-rsxy(i1,i2-2,i3+2,0,2))/(
     & 12.*dr(2))-8.*(rsxy(i1,i2-1,i3-2,0,2)-8.*rsxy(i1,i2-1,i3-1,0,2)
     & +8.*rsxy(i1,i2-1,i3+1,0,2)-rsxy(i1,i2-1,i3+2,0,2))/(12.*dr(2))+
     & 8.*(rsxy(i1,i2+1,i3-2,0,2)-8.*rsxy(i1,i2+1,i3-1,0,2)+8.*rsxy(
     & i1,i2+1,i3+1,0,2)-rsxy(i1,i2+1,i3+2,0,2))/(12.*dr(2))-(rsxy(i1,
     & i2+2,i3-2,0,2)-8.*rsxy(i1,i2+2,i3-1,0,2)+8.*rsxy(i1,i2+2,i3+1,
     & 0,2)-rsxy(i1,i2+2,i3+2,0,2))/(12.*dr(2)))/(12.*dr(1))
                      ajrztt = (-rsxy(i1,i2,i3-2,0,2)+16.*rsxy(i1,i2,
     & i3-1,0,2)-30.*rsxy(i1,i2,i3,0,2)+16.*rsxy(i1,i2,i3+1,0,2)-rsxy(
     & i1,i2,i3+2,0,2))/(12.*dr(2)**2)
                      ajsz = rsxy(i1,i2,i3,1,2)
                      ajszr = (rsxy(i1-2,i2,i3,1,2)-8.*rsxy(i1-1,i2,i3,
     & 1,2)+8.*rsxy(i1+1,i2,i3,1,2)-rsxy(i1+2,i2,i3,1,2))/(12.*dr(0))
                      ajszs = (rsxy(i1,i2-2,i3,1,2)-8.*rsxy(i1,i2-1,i3,
     & 1,2)+8.*rsxy(i1,i2+1,i3,1,2)-rsxy(i1,i2+2,i3,1,2))/(12.*dr(1))
                      ajszt = (rsxy(i1,i2,i3-2,1,2)-8.*rsxy(i1,i2,i3-1,
     & 1,2)+8.*rsxy(i1,i2,i3+1,1,2)-rsxy(i1,i2,i3+2,1,2))/(12.*dr(2))
                      ajszrr = (-rsxy(i1-2,i2,i3,1,2)+16.*rsxy(i1-1,i2,
     & i3,1,2)-30.*rsxy(i1,i2,i3,1,2)+16.*rsxy(i1+1,i2,i3,1,2)-rsxy(
     & i1+2,i2,i3,1,2))/(12.*dr(0)**2)
                      ajszrs = ((rsxy(i1-2,i2-2,i3,1,2)-8.*rsxy(i1-2,
     & i2-1,i3,1,2)+8.*rsxy(i1-2,i2+1,i3,1,2)-rsxy(i1-2,i2+2,i3,1,2))
     & /(12.*dr(1))-8.*(rsxy(i1-1,i2-2,i3,1,2)-8.*rsxy(i1-1,i2-1,i3,1,
     & 2)+8.*rsxy(i1-1,i2+1,i3,1,2)-rsxy(i1-1,i2+2,i3,1,2))/(12.*dr(1)
     & )+8.*(rsxy(i1+1,i2-2,i3,1,2)-8.*rsxy(i1+1,i2-1,i3,1,2)+8.*rsxy(
     & i1+1,i2+1,i3,1,2)-rsxy(i1+1,i2+2,i3,1,2))/(12.*dr(1))-(rsxy(i1+
     & 2,i2-2,i3,1,2)-8.*rsxy(i1+2,i2-1,i3,1,2)+8.*rsxy(i1+2,i2+1,i3,
     & 1,2)-rsxy(i1+2,i2+2,i3,1,2))/(12.*dr(1)))/(12.*dr(0))
                      ajszss = (-rsxy(i1,i2-2,i3,1,2)+16.*rsxy(i1,i2-1,
     & i3,1,2)-30.*rsxy(i1,i2,i3,1,2)+16.*rsxy(i1,i2+1,i3,1,2)-rsxy(
     & i1,i2+2,i3,1,2))/(12.*dr(1)**2)
                      ajszrt = ((rsxy(i1-2,i2,i3-2,1,2)-8.*rsxy(i1-2,
     & i2,i3-1,1,2)+8.*rsxy(i1-2,i2,i3+1,1,2)-rsxy(i1-2,i2,i3+2,1,2))
     & /(12.*dr(2))-8.*(rsxy(i1-1,i2,i3-2,1,2)-8.*rsxy(i1-1,i2,i3-1,1,
     & 2)+8.*rsxy(i1-1,i2,i3+1,1,2)-rsxy(i1-1,i2,i3+2,1,2))/(12.*dr(2)
     & )+8.*(rsxy(i1+1,i2,i3-2,1,2)-8.*rsxy(i1+1,i2,i3-1,1,2)+8.*rsxy(
     & i1+1,i2,i3+1,1,2)-rsxy(i1+1,i2,i3+2,1,2))/(12.*dr(2))-(rsxy(i1+
     & 2,i2,i3-2,1,2)-8.*rsxy(i1+2,i2,i3-1,1,2)+8.*rsxy(i1+2,i2,i3+1,
     & 1,2)-rsxy(i1+2,i2,i3+2,1,2))/(12.*dr(2)))/(12.*dr(0))
                      ajszst = ((rsxy(i1,i2-2,i3-2,1,2)-8.*rsxy(i1,i2-
     & 2,i3-1,1,2)+8.*rsxy(i1,i2-2,i3+1,1,2)-rsxy(i1,i2-2,i3+2,1,2))/(
     & 12.*dr(2))-8.*(rsxy(i1,i2-1,i3-2,1,2)-8.*rsxy(i1,i2-1,i3-1,1,2)
     & +8.*rsxy(i1,i2-1,i3+1,1,2)-rsxy(i1,i2-1,i3+2,1,2))/(12.*dr(2))+
     & 8.*(rsxy(i1,i2+1,i3-2,1,2)-8.*rsxy(i1,i2+1,i3-1,1,2)+8.*rsxy(
     & i1,i2+1,i3+1,1,2)-rsxy(i1,i2+1,i3+2,1,2))/(12.*dr(2))-(rsxy(i1,
     & i2+2,i3-2,1,2)-8.*rsxy(i1,i2+2,i3-1,1,2)+8.*rsxy(i1,i2+2,i3+1,
     & 1,2)-rsxy(i1,i2+2,i3+2,1,2))/(12.*dr(2)))/(12.*dr(1))
                      ajsztt = (-rsxy(i1,i2,i3-2,1,2)+16.*rsxy(i1,i2,
     & i3-1,1,2)-30.*rsxy(i1,i2,i3,1,2)+16.*rsxy(i1,i2,i3+1,1,2)-rsxy(
     & i1,i2,i3+2,1,2))/(12.*dr(2)**2)
                      ajtz = rsxy(i1,i2,i3,2,2)
                      ajtzr = (rsxy(i1-2,i2,i3,2,2)-8.*rsxy(i1-1,i2,i3,
     & 2,2)+8.*rsxy(i1+1,i2,i3,2,2)-rsxy(i1+2,i2,i3,2,2))/(12.*dr(0))
                      ajtzs = (rsxy(i1,i2-2,i3,2,2)-8.*rsxy(i1,i2-1,i3,
     & 2,2)+8.*rsxy(i1,i2+1,i3,2,2)-rsxy(i1,i2+2,i3,2,2))/(12.*dr(1))
                      ajtzt = (rsxy(i1,i2,i3-2,2,2)-8.*rsxy(i1,i2,i3-1,
     & 2,2)+8.*rsxy(i1,i2,i3+1,2,2)-rsxy(i1,i2,i3+2,2,2))/(12.*dr(2))
                      ajtzrr = (-rsxy(i1-2,i2,i3,2,2)+16.*rsxy(i1-1,i2,
     & i3,2,2)-30.*rsxy(i1,i2,i3,2,2)+16.*rsxy(i1+1,i2,i3,2,2)-rsxy(
     & i1+2,i2,i3,2,2))/(12.*dr(0)**2)
                      ajtzrs = ((rsxy(i1-2,i2-2,i3,2,2)-8.*rsxy(i1-2,
     & i2-1,i3,2,2)+8.*rsxy(i1-2,i2+1,i3,2,2)-rsxy(i1-2,i2+2,i3,2,2))
     & /(12.*dr(1))-8.*(rsxy(i1-1,i2-2,i3,2,2)-8.*rsxy(i1-1,i2-1,i3,2,
     & 2)+8.*rsxy(i1-1,i2+1,i3,2,2)-rsxy(i1-1,i2+2,i3,2,2))/(12.*dr(1)
     & )+8.*(rsxy(i1+1,i2-2,i3,2,2)-8.*rsxy(i1+1,i2-1,i3,2,2)+8.*rsxy(
     & i1+1,i2+1,i3,2,2)-rsxy(i1+1,i2+2,i3,2,2))/(12.*dr(1))-(rsxy(i1+
     & 2,i2-2,i3,2,2)-8.*rsxy(i1+2,i2-1,i3,2,2)+8.*rsxy(i1+2,i2+1,i3,
     & 2,2)-rsxy(i1+2,i2+2,i3,2,2))/(12.*dr(1)))/(12.*dr(0))
                      ajtzss = (-rsxy(i1,i2-2,i3,2,2)+16.*rsxy(i1,i2-1,
     & i3,2,2)-30.*rsxy(i1,i2,i3,2,2)+16.*rsxy(i1,i2+1,i3,2,2)-rsxy(
     & i1,i2+2,i3,2,2))/(12.*dr(1)**2)
                      ajtzrt = ((rsxy(i1-2,i2,i3-2,2,2)-8.*rsxy(i1-2,
     & i2,i3-1,2,2)+8.*rsxy(i1-2,i2,i3+1,2,2)-rsxy(i1-2,i2,i3+2,2,2))
     & /(12.*dr(2))-8.*(rsxy(i1-1,i2,i3-2,2,2)-8.*rsxy(i1-1,i2,i3-1,2,
     & 2)+8.*rsxy(i1-1,i2,i3+1,2,2)-rsxy(i1-1,i2,i3+2,2,2))/(12.*dr(2)
     & )+8.*(rsxy(i1+1,i2,i3-2,2,2)-8.*rsxy(i1+1,i2,i3-1,2,2)+8.*rsxy(
     & i1+1,i2,i3+1,2,2)-rsxy(i1+1,i2,i3+2,2,2))/(12.*dr(2))-(rsxy(i1+
     & 2,i2,i3-2,2,2)-8.*rsxy(i1+2,i2,i3-1,2,2)+8.*rsxy(i1+2,i2,i3+1,
     & 2,2)-rsxy(i1+2,i2,i3+2,2,2))/(12.*dr(2)))/(12.*dr(0))
                      ajtzst = ((rsxy(i1,i2-2,i3-2,2,2)-8.*rsxy(i1,i2-
     & 2,i3-1,2,2)+8.*rsxy(i1,i2-2,i3+1,2,2)-rsxy(i1,i2-2,i3+2,2,2))/(
     & 12.*dr(2))-8.*(rsxy(i1,i2-1,i3-2,2,2)-8.*rsxy(i1,i2-1,i3-1,2,2)
     & +8.*rsxy(i1,i2-1,i3+1,2,2)-rsxy(i1,i2-1,i3+2,2,2))/(12.*dr(2))+
     & 8.*(rsxy(i1,i2+1,i3-2,2,2)-8.*rsxy(i1,i2+1,i3-1,2,2)+8.*rsxy(
     & i1,i2+1,i3+1,2,2)-rsxy(i1,i2+1,i3+2,2,2))/(12.*dr(2))-(rsxy(i1,
     & i2+2,i3-2,2,2)-8.*rsxy(i1,i2+2,i3-1,2,2)+8.*rsxy(i1,i2+2,i3+1,
     & 2,2)-rsxy(i1,i2+2,i3+2,2,2))/(12.*dr(2)))/(12.*dr(1))
                      ajtztt = (-rsxy(i1,i2,i3-2,2,2)+16.*rsxy(i1,i2,
     & i3-1,2,2)-30.*rsxy(i1,i2,i3,2,2)+16.*rsxy(i1,i2,i3+1,2,2)-rsxy(
     & i1,i2,i3+2,2,2))/(12.*dr(2)**2)
                      ajrxx = ajrx*ajrxr+ajsx*ajrxs+ajtx*ajrxt
                      ajrxy = ajry*ajrxr+ajsy*ajrxs+ajty*ajrxt
                      ajrxz = ajrz*ajrxr+ajsz*ajrxs+ajtz*ajrxt
                      ajsxx = ajrx*ajsxr+ajsx*ajsxs+ajtx*ajsxt
                      ajsxy = ajry*ajsxr+ajsy*ajsxs+ajty*ajsxt
                      ajsxz = ajrz*ajsxr+ajsz*ajsxs+ajtz*ajsxt
                      ajtxx = ajrx*ajtxr+ajsx*ajtxs+ajtx*ajtxt
                      ajtxy = ajry*ajtxr+ajsy*ajtxs+ajty*ajtxt
                      ajtxz = ajrz*ajtxr+ajsz*ajtxs+ajtz*ajtxt
                      ajryx = ajrx*ajryr+ajsx*ajrys+ajtx*ajryt
                      ajryy = ajry*ajryr+ajsy*ajrys+ajty*ajryt
                      ajryz = ajrz*ajryr+ajsz*ajrys+ajtz*ajryt
                      ajsyx = ajrx*ajsyr+ajsx*ajsys+ajtx*ajsyt
                      ajsyy = ajry*ajsyr+ajsy*ajsys+ajty*ajsyt
                      ajsyz = ajrz*ajsyr+ajsz*ajsys+ajtz*ajsyt
                      ajtyx = ajrx*ajtyr+ajsx*ajtys+ajtx*ajtyt
                      ajtyy = ajry*ajtyr+ajsy*ajtys+ajty*ajtyt
                      ajtyz = ajrz*ajtyr+ajsz*ajtys+ajtz*ajtyt
                      ajrzx = ajrx*ajrzr+ajsx*ajrzs+ajtx*ajrzt
                      ajrzy = ajry*ajrzr+ajsy*ajrzs+ajty*ajrzt
                      ajrzz = ajrz*ajrzr+ajsz*ajrzs+ajtz*ajrzt
                      ajszx = ajrx*ajszr+ajsx*ajszs+ajtx*ajszt
                      ajszy = ajry*ajszr+ajsy*ajszs+ajty*ajszt
                      ajszz = ajrz*ajszr+ajsz*ajszs+ajtz*ajszt
                      ajtzx = ajrx*ajtzr+ajsx*ajtzs+ajtx*ajtzt
                      ajtzy = ajry*ajtzr+ajsy*ajtzs+ajty*ajtzt
                      ajtzz = ajrz*ajtzr+ajsz*ajtzs+ajtz*ajtzt
                      t1 = ajrx**2
                      t6 = ajsx**2
                      t14 = ajtx**2
                      ajrxxx = t1*ajrxrr+2*ajrx*ajsx*ajrxrs+t6*ajrxss+
     & 2*ajrx*ajtx*ajrxrt+2*ajsx*ajtx*ajrxst+t14*ajrxtt+ajrxx*ajrxr+
     & ajsxx*ajrxs+ajtxx*ajrxt
                      ajrxxy = ajry*ajrx*ajrxrr+(ajsy*ajrx+ajry*ajsx)*
     & ajrxrs+ajsy*ajsx*ajrxss+(ajry*ajtx+ajty*ajrx)*ajrxrt+(ajty*
     & ajsx+ajsy*ajtx)*ajrxst+ajty*ajtx*ajrxtt+ajrxy*ajrxr+ajsxy*
     & ajrxs+ajtxy*ajrxt
                      t1 = ajry**2
                      t6 = ajsy**2
                      t14 = ajty**2
                      ajrxyy = t1*ajrxrr+2*ajry*ajsy*ajrxrs+t6*ajrxss+
     & 2*ajry*ajty*ajrxrt+2*ajsy*ajty*ajrxst+t14*ajrxtt+ajryy*ajrxr+
     & ajsyy*ajrxs+ajtyy*ajrxt
                      ajrxxz = ajrz*ajrx*ajrxrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajrxrs+ajsz*ajsx*ajrxss+(ajrz*ajtx+ajtz*ajrx)*ajrxrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajrxst+ajtz*ajtx*ajrxtt+ajrxz*ajrxr+ajsxz*
     & ajrxs+ajtxz*ajrxt
                      ajrxyz = ajrz*ajry*ajrxrr+(ajsz*ajry+ajrz*ajsy)*
     & ajrxrs+ajsz*ajsy*ajrxss+(ajrz*ajty+ajtz*ajry)*ajrxrt+(ajtz*
     & ajsy+ajsz*ajty)*ajrxst+ajtz*ajty*ajrxtt+ajryz*ajrxr+ajsyz*
     & ajrxs+ajtyz*ajrxt
                      t1 = ajrz**2
                      t6 = ajsz**2
                      t14 = ajtz**2
                      ajrxzz = t1*ajrxrr+2*ajrz*ajsz*ajrxrs+t6*ajrxss+
     & 2*ajrz*ajtz*ajrxrt+2*ajsz*ajtz*ajrxst+t14*ajrxtt+ajrzz*ajrxr+
     & ajszz*ajrxs+ajtzz*ajrxt
                      t1 = ajrx**2
                      t6 = ajsx**2
                      t14 = ajtx**2
                      ajsxxx = t1*ajsxrr+2*ajrx*ajsx*ajsxrs+t6*ajsxss+
     & 2*ajrx*ajtx*ajsxrt+2*ajsx*ajtx*ajsxst+t14*ajsxtt+ajrxx*ajsxr+
     & ajsxx*ajsxs+ajtxx*ajsxt
                      ajsxxy = ajry*ajrx*ajsxrr+(ajsy*ajrx+ajry*ajsx)*
     & ajsxrs+ajsy*ajsx*ajsxss+(ajry*ajtx+ajty*ajrx)*ajsxrt+(ajty*
     & ajsx+ajsy*ajtx)*ajsxst+ajty*ajtx*ajsxtt+ajrxy*ajsxr+ajsxy*
     & ajsxs+ajtxy*ajsxt
                      t1 = ajry**2
                      t6 = ajsy**2
                      t14 = ajty**2
                      ajsxyy = t1*ajsxrr+2*ajry*ajsy*ajsxrs+t6*ajsxss+
     & 2*ajry*ajty*ajsxrt+2*ajsy*ajty*ajsxst+t14*ajsxtt+ajryy*ajsxr+
     & ajsyy*ajsxs+ajtyy*ajsxt
                      ajsxxz = ajrz*ajrx*ajsxrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajsxrs+ajsz*ajsx*ajsxss+(ajrz*ajtx+ajtz*ajrx)*ajsxrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajsxst+ajtz*ajtx*ajsxtt+ajrxz*ajsxr+ajsxz*
     & ajsxs+ajtxz*ajsxt
                      ajsxyz = ajrz*ajry*ajsxrr+(ajsz*ajry+ajrz*ajsy)*
     & ajsxrs+ajsz*ajsy*ajsxss+(ajrz*ajty+ajtz*ajry)*ajsxrt+(ajtz*
     & ajsy+ajsz*ajty)*ajsxst+ajtz*ajty*ajsxtt+ajryz*ajsxr+ajsyz*
     & ajsxs+ajtyz*ajsxt
                      t1 = ajrz**2
                      t6 = ajsz**2
                      t14 = ajtz**2
                      ajsxzz = t1*ajsxrr+2*ajrz*ajsz*ajsxrs+t6*ajsxss+
     & 2*ajrz*ajtz*ajsxrt+2*ajsz*ajtz*ajsxst+t14*ajsxtt+ajrzz*ajsxr+
     & ajszz*ajsxs+ajtzz*ajsxt
                      t1 = ajrx**2
                      t6 = ajsx**2
                      t14 = ajtx**2
                      ajtxxx = t1*ajtxrr+2*ajrx*ajsx*ajtxrs+t6*ajtxss+
     & 2*ajrx*ajtx*ajtxrt+2*ajsx*ajtx*ajtxst+t14*ajtxtt+ajrxx*ajtxr+
     & ajsxx*ajtxs+ajtxx*ajtxt
                      ajtxxy = ajry*ajrx*ajtxrr+(ajsy*ajrx+ajry*ajsx)*
     & ajtxrs+ajsy*ajsx*ajtxss+(ajry*ajtx+ajty*ajrx)*ajtxrt+(ajty*
     & ajsx+ajsy*ajtx)*ajtxst+ajty*ajtx*ajtxtt+ajrxy*ajtxr+ajsxy*
     & ajtxs+ajtxy*ajtxt
                      t1 = ajry**2
                      t6 = ajsy**2
                      t14 = ajty**2
                      ajtxyy = t1*ajtxrr+2*ajry*ajsy*ajtxrs+t6*ajtxss+
     & 2*ajry*ajty*ajtxrt+2*ajsy*ajty*ajtxst+t14*ajtxtt+ajryy*ajtxr+
     & ajsyy*ajtxs+ajtyy*ajtxt
                      ajtxxz = ajrz*ajrx*ajtxrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajtxrs+ajsz*ajsx*ajtxss+(ajrz*ajtx+ajtz*ajrx)*ajtxrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajtxst+ajtz*ajtx*ajtxtt+ajrxz*ajtxr+ajsxz*
     & ajtxs+ajtxz*ajtxt
                      ajtxyz = ajrz*ajry*ajtxrr+(ajsz*ajry+ajrz*ajsy)*
     & ajtxrs+ajsz*ajsy*ajtxss+(ajrz*ajty+ajtz*ajry)*ajtxrt+(ajtz*
     & ajsy+ajsz*ajty)*ajtxst+ajtz*ajty*ajtxtt+ajryz*ajtxr+ajsyz*
     & ajtxs+ajtyz*ajtxt
                      t1 = ajrz**2
                      t6 = ajsz**2
                      t14 = ajtz**2
                      ajtxzz = t1*ajtxrr+2*ajrz*ajsz*ajtxrs+t6*ajtxss+
     & 2*ajrz*ajtz*ajtxrt+2*ajsz*ajtz*ajtxst+t14*ajtxtt+ajrzz*ajtxr+
     & ajszz*ajtxs+ajtzz*ajtxt
                      t1 = ajrx**2
                      t6 = ajsx**2
                      t14 = ajtx**2
                      ajryxx = t1*ajryrr+2*ajrx*ajsx*ajryrs+t6*ajryss+
     & 2*ajrx*ajtx*ajryrt+2*ajsx*ajtx*ajryst+t14*ajrytt+ajrxx*ajryr+
     & ajsxx*ajrys+ajtxx*ajryt
                      ajryxy = ajry*ajrx*ajryrr+(ajsy*ajrx+ajry*ajsx)*
     & ajryrs+ajsy*ajsx*ajryss+(ajry*ajtx+ajty*ajrx)*ajryrt+(ajty*
     & ajsx+ajsy*ajtx)*ajryst+ajty*ajtx*ajrytt+ajrxy*ajryr+ajsxy*
     & ajrys+ajtxy*ajryt
                      t1 = ajry**2
                      t6 = ajsy**2
                      t14 = ajty**2
                      ajryyy = t1*ajryrr+2*ajry*ajsy*ajryrs+t6*ajryss+
     & 2*ajry*ajty*ajryrt+2*ajsy*ajty*ajryst+t14*ajrytt+ajryy*ajryr+
     & ajsyy*ajrys+ajtyy*ajryt
                      ajryxz = ajrz*ajrx*ajryrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajryrs+ajsz*ajsx*ajryss+(ajrz*ajtx+ajtz*ajrx)*ajryrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajryst+ajtz*ajtx*ajrytt+ajrxz*ajryr+ajsxz*
     & ajrys+ajtxz*ajryt
                      ajryyz = ajrz*ajry*ajryrr+(ajsz*ajry+ajrz*ajsy)*
     & ajryrs+ajsz*ajsy*ajryss+(ajrz*ajty+ajtz*ajry)*ajryrt+(ajtz*
     & ajsy+ajsz*ajty)*ajryst+ajtz*ajty*ajrytt+ajryz*ajryr+ajsyz*
     & ajrys+ajtyz*ajryt
                      t1 = ajrz**2
                      t6 = ajsz**2
                      t14 = ajtz**2
                      ajryzz = t1*ajryrr+2*ajrz*ajsz*ajryrs+t6*ajryss+
     & 2*ajrz*ajtz*ajryrt+2*ajsz*ajtz*ajryst+t14*ajrytt+ajrzz*ajryr+
     & ajszz*ajrys+ajtzz*ajryt
                      t1 = ajrx**2
                      t6 = ajsx**2
                      t14 = ajtx**2
                      ajsyxx = t1*ajsyrr+2*ajrx*ajsx*ajsyrs+t6*ajsyss+
     & 2*ajrx*ajtx*ajsyrt+2*ajsx*ajtx*ajsyst+t14*ajsytt+ajrxx*ajsyr+
     & ajsxx*ajsys+ajtxx*ajsyt
                      ajsyxy = ajry*ajrx*ajsyrr+(ajsy*ajrx+ajry*ajsx)*
     & ajsyrs+ajsy*ajsx*ajsyss+(ajry*ajtx+ajty*ajrx)*ajsyrt+(ajty*
     & ajsx+ajsy*ajtx)*ajsyst+ajty*ajtx*ajsytt+ajrxy*ajsyr+ajsxy*
     & ajsys+ajtxy*ajsyt
                      t1 = ajry**2
                      t6 = ajsy**2
                      t14 = ajty**2
                      ajsyyy = t1*ajsyrr+2*ajry*ajsy*ajsyrs+t6*ajsyss+
     & 2*ajry*ajty*ajsyrt+2*ajsy*ajty*ajsyst+t14*ajsytt+ajryy*ajsyr+
     & ajsyy*ajsys+ajtyy*ajsyt
                      ajsyxz = ajrz*ajrx*ajsyrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajsyrs+ajsz*ajsx*ajsyss+(ajrz*ajtx+ajtz*ajrx)*ajsyrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajsyst+ajtz*ajtx*ajsytt+ajrxz*ajsyr+ajsxz*
     & ajsys+ajtxz*ajsyt
                      ajsyyz = ajrz*ajry*ajsyrr+(ajsz*ajry+ajrz*ajsy)*
     & ajsyrs+ajsz*ajsy*ajsyss+(ajrz*ajty+ajtz*ajry)*ajsyrt+(ajtz*
     & ajsy+ajsz*ajty)*ajsyst+ajtz*ajty*ajsytt+ajryz*ajsyr+ajsyz*
     & ajsys+ajtyz*ajsyt
                      t1 = ajrz**2
                      t6 = ajsz**2
                      t14 = ajtz**2
                      ajsyzz = t1*ajsyrr+2*ajrz*ajsz*ajsyrs+t6*ajsyss+
     & 2*ajrz*ajtz*ajsyrt+2*ajsz*ajtz*ajsyst+t14*ajsytt+ajrzz*ajsyr+
     & ajszz*ajsys+ajtzz*ajsyt
                      t1 = ajrx**2
                      t6 = ajsx**2
                      t14 = ajtx**2
                      ajtyxx = t1*ajtyrr+2*ajrx*ajsx*ajtyrs+t6*ajtyss+
     & 2*ajrx*ajtx*ajtyrt+2*ajsx*ajtx*ajtyst+t14*ajtytt+ajrxx*ajtyr+
     & ajsxx*ajtys+ajtxx*ajtyt
                      ajtyxy = ajry*ajrx*ajtyrr+(ajsy*ajrx+ajry*ajsx)*
     & ajtyrs+ajsy*ajsx*ajtyss+(ajry*ajtx+ajty*ajrx)*ajtyrt+(ajty*
     & ajsx+ajsy*ajtx)*ajtyst+ajty*ajtx*ajtytt+ajrxy*ajtyr+ajsxy*
     & ajtys+ajtxy*ajtyt
                      t1 = ajry**2
                      t6 = ajsy**2
                      t14 = ajty**2
                      ajtyyy = t1*ajtyrr+2*ajry*ajsy*ajtyrs+t6*ajtyss+
     & 2*ajry*ajty*ajtyrt+2*ajsy*ajty*ajtyst+t14*ajtytt+ajryy*ajtyr+
     & ajsyy*ajtys+ajtyy*ajtyt
                      ajtyxz = ajrz*ajrx*ajtyrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajtyrs+ajsz*ajsx*ajtyss+(ajrz*ajtx+ajtz*ajrx)*ajtyrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajtyst+ajtz*ajtx*ajtytt+ajrxz*ajtyr+ajsxz*
     & ajtys+ajtxz*ajtyt
                      ajtyyz = ajrz*ajry*ajtyrr+(ajsz*ajry+ajrz*ajsy)*
     & ajtyrs+ajsz*ajsy*ajtyss+(ajrz*ajty+ajtz*ajry)*ajtyrt+(ajtz*
     & ajsy+ajsz*ajty)*ajtyst+ajtz*ajty*ajtytt+ajryz*ajtyr+ajsyz*
     & ajtys+ajtyz*ajtyt
                      t1 = ajrz**2
                      t6 = ajsz**2
                      t14 = ajtz**2
                      ajtyzz = t1*ajtyrr+2*ajrz*ajsz*ajtyrs+t6*ajtyss+
     & 2*ajrz*ajtz*ajtyrt+2*ajsz*ajtz*ajtyst+t14*ajtytt+ajrzz*ajtyr+
     & ajszz*ajtys+ajtzz*ajtyt
                      t1 = ajrx**2
                      t6 = ajsx**2
                      t14 = ajtx**2
                      ajrzxx = t1*ajrzrr+2*ajrx*ajsx*ajrzrs+t6*ajrzss+
     & 2*ajrx*ajtx*ajrzrt+2*ajsx*ajtx*ajrzst+t14*ajrztt+ajrxx*ajrzr+
     & ajsxx*ajrzs+ajtxx*ajrzt
                      ajrzxy = ajry*ajrx*ajrzrr+(ajsy*ajrx+ajry*ajsx)*
     & ajrzrs+ajsy*ajsx*ajrzss+(ajry*ajtx+ajty*ajrx)*ajrzrt+(ajty*
     & ajsx+ajsy*ajtx)*ajrzst+ajty*ajtx*ajrztt+ajrxy*ajrzr+ajsxy*
     & ajrzs+ajtxy*ajrzt
                      t1 = ajry**2
                      t6 = ajsy**2
                      t14 = ajty**2
                      ajrzyy = t1*ajrzrr+2*ajry*ajsy*ajrzrs+t6*ajrzss+
     & 2*ajry*ajty*ajrzrt+2*ajsy*ajty*ajrzst+t14*ajrztt+ajryy*ajrzr+
     & ajsyy*ajrzs+ajtyy*ajrzt
                      ajrzxz = ajrz*ajrx*ajrzrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajrzrs+ajsz*ajsx*ajrzss+(ajrz*ajtx+ajtz*ajrx)*ajrzrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajrzst+ajtz*ajtx*ajrztt+ajrxz*ajrzr+ajsxz*
     & ajrzs+ajtxz*ajrzt
                      ajrzyz = ajrz*ajry*ajrzrr+(ajsz*ajry+ajrz*ajsy)*
     & ajrzrs+ajsz*ajsy*ajrzss+(ajrz*ajty+ajtz*ajry)*ajrzrt+(ajtz*
     & ajsy+ajsz*ajty)*ajrzst+ajtz*ajty*ajrztt+ajryz*ajrzr+ajsyz*
     & ajrzs+ajtyz*ajrzt
                      t1 = ajrz**2
                      t6 = ajsz**2
                      t14 = ajtz**2
                      ajrzzz = t1*ajrzrr+2*ajrz*ajsz*ajrzrs+t6*ajrzss+
     & 2*ajrz*ajtz*ajrzrt+2*ajsz*ajtz*ajrzst+t14*ajrztt+ajrzz*ajrzr+
     & ajszz*ajrzs+ajtzz*ajrzt
                      t1 = ajrx**2
                      t6 = ajsx**2
                      t14 = ajtx**2
                      ajszxx = t1*ajszrr+2*ajrx*ajsx*ajszrs+t6*ajszss+
     & 2*ajrx*ajtx*ajszrt+2*ajsx*ajtx*ajszst+t14*ajsztt+ajrxx*ajszr+
     & ajsxx*ajszs+ajtxx*ajszt
                      ajszxy = ajry*ajrx*ajszrr+(ajsy*ajrx+ajry*ajsx)*
     & ajszrs+ajsy*ajsx*ajszss+(ajry*ajtx+ajty*ajrx)*ajszrt+(ajty*
     & ajsx+ajsy*ajtx)*ajszst+ajty*ajtx*ajsztt+ajrxy*ajszr+ajsxy*
     & ajszs+ajtxy*ajszt
                      t1 = ajry**2
                      t6 = ajsy**2
                      t14 = ajty**2
                      ajszyy = t1*ajszrr+2*ajry*ajsy*ajszrs+t6*ajszss+
     & 2*ajry*ajty*ajszrt+2*ajsy*ajty*ajszst+t14*ajsztt+ajryy*ajszr+
     & ajsyy*ajszs+ajtyy*ajszt
                      ajszxz = ajrz*ajrx*ajszrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajszrs+ajsz*ajsx*ajszss+(ajrz*ajtx+ajtz*ajrx)*ajszrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajszst+ajtz*ajtx*ajsztt+ajrxz*ajszr+ajsxz*
     & ajszs+ajtxz*ajszt
                      ajszyz = ajrz*ajry*ajszrr+(ajsz*ajry+ajrz*ajsy)*
     & ajszrs+ajsz*ajsy*ajszss+(ajrz*ajty+ajtz*ajry)*ajszrt+(ajtz*
     & ajsy+ajsz*ajty)*ajszst+ajtz*ajty*ajsztt+ajryz*ajszr+ajsyz*
     & ajszs+ajtyz*ajszt
                      t1 = ajrz**2
                      t6 = ajsz**2
                      t14 = ajtz**2
                      ajszzz = t1*ajszrr+2*ajrz*ajsz*ajszrs+t6*ajszss+
     & 2*ajrz*ajtz*ajszrt+2*ajsz*ajtz*ajszst+t14*ajsztt+ajrzz*ajszr+
     & ajszz*ajszs+ajtzz*ajszt
                      t1 = ajrx**2
                      t6 = ajsx**2
                      t14 = ajtx**2
                      ajtzxx = t1*ajtzrr+2*ajrx*ajsx*ajtzrs+t6*ajtzss+
     & 2*ajrx*ajtx*ajtzrt+2*ajsx*ajtx*ajtzst+t14*ajtztt+ajrxx*ajtzr+
     & ajsxx*ajtzs+ajtxx*ajtzt
                      ajtzxy = ajry*ajrx*ajtzrr+(ajsy*ajrx+ajry*ajsx)*
     & ajtzrs+ajsy*ajsx*ajtzss+(ajry*ajtx+ajty*ajrx)*ajtzrt+(ajty*
     & ajsx+ajsy*ajtx)*ajtzst+ajty*ajtx*ajtztt+ajrxy*ajtzr+ajsxy*
     & ajtzs+ajtxy*ajtzt
                      t1 = ajry**2
                      t6 = ajsy**2
                      t14 = ajty**2
                      ajtzyy = t1*ajtzrr+2*ajry*ajsy*ajtzrs+t6*ajtzss+
     & 2*ajry*ajty*ajtzrt+2*ajsy*ajty*ajtzst+t14*ajtztt+ajryy*ajtzr+
     & ajsyy*ajtzs+ajtyy*ajtzt
                      ajtzxz = ajrz*ajrx*ajtzrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajtzrs+ajsz*ajsx*ajtzss+(ajrz*ajtx+ajtz*ajrx)*ajtzrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajtzst+ajtz*ajtx*ajtztt+ajrxz*ajtzr+ajsxz*
     & ajtzs+ajtxz*ajtzt
                      ajtzyz = ajrz*ajry*ajtzrr+(ajsz*ajry+ajrz*ajsy)*
     & ajtzrs+ajsz*ajsy*ajtzss+(ajrz*ajty+ajtz*ajry)*ajtzrt+(ajtz*
     & ajsy+ajsz*ajty)*ajtzst+ajtz*ajty*ajtztt+ajryz*ajtzr+ajsyz*
     & ajtzs+ajtyz*ajtzt
                      t1 = ajrz**2
                      t6 = ajsz**2
                      t14 = ajtz**2
                      ajtzzz = t1*ajtzrr+2*ajrz*ajsz*ajtzrs+t6*ajtzss+
     & 2*ajrz*ajtz*ajtzrt+2*ajsz*ajtz*ajtzst+t14*ajtztt+ajrzz*ajtzr+
     & ajszz*ajtzs+ajtzz*ajtzt
                      ! define these derivatives of the mapping (which are not normally computed by the standard macros):
                     ajrxxr=ajrx*ajrxrr + ajsx*ajrxrs + ajtx*ajrxrt + 
     & ajrxr*ajrxr +ajsxr*ajrxs + ajtxr*ajrxt
                     ajrxxs=ajrx*ajrxrs + ajsx*ajrxss + ajtx*ajrxst + 
     & ajrxs*ajrxr +ajsxs*ajrxs + ajtxs*ajrxt
                     ajrxxt=ajrx*ajrxrt + ajsx*ajrxst + ajtx*ajrxtt + 
     & ajrxt*ajrxr +ajsxt*ajrxs + ajtxt*ajrxt
                     ajrxyr=ajry*ajrxrr + ajsy*ajrxrs + ajty*ajrxrt + 
     & ajryr*ajrxr +ajsyr*ajrxs + ajtyr*ajrxt
                     ajrxys=ajry*ajrxrs + ajsy*ajrxss + ajty*ajrxst + 
     & ajrys*ajrxr +ajsys*ajrxs + ajtys*ajrxt
                     ajrxyt=ajry*ajrxrt + ajsy*ajrxst + ajty*ajrxtt + 
     & ajryt*ajrxr +ajsyt*ajrxs + ajtyt*ajrxt
                     ajrxzr=ajrz*ajrxrr + ajsz*ajrxrs + ajtz*ajrxrt + 
     & ajrzr*ajrxr +ajszr*ajrxs + ajtzr*ajrxt
                     ajrxzs=ajrz*ajrxrs + ajsz*ajrxss + ajtz*ajrxst + 
     & ajrzs*ajrxr +ajszs*ajrxs + ajtzs*ajrxt
                     ajrxzt=ajrz*ajrxrt + ajsz*ajrxst + ajtz*ajrxtt + 
     & ajrzt*ajrxr +ajszt*ajrxs + ajtzt*ajrxt
                     ajryxr=ajrx*ajryrr + ajsx*ajryrs + ajtx*ajryrt + 
     & ajrxr*ajryr +ajsxr*ajrys + ajtxr*ajryt
                     ajryxs=ajrx*ajryrs + ajsx*ajryss + ajtx*ajryst + 
     & ajrxs*ajryr +ajsxs*ajrys + ajtxs*ajryt
                     ajryxt=ajrx*ajryrt + ajsx*ajryst + ajtx*ajrytt + 
     & ajrxt*ajryr +ajsxt*ajrys + ajtxt*ajryt
                     ajryyr=ajry*ajryrr + ajsy*ajryrs + ajty*ajryrt + 
     & ajryr*ajryr +ajsyr*ajrys + ajtyr*ajryt
                     ajryys=ajry*ajryrs + ajsy*ajryss + ajty*ajryst + 
     & ajrys*ajryr +ajsys*ajrys + ajtys*ajryt
                     ajryyt=ajry*ajryrt + ajsy*ajryst + ajty*ajrytt + 
     & ajryt*ajryr +ajsyt*ajrys + ajtyt*ajryt
                     ajryzr=ajrz*ajryrr + ajsz*ajryrs + ajtz*ajryrt + 
     & ajrzr*ajryr +ajszr*ajrys + ajtzr*ajryt
                     ajryzs=ajrz*ajryrs + ajsz*ajryss + ajtz*ajryst + 
     & ajrzs*ajryr +ajszs*ajrys + ajtzs*ajryt
                     ajryzt=ajrz*ajryrt + ajsz*ajryst + ajtz*ajrytt + 
     & ajrzt*ajryr +ajszt*ajrys + ajtzt*ajryt
                     ajrzxr=ajrx*ajrzrr + ajsx*ajrzrs + ajtx*ajrzrt + 
     & ajrxr*ajrzr +ajsxr*ajrzs + ajtxr*ajrzt
                     ajrzxs=ajrx*ajrzrs + ajsx*ajrzss + ajtx*ajrzst + 
     & ajrxs*ajrzr +ajsxs*ajrzs + ajtxs*ajrzt
                     ajrzxt=ajrx*ajrzrt + ajsx*ajrzst + ajtx*ajrztt + 
     & ajrxt*ajrzr +ajsxt*ajrzs + ajtxt*ajrzt
                     ajrzyr=ajry*ajrzrr + ajsy*ajrzrs + ajty*ajrzrt + 
     & ajryr*ajrzr +ajsyr*ajrzs + ajtyr*ajrzt
                     ajrzys=ajry*ajrzrs + ajsy*ajrzss + ajty*ajrzst + 
     & ajrys*ajrzr +ajsys*ajrzs + ajtys*ajrzt
                     ajrzyt=ajry*ajrzrt + ajsy*ajrzst + ajty*ajrztt + 
     & ajryt*ajrzr +ajsyt*ajrzs + ajtyt*ajrzt
                     ajrzzr=ajrz*ajrzrr + ajsz*ajrzrs + ajtz*ajrzrt + 
     & ajrzr*ajrzr +ajszr*ajrzs + ajtzr*ajrzt
                     ajrzzs=ajrz*ajrzrs + ajsz*ajrzss + ajtz*ajrzst + 
     & ajrzs*ajrzr +ajszs*ajrzs + ajtzs*ajrzt
                     ajrzzt=ajrz*ajrzrt + ajsz*ajrzst + ajtz*ajrztt + 
     & ajrzt*ajrzr +ajszt*ajrzs + ajtzt*ajrzt
                     ajsxxr=ajrx*ajsxrr + ajsx*ajsxrs + ajtx*ajsxrt + 
     & ajrxr*ajsxr +ajsxr*ajsxs + ajtxr*ajsxt
                     ajsxxs=ajrx*ajsxrs + ajsx*ajsxss + ajtx*ajsxst + 
     & ajrxs*ajsxr +ajsxs*ajsxs + ajtxs*ajsxt
                     ajsxxt=ajrx*ajsxrt + ajsx*ajsxst + ajtx*ajsxtt + 
     & ajrxt*ajsxr +ajsxt*ajsxs + ajtxt*ajsxt
                     ajsxyr=ajry*ajsxrr + ajsy*ajsxrs + ajty*ajsxrt + 
     & ajryr*ajsxr +ajsyr*ajsxs + ajtyr*ajsxt
                     ajsxys=ajry*ajsxrs + ajsy*ajsxss + ajty*ajsxst + 
     & ajrys*ajsxr +ajsys*ajsxs + ajtys*ajsxt
                     ajsxyt=ajry*ajsxrt + ajsy*ajsxst + ajty*ajsxtt + 
     & ajryt*ajsxr +ajsyt*ajsxs + ajtyt*ajsxt
                     ajsxzr=ajrz*ajsxrr + ajsz*ajsxrs + ajtz*ajsxrt + 
     & ajrzr*ajsxr +ajszr*ajsxs + ajtzr*ajsxt
                     ajsxzs=ajrz*ajsxrs + ajsz*ajsxss + ajtz*ajsxst + 
     & ajrzs*ajsxr +ajszs*ajsxs + ajtzs*ajsxt
                     ajsxzt=ajrz*ajsxrt + ajsz*ajsxst + ajtz*ajsxtt + 
     & ajrzt*ajsxr +ajszt*ajsxs + ajtzt*ajsxt
                     ajsyxr=ajrx*ajsyrr + ajsx*ajsyrs + ajtx*ajsyrt + 
     & ajrxr*ajsyr +ajsxr*ajsys + ajtxr*ajsyt
                     ajsyxs=ajrx*ajsyrs + ajsx*ajsyss + ajtx*ajsyst + 
     & ajrxs*ajsyr +ajsxs*ajsys + ajtxs*ajsyt
                     ajsyxt=ajrx*ajsyrt + ajsx*ajsyst + ajtx*ajsytt + 
     & ajrxt*ajsyr +ajsxt*ajsys + ajtxt*ajsyt
                     ajsyyr=ajry*ajsyrr + ajsy*ajsyrs + ajty*ajsyrt + 
     & ajryr*ajsyr +ajsyr*ajsys + ajtyr*ajsyt
                     ajsyys=ajry*ajsyrs + ajsy*ajsyss + ajty*ajsyst + 
     & ajrys*ajsyr +ajsys*ajsys + ajtys*ajsyt
                     ajsyyt=ajry*ajsyrt + ajsy*ajsyst + ajty*ajsytt + 
     & ajryt*ajsyr +ajsyt*ajsys + ajtyt*ajsyt
                     ajsyzr=ajrz*ajsyrr + ajsz*ajsyrs + ajtz*ajsyrt + 
     & ajrzr*ajsyr +ajszr*ajsys + ajtzr*ajsyt
                     ajsyzs=ajrz*ajsyrs + ajsz*ajsyss + ajtz*ajsyst + 
     & ajrzs*ajsyr +ajszs*ajsys + ajtzs*ajsyt
                     ajsyzt=ajrz*ajsyrt + ajsz*ajsyst + ajtz*ajsytt + 
     & ajrzt*ajsyr +ajszt*ajsys + ajtzt*ajsyt
                     ajszxr=ajrx*ajszrr + ajsx*ajszrs + ajtx*ajszrt + 
     & ajrxr*ajszr +ajsxr*ajszs + ajtxr*ajszt
                     ajszxs=ajrx*ajszrs + ajsx*ajszss + ajtx*ajszst + 
     & ajrxs*ajszr +ajsxs*ajszs + ajtxs*ajszt
                     ajszxt=ajrx*ajszrt + ajsx*ajszst + ajtx*ajsztt + 
     & ajrxt*ajszr +ajsxt*ajszs + ajtxt*ajszt
                     ajszyr=ajry*ajszrr + ajsy*ajszrs + ajty*ajszrt + 
     & ajryr*ajszr +ajsyr*ajszs + ajtyr*ajszt
                     ajszys=ajry*ajszrs + ajsy*ajszss + ajty*ajszst + 
     & ajrys*ajszr +ajsys*ajszs + ajtys*ajszt
                     ajszyt=ajry*ajszrt + ajsy*ajszst + ajty*ajsztt + 
     & ajryt*ajszr +ajsyt*ajszs + ajtyt*ajszt
                     ajszzr=ajrz*ajszrr + ajsz*ajszrs + ajtz*ajszrt + 
     & ajrzr*ajszr +ajszr*ajszs + ajtzr*ajszt
                     ajszzs=ajrz*ajszrs + ajsz*ajszss + ajtz*ajszst + 
     & ajrzs*ajszr +ajszs*ajszs + ajtzs*ajszt
                     ajszzt=ajrz*ajszrt + ajsz*ajszst + ajtz*ajsztt + 
     & ajrzt*ajszr +ajszt*ajszs + ajtzt*ajszt
                     ajtxxr=ajrx*ajtxrr + ajsx*ajtxrs + ajtx*ajtxrt + 
     & ajrxr*ajtxr +ajsxr*ajtxs + ajtxr*ajtxt
                     ajtxxs=ajrx*ajtxrs + ajsx*ajtxss + ajtx*ajtxst + 
     & ajrxs*ajtxr +ajsxs*ajtxs + ajtxs*ajtxt
                     ajtxxt=ajrx*ajtxrt + ajsx*ajtxst + ajtx*ajtxtt + 
     & ajrxt*ajtxr +ajsxt*ajtxs + ajtxt*ajtxt
                     ajtxyr=ajry*ajtxrr + ajsy*ajtxrs + ajty*ajtxrt + 
     & ajryr*ajtxr +ajsyr*ajtxs + ajtyr*ajtxt
                     ajtxys=ajry*ajtxrs + ajsy*ajtxss + ajty*ajtxst + 
     & ajrys*ajtxr +ajsys*ajtxs + ajtys*ajtxt
                     ajtxyt=ajry*ajtxrt + ajsy*ajtxst + ajty*ajtxtt + 
     & ajryt*ajtxr +ajsyt*ajtxs + ajtyt*ajtxt
                     ajtxzr=ajrz*ajtxrr + ajsz*ajtxrs + ajtz*ajtxrt + 
     & ajrzr*ajtxr +ajszr*ajtxs + ajtzr*ajtxt
                     ajtxzs=ajrz*ajtxrs + ajsz*ajtxss + ajtz*ajtxst + 
     & ajrzs*ajtxr +ajszs*ajtxs + ajtzs*ajtxt
                     ajtxzt=ajrz*ajtxrt + ajsz*ajtxst + ajtz*ajtxtt + 
     & ajrzt*ajtxr +ajszt*ajtxs + ajtzt*ajtxt
                     ajtyxr=ajrx*ajtyrr + ajsx*ajtyrs + ajtx*ajtyrt + 
     & ajrxr*ajtyr +ajsxr*ajtys + ajtxr*ajtyt
                     ajtyxs=ajrx*ajtyrs + ajsx*ajtyss + ajtx*ajtyst + 
     & ajrxs*ajtyr +ajsxs*ajtys + ajtxs*ajtyt
                     ajtyxt=ajrx*ajtyrt + ajsx*ajtyst + ajtx*ajtytt + 
     & ajrxt*ajtyr +ajsxt*ajtys + ajtxt*ajtyt
                     ajtyyr=ajry*ajtyrr + ajsy*ajtyrs + ajty*ajtyrt + 
     & ajryr*ajtyr +ajsyr*ajtys + ajtyr*ajtyt
                     ajtyys=ajry*ajtyrs + ajsy*ajtyss + ajty*ajtyst + 
     & ajrys*ajtyr +ajsys*ajtys + ajtys*ajtyt
                     ajtyyt=ajry*ajtyrt + ajsy*ajtyst + ajty*ajtytt + 
     & ajryt*ajtyr +ajsyt*ajtys + ajtyt*ajtyt
                     ajtyzr=ajrz*ajtyrr + ajsz*ajtyrs + ajtz*ajtyrt + 
     & ajrzr*ajtyr +ajszr*ajtys + ajtzr*ajtyt
                     ajtyzs=ajrz*ajtyrs + ajsz*ajtyss + ajtz*ajtyst + 
     & ajrzs*ajtyr +ajszs*ajtys + ajtzs*ajtyt
                     ajtyzt=ajrz*ajtyrt + ajsz*ajtyst + ajtz*ajtytt + 
     & ajrzt*ajtyr +ajszt*ajtys + ajtzt*ajtyt
                     ajtzxr=ajrx*ajtzrr + ajsx*ajtzrs + ajtx*ajtzrt + 
     & ajrxr*ajtzr +ajsxr*ajtzs + ajtxr*ajtzt
                     ajtzxs=ajrx*ajtzrs + ajsx*ajtzss + ajtx*ajtzst + 
     & ajrxs*ajtzr +ajsxs*ajtzs + ajtxs*ajtzt
                     ajtzxt=ajrx*ajtzrt + ajsx*ajtzst + ajtx*ajtztt + 
     & ajrxt*ajtzr +ajsxt*ajtzs + ajtxt*ajtzt
                     ajtzyr=ajry*ajtzrr + ajsy*ajtzrs + ajty*ajtzrt + 
     & ajryr*ajtzr +ajsyr*ajtzs + ajtyr*ajtzt
                     ajtzys=ajry*ajtzrs + ajsy*ajtzss + ajty*ajtzst + 
     & ajrys*ajtzr +ajsys*ajtzs + ajtys*ajtzt
                     ajtzyt=ajry*ajtzrt + ajsy*ajtzst + ajty*ajtztt + 
     & ajryt*ajtzr +ajsyt*ajtzs + ajtyt*ajtzt
                     ajtzzr=ajrz*ajtzrr + ajsz*ajtzrs + ajtz*ajtzrt + 
     & ajrzr*ajtzr +ajszr*ajtzs + ajtzr*ajtzt
                     ajtzzs=ajrz*ajtzrs + ajsz*ajtzss + ajtz*ajtzst + 
     & ajrzs*ajtzr +ajszs*ajtzs + ajtzs*ajtzt
                     ajtzzt=ajrz*ajtzrt + ajsz*ajtzst + ajtz*ajtztt + 
     & ajrzt*ajtzr +ajszt*ajtzs + ajtzt*ajtzt
                     ! ***************************************************************
                     ! PDE: cxx*uxx + cyy*uyy + czz*uzz + cxy*uxy + cxz*uxz + cyz*uyz + cx*ux + cy*uy + cz*uz + c0 *u = f 
                     ! PDE: cRR*urr + cSS*uss + cTT*utt + cRS*urs + cRT*urt + cST*ust  + ccR*ur + ccS*us + ccT*ut + c0 *u = f 
                     ! =============== Start: Laplace operator: ==================== 
                      cxx=1.
                      cyy=1.
                      czz=1.
                      cxy=0.
                      cxz=0.
                      cyz=0.
                      cx=0.
                      cy=0.
                      cz=0.
                      c0=0.
                      cRR=cxx*ajrx**2+cyy*ajry**2+czz*ajrz**2 +cxy*
     & ajrx*ajry+cxz*ajrx*ajrz+cyz*ajry*ajrz
                      cSS=cxx*ajsx**2+cyy*ajsy**2+czz*ajsz**2 +cxy*
     & ajsx*ajsy+cxz*ajsx*ajsz+cyz*ajsy*ajsz
                      cTT=cxx*ajtx**2+cyy*ajty**2+czz*ajtz**2 +cxy*
     & ajtx*ajty+cxz*ajtx*ajtz+cyz*ajty*ajtz
                      cRS=2.*(cxx*ajrx*ajsx+cyy*ajry*ajsy+czz*ajrz*
     & ajsz) +cxy*(ajrx*ajsy+ajry*ajsx)+cxz*(ajrx*ajsz+ajrz*ajsx)+cyz*
     & (ajry*ajsz+ajrz*ajsy)
                      cRT=2.*(cxx*ajrx*ajtx+cyy*ajry*ajty+czz*ajrz*
     & ajtz) +cxy*(ajrx*ajty+ajry*ajtx)+cxz*(ajrx*ajtz+ajrz*ajtx)+cyz*
     & (ajry*ajtz+ajrz*ajty)
                      cST=2.*(cxx*ajsx*ajtx+cyy*ajsy*ajty+czz*ajsz*
     & ajtz) +cxy*(ajsx*ajty+ajsy*ajtx)+cxz*(ajsx*ajtz+ajsz*ajtx)+cyz*
     & (ajsy*ajtz+ajsz*ajty)
                      ccR=cxx*ajrxx+cyy*ajryy+czz*ajrzz +cxy*ajrxy+cxz*
     & ajrxz+cyz*ajryz + cx*ajrx+cy*ajry+cz*ajrz
                      ccS=cxx*ajsxx+cyy*ajsyy+czz*ajszz +cxy*ajsxy+cxz*
     & ajsxz+cyz*ajsyz + cx*ajsx+cy*ajsy+cz*ajsz
                      ccT=cxx*ajtxx+cyy*ajtyy+czz*ajtzz +cxy*ajtxy+cxz*
     & ajtxz+cyz*ajtyz + cx*ajtx+cy*ajty+cz*ajtz
                     ! m=1...
                      cRRr=2.*(ajrx*ajrxr+ajry*ajryr+ajrz*ajrzr)
                      cRSr=2.*(ajrxr*ajsx+ajrx*ajsxr + ajryr*ajsy+ 
     & ajry*ajsyr + ajrzr*ajsz+ ajrz*ajszr)
                      cRTr=2.*(ajrxr*ajtx+ajrx*ajtxr + ajryr*ajty+ 
     & ajry*ajtyr + ajrzr*ajtz+ ajrz*ajtzr)
                      ccRr=ajrxxr+ajryyr+ajrzzr
                      cRRs=2.*(ajrx*ajrxs+ajry*ajrys+ajrz*ajrzs)
                      cRSs=2.*(ajrxs*ajsx+ajrx*ajsxs + ajrys*ajsy+ 
     & ajry*ajsys + ajrzs*ajsz+ ajrz*ajszs)
                      cRTs=2.*(ajrxs*ajtx+ajrx*ajtxs + ajrys*ajty+ 
     & ajry*ajtys + ajrzs*ajtz+ ajrz*ajtzs)
                      ccRs=ajrxxs+ajryys+ajrzzs
                      cRRt=2.*(ajrx*ajrxt+ajry*ajryt+ajrz*ajrzt)
                      cRSt=2.*(ajrxt*ajsx+ajrx*ajsxt + ajryt*ajsy+ 
     & ajry*ajsyt + ajrzt*ajsz+ ajrz*ajszt)
                      cRTt=2.*(ajrxt*ajtx+ajrx*ajtxt + ajryt*ajty+ 
     & ajry*ajtyt + ajrzt*ajtz+ ajrz*ajtzt)
                      ccRt=ajrxxt+ajryyt+ajrzzt
                     ! m=2...
                      cSSr=2.*(ajsx*ajsxr+ajsy*ajsyr+ajsz*ajszr)
                      cSTr=2.*(ajsxr*ajtx+ajsx*ajtxr + ajsyr*ajty+ 
     & ajsy*ajtyr + ajszr*ajtz+ ajsz*ajtzr)
                      ccSr=ajsxxr+ajsyyr+ajszzr
                      cSSs=2.*(ajsx*ajsxs+ajsy*ajsys+ajsz*ajszs)
                      cSTs=2.*(ajsxs*ajtx+ajsx*ajtxs + ajsys*ajty+ 
     & ajsy*ajtys + ajszs*ajtz+ ajsz*ajtzs)
                      ccSs=ajsxxs+ajsyys+ajszzs
                      cSSt=2.*(ajsx*ajsxt+ajsy*ajsyt+ajsz*ajszt)
                      cSTt=2.*(ajsxt*ajtx+ajsx*ajtxt + ajsyt*ajty+ 
     & ajsy*ajtyt + ajszt*ajtz+ ajsz*ajtzt)
                      ccSt=ajsxxt+ajsyyt+ajszzt
                     ! m=3...
                      cTTr=2.*(ajtx*ajtxr+ajty*ajtyr+ajtz*ajtzr)
                      ccTr=ajtxxr+ajtyyr+ajtzzr
                      cTTs=2.*(ajtx*ajtxs+ajty*ajtys+ajtz*ajtzs)
                      ccTs=ajtxxs+ajtyys+ajtzzs
                      cTTt=2.*(ajtx*ajtxt+ajty*ajtyt+ajtz*ajtzt)
                      ccTt=ajtxxt+ajtyyt+ajtzzt
                      c0r=0.
                      c0s=0.
                      c0t=0.
                     ! =============== End: Laplace operator: ==================== 
                     ! ---------------- Start: Boundary condition: --------------- 
                     ! BC: a1*u.n + a0*u = g 
                     ! nsign=2*side-1
                     ! a1=1.
                     ! a0=0.
                      ! ---------------- Start r direction ---------------
                      ! ---------------- Start s direction ---------------
                      ! Outward normal : (n1,n2,n3) 
                      ani=nsign/sqrt(ajsx**2+ajsy**2+ajsz**2)
                      n1=ajsx*ani
                      n2=ajsy*ani
                      n3=ajsz*ani
                      ! BC : anS*us + anT*ut + anR*ur + a0*u 
                      anS=a1*(n1*ajsx+n2*ajsy+n3*ajsz)
                      anT=a1*(n1*ajtx+n2*ajty+n3*ajtz)
                      anR=a1*(n1*ajrx+n2*ajry+n3*ajrz)
                     ! >>>>>>>
                      anit=-(ajsx*ajsxt+ajsy*ajsyt+ajsz*ajszt)*ani**3
                      anitt=-(ajsx*ajsxtt+ajsy*ajsytt+ajsz*ajsztt+
     & ajsxt*ajsxt+ajsyt*ajsyt+ajszt*ajszt)*ani**3 -3.*(ajsx*ajsxt+
     & ajsy*ajsyt+ajsz*ajszt)*ani**2*anit
                      n1t=ajsxt*ani + ajsx*anit
                      n1tt=ajsxtt*ani + 2.*ajsxt*anit + ajsx*anitt
                      n2t=ajsyt*ani + ajsy*anit
                      n2tt=ajsytt*ani + 2.*ajsyt*anit + ajsy*anitt
                      n3t=ajszt*ani + ajsz*anit
                      n3tt=ajsztt*ani + 2.*ajszt*anit + ajsz*anitt
                      anSt =a1*(n1*ajsxt+n2*ajsyt+n3*ajszt+n1t*ajsx+
     & n2t*ajsy+n3t*ajsz)
                      anStt=a1*(n1*ajsxtt+n2*ajsytt+n3*ajsztt+2.*(n1t*
     & ajsxt+n2t*ajsyt+n3t*ajszt)+n1tt*ajsx+n2tt*ajsy+n3tt*ajsz)
                      anTt =a1*(n1*ajtxt+n2*ajtyt+n3*ajtzt+n1t*ajtx+
     & n2t*ajty+n3t*ajtz)
                      anTtt=a1*(n1*ajtxtt+n2*ajtytt+n3*ajtztt+2.*(n1t*
     & ajtxt+n2t*ajtyt+n3t*ajtzt)+n1tt*ajtx+n2tt*ajty+n3tt*ajtz)
                      anRt =a1*(n1*ajrxt+n2*ajryt+n3*ajrzt+n1t*ajrx+
     & n2t*ajry+n3t*ajrz)
                      anRtt=a1*(n1*ajrxtt+n2*ajrytt+n3*ajrztt+2.*(n1t*
     & ajrxt+n2t*ajryt+n3t*ajrzt)+n1tt*ajrx+n2tt*ajry+n3tt*ajrz)
                     ! <<<<<<<
                     ! >>>>>>>
                      anir=-(ajsx*ajsxr+ajsy*ajsyr+ajsz*ajszr)*ani**3
                      anirr=-(ajsx*ajsxrr+ajsy*ajsyrr+ajsz*ajszrr+
     & ajsxr*ajsxr+ajsyr*ajsyr+ajszr*ajszr)*ani**3 -3.*(ajsx*ajsxr+
     & ajsy*ajsyr+ajsz*ajszr)*ani**2*anir
                      anirt=-(ajsx*ajsxrt+ajsy*ajsyrt+ajsz*ajszrt+
     & ajsxt*ajsxr+ajsyt*ajsyr+ajszt*ajszr)*ani**3 -3.*(ajsx*ajsxt+
     & ajsy*ajsyt+ajsz*ajszt)*ani**2*anir
                      n1r=ajsxr*ani + ajsx*anir
                      n1rr=ajsxrr*ani + 2.*ajsxr*anir + ajsx*anirr
                      n1rt=ajsxrt*ani + ajsxr*anit + ajsxt*anir + ajsx*
     & anirt
                      n2r=ajsyr*ani + ajsy*anir
                      n2rr=ajsyrr*ani + 2.*ajsyr*anir + ajsy*anirr
                      n2rt=ajsyrt*ani + ajsyr*anit + ajsyt*anir + ajsy*
     & anirt
                      n3r=ajszr*ani + ajsz*anir
                      n3rr=ajszrr*ani + 2.*ajszr*anir + ajsz*anirr
                      n3rt=ajszrt*ani + ajszr*anit + ajszt*anir + ajsz*
     & anirt
                      anSr =a1*(n1*ajsxr+n2*ajsyr+n3*ajszr+n1r*ajsx+
     & n2r*ajsy+n3r*ajsz)
                      anSrr=a1*(n1*ajsxrr+n2*ajsyrr+n3*ajszrr+2.*(n1r*
     & ajsxr+n2r*ajsyr+n3r*ajszr)+n1rr*ajsx+n2rr*ajsy+n3rr*ajsz)
                      anSrt=a1*(n1*ajsxrt+n2*ajsyrt+n3*ajszrt +n1t*
     & ajsxr+n2t*ajsyr+n3t*ajszr +n1r*ajsxt+n2r*ajsyt+n3r*ajszt +n1rt*
     & ajsx+n2rt*ajsy+n3rt*ajsz)
                      anTr =a1*(n1*ajtxr+n2*ajtyr+n3*ajtzr+n1r*ajtx+
     & n2r*ajty+n3r*ajtz)
                      anTrr=a1*(n1*ajtxrr+n2*ajtyrr+n3*ajtzrr+2.*(n1r*
     & ajtxr+n2r*ajtyr+n3r*ajtzr)+n1rr*ajtx+n2rr*ajty+n3rr*ajtz)
                      anTrt=a1*(n1*ajtxrt+n2*ajtyrt+n3*ajtzrt +n1t*
     & ajtxr+n2t*ajtyr+n3t*ajtzr +n1r*ajtxt+n2r*ajtyt+n3r*ajtzt +n1rt*
     & ajtx+n2rt*ajty+n3rt*ajtz)
                      anRr =a1*(n1*ajrxr+n2*ajryr+n3*ajrzr+n1r*ajrx+
     & n2r*ajry+n3r*ajrz)
                      anRrr=a1*(n1*ajrxrr+n2*ajryrr+n3*ajrzrr+2.*(n1r*
     & ajrxr+n2r*ajryr+n3r*ajrzr)+n1rr*ajrx+n2rr*ajry+n3rr*ajrz)
                      anRrt=a1*(n1*ajrxrt+n2*ajryrt+n3*ajrzrt +n1t*
     & ajrxr+n2t*ajryr+n3t*ajrzr +n1r*ajrxt+n2r*ajryt+n3r*ajrzt +n1rt*
     & ajrx+n2rt*ajry+n3rt*ajrz)
                     ! <<<<<<<
                      ! Here are the expressions for the normal derivatives
                     bn3 = 1
                     bn2 = 0
                     bn2 = 0
                     bn1 = 0
                     b0  = -(-c0s*anS**3*cSS**2+cSSs*anS**3*cSS*c0-cST*
     & cSSt*anS**3*c0+cST*c0t*anS**3*cSS-cST**2*cSS*a0tt*anS**2-2*cST*
     & *2*cSS*anSt**2*a0+cSSt*anS**2*cST**2*a0t+cTT*cSS**2*a0tt*anS**
     & 2+2*cTT*cSS**2*anSt**2*a0+cRS*c0r*anS**3*cSS-cRS*cSSr*anS**3*
     & c0-cRS**2*cSS*a0rr*anS**2-2*cRS**2*cSS*anSr**2*a0+cSSr*anS**2*
     & cRS**2*a0r+cRT*cSS**2*a0rt*anS**2+cRR*cSS**2*a0rr*anS**2+2*cRR*
     & cSS**2*anSr**2*a0-ccS**2*anS**2*cSS*a0+ccS*anS**3*cSS*c0+ccT*
     & anS**2*cSS**2*a0t+ccR*anS**2*cSS**2*a0r+c0*anS**2*cSS**2*a0+
     & cSTs*anS**2*cSS**2*a0t+cRSs*anS**2*cSS**2*a0r+ccSs*anS**2*cSS**
     & 2*a0-cSSs*anS**2*cSS*cST*a0t+cSSs*anS*cSS*cST*anSt*a0-cSSs*anS*
     & *2*cSS*cRS*a0r+cSSs*anS*cSS*cRS*anSr*a0-cSSs*anS**2*cSS*ccS*a0+
     & 2*cST**2*cSS*anSt*a0t*anS+cST**2*cSS*anStt*anS*a0-2*cST*cRS*
     & cSS*a0rt*anS**2+2*cST*cRS*cSS*anSt*a0r*anS-4*cST*cRS*cSS*anSt*
     & anSr*a0+2*cST*cRS*cSS*anSr*a0t*anS+2*cST*cRS*cSS*anSrt*anS*a0-
     & 2*cST*ccS*anS**2*cSS*a0t+2*cST*ccS*anS*cSS*anSt*a0-cST*cSTt*
     & anS**2*cSS*a0t+cST*cSTt*anS*cSS*anSt*a0-cST*cRSt*anS**2*cSS*
     & a0r+cST*cRSt*anS*cSS*anSr*a0-cST*ccSt*anS**2*cSS*a0-cSSt*anS*
     & cST**2*anSt*a0+cST*cSSt*anS**2*cRS*a0r-cST*cSSt*anS*cRS*anSr*
     & a0+cST*cSSt*anS**2*ccS*a0-2*cTT*cSS**2*anSt*a0t*anS-cTT*cSS**2*
     & anStt*anS*a0+2*cRS**2*cSS*anSr*a0r*anS+cRS**2*cSS*anSrr*anS*a0-
     & 2*cRS*ccS*anS**2*cSS*a0r+2*cRS*ccS*anS*cSS*anSr*a0-cRS*cSTr*
     & anS**2*cSS*a0t+cRS*cSTr*anS*cSS*anSt*a0-cRS*cRSr*anS**2*cSS*
     & a0r+cRS*cRSr*anS*cSS*anSr*a0-cRS*ccSr*anS**2*cSS*a0+cRS*cSSr*
     & anS**2*cST*a0t-cRS*cSSr*anS*cST*anSt*a0-cSSr*anS*cRS**2*anSr*
     & a0+cRS*cSSr*anS**2*ccS*a0-cRT*cSS**2*anSt*a0r*anS+2*cRT*cSS**2*
     & anSt*anSr*a0-cRT*cSS**2*anSr*a0t*anS-cRT*cSS**2*anSrt*anS*a0-2*
     & cRR*cSS**2*anSr*a0r*anS-cRR*cSS**2*anSrr*anS*a0-ccT*anS*cSS**2*
     & anSt*a0-ccR*anS*cSS**2*anSr*a0-cSTs*anS*cSS**2*anSt*a0-cRSs*
     & anS*cSS**2*anSr*a0)/anS**3/cSS**3
                      ! ---------------- Start t direction ---------------
                     ! write(*,'(''LS:matrix: side,axis,axisp1,b0,b1,b3,br2 ='',2i2,i3,4e11.3)') side,axis,axisp1,b0,b1,b3,br2
                     ! bn2 = -(-cRRr*anR**3*cRR+cRT*cRRt*anR**3+cRS*cRRs*anR**3-ccR*anR**3*cRR)/anR**3/cRR**2
                     ! write(*,'("LS-NE4:matrix: i1,i2=",2i3," Values:")') i1,i2
                     ! write(*,'("  cRR,anR,cRRr,cRT,cRRt,cRS,cRRs,ccR=",8e11.3)') cRR,anR,cRRr,cRT,cRRt,cRS,cRRs,ccR
                  ! b0  = -(2*cRS**2*anRs*a0s*anR+cRS**2*anRss*anR*a0-2*cRS*cRT*a0st*anR**2-cRS*ccR*anR**2*a0s-cRS*cRSs*anR**2*a0s-cRS*cRTs*anR**2*a0t-cRS*ccRs*anR**2*a0+cSS*cRR*a0ss*anR**2+2*cSS*cRR*anRs**2*a0-cRT*ccR*anR**2*a0t-cRT*cRSt*anR**2*a0s+cRT*c0t*anR**3-c0r*anR**3*cRR-cRS**2*a0ss*anR**2-2*cRS**2*anRs**2*a0+cRS*c0s*anR**3-cRT**2*a0tt*anR**2-2*cRT**2*anRt**2*a0+2*cRS*cRT*anRs*a0t*anR-4*cRS*cRT*anRs*anRt*a0+2*cRS*cRT*anRt*a0s*anR+2*cRS*cRT*anRst*anR*a0+cRS*ccR*anR*anRs*a0+cRS*cRSs*anR*anRs*a0+cRS*cRTs*anR*anRt*a0-2*cSS*cRR*anRs*a0s*anR-cSS*cRR*anRss*anR*a0-cRT*cRTt*anR**2*a0t-cRT*ccRt*anR**2*a0+cRT**2*anRtt*anR*a0+2*cRT**2*anRt*a0t*anR+cST*cRR*a0st*anR**2+cTT*cRR*a0tt*anR**2+2*cTT*cRR*anRt**2*a0+ccS*anR**2*cRR*a0s+ccT*anR**2*cRR*a0t+c0*anR**2*cRR*a0+cRSr*anR**2*cRR*a0s+cRTr*anR**2*cRR*a0t+ccRr*anR**2*cRR*a0+cRT*ccR*anR*anRt*a0+cRT*cRSt*anR*anRs*a0+cRT*cRTt*anR*anRt*a0-cST*cRR*anRs*a0t*anR+2*cST*cRR*anRs*anRt*a0-cST*cRR*anRt*a0s*anR-cST*cRR*anRst*anR*a0-cTT*cRR*anRtt*anR*a0-2*cTT*cRR*anRt*a0t*anR-ccS*anR*cRR*anRs*a0-ccT*anR*cRR*anRt*a0-cRSr*anR*cRR*anRs*a0-cRTr*anR*cRR*anRt*a0)/anR**3/cRR**2
                     ! write(*,'("anRs,a0s,anRss,a0st,cRTs,a0t,a0,cSS,a0ss=",9e10.2)') anRs,a0s,anRss,a0st,cRTs,a0t,a0,cSS,a0ss
                     ! write(*,'(" b0,bn2 =",4e11.3)') b0,bn2
                     c(j1,j2,j3)=-.5/dr(axis)**3
                     d(j1,j2,j3)= 1./dr(axis)**3    +bn2/dr(axis)**2
                     e(j1,j2,j3)=                -2.*bn2/dr(axis)**2 - 
     & b0
                     a(j1,j2,j3)=-1./dr(axis)**3    +bn2/dr(axis)**2
                     b(j1,j2,j3)= .5/dr(axis)**3
                    else if( mask(i1,i2,i3).lt.0 ) then
                        b(j1,j2,j3)= 1.
                        c(j1,j2,j3)=-4.
                        d(j1,j2,j3)= 6.
                        e(j1,j2,j3)=-4.
                        a(j1,j2,j3)= 1.
                    end if
                   end do
                   end do
                   end do
                else if( axis.eq.2 .and. nd.eq.3 )then
                   if( equationToSolve.ne.laplaceEquation )then
                     write(*,'("Ogmg:LSB:ERROR: equation!=laplace")')
                     write(*,'("equationToSolve=",i2)') equationToSolve
                     write(*,'("gridType=",i2)') gridType
                     write(*,'("sparseStencil=",i2)') sparseStencil
                     stop 5054
                   end if
                   nsign = 2*side-1
                   ! write(*,'(''MGLS: neumannAndEquationCurvilinear: a0,a1='',2f6.2)') a0,a1
                   diag=0. ! for now
                   do j3=l3a,l3b
                   do j2=l2a,l2b
                   do j1=l1a,l1b
                    i1=j1+2*is1 ! (i1,i2,i3) is the boundary point
                    i2=j2+2*is2 ! (j1,j2,j3) is the 2nd ghost line
                    i3=j3+2*is3
                    if( mask(i1,i2,i3).gt.0 ) then
                     ! We need 2 parameteric and 1 real derivative. Do this for now: 
                      ! this next call will define the jacobian and its derivatives (parameteric and spatial)
                      ajrx = rsxy(i1,i2,i3,0,0)
                      ajrxr = (rsxy(i1-2,i2,i3,0,0)-8.*rsxy(i1-1,i2,i3,
     & 0,0)+8.*rsxy(i1+1,i2,i3,0,0)-rsxy(i1+2,i2,i3,0,0))/(12.*dr(0))
                      ajrxs = (rsxy(i1,i2-2,i3,0,0)-8.*rsxy(i1,i2-1,i3,
     & 0,0)+8.*rsxy(i1,i2+1,i3,0,0)-rsxy(i1,i2+2,i3,0,0))/(12.*dr(1))
                      ajrxt = (rsxy(i1,i2,i3-2,0,0)-8.*rsxy(i1,i2,i3-1,
     & 0,0)+8.*rsxy(i1,i2,i3+1,0,0)-rsxy(i1,i2,i3+2,0,0))/(12.*dr(2))
                      ajrxrr = (-rsxy(i1-2,i2,i3,0,0)+16.*rsxy(i1-1,i2,
     & i3,0,0)-30.*rsxy(i1,i2,i3,0,0)+16.*rsxy(i1+1,i2,i3,0,0)-rsxy(
     & i1+2,i2,i3,0,0))/(12.*dr(0)**2)
                      ajrxrs = ((rsxy(i1-2,i2-2,i3,0,0)-8.*rsxy(i1-2,
     & i2-1,i3,0,0)+8.*rsxy(i1-2,i2+1,i3,0,0)-rsxy(i1-2,i2+2,i3,0,0))
     & /(12.*dr(1))-8.*(rsxy(i1-1,i2-2,i3,0,0)-8.*rsxy(i1-1,i2-1,i3,0,
     & 0)+8.*rsxy(i1-1,i2+1,i3,0,0)-rsxy(i1-1,i2+2,i3,0,0))/(12.*dr(1)
     & )+8.*(rsxy(i1+1,i2-2,i3,0,0)-8.*rsxy(i1+1,i2-1,i3,0,0)+8.*rsxy(
     & i1+1,i2+1,i3,0,0)-rsxy(i1+1,i2+2,i3,0,0))/(12.*dr(1))-(rsxy(i1+
     & 2,i2-2,i3,0,0)-8.*rsxy(i1+2,i2-1,i3,0,0)+8.*rsxy(i1+2,i2+1,i3,
     & 0,0)-rsxy(i1+2,i2+2,i3,0,0))/(12.*dr(1)))/(12.*dr(0))
                      ajrxss = (-rsxy(i1,i2-2,i3,0,0)+16.*rsxy(i1,i2-1,
     & i3,0,0)-30.*rsxy(i1,i2,i3,0,0)+16.*rsxy(i1,i2+1,i3,0,0)-rsxy(
     & i1,i2+2,i3,0,0))/(12.*dr(1)**2)
                      ajrxrt = ((rsxy(i1-2,i2,i3-2,0,0)-8.*rsxy(i1-2,
     & i2,i3-1,0,0)+8.*rsxy(i1-2,i2,i3+1,0,0)-rsxy(i1-2,i2,i3+2,0,0))
     & /(12.*dr(2))-8.*(rsxy(i1-1,i2,i3-2,0,0)-8.*rsxy(i1-1,i2,i3-1,0,
     & 0)+8.*rsxy(i1-1,i2,i3+1,0,0)-rsxy(i1-1,i2,i3+2,0,0))/(12.*dr(2)
     & )+8.*(rsxy(i1+1,i2,i3-2,0,0)-8.*rsxy(i1+1,i2,i3-1,0,0)+8.*rsxy(
     & i1+1,i2,i3+1,0,0)-rsxy(i1+1,i2,i3+2,0,0))/(12.*dr(2))-(rsxy(i1+
     & 2,i2,i3-2,0,0)-8.*rsxy(i1+2,i2,i3-1,0,0)+8.*rsxy(i1+2,i2,i3+1,
     & 0,0)-rsxy(i1+2,i2,i3+2,0,0))/(12.*dr(2)))/(12.*dr(0))
                      ajrxst = ((rsxy(i1,i2-2,i3-2,0,0)-8.*rsxy(i1,i2-
     & 2,i3-1,0,0)+8.*rsxy(i1,i2-2,i3+1,0,0)-rsxy(i1,i2-2,i3+2,0,0))/(
     & 12.*dr(2))-8.*(rsxy(i1,i2-1,i3-2,0,0)-8.*rsxy(i1,i2-1,i3-1,0,0)
     & +8.*rsxy(i1,i2-1,i3+1,0,0)-rsxy(i1,i2-1,i3+2,0,0))/(12.*dr(2))+
     & 8.*(rsxy(i1,i2+1,i3-2,0,0)-8.*rsxy(i1,i2+1,i3-1,0,0)+8.*rsxy(
     & i1,i2+1,i3+1,0,0)-rsxy(i1,i2+1,i3+2,0,0))/(12.*dr(2))-(rsxy(i1,
     & i2+2,i3-2,0,0)-8.*rsxy(i1,i2+2,i3-1,0,0)+8.*rsxy(i1,i2+2,i3+1,
     & 0,0)-rsxy(i1,i2+2,i3+2,0,0))/(12.*dr(2)))/(12.*dr(1))
                      ajrxtt = (-rsxy(i1,i2,i3-2,0,0)+16.*rsxy(i1,i2,
     & i3-1,0,0)-30.*rsxy(i1,i2,i3,0,0)+16.*rsxy(i1,i2,i3+1,0,0)-rsxy(
     & i1,i2,i3+2,0,0))/(12.*dr(2)**2)
                      ajsx = rsxy(i1,i2,i3,1,0)
                      ajsxr = (rsxy(i1-2,i2,i3,1,0)-8.*rsxy(i1-1,i2,i3,
     & 1,0)+8.*rsxy(i1+1,i2,i3,1,0)-rsxy(i1+2,i2,i3,1,0))/(12.*dr(0))
                      ajsxs = (rsxy(i1,i2-2,i3,1,0)-8.*rsxy(i1,i2-1,i3,
     & 1,0)+8.*rsxy(i1,i2+1,i3,1,0)-rsxy(i1,i2+2,i3,1,0))/(12.*dr(1))
                      ajsxt = (rsxy(i1,i2,i3-2,1,0)-8.*rsxy(i1,i2,i3-1,
     & 1,0)+8.*rsxy(i1,i2,i3+1,1,0)-rsxy(i1,i2,i3+2,1,0))/(12.*dr(2))
                      ajsxrr = (-rsxy(i1-2,i2,i3,1,0)+16.*rsxy(i1-1,i2,
     & i3,1,0)-30.*rsxy(i1,i2,i3,1,0)+16.*rsxy(i1+1,i2,i3,1,0)-rsxy(
     & i1+2,i2,i3,1,0))/(12.*dr(0)**2)
                      ajsxrs = ((rsxy(i1-2,i2-2,i3,1,0)-8.*rsxy(i1-2,
     & i2-1,i3,1,0)+8.*rsxy(i1-2,i2+1,i3,1,0)-rsxy(i1-2,i2+2,i3,1,0))
     & /(12.*dr(1))-8.*(rsxy(i1-1,i2-2,i3,1,0)-8.*rsxy(i1-1,i2-1,i3,1,
     & 0)+8.*rsxy(i1-1,i2+1,i3,1,0)-rsxy(i1-1,i2+2,i3,1,0))/(12.*dr(1)
     & )+8.*(rsxy(i1+1,i2-2,i3,1,0)-8.*rsxy(i1+1,i2-1,i3,1,0)+8.*rsxy(
     & i1+1,i2+1,i3,1,0)-rsxy(i1+1,i2+2,i3,1,0))/(12.*dr(1))-(rsxy(i1+
     & 2,i2-2,i3,1,0)-8.*rsxy(i1+2,i2-1,i3,1,0)+8.*rsxy(i1+2,i2+1,i3,
     & 1,0)-rsxy(i1+2,i2+2,i3,1,0))/(12.*dr(1)))/(12.*dr(0))
                      ajsxss = (-rsxy(i1,i2-2,i3,1,0)+16.*rsxy(i1,i2-1,
     & i3,1,0)-30.*rsxy(i1,i2,i3,1,0)+16.*rsxy(i1,i2+1,i3,1,0)-rsxy(
     & i1,i2+2,i3,1,0))/(12.*dr(1)**2)
                      ajsxrt = ((rsxy(i1-2,i2,i3-2,1,0)-8.*rsxy(i1-2,
     & i2,i3-1,1,0)+8.*rsxy(i1-2,i2,i3+1,1,0)-rsxy(i1-2,i2,i3+2,1,0))
     & /(12.*dr(2))-8.*(rsxy(i1-1,i2,i3-2,1,0)-8.*rsxy(i1-1,i2,i3-1,1,
     & 0)+8.*rsxy(i1-1,i2,i3+1,1,0)-rsxy(i1-1,i2,i3+2,1,0))/(12.*dr(2)
     & )+8.*(rsxy(i1+1,i2,i3-2,1,0)-8.*rsxy(i1+1,i2,i3-1,1,0)+8.*rsxy(
     & i1+1,i2,i3+1,1,0)-rsxy(i1+1,i2,i3+2,1,0))/(12.*dr(2))-(rsxy(i1+
     & 2,i2,i3-2,1,0)-8.*rsxy(i1+2,i2,i3-1,1,0)+8.*rsxy(i1+2,i2,i3+1,
     & 1,0)-rsxy(i1+2,i2,i3+2,1,0))/(12.*dr(2)))/(12.*dr(0))
                      ajsxst = ((rsxy(i1,i2-2,i3-2,1,0)-8.*rsxy(i1,i2-
     & 2,i3-1,1,0)+8.*rsxy(i1,i2-2,i3+1,1,0)-rsxy(i1,i2-2,i3+2,1,0))/(
     & 12.*dr(2))-8.*(rsxy(i1,i2-1,i3-2,1,0)-8.*rsxy(i1,i2-1,i3-1,1,0)
     & +8.*rsxy(i1,i2-1,i3+1,1,0)-rsxy(i1,i2-1,i3+2,1,0))/(12.*dr(2))+
     & 8.*(rsxy(i1,i2+1,i3-2,1,0)-8.*rsxy(i1,i2+1,i3-1,1,0)+8.*rsxy(
     & i1,i2+1,i3+1,1,0)-rsxy(i1,i2+1,i3+2,1,0))/(12.*dr(2))-(rsxy(i1,
     & i2+2,i3-2,1,0)-8.*rsxy(i1,i2+2,i3-1,1,0)+8.*rsxy(i1,i2+2,i3+1,
     & 1,0)-rsxy(i1,i2+2,i3+2,1,0))/(12.*dr(2)))/(12.*dr(1))
                      ajsxtt = (-rsxy(i1,i2,i3-2,1,0)+16.*rsxy(i1,i2,
     & i3-1,1,0)-30.*rsxy(i1,i2,i3,1,0)+16.*rsxy(i1,i2,i3+1,1,0)-rsxy(
     & i1,i2,i3+2,1,0))/(12.*dr(2)**2)
                      ajtx = rsxy(i1,i2,i3,2,0)
                      ajtxr = (rsxy(i1-2,i2,i3,2,0)-8.*rsxy(i1-1,i2,i3,
     & 2,0)+8.*rsxy(i1+1,i2,i3,2,0)-rsxy(i1+2,i2,i3,2,0))/(12.*dr(0))
                      ajtxs = (rsxy(i1,i2-2,i3,2,0)-8.*rsxy(i1,i2-1,i3,
     & 2,0)+8.*rsxy(i1,i2+1,i3,2,0)-rsxy(i1,i2+2,i3,2,0))/(12.*dr(1))
                      ajtxt = (rsxy(i1,i2,i3-2,2,0)-8.*rsxy(i1,i2,i3-1,
     & 2,0)+8.*rsxy(i1,i2,i3+1,2,0)-rsxy(i1,i2,i3+2,2,0))/(12.*dr(2))
                      ajtxrr = (-rsxy(i1-2,i2,i3,2,0)+16.*rsxy(i1-1,i2,
     & i3,2,0)-30.*rsxy(i1,i2,i3,2,0)+16.*rsxy(i1+1,i2,i3,2,0)-rsxy(
     & i1+2,i2,i3,2,0))/(12.*dr(0)**2)
                      ajtxrs = ((rsxy(i1-2,i2-2,i3,2,0)-8.*rsxy(i1-2,
     & i2-1,i3,2,0)+8.*rsxy(i1-2,i2+1,i3,2,0)-rsxy(i1-2,i2+2,i3,2,0))
     & /(12.*dr(1))-8.*(rsxy(i1-1,i2-2,i3,2,0)-8.*rsxy(i1-1,i2-1,i3,2,
     & 0)+8.*rsxy(i1-1,i2+1,i3,2,0)-rsxy(i1-1,i2+2,i3,2,0))/(12.*dr(1)
     & )+8.*(rsxy(i1+1,i2-2,i3,2,0)-8.*rsxy(i1+1,i2-1,i3,2,0)+8.*rsxy(
     & i1+1,i2+1,i3,2,0)-rsxy(i1+1,i2+2,i3,2,0))/(12.*dr(1))-(rsxy(i1+
     & 2,i2-2,i3,2,0)-8.*rsxy(i1+2,i2-1,i3,2,0)+8.*rsxy(i1+2,i2+1,i3,
     & 2,0)-rsxy(i1+2,i2+2,i3,2,0))/(12.*dr(1)))/(12.*dr(0))
                      ajtxss = (-rsxy(i1,i2-2,i3,2,0)+16.*rsxy(i1,i2-1,
     & i3,2,0)-30.*rsxy(i1,i2,i3,2,0)+16.*rsxy(i1,i2+1,i3,2,0)-rsxy(
     & i1,i2+2,i3,2,0))/(12.*dr(1)**2)
                      ajtxrt = ((rsxy(i1-2,i2,i3-2,2,0)-8.*rsxy(i1-2,
     & i2,i3-1,2,0)+8.*rsxy(i1-2,i2,i3+1,2,0)-rsxy(i1-2,i2,i3+2,2,0))
     & /(12.*dr(2))-8.*(rsxy(i1-1,i2,i3-2,2,0)-8.*rsxy(i1-1,i2,i3-1,2,
     & 0)+8.*rsxy(i1-1,i2,i3+1,2,0)-rsxy(i1-1,i2,i3+2,2,0))/(12.*dr(2)
     & )+8.*(rsxy(i1+1,i2,i3-2,2,0)-8.*rsxy(i1+1,i2,i3-1,2,0)+8.*rsxy(
     & i1+1,i2,i3+1,2,0)-rsxy(i1+1,i2,i3+2,2,0))/(12.*dr(2))-(rsxy(i1+
     & 2,i2,i3-2,2,0)-8.*rsxy(i1+2,i2,i3-1,2,0)+8.*rsxy(i1+2,i2,i3+1,
     & 2,0)-rsxy(i1+2,i2,i3+2,2,0))/(12.*dr(2)))/(12.*dr(0))
                      ajtxst = ((rsxy(i1,i2-2,i3-2,2,0)-8.*rsxy(i1,i2-
     & 2,i3-1,2,0)+8.*rsxy(i1,i2-2,i3+1,2,0)-rsxy(i1,i2-2,i3+2,2,0))/(
     & 12.*dr(2))-8.*(rsxy(i1,i2-1,i3-2,2,0)-8.*rsxy(i1,i2-1,i3-1,2,0)
     & +8.*rsxy(i1,i2-1,i3+1,2,0)-rsxy(i1,i2-1,i3+2,2,0))/(12.*dr(2))+
     & 8.*(rsxy(i1,i2+1,i3-2,2,0)-8.*rsxy(i1,i2+1,i3-1,2,0)+8.*rsxy(
     & i1,i2+1,i3+1,2,0)-rsxy(i1,i2+1,i3+2,2,0))/(12.*dr(2))-(rsxy(i1,
     & i2+2,i3-2,2,0)-8.*rsxy(i1,i2+2,i3-1,2,0)+8.*rsxy(i1,i2+2,i3+1,
     & 2,0)-rsxy(i1,i2+2,i3+2,2,0))/(12.*dr(2)))/(12.*dr(1))
                      ajtxtt = (-rsxy(i1,i2,i3-2,2,0)+16.*rsxy(i1,i2,
     & i3-1,2,0)-30.*rsxy(i1,i2,i3,2,0)+16.*rsxy(i1,i2,i3+1,2,0)-rsxy(
     & i1,i2,i3+2,2,0))/(12.*dr(2)**2)
                      ajry = rsxy(i1,i2,i3,0,1)
                      ajryr = (rsxy(i1-2,i2,i3,0,1)-8.*rsxy(i1-1,i2,i3,
     & 0,1)+8.*rsxy(i1+1,i2,i3,0,1)-rsxy(i1+2,i2,i3,0,1))/(12.*dr(0))
                      ajrys = (rsxy(i1,i2-2,i3,0,1)-8.*rsxy(i1,i2-1,i3,
     & 0,1)+8.*rsxy(i1,i2+1,i3,0,1)-rsxy(i1,i2+2,i3,0,1))/(12.*dr(1))
                      ajryt = (rsxy(i1,i2,i3-2,0,1)-8.*rsxy(i1,i2,i3-1,
     & 0,1)+8.*rsxy(i1,i2,i3+1,0,1)-rsxy(i1,i2,i3+2,0,1))/(12.*dr(2))
                      ajryrr = (-rsxy(i1-2,i2,i3,0,1)+16.*rsxy(i1-1,i2,
     & i3,0,1)-30.*rsxy(i1,i2,i3,0,1)+16.*rsxy(i1+1,i2,i3,0,1)-rsxy(
     & i1+2,i2,i3,0,1))/(12.*dr(0)**2)
                      ajryrs = ((rsxy(i1-2,i2-2,i3,0,1)-8.*rsxy(i1-2,
     & i2-1,i3,0,1)+8.*rsxy(i1-2,i2+1,i3,0,1)-rsxy(i1-2,i2+2,i3,0,1))
     & /(12.*dr(1))-8.*(rsxy(i1-1,i2-2,i3,0,1)-8.*rsxy(i1-1,i2-1,i3,0,
     & 1)+8.*rsxy(i1-1,i2+1,i3,0,1)-rsxy(i1-1,i2+2,i3,0,1))/(12.*dr(1)
     & )+8.*(rsxy(i1+1,i2-2,i3,0,1)-8.*rsxy(i1+1,i2-1,i3,0,1)+8.*rsxy(
     & i1+1,i2+1,i3,0,1)-rsxy(i1+1,i2+2,i3,0,1))/(12.*dr(1))-(rsxy(i1+
     & 2,i2-2,i3,0,1)-8.*rsxy(i1+2,i2-1,i3,0,1)+8.*rsxy(i1+2,i2+1,i3,
     & 0,1)-rsxy(i1+2,i2+2,i3,0,1))/(12.*dr(1)))/(12.*dr(0))
                      ajryss = (-rsxy(i1,i2-2,i3,0,1)+16.*rsxy(i1,i2-1,
     & i3,0,1)-30.*rsxy(i1,i2,i3,0,1)+16.*rsxy(i1,i2+1,i3,0,1)-rsxy(
     & i1,i2+2,i3,0,1))/(12.*dr(1)**2)
                      ajryrt = ((rsxy(i1-2,i2,i3-2,0,1)-8.*rsxy(i1-2,
     & i2,i3-1,0,1)+8.*rsxy(i1-2,i2,i3+1,0,1)-rsxy(i1-2,i2,i3+2,0,1))
     & /(12.*dr(2))-8.*(rsxy(i1-1,i2,i3-2,0,1)-8.*rsxy(i1-1,i2,i3-1,0,
     & 1)+8.*rsxy(i1-1,i2,i3+1,0,1)-rsxy(i1-1,i2,i3+2,0,1))/(12.*dr(2)
     & )+8.*(rsxy(i1+1,i2,i3-2,0,1)-8.*rsxy(i1+1,i2,i3-1,0,1)+8.*rsxy(
     & i1+1,i2,i3+1,0,1)-rsxy(i1+1,i2,i3+2,0,1))/(12.*dr(2))-(rsxy(i1+
     & 2,i2,i3-2,0,1)-8.*rsxy(i1+2,i2,i3-1,0,1)+8.*rsxy(i1+2,i2,i3+1,
     & 0,1)-rsxy(i1+2,i2,i3+2,0,1))/(12.*dr(2)))/(12.*dr(0))
                      ajryst = ((rsxy(i1,i2-2,i3-2,0,1)-8.*rsxy(i1,i2-
     & 2,i3-1,0,1)+8.*rsxy(i1,i2-2,i3+1,0,1)-rsxy(i1,i2-2,i3+2,0,1))/(
     & 12.*dr(2))-8.*(rsxy(i1,i2-1,i3-2,0,1)-8.*rsxy(i1,i2-1,i3-1,0,1)
     & +8.*rsxy(i1,i2-1,i3+1,0,1)-rsxy(i1,i2-1,i3+2,0,1))/(12.*dr(2))+
     & 8.*(rsxy(i1,i2+1,i3-2,0,1)-8.*rsxy(i1,i2+1,i3-1,0,1)+8.*rsxy(
     & i1,i2+1,i3+1,0,1)-rsxy(i1,i2+1,i3+2,0,1))/(12.*dr(2))-(rsxy(i1,
     & i2+2,i3-2,0,1)-8.*rsxy(i1,i2+2,i3-1,0,1)+8.*rsxy(i1,i2+2,i3+1,
     & 0,1)-rsxy(i1,i2+2,i3+2,0,1))/(12.*dr(2)))/(12.*dr(1))
                      ajrytt = (-rsxy(i1,i2,i3-2,0,1)+16.*rsxy(i1,i2,
     & i3-1,0,1)-30.*rsxy(i1,i2,i3,0,1)+16.*rsxy(i1,i2,i3+1,0,1)-rsxy(
     & i1,i2,i3+2,0,1))/(12.*dr(2)**2)
                      ajsy = rsxy(i1,i2,i3,1,1)
                      ajsyr = (rsxy(i1-2,i2,i3,1,1)-8.*rsxy(i1-1,i2,i3,
     & 1,1)+8.*rsxy(i1+1,i2,i3,1,1)-rsxy(i1+2,i2,i3,1,1))/(12.*dr(0))
                      ajsys = (rsxy(i1,i2-2,i3,1,1)-8.*rsxy(i1,i2-1,i3,
     & 1,1)+8.*rsxy(i1,i2+1,i3,1,1)-rsxy(i1,i2+2,i3,1,1))/(12.*dr(1))
                      ajsyt = (rsxy(i1,i2,i3-2,1,1)-8.*rsxy(i1,i2,i3-1,
     & 1,1)+8.*rsxy(i1,i2,i3+1,1,1)-rsxy(i1,i2,i3+2,1,1))/(12.*dr(2))
                      ajsyrr = (-rsxy(i1-2,i2,i3,1,1)+16.*rsxy(i1-1,i2,
     & i3,1,1)-30.*rsxy(i1,i2,i3,1,1)+16.*rsxy(i1+1,i2,i3,1,1)-rsxy(
     & i1+2,i2,i3,1,1))/(12.*dr(0)**2)
                      ajsyrs = ((rsxy(i1-2,i2-2,i3,1,1)-8.*rsxy(i1-2,
     & i2-1,i3,1,1)+8.*rsxy(i1-2,i2+1,i3,1,1)-rsxy(i1-2,i2+2,i3,1,1))
     & /(12.*dr(1))-8.*(rsxy(i1-1,i2-2,i3,1,1)-8.*rsxy(i1-1,i2-1,i3,1,
     & 1)+8.*rsxy(i1-1,i2+1,i3,1,1)-rsxy(i1-1,i2+2,i3,1,1))/(12.*dr(1)
     & )+8.*(rsxy(i1+1,i2-2,i3,1,1)-8.*rsxy(i1+1,i2-1,i3,1,1)+8.*rsxy(
     & i1+1,i2+1,i3,1,1)-rsxy(i1+1,i2+2,i3,1,1))/(12.*dr(1))-(rsxy(i1+
     & 2,i2-2,i3,1,1)-8.*rsxy(i1+2,i2-1,i3,1,1)+8.*rsxy(i1+2,i2+1,i3,
     & 1,1)-rsxy(i1+2,i2+2,i3,1,1))/(12.*dr(1)))/(12.*dr(0))
                      ajsyss = (-rsxy(i1,i2-2,i3,1,1)+16.*rsxy(i1,i2-1,
     & i3,1,1)-30.*rsxy(i1,i2,i3,1,1)+16.*rsxy(i1,i2+1,i3,1,1)-rsxy(
     & i1,i2+2,i3,1,1))/(12.*dr(1)**2)
                      ajsyrt = ((rsxy(i1-2,i2,i3-2,1,1)-8.*rsxy(i1-2,
     & i2,i3-1,1,1)+8.*rsxy(i1-2,i2,i3+1,1,1)-rsxy(i1-2,i2,i3+2,1,1))
     & /(12.*dr(2))-8.*(rsxy(i1-1,i2,i3-2,1,1)-8.*rsxy(i1-1,i2,i3-1,1,
     & 1)+8.*rsxy(i1-1,i2,i3+1,1,1)-rsxy(i1-1,i2,i3+2,1,1))/(12.*dr(2)
     & )+8.*(rsxy(i1+1,i2,i3-2,1,1)-8.*rsxy(i1+1,i2,i3-1,1,1)+8.*rsxy(
     & i1+1,i2,i3+1,1,1)-rsxy(i1+1,i2,i3+2,1,1))/(12.*dr(2))-(rsxy(i1+
     & 2,i2,i3-2,1,1)-8.*rsxy(i1+2,i2,i3-1,1,1)+8.*rsxy(i1+2,i2,i3+1,
     & 1,1)-rsxy(i1+2,i2,i3+2,1,1))/(12.*dr(2)))/(12.*dr(0))
                      ajsyst = ((rsxy(i1,i2-2,i3-2,1,1)-8.*rsxy(i1,i2-
     & 2,i3-1,1,1)+8.*rsxy(i1,i2-2,i3+1,1,1)-rsxy(i1,i2-2,i3+2,1,1))/(
     & 12.*dr(2))-8.*(rsxy(i1,i2-1,i3-2,1,1)-8.*rsxy(i1,i2-1,i3-1,1,1)
     & +8.*rsxy(i1,i2-1,i3+1,1,1)-rsxy(i1,i2-1,i3+2,1,1))/(12.*dr(2))+
     & 8.*(rsxy(i1,i2+1,i3-2,1,1)-8.*rsxy(i1,i2+1,i3-1,1,1)+8.*rsxy(
     & i1,i2+1,i3+1,1,1)-rsxy(i1,i2+1,i3+2,1,1))/(12.*dr(2))-(rsxy(i1,
     & i2+2,i3-2,1,1)-8.*rsxy(i1,i2+2,i3-1,1,1)+8.*rsxy(i1,i2+2,i3+1,
     & 1,1)-rsxy(i1,i2+2,i3+2,1,1))/(12.*dr(2)))/(12.*dr(1))
                      ajsytt = (-rsxy(i1,i2,i3-2,1,1)+16.*rsxy(i1,i2,
     & i3-1,1,1)-30.*rsxy(i1,i2,i3,1,1)+16.*rsxy(i1,i2,i3+1,1,1)-rsxy(
     & i1,i2,i3+2,1,1))/(12.*dr(2)**2)
                      ajty = rsxy(i1,i2,i3,2,1)
                      ajtyr = (rsxy(i1-2,i2,i3,2,1)-8.*rsxy(i1-1,i2,i3,
     & 2,1)+8.*rsxy(i1+1,i2,i3,2,1)-rsxy(i1+2,i2,i3,2,1))/(12.*dr(0))
                      ajtys = (rsxy(i1,i2-2,i3,2,1)-8.*rsxy(i1,i2-1,i3,
     & 2,1)+8.*rsxy(i1,i2+1,i3,2,1)-rsxy(i1,i2+2,i3,2,1))/(12.*dr(1))
                      ajtyt = (rsxy(i1,i2,i3-2,2,1)-8.*rsxy(i1,i2,i3-1,
     & 2,1)+8.*rsxy(i1,i2,i3+1,2,1)-rsxy(i1,i2,i3+2,2,1))/(12.*dr(2))
                      ajtyrr = (-rsxy(i1-2,i2,i3,2,1)+16.*rsxy(i1-1,i2,
     & i3,2,1)-30.*rsxy(i1,i2,i3,2,1)+16.*rsxy(i1+1,i2,i3,2,1)-rsxy(
     & i1+2,i2,i3,2,1))/(12.*dr(0)**2)
                      ajtyrs = ((rsxy(i1-2,i2-2,i3,2,1)-8.*rsxy(i1-2,
     & i2-1,i3,2,1)+8.*rsxy(i1-2,i2+1,i3,2,1)-rsxy(i1-2,i2+2,i3,2,1))
     & /(12.*dr(1))-8.*(rsxy(i1-1,i2-2,i3,2,1)-8.*rsxy(i1-1,i2-1,i3,2,
     & 1)+8.*rsxy(i1-1,i2+1,i3,2,1)-rsxy(i1-1,i2+2,i3,2,1))/(12.*dr(1)
     & )+8.*(rsxy(i1+1,i2-2,i3,2,1)-8.*rsxy(i1+1,i2-1,i3,2,1)+8.*rsxy(
     & i1+1,i2+1,i3,2,1)-rsxy(i1+1,i2+2,i3,2,1))/(12.*dr(1))-(rsxy(i1+
     & 2,i2-2,i3,2,1)-8.*rsxy(i1+2,i2-1,i3,2,1)+8.*rsxy(i1+2,i2+1,i3,
     & 2,1)-rsxy(i1+2,i2+2,i3,2,1))/(12.*dr(1)))/(12.*dr(0))
                      ajtyss = (-rsxy(i1,i2-2,i3,2,1)+16.*rsxy(i1,i2-1,
     & i3,2,1)-30.*rsxy(i1,i2,i3,2,1)+16.*rsxy(i1,i2+1,i3,2,1)-rsxy(
     & i1,i2+2,i3,2,1))/(12.*dr(1)**2)
                      ajtyrt = ((rsxy(i1-2,i2,i3-2,2,1)-8.*rsxy(i1-2,
     & i2,i3-1,2,1)+8.*rsxy(i1-2,i2,i3+1,2,1)-rsxy(i1-2,i2,i3+2,2,1))
     & /(12.*dr(2))-8.*(rsxy(i1-1,i2,i3-2,2,1)-8.*rsxy(i1-1,i2,i3-1,2,
     & 1)+8.*rsxy(i1-1,i2,i3+1,2,1)-rsxy(i1-1,i2,i3+2,2,1))/(12.*dr(2)
     & )+8.*(rsxy(i1+1,i2,i3-2,2,1)-8.*rsxy(i1+1,i2,i3-1,2,1)+8.*rsxy(
     & i1+1,i2,i3+1,2,1)-rsxy(i1+1,i2,i3+2,2,1))/(12.*dr(2))-(rsxy(i1+
     & 2,i2,i3-2,2,1)-8.*rsxy(i1+2,i2,i3-1,2,1)+8.*rsxy(i1+2,i2,i3+1,
     & 2,1)-rsxy(i1+2,i2,i3+2,2,1))/(12.*dr(2)))/(12.*dr(0))
                      ajtyst = ((rsxy(i1,i2-2,i3-2,2,1)-8.*rsxy(i1,i2-
     & 2,i3-1,2,1)+8.*rsxy(i1,i2-2,i3+1,2,1)-rsxy(i1,i2-2,i3+2,2,1))/(
     & 12.*dr(2))-8.*(rsxy(i1,i2-1,i3-2,2,1)-8.*rsxy(i1,i2-1,i3-1,2,1)
     & +8.*rsxy(i1,i2-1,i3+1,2,1)-rsxy(i1,i2-1,i3+2,2,1))/(12.*dr(2))+
     & 8.*(rsxy(i1,i2+1,i3-2,2,1)-8.*rsxy(i1,i2+1,i3-1,2,1)+8.*rsxy(
     & i1,i2+1,i3+1,2,1)-rsxy(i1,i2+1,i3+2,2,1))/(12.*dr(2))-(rsxy(i1,
     & i2+2,i3-2,2,1)-8.*rsxy(i1,i2+2,i3-1,2,1)+8.*rsxy(i1,i2+2,i3+1,
     & 2,1)-rsxy(i1,i2+2,i3+2,2,1))/(12.*dr(2)))/(12.*dr(1))
                      ajtytt = (-rsxy(i1,i2,i3-2,2,1)+16.*rsxy(i1,i2,
     & i3-1,2,1)-30.*rsxy(i1,i2,i3,2,1)+16.*rsxy(i1,i2,i3+1,2,1)-rsxy(
     & i1,i2,i3+2,2,1))/(12.*dr(2)**2)
                      ajrz = rsxy(i1,i2,i3,0,2)
                      ajrzr = (rsxy(i1-2,i2,i3,0,2)-8.*rsxy(i1-1,i2,i3,
     & 0,2)+8.*rsxy(i1+1,i2,i3,0,2)-rsxy(i1+2,i2,i3,0,2))/(12.*dr(0))
                      ajrzs = (rsxy(i1,i2-2,i3,0,2)-8.*rsxy(i1,i2-1,i3,
     & 0,2)+8.*rsxy(i1,i2+1,i3,0,2)-rsxy(i1,i2+2,i3,0,2))/(12.*dr(1))
                      ajrzt = (rsxy(i1,i2,i3-2,0,2)-8.*rsxy(i1,i2,i3-1,
     & 0,2)+8.*rsxy(i1,i2,i3+1,0,2)-rsxy(i1,i2,i3+2,0,2))/(12.*dr(2))
                      ajrzrr = (-rsxy(i1-2,i2,i3,0,2)+16.*rsxy(i1-1,i2,
     & i3,0,2)-30.*rsxy(i1,i2,i3,0,2)+16.*rsxy(i1+1,i2,i3,0,2)-rsxy(
     & i1+2,i2,i3,0,2))/(12.*dr(0)**2)
                      ajrzrs = ((rsxy(i1-2,i2-2,i3,0,2)-8.*rsxy(i1-2,
     & i2-1,i3,0,2)+8.*rsxy(i1-2,i2+1,i3,0,2)-rsxy(i1-2,i2+2,i3,0,2))
     & /(12.*dr(1))-8.*(rsxy(i1-1,i2-2,i3,0,2)-8.*rsxy(i1-1,i2-1,i3,0,
     & 2)+8.*rsxy(i1-1,i2+1,i3,0,2)-rsxy(i1-1,i2+2,i3,0,2))/(12.*dr(1)
     & )+8.*(rsxy(i1+1,i2-2,i3,0,2)-8.*rsxy(i1+1,i2-1,i3,0,2)+8.*rsxy(
     & i1+1,i2+1,i3,0,2)-rsxy(i1+1,i2+2,i3,0,2))/(12.*dr(1))-(rsxy(i1+
     & 2,i2-2,i3,0,2)-8.*rsxy(i1+2,i2-1,i3,0,2)+8.*rsxy(i1+2,i2+1,i3,
     & 0,2)-rsxy(i1+2,i2+2,i3,0,2))/(12.*dr(1)))/(12.*dr(0))
                      ajrzss = (-rsxy(i1,i2-2,i3,0,2)+16.*rsxy(i1,i2-1,
     & i3,0,2)-30.*rsxy(i1,i2,i3,0,2)+16.*rsxy(i1,i2+1,i3,0,2)-rsxy(
     & i1,i2+2,i3,0,2))/(12.*dr(1)**2)
                      ajrzrt = ((rsxy(i1-2,i2,i3-2,0,2)-8.*rsxy(i1-2,
     & i2,i3-1,0,2)+8.*rsxy(i1-2,i2,i3+1,0,2)-rsxy(i1-2,i2,i3+2,0,2))
     & /(12.*dr(2))-8.*(rsxy(i1-1,i2,i3-2,0,2)-8.*rsxy(i1-1,i2,i3-1,0,
     & 2)+8.*rsxy(i1-1,i2,i3+1,0,2)-rsxy(i1-1,i2,i3+2,0,2))/(12.*dr(2)
     & )+8.*(rsxy(i1+1,i2,i3-2,0,2)-8.*rsxy(i1+1,i2,i3-1,0,2)+8.*rsxy(
     & i1+1,i2,i3+1,0,2)-rsxy(i1+1,i2,i3+2,0,2))/(12.*dr(2))-(rsxy(i1+
     & 2,i2,i3-2,0,2)-8.*rsxy(i1+2,i2,i3-1,0,2)+8.*rsxy(i1+2,i2,i3+1,
     & 0,2)-rsxy(i1+2,i2,i3+2,0,2))/(12.*dr(2)))/(12.*dr(0))
                      ajrzst = ((rsxy(i1,i2-2,i3-2,0,2)-8.*rsxy(i1,i2-
     & 2,i3-1,0,2)+8.*rsxy(i1,i2-2,i3+1,0,2)-rsxy(i1,i2-2,i3+2,0,2))/(
     & 12.*dr(2))-8.*(rsxy(i1,i2-1,i3-2,0,2)-8.*rsxy(i1,i2-1,i3-1,0,2)
     & +8.*rsxy(i1,i2-1,i3+1,0,2)-rsxy(i1,i2-1,i3+2,0,2))/(12.*dr(2))+
     & 8.*(rsxy(i1,i2+1,i3-2,0,2)-8.*rsxy(i1,i2+1,i3-1,0,2)+8.*rsxy(
     & i1,i2+1,i3+1,0,2)-rsxy(i1,i2+1,i3+2,0,2))/(12.*dr(2))-(rsxy(i1,
     & i2+2,i3-2,0,2)-8.*rsxy(i1,i2+2,i3-1,0,2)+8.*rsxy(i1,i2+2,i3+1,
     & 0,2)-rsxy(i1,i2+2,i3+2,0,2))/(12.*dr(2)))/(12.*dr(1))
                      ajrztt = (-rsxy(i1,i2,i3-2,0,2)+16.*rsxy(i1,i2,
     & i3-1,0,2)-30.*rsxy(i1,i2,i3,0,2)+16.*rsxy(i1,i2,i3+1,0,2)-rsxy(
     & i1,i2,i3+2,0,2))/(12.*dr(2)**2)
                      ajsz = rsxy(i1,i2,i3,1,2)
                      ajszr = (rsxy(i1-2,i2,i3,1,2)-8.*rsxy(i1-1,i2,i3,
     & 1,2)+8.*rsxy(i1+1,i2,i3,1,2)-rsxy(i1+2,i2,i3,1,2))/(12.*dr(0))
                      ajszs = (rsxy(i1,i2-2,i3,1,2)-8.*rsxy(i1,i2-1,i3,
     & 1,2)+8.*rsxy(i1,i2+1,i3,1,2)-rsxy(i1,i2+2,i3,1,2))/(12.*dr(1))
                      ajszt = (rsxy(i1,i2,i3-2,1,2)-8.*rsxy(i1,i2,i3-1,
     & 1,2)+8.*rsxy(i1,i2,i3+1,1,2)-rsxy(i1,i2,i3+2,1,2))/(12.*dr(2))
                      ajszrr = (-rsxy(i1-2,i2,i3,1,2)+16.*rsxy(i1-1,i2,
     & i3,1,2)-30.*rsxy(i1,i2,i3,1,2)+16.*rsxy(i1+1,i2,i3,1,2)-rsxy(
     & i1+2,i2,i3,1,2))/(12.*dr(0)**2)
                      ajszrs = ((rsxy(i1-2,i2-2,i3,1,2)-8.*rsxy(i1-2,
     & i2-1,i3,1,2)+8.*rsxy(i1-2,i2+1,i3,1,2)-rsxy(i1-2,i2+2,i3,1,2))
     & /(12.*dr(1))-8.*(rsxy(i1-1,i2-2,i3,1,2)-8.*rsxy(i1-1,i2-1,i3,1,
     & 2)+8.*rsxy(i1-1,i2+1,i3,1,2)-rsxy(i1-1,i2+2,i3,1,2))/(12.*dr(1)
     & )+8.*(rsxy(i1+1,i2-2,i3,1,2)-8.*rsxy(i1+1,i2-1,i3,1,2)+8.*rsxy(
     & i1+1,i2+1,i3,1,2)-rsxy(i1+1,i2+2,i3,1,2))/(12.*dr(1))-(rsxy(i1+
     & 2,i2-2,i3,1,2)-8.*rsxy(i1+2,i2-1,i3,1,2)+8.*rsxy(i1+2,i2+1,i3,
     & 1,2)-rsxy(i1+2,i2+2,i3,1,2))/(12.*dr(1)))/(12.*dr(0))
                      ajszss = (-rsxy(i1,i2-2,i3,1,2)+16.*rsxy(i1,i2-1,
     & i3,1,2)-30.*rsxy(i1,i2,i3,1,2)+16.*rsxy(i1,i2+1,i3,1,2)-rsxy(
     & i1,i2+2,i3,1,2))/(12.*dr(1)**2)
                      ajszrt = ((rsxy(i1-2,i2,i3-2,1,2)-8.*rsxy(i1-2,
     & i2,i3-1,1,2)+8.*rsxy(i1-2,i2,i3+1,1,2)-rsxy(i1-2,i2,i3+2,1,2))
     & /(12.*dr(2))-8.*(rsxy(i1-1,i2,i3-2,1,2)-8.*rsxy(i1-1,i2,i3-1,1,
     & 2)+8.*rsxy(i1-1,i2,i3+1,1,2)-rsxy(i1-1,i2,i3+2,1,2))/(12.*dr(2)
     & )+8.*(rsxy(i1+1,i2,i3-2,1,2)-8.*rsxy(i1+1,i2,i3-1,1,2)+8.*rsxy(
     & i1+1,i2,i3+1,1,2)-rsxy(i1+1,i2,i3+2,1,2))/(12.*dr(2))-(rsxy(i1+
     & 2,i2,i3-2,1,2)-8.*rsxy(i1+2,i2,i3-1,1,2)+8.*rsxy(i1+2,i2,i3+1,
     & 1,2)-rsxy(i1+2,i2,i3+2,1,2))/(12.*dr(2)))/(12.*dr(0))
                      ajszst = ((rsxy(i1,i2-2,i3-2,1,2)-8.*rsxy(i1,i2-
     & 2,i3-1,1,2)+8.*rsxy(i1,i2-2,i3+1,1,2)-rsxy(i1,i2-2,i3+2,1,2))/(
     & 12.*dr(2))-8.*(rsxy(i1,i2-1,i3-2,1,2)-8.*rsxy(i1,i2-1,i3-1,1,2)
     & +8.*rsxy(i1,i2-1,i3+1,1,2)-rsxy(i1,i2-1,i3+2,1,2))/(12.*dr(2))+
     & 8.*(rsxy(i1,i2+1,i3-2,1,2)-8.*rsxy(i1,i2+1,i3-1,1,2)+8.*rsxy(
     & i1,i2+1,i3+1,1,2)-rsxy(i1,i2+1,i3+2,1,2))/(12.*dr(2))-(rsxy(i1,
     & i2+2,i3-2,1,2)-8.*rsxy(i1,i2+2,i3-1,1,2)+8.*rsxy(i1,i2+2,i3+1,
     & 1,2)-rsxy(i1,i2+2,i3+2,1,2))/(12.*dr(2)))/(12.*dr(1))
                      ajsztt = (-rsxy(i1,i2,i3-2,1,2)+16.*rsxy(i1,i2,
     & i3-1,1,2)-30.*rsxy(i1,i2,i3,1,2)+16.*rsxy(i1,i2,i3+1,1,2)-rsxy(
     & i1,i2,i3+2,1,2))/(12.*dr(2)**2)
                      ajtz = rsxy(i1,i2,i3,2,2)
                      ajtzr = (rsxy(i1-2,i2,i3,2,2)-8.*rsxy(i1-1,i2,i3,
     & 2,2)+8.*rsxy(i1+1,i2,i3,2,2)-rsxy(i1+2,i2,i3,2,2))/(12.*dr(0))
                      ajtzs = (rsxy(i1,i2-2,i3,2,2)-8.*rsxy(i1,i2-1,i3,
     & 2,2)+8.*rsxy(i1,i2+1,i3,2,2)-rsxy(i1,i2+2,i3,2,2))/(12.*dr(1))
                      ajtzt = (rsxy(i1,i2,i3-2,2,2)-8.*rsxy(i1,i2,i3-1,
     & 2,2)+8.*rsxy(i1,i2,i3+1,2,2)-rsxy(i1,i2,i3+2,2,2))/(12.*dr(2))
                      ajtzrr = (-rsxy(i1-2,i2,i3,2,2)+16.*rsxy(i1-1,i2,
     & i3,2,2)-30.*rsxy(i1,i2,i3,2,2)+16.*rsxy(i1+1,i2,i3,2,2)-rsxy(
     & i1+2,i2,i3,2,2))/(12.*dr(0)**2)
                      ajtzrs = ((rsxy(i1-2,i2-2,i3,2,2)-8.*rsxy(i1-2,
     & i2-1,i3,2,2)+8.*rsxy(i1-2,i2+1,i3,2,2)-rsxy(i1-2,i2+2,i3,2,2))
     & /(12.*dr(1))-8.*(rsxy(i1-1,i2-2,i3,2,2)-8.*rsxy(i1-1,i2-1,i3,2,
     & 2)+8.*rsxy(i1-1,i2+1,i3,2,2)-rsxy(i1-1,i2+2,i3,2,2))/(12.*dr(1)
     & )+8.*(rsxy(i1+1,i2-2,i3,2,2)-8.*rsxy(i1+1,i2-1,i3,2,2)+8.*rsxy(
     & i1+1,i2+1,i3,2,2)-rsxy(i1+1,i2+2,i3,2,2))/(12.*dr(1))-(rsxy(i1+
     & 2,i2-2,i3,2,2)-8.*rsxy(i1+2,i2-1,i3,2,2)+8.*rsxy(i1+2,i2+1,i3,
     & 2,2)-rsxy(i1+2,i2+2,i3,2,2))/(12.*dr(1)))/(12.*dr(0))
                      ajtzss = (-rsxy(i1,i2-2,i3,2,2)+16.*rsxy(i1,i2-1,
     & i3,2,2)-30.*rsxy(i1,i2,i3,2,2)+16.*rsxy(i1,i2+1,i3,2,2)-rsxy(
     & i1,i2+2,i3,2,2))/(12.*dr(1)**2)
                      ajtzrt = ((rsxy(i1-2,i2,i3-2,2,2)-8.*rsxy(i1-2,
     & i2,i3-1,2,2)+8.*rsxy(i1-2,i2,i3+1,2,2)-rsxy(i1-2,i2,i3+2,2,2))
     & /(12.*dr(2))-8.*(rsxy(i1-1,i2,i3-2,2,2)-8.*rsxy(i1-1,i2,i3-1,2,
     & 2)+8.*rsxy(i1-1,i2,i3+1,2,2)-rsxy(i1-1,i2,i3+2,2,2))/(12.*dr(2)
     & )+8.*(rsxy(i1+1,i2,i3-2,2,2)-8.*rsxy(i1+1,i2,i3-1,2,2)+8.*rsxy(
     & i1+1,i2,i3+1,2,2)-rsxy(i1+1,i2,i3+2,2,2))/(12.*dr(2))-(rsxy(i1+
     & 2,i2,i3-2,2,2)-8.*rsxy(i1+2,i2,i3-1,2,2)+8.*rsxy(i1+2,i2,i3+1,
     & 2,2)-rsxy(i1+2,i2,i3+2,2,2))/(12.*dr(2)))/(12.*dr(0))
                      ajtzst = ((rsxy(i1,i2-2,i3-2,2,2)-8.*rsxy(i1,i2-
     & 2,i3-1,2,2)+8.*rsxy(i1,i2-2,i3+1,2,2)-rsxy(i1,i2-2,i3+2,2,2))/(
     & 12.*dr(2))-8.*(rsxy(i1,i2-1,i3-2,2,2)-8.*rsxy(i1,i2-1,i3-1,2,2)
     & +8.*rsxy(i1,i2-1,i3+1,2,2)-rsxy(i1,i2-1,i3+2,2,2))/(12.*dr(2))+
     & 8.*(rsxy(i1,i2+1,i3-2,2,2)-8.*rsxy(i1,i2+1,i3-1,2,2)+8.*rsxy(
     & i1,i2+1,i3+1,2,2)-rsxy(i1,i2+1,i3+2,2,2))/(12.*dr(2))-(rsxy(i1,
     & i2+2,i3-2,2,2)-8.*rsxy(i1,i2+2,i3-1,2,2)+8.*rsxy(i1,i2+2,i3+1,
     & 2,2)-rsxy(i1,i2+2,i3+2,2,2))/(12.*dr(2)))/(12.*dr(1))
                      ajtztt = (-rsxy(i1,i2,i3-2,2,2)+16.*rsxy(i1,i2,
     & i3-1,2,2)-30.*rsxy(i1,i2,i3,2,2)+16.*rsxy(i1,i2,i3+1,2,2)-rsxy(
     & i1,i2,i3+2,2,2))/(12.*dr(2)**2)
                      ajrxx = ajrx*ajrxr+ajsx*ajrxs+ajtx*ajrxt
                      ajrxy = ajry*ajrxr+ajsy*ajrxs+ajty*ajrxt
                      ajrxz = ajrz*ajrxr+ajsz*ajrxs+ajtz*ajrxt
                      ajsxx = ajrx*ajsxr+ajsx*ajsxs+ajtx*ajsxt
                      ajsxy = ajry*ajsxr+ajsy*ajsxs+ajty*ajsxt
                      ajsxz = ajrz*ajsxr+ajsz*ajsxs+ajtz*ajsxt
                      ajtxx = ajrx*ajtxr+ajsx*ajtxs+ajtx*ajtxt
                      ajtxy = ajry*ajtxr+ajsy*ajtxs+ajty*ajtxt
                      ajtxz = ajrz*ajtxr+ajsz*ajtxs+ajtz*ajtxt
                      ajryx = ajrx*ajryr+ajsx*ajrys+ajtx*ajryt
                      ajryy = ajry*ajryr+ajsy*ajrys+ajty*ajryt
                      ajryz = ajrz*ajryr+ajsz*ajrys+ajtz*ajryt
                      ajsyx = ajrx*ajsyr+ajsx*ajsys+ajtx*ajsyt
                      ajsyy = ajry*ajsyr+ajsy*ajsys+ajty*ajsyt
                      ajsyz = ajrz*ajsyr+ajsz*ajsys+ajtz*ajsyt
                      ajtyx = ajrx*ajtyr+ajsx*ajtys+ajtx*ajtyt
                      ajtyy = ajry*ajtyr+ajsy*ajtys+ajty*ajtyt
                      ajtyz = ajrz*ajtyr+ajsz*ajtys+ajtz*ajtyt
                      ajrzx = ajrx*ajrzr+ajsx*ajrzs+ajtx*ajrzt
                      ajrzy = ajry*ajrzr+ajsy*ajrzs+ajty*ajrzt
                      ajrzz = ajrz*ajrzr+ajsz*ajrzs+ajtz*ajrzt
                      ajszx = ajrx*ajszr+ajsx*ajszs+ajtx*ajszt
                      ajszy = ajry*ajszr+ajsy*ajszs+ajty*ajszt
                      ajszz = ajrz*ajszr+ajsz*ajszs+ajtz*ajszt
                      ajtzx = ajrx*ajtzr+ajsx*ajtzs+ajtx*ajtzt
                      ajtzy = ajry*ajtzr+ajsy*ajtzs+ajty*ajtzt
                      ajtzz = ajrz*ajtzr+ajsz*ajtzs+ajtz*ajtzt
                      t1 = ajrx**2
                      t6 = ajsx**2
                      t14 = ajtx**2
                      ajrxxx = t1*ajrxrr+2*ajrx*ajsx*ajrxrs+t6*ajrxss+
     & 2*ajrx*ajtx*ajrxrt+2*ajsx*ajtx*ajrxst+t14*ajrxtt+ajrxx*ajrxr+
     & ajsxx*ajrxs+ajtxx*ajrxt
                      ajrxxy = ajry*ajrx*ajrxrr+(ajsy*ajrx+ajry*ajsx)*
     & ajrxrs+ajsy*ajsx*ajrxss+(ajry*ajtx+ajty*ajrx)*ajrxrt+(ajty*
     & ajsx+ajsy*ajtx)*ajrxst+ajty*ajtx*ajrxtt+ajrxy*ajrxr+ajsxy*
     & ajrxs+ajtxy*ajrxt
                      t1 = ajry**2
                      t6 = ajsy**2
                      t14 = ajty**2
                      ajrxyy = t1*ajrxrr+2*ajry*ajsy*ajrxrs+t6*ajrxss+
     & 2*ajry*ajty*ajrxrt+2*ajsy*ajty*ajrxst+t14*ajrxtt+ajryy*ajrxr+
     & ajsyy*ajrxs+ajtyy*ajrxt
                      ajrxxz = ajrz*ajrx*ajrxrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajrxrs+ajsz*ajsx*ajrxss+(ajrz*ajtx+ajtz*ajrx)*ajrxrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajrxst+ajtz*ajtx*ajrxtt+ajrxz*ajrxr+ajsxz*
     & ajrxs+ajtxz*ajrxt
                      ajrxyz = ajrz*ajry*ajrxrr+(ajsz*ajry+ajrz*ajsy)*
     & ajrxrs+ajsz*ajsy*ajrxss+(ajrz*ajty+ajtz*ajry)*ajrxrt+(ajtz*
     & ajsy+ajsz*ajty)*ajrxst+ajtz*ajty*ajrxtt+ajryz*ajrxr+ajsyz*
     & ajrxs+ajtyz*ajrxt
                      t1 = ajrz**2
                      t6 = ajsz**2
                      t14 = ajtz**2
                      ajrxzz = t1*ajrxrr+2*ajrz*ajsz*ajrxrs+t6*ajrxss+
     & 2*ajrz*ajtz*ajrxrt+2*ajsz*ajtz*ajrxst+t14*ajrxtt+ajrzz*ajrxr+
     & ajszz*ajrxs+ajtzz*ajrxt
                      t1 = ajrx**2
                      t6 = ajsx**2
                      t14 = ajtx**2
                      ajsxxx = t1*ajsxrr+2*ajrx*ajsx*ajsxrs+t6*ajsxss+
     & 2*ajrx*ajtx*ajsxrt+2*ajsx*ajtx*ajsxst+t14*ajsxtt+ajrxx*ajsxr+
     & ajsxx*ajsxs+ajtxx*ajsxt
                      ajsxxy = ajry*ajrx*ajsxrr+(ajsy*ajrx+ajry*ajsx)*
     & ajsxrs+ajsy*ajsx*ajsxss+(ajry*ajtx+ajty*ajrx)*ajsxrt+(ajty*
     & ajsx+ajsy*ajtx)*ajsxst+ajty*ajtx*ajsxtt+ajrxy*ajsxr+ajsxy*
     & ajsxs+ajtxy*ajsxt
                      t1 = ajry**2
                      t6 = ajsy**2
                      t14 = ajty**2
                      ajsxyy = t1*ajsxrr+2*ajry*ajsy*ajsxrs+t6*ajsxss+
     & 2*ajry*ajty*ajsxrt+2*ajsy*ajty*ajsxst+t14*ajsxtt+ajryy*ajsxr+
     & ajsyy*ajsxs+ajtyy*ajsxt
                      ajsxxz = ajrz*ajrx*ajsxrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajsxrs+ajsz*ajsx*ajsxss+(ajrz*ajtx+ajtz*ajrx)*ajsxrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajsxst+ajtz*ajtx*ajsxtt+ajrxz*ajsxr+ajsxz*
     & ajsxs+ajtxz*ajsxt
                      ajsxyz = ajrz*ajry*ajsxrr+(ajsz*ajry+ajrz*ajsy)*
     & ajsxrs+ajsz*ajsy*ajsxss+(ajrz*ajty+ajtz*ajry)*ajsxrt+(ajtz*
     & ajsy+ajsz*ajty)*ajsxst+ajtz*ajty*ajsxtt+ajryz*ajsxr+ajsyz*
     & ajsxs+ajtyz*ajsxt
                      t1 = ajrz**2
                      t6 = ajsz**2
                      t14 = ajtz**2
                      ajsxzz = t1*ajsxrr+2*ajrz*ajsz*ajsxrs+t6*ajsxss+
     & 2*ajrz*ajtz*ajsxrt+2*ajsz*ajtz*ajsxst+t14*ajsxtt+ajrzz*ajsxr+
     & ajszz*ajsxs+ajtzz*ajsxt
                      t1 = ajrx**2
                      t6 = ajsx**2
                      t14 = ajtx**2
                      ajtxxx = t1*ajtxrr+2*ajrx*ajsx*ajtxrs+t6*ajtxss+
     & 2*ajrx*ajtx*ajtxrt+2*ajsx*ajtx*ajtxst+t14*ajtxtt+ajrxx*ajtxr+
     & ajsxx*ajtxs+ajtxx*ajtxt
                      ajtxxy = ajry*ajrx*ajtxrr+(ajsy*ajrx+ajry*ajsx)*
     & ajtxrs+ajsy*ajsx*ajtxss+(ajry*ajtx+ajty*ajrx)*ajtxrt+(ajty*
     & ajsx+ajsy*ajtx)*ajtxst+ajty*ajtx*ajtxtt+ajrxy*ajtxr+ajsxy*
     & ajtxs+ajtxy*ajtxt
                      t1 = ajry**2
                      t6 = ajsy**2
                      t14 = ajty**2
                      ajtxyy = t1*ajtxrr+2*ajry*ajsy*ajtxrs+t6*ajtxss+
     & 2*ajry*ajty*ajtxrt+2*ajsy*ajty*ajtxst+t14*ajtxtt+ajryy*ajtxr+
     & ajsyy*ajtxs+ajtyy*ajtxt
                      ajtxxz = ajrz*ajrx*ajtxrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajtxrs+ajsz*ajsx*ajtxss+(ajrz*ajtx+ajtz*ajrx)*ajtxrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajtxst+ajtz*ajtx*ajtxtt+ajrxz*ajtxr+ajsxz*
     & ajtxs+ajtxz*ajtxt
                      ajtxyz = ajrz*ajry*ajtxrr+(ajsz*ajry+ajrz*ajsy)*
     & ajtxrs+ajsz*ajsy*ajtxss+(ajrz*ajty+ajtz*ajry)*ajtxrt+(ajtz*
     & ajsy+ajsz*ajty)*ajtxst+ajtz*ajty*ajtxtt+ajryz*ajtxr+ajsyz*
     & ajtxs+ajtyz*ajtxt
                      t1 = ajrz**2
                      t6 = ajsz**2
                      t14 = ajtz**2
                      ajtxzz = t1*ajtxrr+2*ajrz*ajsz*ajtxrs+t6*ajtxss+
     & 2*ajrz*ajtz*ajtxrt+2*ajsz*ajtz*ajtxst+t14*ajtxtt+ajrzz*ajtxr+
     & ajszz*ajtxs+ajtzz*ajtxt
                      t1 = ajrx**2
                      t6 = ajsx**2
                      t14 = ajtx**2
                      ajryxx = t1*ajryrr+2*ajrx*ajsx*ajryrs+t6*ajryss+
     & 2*ajrx*ajtx*ajryrt+2*ajsx*ajtx*ajryst+t14*ajrytt+ajrxx*ajryr+
     & ajsxx*ajrys+ajtxx*ajryt
                      ajryxy = ajry*ajrx*ajryrr+(ajsy*ajrx+ajry*ajsx)*
     & ajryrs+ajsy*ajsx*ajryss+(ajry*ajtx+ajty*ajrx)*ajryrt+(ajty*
     & ajsx+ajsy*ajtx)*ajryst+ajty*ajtx*ajrytt+ajrxy*ajryr+ajsxy*
     & ajrys+ajtxy*ajryt
                      t1 = ajry**2
                      t6 = ajsy**2
                      t14 = ajty**2
                      ajryyy = t1*ajryrr+2*ajry*ajsy*ajryrs+t6*ajryss+
     & 2*ajry*ajty*ajryrt+2*ajsy*ajty*ajryst+t14*ajrytt+ajryy*ajryr+
     & ajsyy*ajrys+ajtyy*ajryt
                      ajryxz = ajrz*ajrx*ajryrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajryrs+ajsz*ajsx*ajryss+(ajrz*ajtx+ajtz*ajrx)*ajryrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajryst+ajtz*ajtx*ajrytt+ajrxz*ajryr+ajsxz*
     & ajrys+ajtxz*ajryt
                      ajryyz = ajrz*ajry*ajryrr+(ajsz*ajry+ajrz*ajsy)*
     & ajryrs+ajsz*ajsy*ajryss+(ajrz*ajty+ajtz*ajry)*ajryrt+(ajtz*
     & ajsy+ajsz*ajty)*ajryst+ajtz*ajty*ajrytt+ajryz*ajryr+ajsyz*
     & ajrys+ajtyz*ajryt
                      t1 = ajrz**2
                      t6 = ajsz**2
                      t14 = ajtz**2
                      ajryzz = t1*ajryrr+2*ajrz*ajsz*ajryrs+t6*ajryss+
     & 2*ajrz*ajtz*ajryrt+2*ajsz*ajtz*ajryst+t14*ajrytt+ajrzz*ajryr+
     & ajszz*ajrys+ajtzz*ajryt
                      t1 = ajrx**2
                      t6 = ajsx**2
                      t14 = ajtx**2
                      ajsyxx = t1*ajsyrr+2*ajrx*ajsx*ajsyrs+t6*ajsyss+
     & 2*ajrx*ajtx*ajsyrt+2*ajsx*ajtx*ajsyst+t14*ajsytt+ajrxx*ajsyr+
     & ajsxx*ajsys+ajtxx*ajsyt
                      ajsyxy = ajry*ajrx*ajsyrr+(ajsy*ajrx+ajry*ajsx)*
     & ajsyrs+ajsy*ajsx*ajsyss+(ajry*ajtx+ajty*ajrx)*ajsyrt+(ajty*
     & ajsx+ajsy*ajtx)*ajsyst+ajty*ajtx*ajsytt+ajrxy*ajsyr+ajsxy*
     & ajsys+ajtxy*ajsyt
                      t1 = ajry**2
                      t6 = ajsy**2
                      t14 = ajty**2
                      ajsyyy = t1*ajsyrr+2*ajry*ajsy*ajsyrs+t6*ajsyss+
     & 2*ajry*ajty*ajsyrt+2*ajsy*ajty*ajsyst+t14*ajsytt+ajryy*ajsyr+
     & ajsyy*ajsys+ajtyy*ajsyt
                      ajsyxz = ajrz*ajrx*ajsyrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajsyrs+ajsz*ajsx*ajsyss+(ajrz*ajtx+ajtz*ajrx)*ajsyrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajsyst+ajtz*ajtx*ajsytt+ajrxz*ajsyr+ajsxz*
     & ajsys+ajtxz*ajsyt
                      ajsyyz = ajrz*ajry*ajsyrr+(ajsz*ajry+ajrz*ajsy)*
     & ajsyrs+ajsz*ajsy*ajsyss+(ajrz*ajty+ajtz*ajry)*ajsyrt+(ajtz*
     & ajsy+ajsz*ajty)*ajsyst+ajtz*ajty*ajsytt+ajryz*ajsyr+ajsyz*
     & ajsys+ajtyz*ajsyt
                      t1 = ajrz**2
                      t6 = ajsz**2
                      t14 = ajtz**2
                      ajsyzz = t1*ajsyrr+2*ajrz*ajsz*ajsyrs+t6*ajsyss+
     & 2*ajrz*ajtz*ajsyrt+2*ajsz*ajtz*ajsyst+t14*ajsytt+ajrzz*ajsyr+
     & ajszz*ajsys+ajtzz*ajsyt
                      t1 = ajrx**2
                      t6 = ajsx**2
                      t14 = ajtx**2
                      ajtyxx = t1*ajtyrr+2*ajrx*ajsx*ajtyrs+t6*ajtyss+
     & 2*ajrx*ajtx*ajtyrt+2*ajsx*ajtx*ajtyst+t14*ajtytt+ajrxx*ajtyr+
     & ajsxx*ajtys+ajtxx*ajtyt
                      ajtyxy = ajry*ajrx*ajtyrr+(ajsy*ajrx+ajry*ajsx)*
     & ajtyrs+ajsy*ajsx*ajtyss+(ajry*ajtx+ajty*ajrx)*ajtyrt+(ajty*
     & ajsx+ajsy*ajtx)*ajtyst+ajty*ajtx*ajtytt+ajrxy*ajtyr+ajsxy*
     & ajtys+ajtxy*ajtyt
                      t1 = ajry**2
                      t6 = ajsy**2
                      t14 = ajty**2
                      ajtyyy = t1*ajtyrr+2*ajry*ajsy*ajtyrs+t6*ajtyss+
     & 2*ajry*ajty*ajtyrt+2*ajsy*ajty*ajtyst+t14*ajtytt+ajryy*ajtyr+
     & ajsyy*ajtys+ajtyy*ajtyt
                      ajtyxz = ajrz*ajrx*ajtyrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajtyrs+ajsz*ajsx*ajtyss+(ajrz*ajtx+ajtz*ajrx)*ajtyrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajtyst+ajtz*ajtx*ajtytt+ajrxz*ajtyr+ajsxz*
     & ajtys+ajtxz*ajtyt
                      ajtyyz = ajrz*ajry*ajtyrr+(ajsz*ajry+ajrz*ajsy)*
     & ajtyrs+ajsz*ajsy*ajtyss+(ajrz*ajty+ajtz*ajry)*ajtyrt+(ajtz*
     & ajsy+ajsz*ajty)*ajtyst+ajtz*ajty*ajtytt+ajryz*ajtyr+ajsyz*
     & ajtys+ajtyz*ajtyt
                      t1 = ajrz**2
                      t6 = ajsz**2
                      t14 = ajtz**2
                      ajtyzz = t1*ajtyrr+2*ajrz*ajsz*ajtyrs+t6*ajtyss+
     & 2*ajrz*ajtz*ajtyrt+2*ajsz*ajtz*ajtyst+t14*ajtytt+ajrzz*ajtyr+
     & ajszz*ajtys+ajtzz*ajtyt
                      t1 = ajrx**2
                      t6 = ajsx**2
                      t14 = ajtx**2
                      ajrzxx = t1*ajrzrr+2*ajrx*ajsx*ajrzrs+t6*ajrzss+
     & 2*ajrx*ajtx*ajrzrt+2*ajsx*ajtx*ajrzst+t14*ajrztt+ajrxx*ajrzr+
     & ajsxx*ajrzs+ajtxx*ajrzt
                      ajrzxy = ajry*ajrx*ajrzrr+(ajsy*ajrx+ajry*ajsx)*
     & ajrzrs+ajsy*ajsx*ajrzss+(ajry*ajtx+ajty*ajrx)*ajrzrt+(ajty*
     & ajsx+ajsy*ajtx)*ajrzst+ajty*ajtx*ajrztt+ajrxy*ajrzr+ajsxy*
     & ajrzs+ajtxy*ajrzt
                      t1 = ajry**2
                      t6 = ajsy**2
                      t14 = ajty**2
                      ajrzyy = t1*ajrzrr+2*ajry*ajsy*ajrzrs+t6*ajrzss+
     & 2*ajry*ajty*ajrzrt+2*ajsy*ajty*ajrzst+t14*ajrztt+ajryy*ajrzr+
     & ajsyy*ajrzs+ajtyy*ajrzt
                      ajrzxz = ajrz*ajrx*ajrzrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajrzrs+ajsz*ajsx*ajrzss+(ajrz*ajtx+ajtz*ajrx)*ajrzrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajrzst+ajtz*ajtx*ajrztt+ajrxz*ajrzr+ajsxz*
     & ajrzs+ajtxz*ajrzt
                      ajrzyz = ajrz*ajry*ajrzrr+(ajsz*ajry+ajrz*ajsy)*
     & ajrzrs+ajsz*ajsy*ajrzss+(ajrz*ajty+ajtz*ajry)*ajrzrt+(ajtz*
     & ajsy+ajsz*ajty)*ajrzst+ajtz*ajty*ajrztt+ajryz*ajrzr+ajsyz*
     & ajrzs+ajtyz*ajrzt
                      t1 = ajrz**2
                      t6 = ajsz**2
                      t14 = ajtz**2
                      ajrzzz = t1*ajrzrr+2*ajrz*ajsz*ajrzrs+t6*ajrzss+
     & 2*ajrz*ajtz*ajrzrt+2*ajsz*ajtz*ajrzst+t14*ajrztt+ajrzz*ajrzr+
     & ajszz*ajrzs+ajtzz*ajrzt
                      t1 = ajrx**2
                      t6 = ajsx**2
                      t14 = ajtx**2
                      ajszxx = t1*ajszrr+2*ajrx*ajsx*ajszrs+t6*ajszss+
     & 2*ajrx*ajtx*ajszrt+2*ajsx*ajtx*ajszst+t14*ajsztt+ajrxx*ajszr+
     & ajsxx*ajszs+ajtxx*ajszt
                      ajszxy = ajry*ajrx*ajszrr+(ajsy*ajrx+ajry*ajsx)*
     & ajszrs+ajsy*ajsx*ajszss+(ajry*ajtx+ajty*ajrx)*ajszrt+(ajty*
     & ajsx+ajsy*ajtx)*ajszst+ajty*ajtx*ajsztt+ajrxy*ajszr+ajsxy*
     & ajszs+ajtxy*ajszt
                      t1 = ajry**2
                      t6 = ajsy**2
                      t14 = ajty**2
                      ajszyy = t1*ajszrr+2*ajry*ajsy*ajszrs+t6*ajszss+
     & 2*ajry*ajty*ajszrt+2*ajsy*ajty*ajszst+t14*ajsztt+ajryy*ajszr+
     & ajsyy*ajszs+ajtyy*ajszt
                      ajszxz = ajrz*ajrx*ajszrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajszrs+ajsz*ajsx*ajszss+(ajrz*ajtx+ajtz*ajrx)*ajszrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajszst+ajtz*ajtx*ajsztt+ajrxz*ajszr+ajsxz*
     & ajszs+ajtxz*ajszt
                      ajszyz = ajrz*ajry*ajszrr+(ajsz*ajry+ajrz*ajsy)*
     & ajszrs+ajsz*ajsy*ajszss+(ajrz*ajty+ajtz*ajry)*ajszrt+(ajtz*
     & ajsy+ajsz*ajty)*ajszst+ajtz*ajty*ajsztt+ajryz*ajszr+ajsyz*
     & ajszs+ajtyz*ajszt
                      t1 = ajrz**2
                      t6 = ajsz**2
                      t14 = ajtz**2
                      ajszzz = t1*ajszrr+2*ajrz*ajsz*ajszrs+t6*ajszss+
     & 2*ajrz*ajtz*ajszrt+2*ajsz*ajtz*ajszst+t14*ajsztt+ajrzz*ajszr+
     & ajszz*ajszs+ajtzz*ajszt
                      t1 = ajrx**2
                      t6 = ajsx**2
                      t14 = ajtx**2
                      ajtzxx = t1*ajtzrr+2*ajrx*ajsx*ajtzrs+t6*ajtzss+
     & 2*ajrx*ajtx*ajtzrt+2*ajsx*ajtx*ajtzst+t14*ajtztt+ajrxx*ajtzr+
     & ajsxx*ajtzs+ajtxx*ajtzt
                      ajtzxy = ajry*ajrx*ajtzrr+(ajsy*ajrx+ajry*ajsx)*
     & ajtzrs+ajsy*ajsx*ajtzss+(ajry*ajtx+ajty*ajrx)*ajtzrt+(ajty*
     & ajsx+ajsy*ajtx)*ajtzst+ajty*ajtx*ajtztt+ajrxy*ajtzr+ajsxy*
     & ajtzs+ajtxy*ajtzt
                      t1 = ajry**2
                      t6 = ajsy**2
                      t14 = ajty**2
                      ajtzyy = t1*ajtzrr+2*ajry*ajsy*ajtzrs+t6*ajtzss+
     & 2*ajry*ajty*ajtzrt+2*ajsy*ajty*ajtzst+t14*ajtztt+ajryy*ajtzr+
     & ajsyy*ajtzs+ajtyy*ajtzt
                      ajtzxz = ajrz*ajrx*ajtzrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajtzrs+ajsz*ajsx*ajtzss+(ajrz*ajtx+ajtz*ajrx)*ajtzrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajtzst+ajtz*ajtx*ajtztt+ajrxz*ajtzr+ajsxz*
     & ajtzs+ajtxz*ajtzt
                      ajtzyz = ajrz*ajry*ajtzrr+(ajsz*ajry+ajrz*ajsy)*
     & ajtzrs+ajsz*ajsy*ajtzss+(ajrz*ajty+ajtz*ajry)*ajtzrt+(ajtz*
     & ajsy+ajsz*ajty)*ajtzst+ajtz*ajty*ajtztt+ajryz*ajtzr+ajsyz*
     & ajtzs+ajtyz*ajtzt
                      t1 = ajrz**2
                      t6 = ajsz**2
                      t14 = ajtz**2
                      ajtzzz = t1*ajtzrr+2*ajrz*ajsz*ajtzrs+t6*ajtzss+
     & 2*ajrz*ajtz*ajtzrt+2*ajsz*ajtz*ajtzst+t14*ajtztt+ajrzz*ajtzr+
     & ajszz*ajtzs+ajtzz*ajtzt
                      ! define these derivatives of the mapping (which are not normally computed by the standard macros):
                     ajrxxr=ajrx*ajrxrr + ajsx*ajrxrs + ajtx*ajrxrt + 
     & ajrxr*ajrxr +ajsxr*ajrxs + ajtxr*ajrxt
                     ajrxxs=ajrx*ajrxrs + ajsx*ajrxss + ajtx*ajrxst + 
     & ajrxs*ajrxr +ajsxs*ajrxs + ajtxs*ajrxt
                     ajrxxt=ajrx*ajrxrt + ajsx*ajrxst + ajtx*ajrxtt + 
     & ajrxt*ajrxr +ajsxt*ajrxs + ajtxt*ajrxt
                     ajrxyr=ajry*ajrxrr + ajsy*ajrxrs + ajty*ajrxrt + 
     & ajryr*ajrxr +ajsyr*ajrxs + ajtyr*ajrxt
                     ajrxys=ajry*ajrxrs + ajsy*ajrxss + ajty*ajrxst + 
     & ajrys*ajrxr +ajsys*ajrxs + ajtys*ajrxt
                     ajrxyt=ajry*ajrxrt + ajsy*ajrxst + ajty*ajrxtt + 
     & ajryt*ajrxr +ajsyt*ajrxs + ajtyt*ajrxt
                     ajrxzr=ajrz*ajrxrr + ajsz*ajrxrs + ajtz*ajrxrt + 
     & ajrzr*ajrxr +ajszr*ajrxs + ajtzr*ajrxt
                     ajrxzs=ajrz*ajrxrs + ajsz*ajrxss + ajtz*ajrxst + 
     & ajrzs*ajrxr +ajszs*ajrxs + ajtzs*ajrxt
                     ajrxzt=ajrz*ajrxrt + ajsz*ajrxst + ajtz*ajrxtt + 
     & ajrzt*ajrxr +ajszt*ajrxs + ajtzt*ajrxt
                     ajryxr=ajrx*ajryrr + ajsx*ajryrs + ajtx*ajryrt + 
     & ajrxr*ajryr +ajsxr*ajrys + ajtxr*ajryt
                     ajryxs=ajrx*ajryrs + ajsx*ajryss + ajtx*ajryst + 
     & ajrxs*ajryr +ajsxs*ajrys + ajtxs*ajryt
                     ajryxt=ajrx*ajryrt + ajsx*ajryst + ajtx*ajrytt + 
     & ajrxt*ajryr +ajsxt*ajrys + ajtxt*ajryt
                     ajryyr=ajry*ajryrr + ajsy*ajryrs + ajty*ajryrt + 
     & ajryr*ajryr +ajsyr*ajrys + ajtyr*ajryt
                     ajryys=ajry*ajryrs + ajsy*ajryss + ajty*ajryst + 
     & ajrys*ajryr +ajsys*ajrys + ajtys*ajryt
                     ajryyt=ajry*ajryrt + ajsy*ajryst + ajty*ajrytt + 
     & ajryt*ajryr +ajsyt*ajrys + ajtyt*ajryt
                     ajryzr=ajrz*ajryrr + ajsz*ajryrs + ajtz*ajryrt + 
     & ajrzr*ajryr +ajszr*ajrys + ajtzr*ajryt
                     ajryzs=ajrz*ajryrs + ajsz*ajryss + ajtz*ajryst + 
     & ajrzs*ajryr +ajszs*ajrys + ajtzs*ajryt
                     ajryzt=ajrz*ajryrt + ajsz*ajryst + ajtz*ajrytt + 
     & ajrzt*ajryr +ajszt*ajrys + ajtzt*ajryt
                     ajrzxr=ajrx*ajrzrr + ajsx*ajrzrs + ajtx*ajrzrt + 
     & ajrxr*ajrzr +ajsxr*ajrzs + ajtxr*ajrzt
                     ajrzxs=ajrx*ajrzrs + ajsx*ajrzss + ajtx*ajrzst + 
     & ajrxs*ajrzr +ajsxs*ajrzs + ajtxs*ajrzt
                     ajrzxt=ajrx*ajrzrt + ajsx*ajrzst + ajtx*ajrztt + 
     & ajrxt*ajrzr +ajsxt*ajrzs + ajtxt*ajrzt
                     ajrzyr=ajry*ajrzrr + ajsy*ajrzrs + ajty*ajrzrt + 
     & ajryr*ajrzr +ajsyr*ajrzs + ajtyr*ajrzt
                     ajrzys=ajry*ajrzrs + ajsy*ajrzss + ajty*ajrzst + 
     & ajrys*ajrzr +ajsys*ajrzs + ajtys*ajrzt
                     ajrzyt=ajry*ajrzrt + ajsy*ajrzst + ajty*ajrztt + 
     & ajryt*ajrzr +ajsyt*ajrzs + ajtyt*ajrzt
                     ajrzzr=ajrz*ajrzrr + ajsz*ajrzrs + ajtz*ajrzrt + 
     & ajrzr*ajrzr +ajszr*ajrzs + ajtzr*ajrzt
                     ajrzzs=ajrz*ajrzrs + ajsz*ajrzss + ajtz*ajrzst + 
     & ajrzs*ajrzr +ajszs*ajrzs + ajtzs*ajrzt
                     ajrzzt=ajrz*ajrzrt + ajsz*ajrzst + ajtz*ajrztt + 
     & ajrzt*ajrzr +ajszt*ajrzs + ajtzt*ajrzt
                     ajsxxr=ajrx*ajsxrr + ajsx*ajsxrs + ajtx*ajsxrt + 
     & ajrxr*ajsxr +ajsxr*ajsxs + ajtxr*ajsxt
                     ajsxxs=ajrx*ajsxrs + ajsx*ajsxss + ajtx*ajsxst + 
     & ajrxs*ajsxr +ajsxs*ajsxs + ajtxs*ajsxt
                     ajsxxt=ajrx*ajsxrt + ajsx*ajsxst + ajtx*ajsxtt + 
     & ajrxt*ajsxr +ajsxt*ajsxs + ajtxt*ajsxt
                     ajsxyr=ajry*ajsxrr + ajsy*ajsxrs + ajty*ajsxrt + 
     & ajryr*ajsxr +ajsyr*ajsxs + ajtyr*ajsxt
                     ajsxys=ajry*ajsxrs + ajsy*ajsxss + ajty*ajsxst + 
     & ajrys*ajsxr +ajsys*ajsxs + ajtys*ajsxt
                     ajsxyt=ajry*ajsxrt + ajsy*ajsxst + ajty*ajsxtt + 
     & ajryt*ajsxr +ajsyt*ajsxs + ajtyt*ajsxt
                     ajsxzr=ajrz*ajsxrr + ajsz*ajsxrs + ajtz*ajsxrt + 
     & ajrzr*ajsxr +ajszr*ajsxs + ajtzr*ajsxt
                     ajsxzs=ajrz*ajsxrs + ajsz*ajsxss + ajtz*ajsxst + 
     & ajrzs*ajsxr +ajszs*ajsxs + ajtzs*ajsxt
                     ajsxzt=ajrz*ajsxrt + ajsz*ajsxst + ajtz*ajsxtt + 
     & ajrzt*ajsxr +ajszt*ajsxs + ajtzt*ajsxt
                     ajsyxr=ajrx*ajsyrr + ajsx*ajsyrs + ajtx*ajsyrt + 
     & ajrxr*ajsyr +ajsxr*ajsys + ajtxr*ajsyt
                     ajsyxs=ajrx*ajsyrs + ajsx*ajsyss + ajtx*ajsyst + 
     & ajrxs*ajsyr +ajsxs*ajsys + ajtxs*ajsyt
                     ajsyxt=ajrx*ajsyrt + ajsx*ajsyst + ajtx*ajsytt + 
     & ajrxt*ajsyr +ajsxt*ajsys + ajtxt*ajsyt
                     ajsyyr=ajry*ajsyrr + ajsy*ajsyrs + ajty*ajsyrt + 
     & ajryr*ajsyr +ajsyr*ajsys + ajtyr*ajsyt
                     ajsyys=ajry*ajsyrs + ajsy*ajsyss + ajty*ajsyst + 
     & ajrys*ajsyr +ajsys*ajsys + ajtys*ajsyt
                     ajsyyt=ajry*ajsyrt + ajsy*ajsyst + ajty*ajsytt + 
     & ajryt*ajsyr +ajsyt*ajsys + ajtyt*ajsyt
                     ajsyzr=ajrz*ajsyrr + ajsz*ajsyrs + ajtz*ajsyrt + 
     & ajrzr*ajsyr +ajszr*ajsys + ajtzr*ajsyt
                     ajsyzs=ajrz*ajsyrs + ajsz*ajsyss + ajtz*ajsyst + 
     & ajrzs*ajsyr +ajszs*ajsys + ajtzs*ajsyt
                     ajsyzt=ajrz*ajsyrt + ajsz*ajsyst + ajtz*ajsytt + 
     & ajrzt*ajsyr +ajszt*ajsys + ajtzt*ajsyt
                     ajszxr=ajrx*ajszrr + ajsx*ajszrs + ajtx*ajszrt + 
     & ajrxr*ajszr +ajsxr*ajszs + ajtxr*ajszt
                     ajszxs=ajrx*ajszrs + ajsx*ajszss + ajtx*ajszst + 
     & ajrxs*ajszr +ajsxs*ajszs + ajtxs*ajszt
                     ajszxt=ajrx*ajszrt + ajsx*ajszst + ajtx*ajsztt + 
     & ajrxt*ajszr +ajsxt*ajszs + ajtxt*ajszt
                     ajszyr=ajry*ajszrr + ajsy*ajszrs + ajty*ajszrt + 
     & ajryr*ajszr +ajsyr*ajszs + ajtyr*ajszt
                     ajszys=ajry*ajszrs + ajsy*ajszss + ajty*ajszst + 
     & ajrys*ajszr +ajsys*ajszs + ajtys*ajszt
                     ajszyt=ajry*ajszrt + ajsy*ajszst + ajty*ajsztt + 
     & ajryt*ajszr +ajsyt*ajszs + ajtyt*ajszt
                     ajszzr=ajrz*ajszrr + ajsz*ajszrs + ajtz*ajszrt + 
     & ajrzr*ajszr +ajszr*ajszs + ajtzr*ajszt
                     ajszzs=ajrz*ajszrs + ajsz*ajszss + ajtz*ajszst + 
     & ajrzs*ajszr +ajszs*ajszs + ajtzs*ajszt
                     ajszzt=ajrz*ajszrt + ajsz*ajszst + ajtz*ajsztt + 
     & ajrzt*ajszr +ajszt*ajszs + ajtzt*ajszt
                     ajtxxr=ajrx*ajtxrr + ajsx*ajtxrs + ajtx*ajtxrt + 
     & ajrxr*ajtxr +ajsxr*ajtxs + ajtxr*ajtxt
                     ajtxxs=ajrx*ajtxrs + ajsx*ajtxss + ajtx*ajtxst + 
     & ajrxs*ajtxr +ajsxs*ajtxs + ajtxs*ajtxt
                     ajtxxt=ajrx*ajtxrt + ajsx*ajtxst + ajtx*ajtxtt + 
     & ajrxt*ajtxr +ajsxt*ajtxs + ajtxt*ajtxt
                     ajtxyr=ajry*ajtxrr + ajsy*ajtxrs + ajty*ajtxrt + 
     & ajryr*ajtxr +ajsyr*ajtxs + ajtyr*ajtxt
                     ajtxys=ajry*ajtxrs + ajsy*ajtxss + ajty*ajtxst + 
     & ajrys*ajtxr +ajsys*ajtxs + ajtys*ajtxt
                     ajtxyt=ajry*ajtxrt + ajsy*ajtxst + ajty*ajtxtt + 
     & ajryt*ajtxr +ajsyt*ajtxs + ajtyt*ajtxt
                     ajtxzr=ajrz*ajtxrr + ajsz*ajtxrs + ajtz*ajtxrt + 
     & ajrzr*ajtxr +ajszr*ajtxs + ajtzr*ajtxt
                     ajtxzs=ajrz*ajtxrs + ajsz*ajtxss + ajtz*ajtxst + 
     & ajrzs*ajtxr +ajszs*ajtxs + ajtzs*ajtxt
                     ajtxzt=ajrz*ajtxrt + ajsz*ajtxst + ajtz*ajtxtt + 
     & ajrzt*ajtxr +ajszt*ajtxs + ajtzt*ajtxt
                     ajtyxr=ajrx*ajtyrr + ajsx*ajtyrs + ajtx*ajtyrt + 
     & ajrxr*ajtyr +ajsxr*ajtys + ajtxr*ajtyt
                     ajtyxs=ajrx*ajtyrs + ajsx*ajtyss + ajtx*ajtyst + 
     & ajrxs*ajtyr +ajsxs*ajtys + ajtxs*ajtyt
                     ajtyxt=ajrx*ajtyrt + ajsx*ajtyst + ajtx*ajtytt + 
     & ajrxt*ajtyr +ajsxt*ajtys + ajtxt*ajtyt
                     ajtyyr=ajry*ajtyrr + ajsy*ajtyrs + ajty*ajtyrt + 
     & ajryr*ajtyr +ajsyr*ajtys + ajtyr*ajtyt
                     ajtyys=ajry*ajtyrs + ajsy*ajtyss + ajty*ajtyst + 
     & ajrys*ajtyr +ajsys*ajtys + ajtys*ajtyt
                     ajtyyt=ajry*ajtyrt + ajsy*ajtyst + ajty*ajtytt + 
     & ajryt*ajtyr +ajsyt*ajtys + ajtyt*ajtyt
                     ajtyzr=ajrz*ajtyrr + ajsz*ajtyrs + ajtz*ajtyrt + 
     & ajrzr*ajtyr +ajszr*ajtys + ajtzr*ajtyt
                     ajtyzs=ajrz*ajtyrs + ajsz*ajtyss + ajtz*ajtyst + 
     & ajrzs*ajtyr +ajszs*ajtys + ajtzs*ajtyt
                     ajtyzt=ajrz*ajtyrt + ajsz*ajtyst + ajtz*ajtytt + 
     & ajrzt*ajtyr +ajszt*ajtys + ajtzt*ajtyt
                     ajtzxr=ajrx*ajtzrr + ajsx*ajtzrs + ajtx*ajtzrt + 
     & ajrxr*ajtzr +ajsxr*ajtzs + ajtxr*ajtzt
                     ajtzxs=ajrx*ajtzrs + ajsx*ajtzss + ajtx*ajtzst + 
     & ajrxs*ajtzr +ajsxs*ajtzs + ajtxs*ajtzt
                     ajtzxt=ajrx*ajtzrt + ajsx*ajtzst + ajtx*ajtztt + 
     & ajrxt*ajtzr +ajsxt*ajtzs + ajtxt*ajtzt
                     ajtzyr=ajry*ajtzrr + ajsy*ajtzrs + ajty*ajtzrt + 
     & ajryr*ajtzr +ajsyr*ajtzs + ajtyr*ajtzt
                     ajtzys=ajry*ajtzrs + ajsy*ajtzss + ajty*ajtzst + 
     & ajrys*ajtzr +ajsys*ajtzs + ajtys*ajtzt
                     ajtzyt=ajry*ajtzrt + ajsy*ajtzst + ajty*ajtztt + 
     & ajryt*ajtzr +ajsyt*ajtzs + ajtyt*ajtzt
                     ajtzzr=ajrz*ajtzrr + ajsz*ajtzrs + ajtz*ajtzrt + 
     & ajrzr*ajtzr +ajszr*ajtzs + ajtzr*ajtzt
                     ajtzzs=ajrz*ajtzrs + ajsz*ajtzss + ajtz*ajtzst + 
     & ajrzs*ajtzr +ajszs*ajtzs + ajtzs*ajtzt
                     ajtzzt=ajrz*ajtzrt + ajsz*ajtzst + ajtz*ajtztt + 
     & ajrzt*ajtzr +ajszt*ajtzs + ajtzt*ajtzt
                     ! ***************************************************************
                     ! PDE: cxx*uxx + cyy*uyy + czz*uzz + cxy*uxy + cxz*uxz + cyz*uyz + cx*ux + cy*uy + cz*uz + c0 *u = f 
                     ! PDE: cRR*urr + cSS*uss + cTT*utt + cRS*urs + cRT*urt + cST*ust  + ccR*ur + ccS*us + ccT*ut + c0 *u = f 
                     ! =============== Start: Laplace operator: ==================== 
                      cxx=1.
                      cyy=1.
                      czz=1.
                      cxy=0.
                      cxz=0.
                      cyz=0.
                      cx=0.
                      cy=0.
                      cz=0.
                      c0=0.
                      cRR=cxx*ajrx**2+cyy*ajry**2+czz*ajrz**2 +cxy*
     & ajrx*ajry+cxz*ajrx*ajrz+cyz*ajry*ajrz
                      cSS=cxx*ajsx**2+cyy*ajsy**2+czz*ajsz**2 +cxy*
     & ajsx*ajsy+cxz*ajsx*ajsz+cyz*ajsy*ajsz
                      cTT=cxx*ajtx**2+cyy*ajty**2+czz*ajtz**2 +cxy*
     & ajtx*ajty+cxz*ajtx*ajtz+cyz*ajty*ajtz
                      cRS=2.*(cxx*ajrx*ajsx+cyy*ajry*ajsy+czz*ajrz*
     & ajsz) +cxy*(ajrx*ajsy+ajry*ajsx)+cxz*(ajrx*ajsz+ajrz*ajsx)+cyz*
     & (ajry*ajsz+ajrz*ajsy)
                      cRT=2.*(cxx*ajrx*ajtx+cyy*ajry*ajty+czz*ajrz*
     & ajtz) +cxy*(ajrx*ajty+ajry*ajtx)+cxz*(ajrx*ajtz+ajrz*ajtx)+cyz*
     & (ajry*ajtz+ajrz*ajty)
                      cST=2.*(cxx*ajsx*ajtx+cyy*ajsy*ajty+czz*ajsz*
     & ajtz) +cxy*(ajsx*ajty+ajsy*ajtx)+cxz*(ajsx*ajtz+ajsz*ajtx)+cyz*
     & (ajsy*ajtz+ajsz*ajty)
                      ccR=cxx*ajrxx+cyy*ajryy+czz*ajrzz +cxy*ajrxy+cxz*
     & ajrxz+cyz*ajryz + cx*ajrx+cy*ajry+cz*ajrz
                      ccS=cxx*ajsxx+cyy*ajsyy+czz*ajszz +cxy*ajsxy+cxz*
     & ajsxz+cyz*ajsyz + cx*ajsx+cy*ajsy+cz*ajsz
                      ccT=cxx*ajtxx+cyy*ajtyy+czz*ajtzz +cxy*ajtxy+cxz*
     & ajtxz+cyz*ajtyz + cx*ajtx+cy*ajty+cz*ajtz
                     ! m=1...
                      cRRr=2.*(ajrx*ajrxr+ajry*ajryr+ajrz*ajrzr)
                      cRSr=2.*(ajrxr*ajsx+ajrx*ajsxr + ajryr*ajsy+ 
     & ajry*ajsyr + ajrzr*ajsz+ ajrz*ajszr)
                      cRTr=2.*(ajrxr*ajtx+ajrx*ajtxr + ajryr*ajty+ 
     & ajry*ajtyr + ajrzr*ajtz+ ajrz*ajtzr)
                      ccRr=ajrxxr+ajryyr+ajrzzr
                      cRRs=2.*(ajrx*ajrxs+ajry*ajrys+ajrz*ajrzs)
                      cRSs=2.*(ajrxs*ajsx+ajrx*ajsxs + ajrys*ajsy+ 
     & ajry*ajsys + ajrzs*ajsz+ ajrz*ajszs)
                      cRTs=2.*(ajrxs*ajtx+ajrx*ajtxs + ajrys*ajty+ 
     & ajry*ajtys + ajrzs*ajtz+ ajrz*ajtzs)
                      ccRs=ajrxxs+ajryys+ajrzzs
                      cRRt=2.*(ajrx*ajrxt+ajry*ajryt+ajrz*ajrzt)
                      cRSt=2.*(ajrxt*ajsx+ajrx*ajsxt + ajryt*ajsy+ 
     & ajry*ajsyt + ajrzt*ajsz+ ajrz*ajszt)
                      cRTt=2.*(ajrxt*ajtx+ajrx*ajtxt + ajryt*ajty+ 
     & ajry*ajtyt + ajrzt*ajtz+ ajrz*ajtzt)
                      ccRt=ajrxxt+ajryyt+ajrzzt
                     ! m=2...
                      cSSr=2.*(ajsx*ajsxr+ajsy*ajsyr+ajsz*ajszr)
                      cSTr=2.*(ajsxr*ajtx+ajsx*ajtxr + ajsyr*ajty+ 
     & ajsy*ajtyr + ajszr*ajtz+ ajsz*ajtzr)
                      ccSr=ajsxxr+ajsyyr+ajszzr
                      cSSs=2.*(ajsx*ajsxs+ajsy*ajsys+ajsz*ajszs)
                      cSTs=2.*(ajsxs*ajtx+ajsx*ajtxs + ajsys*ajty+ 
     & ajsy*ajtys + ajszs*ajtz+ ajsz*ajtzs)
                      ccSs=ajsxxs+ajsyys+ajszzs
                      cSSt=2.*(ajsx*ajsxt+ajsy*ajsyt+ajsz*ajszt)
                      cSTt=2.*(ajsxt*ajtx+ajsx*ajtxt + ajsyt*ajty+ 
     & ajsy*ajtyt + ajszt*ajtz+ ajsz*ajtzt)
                      ccSt=ajsxxt+ajsyyt+ajszzt
                     ! m=3...
                      cTTr=2.*(ajtx*ajtxr+ajty*ajtyr+ajtz*ajtzr)
                      ccTr=ajtxxr+ajtyyr+ajtzzr
                      cTTs=2.*(ajtx*ajtxs+ajty*ajtys+ajtz*ajtzs)
                      ccTs=ajtxxs+ajtyys+ajtzzs
                      cTTt=2.*(ajtx*ajtxt+ajty*ajtyt+ajtz*ajtzt)
                      ccTt=ajtxxt+ajtyyt+ajtzzt
                      c0r=0.
                      c0s=0.
                      c0t=0.
                     ! =============== End: Laplace operator: ==================== 
                     ! ---------------- Start: Boundary condition: --------------- 
                     ! BC: a1*u.n + a0*u = g 
                     ! nsign=2*side-1
                     ! a1=1.
                     ! a0=0.
                      ! ---------------- Start r direction ---------------
                      ! ---------------- Start s direction ---------------
                      ! ---------------- Start t direction ---------------
                      ! Outward normal : (n1,n2,n3) 
                      ani=nsign/sqrt(ajtx**2+ajty**2+ajtz**2)
                      n1=ajtx*ani
                      n2=ajty*ani
                      n3=ajtz*ani
                      ! BC : anT*ut + anR*ur + anS*us + a0*u 
                      anT=a1*(n1*ajtx+n2*ajty+n3*ajtz)
                      anR=a1*(n1*ajrx+n2*ajry+n3*ajrz)
                      anS=a1*(n1*ajsx+n2*ajsy+n3*ajsz)
                     ! >>>>>>>
                      anir=-(ajtx*ajtxr+ajty*ajtyr+ajtz*ajtzr)*ani**3
                      anirr=-(ajtx*ajtxrr+ajty*ajtyrr+ajtz*ajtzrr+
     & ajtxr*ajtxr+ajtyr*ajtyr+ajtzr*ajtzr)*ani**3 -3.*(ajtx*ajtxr+
     & ajty*ajtyr+ajtz*ajtzr)*ani**2*anir
                      n1r=ajtxr*ani + ajtx*anir
                      n1rr=ajtxrr*ani + 2.*ajtxr*anir + ajtx*anirr
                      n2r=ajtyr*ani + ajty*anir
                      n2rr=ajtyrr*ani + 2.*ajtyr*anir + ajty*anirr
                      n3r=ajtzr*ani + ajtz*anir
                      n3rr=ajtzrr*ani + 2.*ajtzr*anir + ajtz*anirr
                      anTr =a1*(n1*ajtxr+n2*ajtyr+n3*ajtzr+n1r*ajtx+
     & n2r*ajty+n3r*ajtz)
                      anTrr=a1*(n1*ajtxrr+n2*ajtyrr+n3*ajtzrr+2.*(n1r*
     & ajtxr+n2r*ajtyr+n3r*ajtzr)+n1rr*ajtx+n2rr*ajty+n3rr*ajtz)
                      anRr =a1*(n1*ajrxr+n2*ajryr+n3*ajrzr+n1r*ajrx+
     & n2r*ajry+n3r*ajrz)
                      anRrr=a1*(n1*ajrxrr+n2*ajryrr+n3*ajrzrr+2.*(n1r*
     & ajrxr+n2r*ajryr+n3r*ajrzr)+n1rr*ajrx+n2rr*ajry+n3rr*ajrz)
                      anSr =a1*(n1*ajsxr+n2*ajsyr+n3*ajszr+n1r*ajsx+
     & n2r*ajsy+n3r*ajsz)
                      anSrr=a1*(n1*ajsxrr+n2*ajsyrr+n3*ajszrr+2.*(n1r*
     & ajsxr+n2r*ajsyr+n3r*ajszr)+n1rr*ajsx+n2rr*ajsy+n3rr*ajsz)
                     ! <<<<<<<
                     ! >>>>>>>
                      anis=-(ajtx*ajtxs+ajty*ajtys+ajtz*ajtzs)*ani**3
                      aniss=-(ajtx*ajtxss+ajty*ajtyss+ajtz*ajtzss+
     & ajtxs*ajtxs+ajtys*ajtys+ajtzs*ajtzs)*ani**3 -3.*(ajtx*ajtxs+
     & ajty*ajtys+ajtz*ajtzs)*ani**2*anis
                      anirs=-(ajtx*ajtxrs+ajty*ajtyrs+ajtz*ajtzrs+
     & ajtxr*ajtxs+ajtyr*ajtys+ajtzr*ajtzs)*ani**3 -3.*(ajtx*ajtxr+
     & ajty*ajtyr+ajtz*ajtzr)*ani**2*anis
                      n1s=ajtxs*ani + ajtx*anis
                      n1ss=ajtxss*ani + 2.*ajtxs*anis + ajtx*aniss
                      n1rs=ajtxrs*ani + ajtxs*anir + ajtxr*anis + ajtx*
     & anirs
                      n2s=ajtys*ani + ajty*anis
                      n2ss=ajtyss*ani + 2.*ajtys*anis + ajty*aniss
                      n2rs=ajtyrs*ani + ajtys*anir + ajtyr*anis + ajty*
     & anirs
                      n3s=ajtzs*ani + ajtz*anis
                      n3ss=ajtzss*ani + 2.*ajtzs*anis + ajtz*aniss
                      n3rs=ajtzrs*ani + ajtzs*anir + ajtzr*anis + ajtz*
     & anirs
                      anTs =a1*(n1*ajtxs+n2*ajtys+n3*ajtzs+n1s*ajtx+
     & n2s*ajty+n3s*ajtz)
                      anTss=a1*(n1*ajtxss+n2*ajtyss+n3*ajtzss+2.*(n1s*
     & ajtxs+n2s*ajtys+n3s*ajtzs)+n1ss*ajtx+n2ss*ajty+n3ss*ajtz)
                      anTrs=a1*(n1*ajtxrs+n2*ajtyrs+n3*ajtzrs +n1r*
     & ajtxs+n2r*ajtys+n3r*ajtzs +n1s*ajtxr+n2s*ajtyr+n3s*ajtzr +n1rs*
     & ajtx+n2rs*ajty+n3rs*ajtz)
                      anRs =a1*(n1*ajrxs+n2*ajrys+n3*ajrzs+n1s*ajrx+
     & n2s*ajry+n3s*ajrz)
                      anRss=a1*(n1*ajrxss+n2*ajryss+n3*ajrzss+2.*(n1s*
     & ajrxs+n2s*ajrys+n3s*ajrzs)+n1ss*ajrx+n2ss*ajry+n3ss*ajrz)
                      anRrs=a1*(n1*ajrxrs+n2*ajryrs+n3*ajrzrs +n1r*
     & ajrxs+n2r*ajrys+n3r*ajrzs +n1s*ajrxr+n2s*ajryr+n3s*ajrzr +n1rs*
     & ajrx+n2rs*ajry+n3rs*ajrz)
                      anSs =a1*(n1*ajsxs+n2*ajsys+n3*ajszs+n1s*ajsx+
     & n2s*ajsy+n3s*ajsz)
                      anSss=a1*(n1*ajsxss+n2*ajsyss+n3*ajszss+2.*(n1s*
     & ajsxs+n2s*ajsys+n3s*ajszs)+n1ss*ajsx+n2ss*ajsy+n3ss*ajsz)
                      anSrs=a1*(n1*ajsxrs+n2*ajsyrs+n3*ajszrs +n1r*
     & ajsxs+n2r*ajsys+n3r*ajszs +n1s*ajsxr+n2s*ajsyr+n3s*ajszr +n1rs*
     & ajsx+n2rs*ajsy+n3rs*ajsz)
                     ! <<<<<<<
                      ! Here are the expressions for the normal derivatives
                     bn3 = 1
                     bn2 = 0
                     bn2 = 0
                     bn1 = 0
                     b0  = -(-c0t*anT**3*cTT**2+cTTt*anT**3*cTT*c0-cRT*
     & cTTr*anT**3*c0+cRT*c0r*anT**3*cTT-cRT**2*cTT*a0rr*anT**2-2*cRT*
     & *2*cTT*anTr**2*a0+cTTr*anT**2*cRT**2*a0r+cRR*cTT**2*a0rr*anT**
     & 2+2*cRR*cTT**2*anTr**2*a0+cST*c0s*anT**3*cTT-cST*cTTs*anT**3*
     & c0-cST**2*cTT*a0ss*anT**2-2*cST**2*cTT*anTs**2*a0+cTTs*anT**2*
     & cST**2*a0s+cRS*cTT**2*a0rs*anT**2+cSS*cTT**2*a0ss*anT**2+2*cSS*
     & cTT**2*anTs**2*a0-ccT**2*anT**2*cTT*a0+ccT*anT**3*cTT*c0+ccR*
     & anT**2*cTT**2*a0r+ccS*anT**2*cTT**2*a0s+c0*anT**2*cTT**2*a0+
     & cRTt*anT**2*cTT**2*a0r+cSTt*anT**2*cTT**2*a0s+ccTt*anT**2*cTT**
     & 2*a0-cTTt*anT**2*cTT*cRT*a0r+cTTt*anT*cTT*cRT*anTr*a0-cTTt*anT*
     & *2*cTT*cST*a0s+cTTt*anT*cTT*cST*anTs*a0-cTTt*anT**2*cTT*ccT*a0+
     & 2*cRT**2*cTT*anTr*a0r*anT+cRT**2*cTT*anTrr*anT*a0-2*cRT*cST*
     & cTT*a0rs*anT**2+2*cRT*cST*cTT*anTr*a0s*anT-4*cRT*cST*cTT*anTr*
     & anTs*a0+2*cRT*cST*cTT*anTs*a0r*anT+2*cRT*cST*cTT*anTrs*anT*a0-
     & 2*cRT*ccT*anT**2*cTT*a0r+2*cRT*ccT*anT*cTT*anTr*a0-cRT*cRTr*
     & anT**2*cTT*a0r+cRT*cRTr*anT*cTT*anTr*a0-cRT*cSTr*anT**2*cTT*
     & a0s+cRT*cSTr*anT*cTT*anTs*a0-cRT*ccTr*anT**2*cTT*a0-cTTr*anT*
     & cRT**2*anTr*a0+cRT*cTTr*anT**2*cST*a0s-cRT*cTTr*anT*cST*anTs*
     & a0+cRT*cTTr*anT**2*ccT*a0-2*cRR*cTT**2*anTr*a0r*anT-cRR*cTT**2*
     & anTrr*anT*a0+2*cST**2*cTT*anTs*a0s*anT+cST**2*cTT*anTss*anT*a0-
     & 2*cST*ccT*anT**2*cTT*a0s+2*cST*ccT*anT*cTT*anTs*a0-cST*cRTs*
     & anT**2*cTT*a0r+cST*cRTs*anT*cTT*anTr*a0-cST*cSTs*anT**2*cTT*
     & a0s+cST*cSTs*anT*cTT*anTs*a0-cST*ccTs*anT**2*cTT*a0+cST*cTTs*
     & anT**2*cRT*a0r-cST*cTTs*anT*cRT*anTr*a0-cTTs*anT*cST**2*anTs*
     & a0+cST*cTTs*anT**2*ccT*a0-cRS*cTT**2*anTr*a0s*anT+2*cRS*cTT**2*
     & anTr*anTs*a0-cRS*cTT**2*anTs*a0r*anT-cRS*cTT**2*anTrs*anT*a0-2*
     & cSS*cTT**2*anTs*a0s*anT-cSS*cTT**2*anTss*anT*a0-ccR*anT*cTT**2*
     & anTr*a0-ccS*anT*cTT**2*anTs*a0-cRTt*anT*cTT**2*anTr*a0-cSTt*
     & anT*cTT**2*anTs*a0)/anT**3/cTT**3
                     ! write(*,'(''LS:matrix: side,axis,axisp1,b0,b1,b3,br2 ='',2i2,i3,4e11.3)') side,axis,axisp1,b0,b1,b3,br2
                     ! bn2 = -(-cRRr*anR**3*cRR+cRT*cRRt*anR**3+cRS*cRRs*anR**3-ccR*anR**3*cRR)/anR**3/cRR**2
                     ! write(*,'("LS-NE4:matrix: i1,i2=",2i3," Values:")') i1,i2
                     ! write(*,'("  cRR,anR,cRRr,cRT,cRRt,cRS,cRRs,ccR=",8e11.3)') cRR,anR,cRRr,cRT,cRRt,cRS,cRRs,ccR
                  ! b0  = -(2*cRS**2*anRs*a0s*anR+cRS**2*anRss*anR*a0-2*cRS*cRT*a0st*anR**2-cRS*ccR*anR**2*a0s-cRS*cRSs*anR**2*a0s-cRS*cRTs*anR**2*a0t-cRS*ccRs*anR**2*a0+cSS*cRR*a0ss*anR**2+2*cSS*cRR*anRs**2*a0-cRT*ccR*anR**2*a0t-cRT*cRSt*anR**2*a0s+cRT*c0t*anR**3-c0r*anR**3*cRR-cRS**2*a0ss*anR**2-2*cRS**2*anRs**2*a0+cRS*c0s*anR**3-cRT**2*a0tt*anR**2-2*cRT**2*anRt**2*a0+2*cRS*cRT*anRs*a0t*anR-4*cRS*cRT*anRs*anRt*a0+2*cRS*cRT*anRt*a0s*anR+2*cRS*cRT*anRst*anR*a0+cRS*ccR*anR*anRs*a0+cRS*cRSs*anR*anRs*a0+cRS*cRTs*anR*anRt*a0-2*cSS*cRR*anRs*a0s*anR-cSS*cRR*anRss*anR*a0-cRT*cRTt*anR**2*a0t-cRT*ccRt*anR**2*a0+cRT**2*anRtt*anR*a0+2*cRT**2*anRt*a0t*anR+cST*cRR*a0st*anR**2+cTT*cRR*a0tt*anR**2+2*cTT*cRR*anRt**2*a0+ccS*anR**2*cRR*a0s+ccT*anR**2*cRR*a0t+c0*anR**2*cRR*a0+cRSr*anR**2*cRR*a0s+cRTr*anR**2*cRR*a0t+ccRr*anR**2*cRR*a0+cRT*ccR*anR*anRt*a0+cRT*cRSt*anR*anRs*a0+cRT*cRTt*anR*anRt*a0-cST*cRR*anRs*a0t*anR+2*cST*cRR*anRs*anRt*a0-cST*cRR*anRt*a0s*anR-cST*cRR*anRst*anR*a0-cTT*cRR*anRtt*anR*a0-2*cTT*cRR*anRt*a0t*anR-ccS*anR*cRR*anRs*a0-ccT*anR*cRR*anRt*a0-cRSr*anR*cRR*anRs*a0-cRTr*anR*cRR*anRt*a0)/anR**3/cRR**2
                     ! write(*,'("anRs,a0s,anRss,a0st,cRTs,a0t,a0,cSS,a0ss=",9e10.2)') anRs,a0s,anRss,a0st,cRTs,a0t,a0,cSS,a0ss
                     ! write(*,'(" b0,bn2 =",4e11.3)') b0,bn2
                     c(j1,j2,j3)=-.5/dr(axis)**3
                     d(j1,j2,j3)= 1./dr(axis)**3    +bn2/dr(axis)**2
                     e(j1,j2,j3)=                -2.*bn2/dr(axis)**2 - 
     & b0
                     a(j1,j2,j3)=-1./dr(axis)**3    +bn2/dr(axis)**2
                     b(j1,j2,j3)= .5/dr(axis)**3
                    else if( mask(i1,i2,i3).lt.0 ) then
                        b(j1,j2,j3)= 1.
                        c(j1,j2,j3)=-4.
                        d(j1,j2,j3)= 6.
                        e(j1,j2,j3)=-4.
                        a(j1,j2,j3)= 1.
                    end if
                   end do
                   end do
                   end do
                else
                  stop 88
                end if
               end if

              else if( bcOptionN.eq.2 )then
                  ! 2nd ghost line on left:
                  !       [  c  d  e  a  b ]
                  !     i=[ -2 -1  0  1  2 ]
                  ! *wdh* 11023 - fixed (was setting symmetry on first ghost)
                  do i3=l3a,l3b
                  do i2=l2a,l2b
                  do i1=l1a,l1b
                     c(i1,i2,i3)= 1.
                     d(i1,i2,i3)= 0.
                     e(i1,i2,i3)= 0.
                     a(i1,i2,i3)= 0.
                     b(i1,i2,i3)=-1.
                  end do
                  end do
                  end do
              else if( bcOptionN.eq.3 )then
                ! mixed BC for both first and second ghost lines

                ! *new* 110308 -- apply real 2nd-order approximations on two ghost 
                ! write(*,'(">>>lineSmoothBuild: 2nd order Neumann/mixed on TWO lines")')

                 ! write(*,'("lineSmoothOpt:mixedToSecondOrder: side,axis=",2i2, " a0,a1=",2f6.2)') side,axis,a0,a1
                 is = 1-2*side
                 do i3=m3a,m3b
                 do i2=m2a,m2b
                 do i1=m1a,m1b
                  j1=i1+is1 ! (j1,j2,j3) is the boundary point
                  j2=i2+is2
                  j3=i3+is3
                  k1=i1-is1 ! (k1,k2,k3) is the 2nd ghost line
                  k2=i2-is2
                  k3=i3-is3
                  if( mask(j1,j2,j3).gt.0 ) then
                    ! Curvilinear:
                    ! (an1,an2,an3) is the outward normal
                    an1 = rsxy(j1,j2,j3,axis,0)
                    an2 = rsxy(j1,j2,j3,axis,1)
                    if( nd.eq.2 )then
                     aNormi = (-is)/sqrt(an1**2+an2**2)
                     an1=an1*aNormi
                     an2=an2*aNormi
                     t1=a1*( an1*rsxy(j1,j2,j3,axis,0)+an2*rsxy(j1,j2,
     & j3,axis,1) )/(2.*dr(axis))
                    else
                     an3 = rsxy(j1,j2,j3,axis,2)
                     aNormi = (-is)/sqrt(an1**2+an2**2+an3**2)
                     an1=an1*aNormi
                     an2=an2*aNormi
                     an3=an3*aNormi
                     t1=a1*( an1*rsxy(j1,j2,j3,axis,0)+an2*rsxy(j1,j2,
     & j3,axis,1)+an3*rsxy(j1,j2,j3,axis,2) )/(2.*dr(axis))
                    end if
                     ! 1st ghost line on left:
                     !       [  b  c  d  e  a ]
                     !     i=[ -2 -1  0  1  2 ]
                     b(i1,i2,i3)= 0.
                     c(i1,i2,i3)= -t1
                     d(i1,i2,i3)= a0
                     e(i1,i2,i3)=  t1
                     a(i1,i2,i3)= 0.
                     ! Fill second ghost line on left
                     ! 2nd ghost line on left:
                     !       [  c  d  e  a  b ]
                     !     i=[ -2 -1  0  1  2 ]
                     c(k1,k2,k3)= -t1*.5
                     d(k1,k2,k3)= 0.
                     e(k1,k2,k3)= a0
                     a(k1,k2,k3)= 0.
                     b(k1,k2,k3)=  t1*.5
                    ! write(*,'("lineSmoothBuild: i1,i2=",2i3," [B C A]=",3e10.2)') i1,i2,B(i1,i2,i3),C(i1,i2,i3),A(i1,i2,i3)
                  else if( mask(j1,j2,j3).lt.0 )then
                   ! What order should this be?
                    ! 1st ghost line on left: -- extrap to order=2 -- this should be fine for lower levels
                      if( 2.eq.4 )then
                        b(i1,i2,i3)= 1.
                        c(i1,i2,i3)=-4.
                        d(i1,i2,i3)= 6.
                        e(i1,i2,i3)=-4.
                        a(i1,i2,i3)= 1.
                      else if( 2.eq.5 )then
                        ! 5-th order extrap (NOTE: this does not fit entirely in the matrix so we need a residual)
                        b(i1,i2,i3)=  1.
                        c(i1,i2,i3)= -5.
                        d(i1,i2,i3)= 10.
                        e(i1,i2,i3)=-10.
                        a(i1,i2,i3)=  5.
                      else if( 2.eq.2 )then
                        b(i1,i2,i3)= 0.
                        c(i1,i2,i3)= 1.
                        d(i1,i2,i3)=-2.
                        e(i1,i2,i3)= 1.
                        a(i1,i2,i3)= 0.
                      else
                        stop 18520
                      end if
                    ! 2nd ghost on left: -extrap to order 4 (this is like D_0^2 when D+D-u=0)
                      c(k1,k2,k3)= 1.
                      d(k1,k2,k3)=-4.
                      e(k1,k2,k3)= 6.
                      a(k1,k2,k3)=-4.
                      b(k1,k2,k3)= 1.
                  end if
                 end do
                 end do
                 end do
              else
                write(*,*) 'lineSmoothBuild:ERROR: unknown bcOptionN'
                stop 14
              end if

              ! 1st ghost line on left:
              !       [  b  c  d  e  a ]
              !    i= [ -2 -1  0  1  2 ]
               if( bcOptionN.eq.0 .and. isNeumannBC(0).eq.1 .and. 
     & level.gt.0 )then
                ! this is really a Neumann or Mixed BC *wdh* 110224
                ! On lower levels we fill in the BC to 2nd order

                 ! write(*,'(" lineSmoothOpt: fill mixed BC left 2nd order for penta")') 

                 if( gridType.eq.rectangular )then
                   ! write(*,'("lineSmoothOpt:mixedToSecondOrder: side,axis=",2i2, " a0,a1=",2f6.2)') side,axis,a0,a1
                   is = 1-2*side
                   do i3=m3a,m3b
                   do i2=m2a,m2b
                   do i1=m1a,m1b
                    j1=i1+is1 ! (j1,j2,j3) is the boundary point
                    j2=i2+is2
                    j3=i3+is3
                    if( mask(j1,j2,j3).gt.0 ) then
                       t1 = (-is*a1)/(2.*dx(axis))
                      b(i1,i2,i3)= 0.
                      c(i1,i2,i3)= -t1
                      d(i1,i2,i3)= a0
                      e(i1,i2,i3)=  t1
                      a(i1,i2,i3)= 0.
                      ! write(*,'("lineSmoothBuild: i1,i2=",2i3," [b c a]=",3e10.2)') i1,i2,b(i1,i2,i3),c(i1,i2,i3),a(i1,i2,i3)
                    else if( mask(j1,j2,j3).lt.0 )then
                     ! What order should this be?
                      ! 1st ghost line on left:
                      !       [  b  c  d  e  a ]
                      !     i=[ -2 -1  0  1  2 ]
                        b(i1,i2,i3)= 1.
                        c(i1,i2,i3)=-4.
                        d(i1,i2,i3)= 6.
                        e(i1,i2,i3)=-4.
                        a(i1,i2,i3)= 1.
                    end if
                   end do
                   end do
                   end do
                 else
                   ! write(*,'("lineSmoothOpt:mixedToSecondOrder: side,axis=",2i2, " a0,a1=",2f6.2)') side,axis,a0,a1
                   is = 1-2*side
                   do i3=m3a,m3b
                   do i2=m2a,m2b
                   do i1=m1a,m1b
                    j1=i1+is1 ! (j1,j2,j3) is the boundary point
                    j2=i2+is2
                    j3=i3+is3
                    if( mask(j1,j2,j3).gt.0 ) then
                      ! Curvilinear:
                      ! (an1,an2,an3) is the outward normal
                      an1 = rsxy(j1,j2,j3,axis,0)
                      an2 = rsxy(j1,j2,j3,axis,1)
                      if( nd.eq.2 )then
                       aNormi = (-is)/sqrt(an1**2+an2**2)
                       an1=an1*aNormi
                       an2=an2*aNormi
                       t1=a1*( an1*rsxy(j1,j2,j3,axis,0)+an2*rsxy(j1,
     & j2,j3,axis,1) )/(2.*dr(axis))
                      else
                       an3 = rsxy(j1,j2,j3,axis,2)
                       aNormi = (-is)/sqrt(an1**2+an2**2+an3**2)
                       an1=an1*aNormi
                       an2=an2*aNormi
                       an3=an3*aNormi
                       t1=a1*( an1*rsxy(j1,j2,j3,axis,0)+an2*rsxy(j1,
     & j2,j3,axis,1)+an3*rsxy(j1,j2,j3,axis,2) )/(2.*dr(axis))
                      end if
                      b(i1,i2,i3)= 0.
                      c(i1,i2,i3)= -t1
                      d(i1,i2,i3)= a0
                      e(i1,i2,i3)=  t1
                      a(i1,i2,i3)= 0.
                      ! write(*,'("lineSmoothBuild: i1,i2=",2i3," [b c a]=",3e10.2)') i1,i2,b(i1,i2,i3),c(i1,i2,i3),a(i1,i2,i3)
                    else if( mask(j1,j2,j3).lt.0 )then
                     ! What order should this be?
                      ! 1st ghost line on left:
                      !       [  b  c  d  e  a ]
                      !     i=[ -2 -1  0  1  2 ]
                        b(i1,i2,i3)= 1.
                        c(i1,i2,i3)=-4.
                        d(i1,i2,i3)= 6.
                        e(i1,i2,i3)=-4.
                        a(i1,i2,i3)= 1.
                    end if
                   end do
                   end do
                   end do
                 end if
               else if( bcOptionN.eq.0 .or. bcOptionN.eq.1 )then

                 ! BC is stored in the coeff matrix
                 do i3=m3a,m3b
                 do i2=m2a,m2b
                 do i1=m1a,m1b
                  j1=i1+is1 ! (j1,j2,j3) is the boundary point
                  j2=i2+is2
                  j3=i3+is3
                      if( mask(j1,j2,j3).gt.0 ) then
                    b(i1,i2,i3)=coeff(mdm2,i1,i2,i3)
                    c(i1,i2,i3)=coeff(mdm1,i1,i2,i3)
                    d(i1,i2,i3)=coeff(md  ,i1,i2,i3)
                    e(i1,i2,i3)=coeff(mdp1,i1,i2,i3)
                    a(i1,i2,i3)=coeff(mdp2,i1,i2,i3)

       ! write(*,'(" LS:neumann : myid=",i3,"i1,i2=",i3,i3," a,b,c,d,e=",5e11.3)') myid,i1,i2,a(i1,i2,i3),b(i1,i2,i3),c(i1,i2,i3),d(i1,i2,i3),e(i1,i2,i3)

                  else if( mask(j1,j2,j3).lt.0 ) then
                      b(i1,i2,i3)= 1.
                      c(i1,i2,i3)=-4.
                      d(i1,i2,i3)= 6.
                      e(i1,i2,i3)=-4.
                      a(i1,i2,i3)= 1.
                  end if
                 end do
                 end do
                 end do

              else if( bcOptionN.eq.2 )then
                 ! 1st ghost line on left:
                 !       [  b  c  d  e  a ]
                 !     i=[ -2 -1  0  1  2 ]
                 do i3=m3a,m3b
                 do i2=m2a,m2b
                 do i1=m1a,m1b
                    b(i1,i2,i3)= 0.
                    c(i1,i2,i3)= 1.
                    d(i1,i2,i3)= 0.
                    e(i1,i2,i3)=-1.
                    a(i1,i2,i3)= 0.
                 end do
                 end do
                 end do
              else if( bcOptionN.eq.3 )then
                ! mixed BC already done
              else
                stop 17
              end if

             else  ! side==1


              ! 2nd ghost line on right:
              !       [  d  e  a  b  c ]
              !  i=n+ [ -2 -1  0  1  2 ]
              if( bcOptionN.eq.0 )then
               ! extrapolate 2nd ghost
               do i3=l3a,l3b
               do i2=l2a,l2b
               do i1=l1a,l1b
                  if( orderOfExtrapN.eq.4 )then
                    c(i1,i2,i3)= 1.
                    b(i1,i2,i3)=-4.
                    a(i1,i2,i3)= 6.
                    e(i1,i2,i3)=-4.
                    d(i1,i2,i3)= 1.
                  else if( orderOfExtrapN.eq.5 )then
                    ! 5-th order extrap (NOTE: this does not fit entirely in the matrix so we need a residual)
                    c(i1,i2,i3)=  1.
                    b(i1,i2,i3)= -5.
                    a(i1,i2,i3)= 10.
                    e(i1,i2,i3)=-10.
                    d(i1,i2,i3)=  5.
                  else if( orderOfExtrapN.eq.2 )then
                    c(i1,i2,i3)= 0.
                    b(i1,i2,i3)= 1.
                    a(i1,i2,i3)=-2.
                    e(i1,i2,i3)= 1.
                    d(i1,i2,i3)= 0.
                  else
                    stop 18520
                  end if
	        ! d(i1,i2,i3)= 1.
	        ! e(i1,i2,i3)=-4.
	        ! a(i1,i2,i3)= 6.
	        ! b(i1,i2,i3)=-4.
	        ! c(i1,i2,i3)= 1.
               end do
               end do
               end do
              else if( bcOptionN.eq.1 )then
               ! u.rrr = 
               if( gridType.eq.rectangular )then ! *wdh* 100506
                  if( equationToSolve.ne.laplaceEquation )then
                    write(*,'("Ogmg:LSB:ERROR: equation!=laplace")')
                    write(*,'("equationToSolve=",i2)') equationToSolve
                    write(*,'("gridType=",i2)') gridType
                    write(*,'("sparseStencil=",i2)') sparseStencil
                    ! stop 5053
                  end if
                  nsign = 2*side-1
                  diag=(a0/(a1*nsign))*dx(axis)  ! u_xx * dx^3
                  write(*,'('' neumannAndEquationRectangular: a0,a1,
     & diag='',3f6.2)') a0,a1,diag
                  do j3=l3a,l3b
                  do j2=l2a,l2b
                  do j1=l1a,l1b
                   i1=j1+2*is1 ! (i1,i2,i3) is the boundary point
                   i2=j2+2*is2 ! (j1,j2,j3) is the 2nd ghost line
                   i3=j3+2*is3
                   if( mask(i1,i2,i3).gt.0 ) then
                     ! This is the operator for urrr*dr^3
                     d(j1,j2,j3)=-.5
                     e(j1,j2,j3)= 1.  + diag
                     a(j1,j2,j3)=   -2.*diag
                     b(j1,j2,j3)=-1.  + diag
                     c(j1,j2,j3)= .5
                   else if( mask(i1,i2,i3).lt.0 ) then
                       b(j1,j2,j3)= 1.
                       c(j1,j2,j3)=-4.
                       d(j1,j2,j3)= 6.
                       e(j1,j2,j3)=-4.
                       a(j1,j2,j3)= 1.
                   end if
                  end do
                  end do
                  end do
               else  ! curvilinear case
                if( axis.eq.0 .and. nd.eq.2 )then
                    ! NOTE: This routine fills in the equation at the 2ND GHOST LINE
                   if( equationToSolve.ne.laplaceEquation )then
                     write(*,'("Ogmg:LSB:ERROR: equation!=laplace")')
                     write(*,'("equationToSolve=",i2)') equationToSolve
                     write(*,'("gridType=",i2)') gridType
                     write(*,'("sparseStencil=",i2)') sparseStencil
                     stop 5054
                   end if
                   nsign = 2*side-1
                   ! write(*,'(''MGLS: neumannAndEquationCurvilinear: a0,a1='',2f6.2)') a0,a1
                   diag=0. ! for now
                   do j3=l3a,l3b
                   do j2=l2a,l2b
                   do j1=l1a,l1b
                    i1=j1+2*is1 ! (i1,i2,i3) is the boundary point
                    i2=j2+2*is2 ! (j1,j2,j3) is the 2nd ghost line
                    i3=j3+2*is3
                    if( mask(i1,i2,i3).gt.0 ) then
                       rxi=rx(i1,i2,i3)
                       ryi=ry(i1,i2,i3)
                       sxi=sx(i1,i2,i3)
                       syi=sy(i1,i2,i3)
                       rxr=rxr2(i1,i2,i3)
                       rxs=rxs2(i1,i2,i3)
                       ryr=ryr2(i1,i2,i3)
                       rys=rys2(i1,i2,i3)
                       sxr=sxr2(i1,i2,i3)
                       sxs=sxs2(i1,i2,i3)
                       syr=syr2(i1,i2,i3)
                       sys=sys2(i1,i2,i3)
                       rxx=rxx22(i1,i2,i3)
                       ryy=ryy22(i1,i2,i3)
                       rxrr=rxrr2(i1,i2,i3)
                       rxrs=rxrs2(i1,i2,i3)
                       rxss=rxss2(i1,i2,i3)
                       ryrr=ryrr2(i1,i2,i3)
                       ryrs=ryrs2(i1,i2,i3)
                       ryss=ryss2(i1,i2,i3)
                       sxx=sxx22(i1,i2,i3)
                       syy=syy22(i1,i2,i3)
                       sxrr=sxrr2(i1,i2,i3)
                       sxrs=sxrs2(i1,i2,i3)
                       sxss=sxss2(i1,i2,i3)
                       syrr=syrr2(i1,i2,i3)
                       syrs=syrs2(i1,i2,i3)
                       syss=syss2(i1,i2,i3)
                       rxxr=rxi*rxrr+rxr*rxr + sxi*rxrs + sxr*rxs
                       ryyr=ryi*ryrr+ryr*ryr + syi*ryrs + syr*rys
                       rxxs=rxi*rxrs+rxs*rxr + sxi*rxss + sxs*rxs
                       ryys=ryi*ryrs+rys*ryr + syi*ryss + sys*rys
                       sxxr=rxi*sxrr+rxr*sxr + sxi*sxrs + sxr*sxs
                       syyr=ryi*syrr+ryr*syr + syi*syrs + syr*sys
                       sxxs=rxi*sxrs+rxs*sxr + sxi*sxss + sxs*sxs
                       syys=ryi*syrs+rys*syr + syi*syss + sys*sys
                       alpha1=a1*nsign  ! nsign=2*side-1
                       alpha2=a1*nsign
                        rxNormI=1./sqrt(rxi**2+ryi**2)
                        rxNormIs=-(rxi*rxs+ryi*rys)*rxNormI**3
                        rxNormIss=-(rxi*rxss+ryi*ryss+rxs*rxs+rys*rys)*
     & rxNormI**3 -3.*(rxi*rxs+ryi*rys)*rxNormI**2*rxNormIs
                        n1=rxi*rxNormI
                        n1s=rxs*rxNormI + rxi*rxNormIs
                        n1ss=rxss*rxNormI + 2.*rxs*rxNormIs + rxi*
     & rxNormIss
                        n2=ryi*rxNormI
                        n2s=rys*rxNormI + ryi*rxNormIs
                        n2ss=ryss*rxNormI + 2.*rys*rxNormIs + ryi*
     & rxNormIss
                        an1=alpha1*(n1*rxi+n2*ryi)
                        an2=alpha2*(n1*sxi+n2*syi)
                        an1s=alpha1*(n1*rxs+n2*rys+n1s*rxi+n2s*ryi)
                        an1ss=alpha1*(n1*rxss+n2*ryss+2.*(n1s*rxs+n2s*
     & rys)+n1ss*rxi+n2ss*ryi)
                        an2s=alpha2*(n1*sxs+n2*sys + n1s*sxi+n2s*syi)
                        an2ss=alpha2*(n1*sxss+n2*syss + 2.*(n1s*sxs+
     & n2s*sys) + n1ss*sxi+n2ss*syi)
                       c11=rxi**2+ryi**2
                       c11r=2.*(rxi*rxr+ryi*ryr)
                       c11s=2.*(rxi*rxs+ryi*rys)
                       c12=2.*(rxi*sxi+ryi*syi)
                       c12r=2.*(rxr*sxi+rxi*sxr + ryr*syi+ ryi*syr)
                       c12s=2.*(rxs*sxi+rxi*sxs + rys*syi+ ryi*sys)
                       c22=sxi**2+syi**2
                       c22r=2.*(sxi*sxr+syi*syr)
                       c22s=2.*(sxi*sxs+syi*sys)
                       c1=rxx+ryy
                       c1r=rxxr+ryyr
                       c1s=rxxs+ryys
                       c2=sxx+syy
                       c2r=sxxr+syyr
                       c2s=sxxs+syys
                       c0=0.
                       c0r=0.
                       c0s=0.
c Coefficients of u(i1-2,i2,i3) u(i1-1,i2,i3) u(i1,i2,i3) u(i1+1,i2,i3) u(i1+2,i2,i3)
c um2=-1/2/dr**3
c um1=1/dr**3+1/dr**2*br2
c u0 =-b0-2/dr**2*br2
c up1=1/dr**2*br2-1/dr**3
c up2=1/2/dr**3
                       b0=-(c12*c1*an1**2*an2*c0+c1s*an1*a0*c12**2*an2-
     & c22s*an1*c12**2*an1s*a0-c0s*an1**2*c12**2*an2+2*an2s*c12**3*
     & an1s*a0+c12**2*an1ss*a0*c22*an1-2*c12**2*an2s*c1*an1*a0-c0r*
     & an1**3*c11*c22+c0r*an1**2*c11*c12*an2+c1r*an1**2*c11*a0*c22-
     & c22r*an1**2*c11*c1*a0-c1r*an1*c11*a0*c12*an2-c12r*an1**2*c11*
     & an2*c0+c12r*an1*c11*an2*c1*a0-c2*an1**2*c11*an2*c0+c2*an1*c11*
     & an2*c1*a0+c22r*an1**3*c11*c0-c22**2*c11*an1ss*a0*an1+c22*c11*
     & c1*an1*a0**2-c22*c11*c12*an1s*a0**2-2*c22*c11*an2s*c0*an1**2+2*
     & c22**2*c11*an1s**2*a0-c12*c1s*an1**2*a0*c22-c12*c22s*an1**3*c0-
     & c12*c2*an1**3*c0-c12*c1**2*an1*an2*a0+c12*c2*an1**2*c1*a0+2*
     & c12**2*an2s*c0*an1**2-an1ss*a0*c12**3*an2-2*c12**2*an1s*an2*c0*
     & an1+c12**3*an1s*a0**2+2*c22*c11*an2s*c1*an1*a0-2*c22*c11*an2s*
     & c12*an1s*a0+c12*c12s*an1*an1s*a0*c22-c12*c12s*an1*an2*c1*a0+
     & c12*c0s*an1**3*c22+c12*c1*an1*an1s*a0*c22+c12**2*a0*c0*an1**2-
     & 2*c12**2*an1s**2*a0*c22-c12**2*c1*an1*a0**2+2*c12**2*an1s*an2*
     & c1*a0+c22r*an1*c11*c12*an1s*a0-c12r*an1*c11*an1s*a0*c22-c0*an1*
     & c11*a0*c12*an2-c2*an1*c11*an1s*a0*c22+c22*c11*an1ss*a0*c12*an2-
     & 2*c22*c11*an1s*an2*c1*a0+2*c22*c11*an1s*an2*c0*an1+c12*c12s*
     & an1**2*an2*c0+c12*c22s*an1**2*c1*a0-c2*an1*c12**2*an1s*a0)/an1*
     & *2/(c12*an2-c22*an1)/c11**2
                       b1=1/an1**2*(2*c12**2*an2s*c1*an1*an2+c12*c12s*
     & an1**2*an2s*c22+c12*c12s*an1**2*a0*c22+c22r*an1**2*c11*c12*a0-
     & c22r*an1*c11*c12*an1s*an2+c22r*an1**2*c11*c1*an2+c1r*an1*c11*
     & an2**2*c12-c1r*an1**2*c11*an2*c22-c12*c12s*an1**2*an2*c2-c12*
     & c12s*an1*an1s*an2*c22-c2r*an1**2*c11*c12*an2+c12**2*a0*c1*an1*
     & an2+3*c12**2*an1s*an2*c2*an1-2*c12**2*an1s*an2s*an1*c22+2*c12**
     & 3*an2s**2*an1-c12r*an1*c11*c1*an2**2-c2*an1*c11*c1*an2**2+c0*
     & an1*c11*an2**2*c12-c0*an1**2*c11*an2*c22+c12r*an1**2*c11*an2*
     & c2-3*c22*c11*an2s*c12*a0*an1+2*c22*c11*an2s*c12*an1s*an2+c2**2*
     & an1**2*c11*an2-c22*c11*c12*a0**2*an1+2*c22*c11*an1s*c1*an2**2-
     & c22*c11*an1ss*an2**2*c12-2*c22*c11*an2s*c1*an1*an2+c22*c11*
     & an2ss*an1*c12*an2+c22*c11*a0*c12*an1s*an2-c22*c11*an1s*an2*c2*
     & an1+2*c22**2*c11*an1s*an2s*an1+2*c22**2*c11*an1s*a0*an1+c22**2*
     & c11*an1ss*an2*an1+3*an2s*c12**3*a0*an1-2*an2s*c12**3*an1s*an2-
     & an2ss*an1*c12**3*an2+2*c12**2*an1s**2*an2*c22-2*c12**2*an1s*c1*
     & an2**2+c12*c1**2*an1*an2**2-c12*c0*an1**3*c22+c12*c22s*an1**3*
     & c2-2*c12**2*an1s*a0*an1*c22-c12**2*an1ss*an2*c22*an1-a0*c12**3*
     & an1s*an2+c12**2*an2ss*an1**2*c22-2*c12**2*a0*c2*an1**2-3*c12**
     & 2*an2s*c2*an1**2-2*c12*c1*an1**2*an2*c2+c12*c1*an1**2*an2s*c22+
     & c12*c1*an1**2*a0*c22-2*c22*c11*c12*an2s**2*an1+c22*c11*an2s*c2*
     & an1**2-c12*c22s*an1**2*c1*an2+c12*c1s*an1**2*an2*c22-c22*c11*
     & a0*c1*an1*an2-c12r*an1**2*c11*an2s*c22-c12r*an1**2*c11*a0*c22+
     & c12r*an1*c11*an1s*an2*c22+c22r*an1**2*c11*c12*an2s+c12**3*a0**
     & 2*an1-c12*c2s*an1**3*c22-c22**2*c11*an2ss*an1**2-2*c22**2*c11*
     & an1s**2*an2-c22r*an1**3*c11*c2+c2r*an1**3*c11*c22-c12*c1*an1*
     & an1s*an2*c22+c12*c12s*an1*c1*an2**2+c22s*an1*c12**2*an1s*an2-
     & c1s*an1*an2**2*c12**2+c2s*an1**2*c12**2*an2-c22s*an1**2*c12**2*
     & a0+c0*an1**2*c12**2*an2-c22s*an1**2*c12**2*an2s+c12*c2**2*an1**
     & 3+an1ss*an2**2*c12**3)/(c12*an2-c22*an1)/c11**2
                       br2=1/an1*(-c11s*an1*c12**2*an2+2*c12**2*an2s*
     & c11*an1+c12**2*a0*c11*an1+2*c12*c1*an1*an2*c11+c12*c12s*an1*
     & an2*c11-c12*c2*an1**2*c11-c12*c22s*an1**2*c11+c12*c11s*an1**2*
     & c22-2*c22*c11**2*an2s*an1-c22*c11**2*a0*an1+2*c22*c11**2*an1s*
     & an2-c1*an1**2*c11*c22-c2*an1*c11**2*an2+c22r*an1**2*c11**2-
     & c12r*an1*c11**2*an2+c11r*an1*c11*c12*an2-c11r*an1**2*c11*c22-2*
     & c12**2*an1s*an2*c11)/(c12*an2-c22*an1)/c11**2
                       b3=-(an2*c12**2-an2*c22*c11-c22*an1*c12)
     & /an1/c11**2
                       bf=1/an1**2*(2*c12**2*an1s*an1*c22-c12*c1*an1**
     & 2*c22-c12*c12s*an1**2*c22+2*c22*c11*an2s*c12*an1+c22*c11*a0*
     & c12*an1-2*c22**2*c11*an1s*an1+c2*an1**2*c11*c22+c12r*an1**2*
     & c11*c22-c22r*an1**2*c11*c12-2*an2s*c12**3*an1-a0*c12**3*an1+c2*
     & an1**2*c12**2+c22s*an1**2*c12**2)/(c12*an2-c22*an1)/c11**2*gs+
     & 1/an1**2*(-c22*c11*an1*c12*an2+an1*c12**3*an2-c12**2*an1**2*
     & c22+c22**2*c11*an1**2)/(c12*an2-c22*an1)/c11**2*gss+1/an1**2*(-
     & 2*c12**2*an1s*an2*an1+c12*c1*an1**2*an2+c12*c12s*an1**2*an2+2*
     & c22*c11*an1s*an2*an1-c22*c11*a0*an1**2-2*c22*c11*an2s*an1**2-
     & c2*an1**2*c11*an2+c22r*an1**3*c11-c12r*an1**2*c11*an2+c12**2*
     & a0*an1**2+2*c12**2*an2s*an1**2-c12*c2*an1**3-c12*c22s*an1**3)/(
     & c12*an2-c22*an1)/c11**2*ff+1/an1**2*(-an1**2*c12**2*an2+c12*
     & an1**3*c22)/(c12*an2-c22*an1)/c11**2*ffs+1/an1**2*(-an1**3*c11*
     & c22+an1**2*c11*c12*an2)/(c12*an2-c22*an1)/c11**2*ffr+1/an1**2*(
     & -2*c12**2*an2s*c1*an1-c22s*an1*c12**2*an1s-c2*an1*c12**2*an1s+
     & c1s*an1*c12**2*an2-an1ss*c12**3*an2-2*c12**2*an1s**2*c22+c22r*
     & an1*c11*c12*an1s-c12r*an1*c11*an1s*c22+c12r*an1*c11*an2*c1-
     & c22r*an1**2*c11*c1-c0*an1*c11*c12*an2+2*an2s*c12**3*an1s-c2*
     & an1*c11*an1s*c22-c12*c1s*an1**2*c22+c12*c22s*an1**2*c1+c2*an1*
     & c11*an2*c1+c12**2*an1ss*c22*an1-c12**2*a0*c1*an1+c22*c11*an1ss*
     & c12*an2-2*c22*c11*an1s*an2*c1+c22*c11*a0*c1*an1-c22**2*c11*
     & an1ss*an1+c0*an1**2*c11*c22+c12*c12s*an1*an1s*c22-c12*c1**2*
     & an1*an2-c12*c12s*an1*an2*c1+c12*c2*an1**2*c1-2*c22*c11*an2s*
     & c12*an1s+a0*c12**3*an1s+c12*c1*an1*an1s*c22+2*c12**2*an1s*an2*
     & c1+2*c22**2*c11*an1s**2+2*c22*c11*an2s*c1*an1-c22*c11*a0*c12*
     & an1s-c1r*an1*c11*c12*an2+c1r*an1**2*c11*c22)/(c12*an2-c22*an1)
     & /c11**2*g
                      d(j1,j2,j3)=-.5/dr(axis)**3
                      e(j1,j2,j3)= 1./dr(axis)**3    +br2/dr(axis)**2
                      a(j1,j2,j3)=                -2.*br2/dr(axis)**2 -
     &  b0
                      b(j1,j2,j3)=-1./dr(axis)**3    +br2/dr(axis)**2
                      c(j1,j2,j3)= .5/dr(axis)**3
                      ! write(*,'("LS:neumannBC: myid=",i3," side,axis=",i2,i2," j1,j2=",i3,i3," b0,b1,b3,br2 =",4e11.3)') myid,side,axis,j1,j2, b0,b1,b3,br2
                      ! write(*,'("            : myid=",i3," d,e,a,b,c=",5e11.3)') myid,d(j1,j2,j3),e(j1,j2,j3),a(j1,j2,j3),b(j1,j2,j3),c(j1,j2,j3)
                    else if( mask(i1,i2,i3).lt.0 ) then
                        b(j1,j2,j3)= 1.
                        c(j1,j2,j3)=-4.
                        d(j1,j2,j3)= 6.
                        e(j1,j2,j3)=-4.
                        a(j1,j2,j3)= 1.
                    end if
                   end do
                   end do
                   end do
                else if( axis.eq.1 .and. nd.eq.2 )then
                    ! NOTE: This routine fills in the equation at the 2ND GHOST LINE
                   if( equationToSolve.ne.laplaceEquation )then
                     write(*,'("Ogmg:LSB:ERROR: equation!=laplace")')
                     write(*,'("equationToSolve=",i2)') equationToSolve
                     write(*,'("gridType=",i2)') gridType
                     write(*,'("sparseStencil=",i2)') sparseStencil
                     stop 5054
                   end if
                   nsign = 2*side-1
                   ! write(*,'(''MGLS: neumannAndEquationCurvilinear: a0,a1='',2f6.2)') a0,a1
                   diag=0. ! for now
                   do j3=l3a,l3b
                   do j2=l2a,l2b
                   do j1=l1a,l1b
                    i1=j1+2*is1 ! (i1,i2,i3) is the boundary point
                    i2=j2+2*is2 ! (j1,j2,j3) is the 2nd ghost line
                    i3=j3+2*is3
                    if( mask(i1,i2,i3).gt.0 ) then
                       rxi=rx(i1,i2,i3)
                       ryi=ry(i1,i2,i3)
                       sxi=sx(i1,i2,i3)
                       syi=sy(i1,i2,i3)
                       rxr=rxr2(i1,i2,i3)
                       rxs=rxs2(i1,i2,i3)
                       ryr=ryr2(i1,i2,i3)
                       rys=rys2(i1,i2,i3)
                       sxr=sxr2(i1,i2,i3)
                       sxs=sxs2(i1,i2,i3)
                       syr=syr2(i1,i2,i3)
                       sys=sys2(i1,i2,i3)
                       rxx=rxx22(i1,i2,i3)
                       ryy=ryy22(i1,i2,i3)
                       rxrr=rxrr2(i1,i2,i3)
                       rxrs=rxrs2(i1,i2,i3)
                       rxss=rxss2(i1,i2,i3)
                       ryrr=ryrr2(i1,i2,i3)
                       ryrs=ryrs2(i1,i2,i3)
                       ryss=ryss2(i1,i2,i3)
                       sxx=sxx22(i1,i2,i3)
                       syy=syy22(i1,i2,i3)
                       sxrr=sxrr2(i1,i2,i3)
                       sxrs=sxrs2(i1,i2,i3)
                       sxss=sxss2(i1,i2,i3)
                       syrr=syrr2(i1,i2,i3)
                       syrs=syrs2(i1,i2,i3)
                       syss=syss2(i1,i2,i3)
                       rxxr=rxi*rxrr+rxr*rxr + sxi*rxrs + sxr*rxs
                       ryyr=ryi*ryrr+ryr*ryr + syi*ryrs + syr*rys
                       rxxs=rxi*rxrs+rxs*rxr + sxi*rxss + sxs*rxs
                       ryys=ryi*ryrs+rys*ryr + syi*ryss + sys*rys
                       sxxr=rxi*sxrr+rxr*sxr + sxi*sxrs + sxr*sxs
                       syyr=ryi*syrr+ryr*syr + syi*syrs + syr*sys
                       sxxs=rxi*sxrs+rxs*sxr + sxi*sxss + sxs*sxs
                       syys=ryi*syrs+rys*syr + syi*syss + sys*sys
                       alpha1=a1*nsign  ! nsign=2*side-1
                       alpha2=a1*nsign
                        sxNormI=1./sqrt(sxi**2+syi**2)
                        sxNormIr=-(sxi*sxr+syi*syr)*sxNormI**3
                        sxNormIrr=-(sxi*sxrr+syi*syrr+sxr*sxr+syr*syr)*
     & sxNormI**3 -3.*(sxi*sxr+syi*syr)*sxNormI**2*sxNormIr
                        n1=sxi*sxNormI
                        n1r=sxr*sxNormI + sxi*sxNormIr
                        n1rr=sxrr*sxNormI + 2.*sxr*sxNormIr + sxi*
     & sxNormIrr
                        n2=syi*sxNormI
                        n2r=syr*sxNormI + syi*sxNormIr
                        n2rr=syrr*sxNormI + 2.*syr*sxNormIr + syi*
     & sxNormIrr
                        an1=alpha1*(n1*rxi+n2*ryi)
                        an2=alpha2*(n1*sxi+n2*syi)
                        an1r=alpha1*(n1*rxr+n1r*rxi + n2*ryr+n2r*ryi)
                        an1rr=alpha1*(n1*rxrr+n2*ryrr+ 2.*(n1r*rxr+n2r*
     & ryr) + n1rr*rxi+n2rr*ryi)
                        an2r=alpha2*(n1*sxr+n1r*sxi + n2*syr+n2r*syi)
                        an2rr=alpha2*(n1*sxrr+n2*syrr+ 2.*(n1r*sxr+n2r*
     & syr) + n1rr*sxi+n2rr*syi)
                       c11=rxi**2+ryi**2
                       c11r=2.*(rxi*rxr+ryi*ryr)
                       c11s=2.*(rxi*rxs+ryi*rys)
                       c12=2.*(rxi*sxi+ryi*syi)
                       c12r=2.*(rxr*sxi+rxi*sxr + ryr*syi+ ryi*syr)
                       c12s=2.*(rxs*sxi+rxi*sxs + rys*syi+ ryi*sys)
                       c22=sxi**2+syi**2
                       c22r=2.*(sxi*sxr+syi*syr)
                       c22s=2.*(sxi*sxs+syi*sys)
                       c1=rxx+ryy
                       c1r=rxxr+ryyr
                       c1s=rxxs+ryys
                       c2=sxx+syy
                       c2r=sxxr+syyr
                       c2s=sxxs+syys
                       c0=0.
                       c0r=0.
                       c0s=0.
c Coefficients of u(i1-2,i2,i3) u(i1-1,i2,i3) u(i1,i2,i3) u(i1+1,i2,i3) u(i1+2,i2,i3)
c um2=-1/2/dr**3
c um1=1/dr**3+1/dr**2*br2
c u0 =-b0-2/dr**2*br2
c up1=1/dr**2*br2-1/dr**3
c up2=1/2/dr**3
                       b0=-(c12*c2*an2**2*an1*c0+c2r*an2*a0*c12**2*an1-
     & c11r*an2*c12**2*an2r*a0-c0r*an2**2*c12**2*an1+2*an1r*c12**3*
     & an2r*a0+c12**2*an2rr*a0*c11*an2-2*c12**2*an1r*c2*an2*a0-c0s*
     & an2**3*c22*c11+c0s*an2**2*c22*c12*an1+c2s*an2**2*c22*a0*c11-
     & c11s*an2**2*c22*c2*a0-c2s*an2*c22*a0*c12*an1-c12s*an2**2*c22*
     & an1*c0+c12s*an2*c22*an1*c2*a0-c1*an2**2*c22*an1*c0+c1*an2*c22*
     & an1*c2*a0+c11s*an2**3*c22*c0-c11**2*c22*an2rr*a0*an2+c11*c22*
     & c2*an2*a0**2-c11*c22*c12*an2r*a0**2-2*c11*c22*an1r*c0*an2**2+2*
     & c11**2*c22*an2r**2*a0-c12*c2r*an2**2*a0*c11-c12*c11r*an2**3*c0-
     & c12*c1*an2**3*c0-c12*c2**2*an2*an1*a0+c12*c1*an2**2*c2*a0+2*
     & c12**2*an1r*c0*an2**2-an2rr*a0*c12**3*an1-2*c12**2*an2r*an1*c0*
     & an2+c12**3*an2r*a0**2+2*c11*c22*an1r*c2*an2*a0-2*c11*c22*an1r*
     & c12*an2r*a0+c12*c12r*an2*an2r*a0*c11-c12*c12r*an2*an1*c2*a0+
     & c12*c0r*an2**3*c11+c12*c2*an2*an2r*a0*c11+c12**2*a0*c0*an2**2-
     & 2*c12**2*an2r**2*a0*c11-c12**2*c2*an2*a0**2+2*c12**2*an2r*an1*
     & c2*a0+c11s*an2*c22*c12*an2r*a0-c12s*an2*c22*an2r*a0*c11-c0*an2*
     & c22*a0*c12*an1-c1*an2*c22*an2r*a0*c11+c11*c22*an2rr*a0*c12*an1-
     & 2*c11*c22*an2r*an1*c2*a0+2*c11*c22*an2r*an1*c0*an2+c12*c12r*
     & an2**2*an1*c0+c12*c11r*an2**2*c2*a0-c1*an2*c12**2*an2r*a0)/an2*
     & *2/(c12*an1-c11*an2)/c22**2
                       b1=1/an2**2*(2*c12**2*an1r*c2*an2*an1+c12*c12r*
     & an2**2*an1r*c11+c12*c12r*an2**2*a0*c11+c11s*an2**2*c22*c12*a0-
     & c11s*an2*c22*c12*an2r*an1+c11s*an2**2*c22*c2*an1+c2s*an2*c22*
     & an1**2*c12-c2s*an2**2*c22*an1*c11-c12*c12r*an2**2*an1*c1-c12*
     & c12r*an2*an2r*an1*c11-c1s*an2**2*c22*c12*an1+c12**2*a0*c2*an2*
     & an1+3*c12**2*an2r*an1*c1*an2-2*c12**2*an2r*an1r*an2*c11+2*c12**
     & 3*an1r**2*an2-c12s*an2*c22*c2*an1**2-c1*an2*c22*c2*an1**2+c0*
     & an2*c22*an1**2*c12-c0*an2**2*c22*an1*c11+c12s*an2**2*c22*an1*
     & c1-3*c11*c22*an1r*c12*a0*an2+2*c11*c22*an1r*c12*an2r*an1+c1**2*
     & an2**2*c22*an1-c11*c22*c12*a0**2*an2+2*c11*c22*an2r*c2*an1**2-
     & c11*c22*an2rr*an1**2*c12-2*c11*c22*an1r*c2*an2*an1+c11*c22*
     & an1rr*an2*c12*an1+c11*c22*a0*c12*an2r*an1-c11*c22*an2r*an1*c1*
     & an2+2*c11**2*c22*an2r*an1r*an2+2*c11**2*c22*an2r*a0*an2+c11**2*
     & c22*an2rr*an1*an2+3*an1r*c12**3*a0*an2-2*an1r*c12**3*an2r*an1-
     & an1rr*an2*c12**3*an1+2*c12**2*an2r**2*an1*c11-2*c12**2*an2r*c2*
     & an1**2+c12*c2**2*an2*an1**2-c12*c0*an2**3*c11+c12*c11r*an2**3*
     & c1-2*c12**2*an2r*a0*an2*c11-c12**2*an2rr*an1*c11*an2-a0*c12**3*
     & an2r*an1+c12**2*an1rr*an2**2*c11-2*c12**2*a0*c1*an2**2-3*c12**
     & 2*an1r*c1*an2**2-2*c12*c2*an2**2*an1*c1+c12*c2*an2**2*an1r*c11+
     & c12*c2*an2**2*a0*c11-2*c11*c22*c12*an1r**2*an2+c11*c22*an1r*c1*
     & an2**2-c12*c11r*an2**2*c2*an1+c12*c2r*an2**2*an1*c11-c11*c22*
     & a0*c2*an2*an1-c12s*an2**2*c22*an1r*c11-c12s*an2**2*c22*a0*c11+
     & c12s*an2*c22*an2r*an1*c11+c11s*an2**2*c22*c12*an1r+c12**3*a0**
     & 2*an2-c12*c1r*an2**3*c11-c11**2*c22*an1rr*an2**2-2*c11**2*c22*
     & an2r**2*an1-c11s*an2**3*c22*c1+c1s*an2**3*c22*c11-c12*c2*an2*
     & an2r*an1*c11+c12*c12r*an2*c2*an1**2+c11r*an2*c12**2*an2r*an1-
     & c2r*an2*an1**2*c12**2+c1r*an2**2*c12**2*an1-c11r*an2**2*c12**2*
     & a0+c0*an2**2*c12**2*an1-c11r*an2**2*c12**2*an1r+c12*c1**2*an2**
     & 3+an2rr*an1**2*c12**3)/(c12*an1-c11*an2)/c22**2
                       br2=1/an2*(-c22r*an2*c12**2*an1+2*c12**2*an1r*
     & c22*an2+c12**2*a0*c22*an2+2*c12*c2*an2*an1*c22+c12*c12r*an2*
     & an1*c22-c12*c1*an2**2*c22-c12*c11r*an2**2*c22+c12*c22r*an2**2*
     & c11-2*c11*c22**2*an1r*an2-c11*c22**2*a0*an2+2*c11*c22**2*an2r*
     & an1-c2*an2**2*c22*c11-c1*an2*c22**2*an1+c11s*an2**2*c22**2-
     & c12s*an2*c22**2*an1+c22s*an2*c22*c12*an1-c22s*an2**2*c22*c11-2*
     & c12**2*an2r*an1*c22)/(c12*an1-c11*an2)/c22**2
                       b3=-(an1*c12**2-an1*c11*c22-c11*an2*c12)
     & /an2/c22**2
                       bf=1/an2**2*(2*c12**2*an2r*an2*c11-c12*c2*an2**
     & 2*c11-c12*c12r*an2**2*c11+2*c11*c22*an1r*c12*an2+c11*c22*a0*
     & c12*an2-2*c11**2*c22*an2r*an2+c1*an2**2*c22*c11+c12s*an2**2*
     & c22*c11-c11s*an2**2*c22*c12-2*an1r*c12**3*an2-a0*c12**3*an2+c1*
     & an2**2*c12**2+c11r*an2**2*c12**2)/(c12*an1-c11*an2)/c22**2*gr+
     & 1/an2**2*(-c11*c22*an2*c12*an1+an2*c12**3*an1-c12**2*an2**2*
     & c11+c11**2*c22*an2**2)/(c12*an1-c11*an2)/c22**2*grr+1/an2**2*(-
     & 2*c12**2*an2r*an1*an2+c12*c2*an2**2*an1+c12*c12r*an2**2*an1+2*
     & c11*c22*an2r*an1*an2-c11*c22*a0*an2**2-2*c11*c22*an1r*an2**2-
     & c1*an2**2*c22*an1+c11s*an2**3*c22-c12s*an2**2*c22*an1+c12**2*
     & a0*an2**2+2*c12**2*an1r*an2**2-c12*c1*an2**3-c12*c11r*an2**3)/(
     & c12*an1-c11*an2)/c22**2*ff+1/an2**2*(-an2**2*c12**2*an1+c12*
     & an2**3*c11)/(c12*an1-c11*an2)/c22**2*ffr+1/an2**2*(-an2**3*c22*
     & c11+an2**2*c22*c12*an1)/(c12*an1-c11*an2)/c22**2*ffs+1/an2**2*(
     & -2*c12**2*an1r*c2*an2-c11r*an2*c12**2*an2r-c1*an2*c12**2*an2r+
     & c2r*an2*c12**2*an1-an2rr*c12**3*an1-2*c12**2*an2r**2*c11+c11s*
     & an2*c22*c12*an2r-c12s*an2*c22*an2r*c11+c12s*an2*c22*an1*c2-
     & c11s*an2**2*c22*c2-c0*an2*c22*c12*an1+2*an1r*c12**3*an2r-c1*
     & an2*c22*an2r*c11-c12*c2r*an2**2*c11+c12*c11r*an2**2*c2+c1*an2*
     & c22*an1*c2+c12**2*an2rr*c11*an2-c12**2*a0*c2*an2+c11*c22*an2rr*
     & c12*an1-2*c11*c22*an2r*an1*c2+c11*c22*a0*c2*an2-c11**2*c22*
     & an2rr*an2+c0*an2**2*c22*c11+c12*c12r*an2*an2r*c11-c12*c2**2*
     & an2*an1-c12*c12r*an2*an1*c2+c12*c1*an2**2*c2-2*c11*c22*an1r*
     & c12*an2r+a0*c12**3*an2r+c12*c2*an2*an2r*c11+2*c12**2*an2r*an1*
     & c2+2*c11**2*c22*an2r**2+2*c11*c22*an1r*c2*an2-c11*c22*a0*c12*
     & an2r-c2s*an2*c22*c12*an1+c2s*an2**2*c22*c11)/(c12*an1-c11*an2)
     & /c22**2*g
                      d(j1,j2,j3)=-.5/dr(axis)**3
                      e(j1,j2,j3)= 1./dr(axis)**3    +br2/dr(axis)**2
                      a(j1,j2,j3)=                -2.*br2/dr(axis)**2 -
     &  b0
                      b(j1,j2,j3)=-1./dr(axis)**3    +br2/dr(axis)**2
                      c(j1,j2,j3)= .5/dr(axis)**3
                      ! write(*,'("LS:neumannBC: myid=",i3," side,axis=",i2,i2," j1,j2=",i3,i3," b0,b1,b3,br2 =",4e11.3)') myid,side,axis,j1,j2, b0,b1,b3,br2
                      ! write(*,'("            : myid=",i3," d,e,a,b,c=",5e11.3)') myid,d(j1,j2,j3),e(j1,j2,j3),a(j1,j2,j3),b(j1,j2,j3),c(j1,j2,j3)
                    else if( mask(i1,i2,i3).lt.0 ) then
                        b(j1,j2,j3)= 1.
                        c(j1,j2,j3)=-4.
                        d(j1,j2,j3)= 6.
                        e(j1,j2,j3)=-4.
                        a(j1,j2,j3)= 1.
                    end if
                   end do
                   end do
                   end do

                else if( axis.eq.0 .and. nd.eq.3 )then
                   if( equationToSolve.ne.laplaceEquation )then
                     write(*,'("Ogmg:LSB:ERROR: equation!=laplace")')
                     write(*,'("equationToSolve=",i2)') equationToSolve
                     write(*,'("gridType=",i2)') gridType
                     write(*,'("sparseStencil=",i2)') sparseStencil
                     stop 5054
                   end if
                   nsign = 2*side-1
                   ! write(*,'(''MGLS: neumannAndEquationCurvilinear: a0,a1='',2f6.2)') a0,a1
                   diag=0. ! for now
                   do j3=l3a,l3b
                   do j2=l2a,l2b
                   do j1=l1a,l1b
                    i1=j1+2*is1 ! (i1,i2,i3) is the boundary point
                    i2=j2+2*is2 ! (j1,j2,j3) is the 2nd ghost line
                    i3=j3+2*is3
                    if( mask(i1,i2,i3).gt.0 ) then
                     ! We need 2 parameteric and 1 real derivative. Do this for now: 
                      ! this next call will define the jacobian and its derivatives (parameteric and spatial)
                      ajrx = rsxy(i1,i2,i3,0,0)
                      ajrxr = (rsxy(i1-2,i2,i3,0,0)-8.*rsxy(i1-1,i2,i3,
     & 0,0)+8.*rsxy(i1+1,i2,i3,0,0)-rsxy(i1+2,i2,i3,0,0))/(12.*dr(0))
                      ajrxs = (rsxy(i1,i2-2,i3,0,0)-8.*rsxy(i1,i2-1,i3,
     & 0,0)+8.*rsxy(i1,i2+1,i3,0,0)-rsxy(i1,i2+2,i3,0,0))/(12.*dr(1))
                      ajrxt = (rsxy(i1,i2,i3-2,0,0)-8.*rsxy(i1,i2,i3-1,
     & 0,0)+8.*rsxy(i1,i2,i3+1,0,0)-rsxy(i1,i2,i3+2,0,0))/(12.*dr(2))
                      ajrxrr = (-rsxy(i1-2,i2,i3,0,0)+16.*rsxy(i1-1,i2,
     & i3,0,0)-30.*rsxy(i1,i2,i3,0,0)+16.*rsxy(i1+1,i2,i3,0,0)-rsxy(
     & i1+2,i2,i3,0,0))/(12.*dr(0)**2)
                      ajrxrs = ((rsxy(i1-2,i2-2,i3,0,0)-8.*rsxy(i1-2,
     & i2-1,i3,0,0)+8.*rsxy(i1-2,i2+1,i3,0,0)-rsxy(i1-2,i2+2,i3,0,0))
     & /(12.*dr(1))-8.*(rsxy(i1-1,i2-2,i3,0,0)-8.*rsxy(i1-1,i2-1,i3,0,
     & 0)+8.*rsxy(i1-1,i2+1,i3,0,0)-rsxy(i1-1,i2+2,i3,0,0))/(12.*dr(1)
     & )+8.*(rsxy(i1+1,i2-2,i3,0,0)-8.*rsxy(i1+1,i2-1,i3,0,0)+8.*rsxy(
     & i1+1,i2+1,i3,0,0)-rsxy(i1+1,i2+2,i3,0,0))/(12.*dr(1))-(rsxy(i1+
     & 2,i2-2,i3,0,0)-8.*rsxy(i1+2,i2-1,i3,0,0)+8.*rsxy(i1+2,i2+1,i3,
     & 0,0)-rsxy(i1+2,i2+2,i3,0,0))/(12.*dr(1)))/(12.*dr(0))
                      ajrxss = (-rsxy(i1,i2-2,i3,0,0)+16.*rsxy(i1,i2-1,
     & i3,0,0)-30.*rsxy(i1,i2,i3,0,0)+16.*rsxy(i1,i2+1,i3,0,0)-rsxy(
     & i1,i2+2,i3,0,0))/(12.*dr(1)**2)
                      ajrxrt = ((rsxy(i1-2,i2,i3-2,0,0)-8.*rsxy(i1-2,
     & i2,i3-1,0,0)+8.*rsxy(i1-2,i2,i3+1,0,0)-rsxy(i1-2,i2,i3+2,0,0))
     & /(12.*dr(2))-8.*(rsxy(i1-1,i2,i3-2,0,0)-8.*rsxy(i1-1,i2,i3-1,0,
     & 0)+8.*rsxy(i1-1,i2,i3+1,0,0)-rsxy(i1-1,i2,i3+2,0,0))/(12.*dr(2)
     & )+8.*(rsxy(i1+1,i2,i3-2,0,0)-8.*rsxy(i1+1,i2,i3-1,0,0)+8.*rsxy(
     & i1+1,i2,i3+1,0,0)-rsxy(i1+1,i2,i3+2,0,0))/(12.*dr(2))-(rsxy(i1+
     & 2,i2,i3-2,0,0)-8.*rsxy(i1+2,i2,i3-1,0,0)+8.*rsxy(i1+2,i2,i3+1,
     & 0,0)-rsxy(i1+2,i2,i3+2,0,0))/(12.*dr(2)))/(12.*dr(0))
                      ajrxst = ((rsxy(i1,i2-2,i3-2,0,0)-8.*rsxy(i1,i2-
     & 2,i3-1,0,0)+8.*rsxy(i1,i2-2,i3+1,0,0)-rsxy(i1,i2-2,i3+2,0,0))/(
     & 12.*dr(2))-8.*(rsxy(i1,i2-1,i3-2,0,0)-8.*rsxy(i1,i2-1,i3-1,0,0)
     & +8.*rsxy(i1,i2-1,i3+1,0,0)-rsxy(i1,i2-1,i3+2,0,0))/(12.*dr(2))+
     & 8.*(rsxy(i1,i2+1,i3-2,0,0)-8.*rsxy(i1,i2+1,i3-1,0,0)+8.*rsxy(
     & i1,i2+1,i3+1,0,0)-rsxy(i1,i2+1,i3+2,0,0))/(12.*dr(2))-(rsxy(i1,
     & i2+2,i3-2,0,0)-8.*rsxy(i1,i2+2,i3-1,0,0)+8.*rsxy(i1,i2+2,i3+1,
     & 0,0)-rsxy(i1,i2+2,i3+2,0,0))/(12.*dr(2)))/(12.*dr(1))
                      ajrxtt = (-rsxy(i1,i2,i3-2,0,0)+16.*rsxy(i1,i2,
     & i3-1,0,0)-30.*rsxy(i1,i2,i3,0,0)+16.*rsxy(i1,i2,i3+1,0,0)-rsxy(
     & i1,i2,i3+2,0,0))/(12.*dr(2)**2)
                      ajsx = rsxy(i1,i2,i3,1,0)
                      ajsxr = (rsxy(i1-2,i2,i3,1,0)-8.*rsxy(i1-1,i2,i3,
     & 1,0)+8.*rsxy(i1+1,i2,i3,1,0)-rsxy(i1+2,i2,i3,1,0))/(12.*dr(0))
                      ajsxs = (rsxy(i1,i2-2,i3,1,0)-8.*rsxy(i1,i2-1,i3,
     & 1,0)+8.*rsxy(i1,i2+1,i3,1,0)-rsxy(i1,i2+2,i3,1,0))/(12.*dr(1))
                      ajsxt = (rsxy(i1,i2,i3-2,1,0)-8.*rsxy(i1,i2,i3-1,
     & 1,0)+8.*rsxy(i1,i2,i3+1,1,0)-rsxy(i1,i2,i3+2,1,0))/(12.*dr(2))
                      ajsxrr = (-rsxy(i1-2,i2,i3,1,0)+16.*rsxy(i1-1,i2,
     & i3,1,0)-30.*rsxy(i1,i2,i3,1,0)+16.*rsxy(i1+1,i2,i3,1,0)-rsxy(
     & i1+2,i2,i3,1,0))/(12.*dr(0)**2)
                      ajsxrs = ((rsxy(i1-2,i2-2,i3,1,0)-8.*rsxy(i1-2,
     & i2-1,i3,1,0)+8.*rsxy(i1-2,i2+1,i3,1,0)-rsxy(i1-2,i2+2,i3,1,0))
     & /(12.*dr(1))-8.*(rsxy(i1-1,i2-2,i3,1,0)-8.*rsxy(i1-1,i2-1,i3,1,
     & 0)+8.*rsxy(i1-1,i2+1,i3,1,0)-rsxy(i1-1,i2+2,i3,1,0))/(12.*dr(1)
     & )+8.*(rsxy(i1+1,i2-2,i3,1,0)-8.*rsxy(i1+1,i2-1,i3,1,0)+8.*rsxy(
     & i1+1,i2+1,i3,1,0)-rsxy(i1+1,i2+2,i3,1,0))/(12.*dr(1))-(rsxy(i1+
     & 2,i2-2,i3,1,0)-8.*rsxy(i1+2,i2-1,i3,1,0)+8.*rsxy(i1+2,i2+1,i3,
     & 1,0)-rsxy(i1+2,i2+2,i3,1,0))/(12.*dr(1)))/(12.*dr(0))
                      ajsxss = (-rsxy(i1,i2-2,i3,1,0)+16.*rsxy(i1,i2-1,
     & i3,1,0)-30.*rsxy(i1,i2,i3,1,0)+16.*rsxy(i1,i2+1,i3,1,0)-rsxy(
     & i1,i2+2,i3,1,0))/(12.*dr(1)**2)
                      ajsxrt = ((rsxy(i1-2,i2,i3-2,1,0)-8.*rsxy(i1-2,
     & i2,i3-1,1,0)+8.*rsxy(i1-2,i2,i3+1,1,0)-rsxy(i1-2,i2,i3+2,1,0))
     & /(12.*dr(2))-8.*(rsxy(i1-1,i2,i3-2,1,0)-8.*rsxy(i1-1,i2,i3-1,1,
     & 0)+8.*rsxy(i1-1,i2,i3+1,1,0)-rsxy(i1-1,i2,i3+2,1,0))/(12.*dr(2)
     & )+8.*(rsxy(i1+1,i2,i3-2,1,0)-8.*rsxy(i1+1,i2,i3-1,1,0)+8.*rsxy(
     & i1+1,i2,i3+1,1,0)-rsxy(i1+1,i2,i3+2,1,0))/(12.*dr(2))-(rsxy(i1+
     & 2,i2,i3-2,1,0)-8.*rsxy(i1+2,i2,i3-1,1,0)+8.*rsxy(i1+2,i2,i3+1,
     & 1,0)-rsxy(i1+2,i2,i3+2,1,0))/(12.*dr(2)))/(12.*dr(0))
                      ajsxst = ((rsxy(i1,i2-2,i3-2,1,0)-8.*rsxy(i1,i2-
     & 2,i3-1,1,0)+8.*rsxy(i1,i2-2,i3+1,1,0)-rsxy(i1,i2-2,i3+2,1,0))/(
     & 12.*dr(2))-8.*(rsxy(i1,i2-1,i3-2,1,0)-8.*rsxy(i1,i2-1,i3-1,1,0)
     & +8.*rsxy(i1,i2-1,i3+1,1,0)-rsxy(i1,i2-1,i3+2,1,0))/(12.*dr(2))+
     & 8.*(rsxy(i1,i2+1,i3-2,1,0)-8.*rsxy(i1,i2+1,i3-1,1,0)+8.*rsxy(
     & i1,i2+1,i3+1,1,0)-rsxy(i1,i2+1,i3+2,1,0))/(12.*dr(2))-(rsxy(i1,
     & i2+2,i3-2,1,0)-8.*rsxy(i1,i2+2,i3-1,1,0)+8.*rsxy(i1,i2+2,i3+1,
     & 1,0)-rsxy(i1,i2+2,i3+2,1,0))/(12.*dr(2)))/(12.*dr(1))
                      ajsxtt = (-rsxy(i1,i2,i3-2,1,0)+16.*rsxy(i1,i2,
     & i3-1,1,0)-30.*rsxy(i1,i2,i3,1,0)+16.*rsxy(i1,i2,i3+1,1,0)-rsxy(
     & i1,i2,i3+2,1,0))/(12.*dr(2)**2)
                      ajtx = rsxy(i1,i2,i3,2,0)
                      ajtxr = (rsxy(i1-2,i2,i3,2,0)-8.*rsxy(i1-1,i2,i3,
     & 2,0)+8.*rsxy(i1+1,i2,i3,2,0)-rsxy(i1+2,i2,i3,2,0))/(12.*dr(0))
                      ajtxs = (rsxy(i1,i2-2,i3,2,0)-8.*rsxy(i1,i2-1,i3,
     & 2,0)+8.*rsxy(i1,i2+1,i3,2,0)-rsxy(i1,i2+2,i3,2,0))/(12.*dr(1))
                      ajtxt = (rsxy(i1,i2,i3-2,2,0)-8.*rsxy(i1,i2,i3-1,
     & 2,0)+8.*rsxy(i1,i2,i3+1,2,0)-rsxy(i1,i2,i3+2,2,0))/(12.*dr(2))
                      ajtxrr = (-rsxy(i1-2,i2,i3,2,0)+16.*rsxy(i1-1,i2,
     & i3,2,0)-30.*rsxy(i1,i2,i3,2,0)+16.*rsxy(i1+1,i2,i3,2,0)-rsxy(
     & i1+2,i2,i3,2,0))/(12.*dr(0)**2)
                      ajtxrs = ((rsxy(i1-2,i2-2,i3,2,0)-8.*rsxy(i1-2,
     & i2-1,i3,2,0)+8.*rsxy(i1-2,i2+1,i3,2,0)-rsxy(i1-2,i2+2,i3,2,0))
     & /(12.*dr(1))-8.*(rsxy(i1-1,i2-2,i3,2,0)-8.*rsxy(i1-1,i2-1,i3,2,
     & 0)+8.*rsxy(i1-1,i2+1,i3,2,0)-rsxy(i1-1,i2+2,i3,2,0))/(12.*dr(1)
     & )+8.*(rsxy(i1+1,i2-2,i3,2,0)-8.*rsxy(i1+1,i2-1,i3,2,0)+8.*rsxy(
     & i1+1,i2+1,i3,2,0)-rsxy(i1+1,i2+2,i3,2,0))/(12.*dr(1))-(rsxy(i1+
     & 2,i2-2,i3,2,0)-8.*rsxy(i1+2,i2-1,i3,2,0)+8.*rsxy(i1+2,i2+1,i3,
     & 2,0)-rsxy(i1+2,i2+2,i3,2,0))/(12.*dr(1)))/(12.*dr(0))
                      ajtxss = (-rsxy(i1,i2-2,i3,2,0)+16.*rsxy(i1,i2-1,
     & i3,2,0)-30.*rsxy(i1,i2,i3,2,0)+16.*rsxy(i1,i2+1,i3,2,0)-rsxy(
     & i1,i2+2,i3,2,0))/(12.*dr(1)**2)
                      ajtxrt = ((rsxy(i1-2,i2,i3-2,2,0)-8.*rsxy(i1-2,
     & i2,i3-1,2,0)+8.*rsxy(i1-2,i2,i3+1,2,0)-rsxy(i1-2,i2,i3+2,2,0))
     & /(12.*dr(2))-8.*(rsxy(i1-1,i2,i3-2,2,0)-8.*rsxy(i1-1,i2,i3-1,2,
     & 0)+8.*rsxy(i1-1,i2,i3+1,2,0)-rsxy(i1-1,i2,i3+2,2,0))/(12.*dr(2)
     & )+8.*(rsxy(i1+1,i2,i3-2,2,0)-8.*rsxy(i1+1,i2,i3-1,2,0)+8.*rsxy(
     & i1+1,i2,i3+1,2,0)-rsxy(i1+1,i2,i3+2,2,0))/(12.*dr(2))-(rsxy(i1+
     & 2,i2,i3-2,2,0)-8.*rsxy(i1+2,i2,i3-1,2,0)+8.*rsxy(i1+2,i2,i3+1,
     & 2,0)-rsxy(i1+2,i2,i3+2,2,0))/(12.*dr(2)))/(12.*dr(0))
                      ajtxst = ((rsxy(i1,i2-2,i3-2,2,0)-8.*rsxy(i1,i2-
     & 2,i3-1,2,0)+8.*rsxy(i1,i2-2,i3+1,2,0)-rsxy(i1,i2-2,i3+2,2,0))/(
     & 12.*dr(2))-8.*(rsxy(i1,i2-1,i3-2,2,0)-8.*rsxy(i1,i2-1,i3-1,2,0)
     & +8.*rsxy(i1,i2-1,i3+1,2,0)-rsxy(i1,i2-1,i3+2,2,0))/(12.*dr(2))+
     & 8.*(rsxy(i1,i2+1,i3-2,2,0)-8.*rsxy(i1,i2+1,i3-1,2,0)+8.*rsxy(
     & i1,i2+1,i3+1,2,0)-rsxy(i1,i2+1,i3+2,2,0))/(12.*dr(2))-(rsxy(i1,
     & i2+2,i3-2,2,0)-8.*rsxy(i1,i2+2,i3-1,2,0)+8.*rsxy(i1,i2+2,i3+1,
     & 2,0)-rsxy(i1,i2+2,i3+2,2,0))/(12.*dr(2)))/(12.*dr(1))
                      ajtxtt = (-rsxy(i1,i2,i3-2,2,0)+16.*rsxy(i1,i2,
     & i3-1,2,0)-30.*rsxy(i1,i2,i3,2,0)+16.*rsxy(i1,i2,i3+1,2,0)-rsxy(
     & i1,i2,i3+2,2,0))/(12.*dr(2)**2)
                      ajry = rsxy(i1,i2,i3,0,1)
                      ajryr = (rsxy(i1-2,i2,i3,0,1)-8.*rsxy(i1-1,i2,i3,
     & 0,1)+8.*rsxy(i1+1,i2,i3,0,1)-rsxy(i1+2,i2,i3,0,1))/(12.*dr(0))
                      ajrys = (rsxy(i1,i2-2,i3,0,1)-8.*rsxy(i1,i2-1,i3,
     & 0,1)+8.*rsxy(i1,i2+1,i3,0,1)-rsxy(i1,i2+2,i3,0,1))/(12.*dr(1))
                      ajryt = (rsxy(i1,i2,i3-2,0,1)-8.*rsxy(i1,i2,i3-1,
     & 0,1)+8.*rsxy(i1,i2,i3+1,0,1)-rsxy(i1,i2,i3+2,0,1))/(12.*dr(2))
                      ajryrr = (-rsxy(i1-2,i2,i3,0,1)+16.*rsxy(i1-1,i2,
     & i3,0,1)-30.*rsxy(i1,i2,i3,0,1)+16.*rsxy(i1+1,i2,i3,0,1)-rsxy(
     & i1+2,i2,i3,0,1))/(12.*dr(0)**2)
                      ajryrs = ((rsxy(i1-2,i2-2,i3,0,1)-8.*rsxy(i1-2,
     & i2-1,i3,0,1)+8.*rsxy(i1-2,i2+1,i3,0,1)-rsxy(i1-2,i2+2,i3,0,1))
     & /(12.*dr(1))-8.*(rsxy(i1-1,i2-2,i3,0,1)-8.*rsxy(i1-1,i2-1,i3,0,
     & 1)+8.*rsxy(i1-1,i2+1,i3,0,1)-rsxy(i1-1,i2+2,i3,0,1))/(12.*dr(1)
     & )+8.*(rsxy(i1+1,i2-2,i3,0,1)-8.*rsxy(i1+1,i2-1,i3,0,1)+8.*rsxy(
     & i1+1,i2+1,i3,0,1)-rsxy(i1+1,i2+2,i3,0,1))/(12.*dr(1))-(rsxy(i1+
     & 2,i2-2,i3,0,1)-8.*rsxy(i1+2,i2-1,i3,0,1)+8.*rsxy(i1+2,i2+1,i3,
     & 0,1)-rsxy(i1+2,i2+2,i3,0,1))/(12.*dr(1)))/(12.*dr(0))
                      ajryss = (-rsxy(i1,i2-2,i3,0,1)+16.*rsxy(i1,i2-1,
     & i3,0,1)-30.*rsxy(i1,i2,i3,0,1)+16.*rsxy(i1,i2+1,i3,0,1)-rsxy(
     & i1,i2+2,i3,0,1))/(12.*dr(1)**2)
                      ajryrt = ((rsxy(i1-2,i2,i3-2,0,1)-8.*rsxy(i1-2,
     & i2,i3-1,0,1)+8.*rsxy(i1-2,i2,i3+1,0,1)-rsxy(i1-2,i2,i3+2,0,1))
     & /(12.*dr(2))-8.*(rsxy(i1-1,i2,i3-2,0,1)-8.*rsxy(i1-1,i2,i3-1,0,
     & 1)+8.*rsxy(i1-1,i2,i3+1,0,1)-rsxy(i1-1,i2,i3+2,0,1))/(12.*dr(2)
     & )+8.*(rsxy(i1+1,i2,i3-2,0,1)-8.*rsxy(i1+1,i2,i3-1,0,1)+8.*rsxy(
     & i1+1,i2,i3+1,0,1)-rsxy(i1+1,i2,i3+2,0,1))/(12.*dr(2))-(rsxy(i1+
     & 2,i2,i3-2,0,1)-8.*rsxy(i1+2,i2,i3-1,0,1)+8.*rsxy(i1+2,i2,i3+1,
     & 0,1)-rsxy(i1+2,i2,i3+2,0,1))/(12.*dr(2)))/(12.*dr(0))
                      ajryst = ((rsxy(i1,i2-2,i3-2,0,1)-8.*rsxy(i1,i2-
     & 2,i3-1,0,1)+8.*rsxy(i1,i2-2,i3+1,0,1)-rsxy(i1,i2-2,i3+2,0,1))/(
     & 12.*dr(2))-8.*(rsxy(i1,i2-1,i3-2,0,1)-8.*rsxy(i1,i2-1,i3-1,0,1)
     & +8.*rsxy(i1,i2-1,i3+1,0,1)-rsxy(i1,i2-1,i3+2,0,1))/(12.*dr(2))+
     & 8.*(rsxy(i1,i2+1,i3-2,0,1)-8.*rsxy(i1,i2+1,i3-1,0,1)+8.*rsxy(
     & i1,i2+1,i3+1,0,1)-rsxy(i1,i2+1,i3+2,0,1))/(12.*dr(2))-(rsxy(i1,
     & i2+2,i3-2,0,1)-8.*rsxy(i1,i2+2,i3-1,0,1)+8.*rsxy(i1,i2+2,i3+1,
     & 0,1)-rsxy(i1,i2+2,i3+2,0,1))/(12.*dr(2)))/(12.*dr(1))
                      ajrytt = (-rsxy(i1,i2,i3-2,0,1)+16.*rsxy(i1,i2,
     & i3-1,0,1)-30.*rsxy(i1,i2,i3,0,1)+16.*rsxy(i1,i2,i3+1,0,1)-rsxy(
     & i1,i2,i3+2,0,1))/(12.*dr(2)**2)
                      ajsy = rsxy(i1,i2,i3,1,1)
                      ajsyr = (rsxy(i1-2,i2,i3,1,1)-8.*rsxy(i1-1,i2,i3,
     & 1,1)+8.*rsxy(i1+1,i2,i3,1,1)-rsxy(i1+2,i2,i3,1,1))/(12.*dr(0))
                      ajsys = (rsxy(i1,i2-2,i3,1,1)-8.*rsxy(i1,i2-1,i3,
     & 1,1)+8.*rsxy(i1,i2+1,i3,1,1)-rsxy(i1,i2+2,i3,1,1))/(12.*dr(1))
                      ajsyt = (rsxy(i1,i2,i3-2,1,1)-8.*rsxy(i1,i2,i3-1,
     & 1,1)+8.*rsxy(i1,i2,i3+1,1,1)-rsxy(i1,i2,i3+2,1,1))/(12.*dr(2))
                      ajsyrr = (-rsxy(i1-2,i2,i3,1,1)+16.*rsxy(i1-1,i2,
     & i3,1,1)-30.*rsxy(i1,i2,i3,1,1)+16.*rsxy(i1+1,i2,i3,1,1)-rsxy(
     & i1+2,i2,i3,1,1))/(12.*dr(0)**2)
                      ajsyrs = ((rsxy(i1-2,i2-2,i3,1,1)-8.*rsxy(i1-2,
     & i2-1,i3,1,1)+8.*rsxy(i1-2,i2+1,i3,1,1)-rsxy(i1-2,i2+2,i3,1,1))
     & /(12.*dr(1))-8.*(rsxy(i1-1,i2-2,i3,1,1)-8.*rsxy(i1-1,i2-1,i3,1,
     & 1)+8.*rsxy(i1-1,i2+1,i3,1,1)-rsxy(i1-1,i2+2,i3,1,1))/(12.*dr(1)
     & )+8.*(rsxy(i1+1,i2-2,i3,1,1)-8.*rsxy(i1+1,i2-1,i3,1,1)+8.*rsxy(
     & i1+1,i2+1,i3,1,1)-rsxy(i1+1,i2+2,i3,1,1))/(12.*dr(1))-(rsxy(i1+
     & 2,i2-2,i3,1,1)-8.*rsxy(i1+2,i2-1,i3,1,1)+8.*rsxy(i1+2,i2+1,i3,
     & 1,1)-rsxy(i1+2,i2+2,i3,1,1))/(12.*dr(1)))/(12.*dr(0))
                      ajsyss = (-rsxy(i1,i2-2,i3,1,1)+16.*rsxy(i1,i2-1,
     & i3,1,1)-30.*rsxy(i1,i2,i3,1,1)+16.*rsxy(i1,i2+1,i3,1,1)-rsxy(
     & i1,i2+2,i3,1,1))/(12.*dr(1)**2)
                      ajsyrt = ((rsxy(i1-2,i2,i3-2,1,1)-8.*rsxy(i1-2,
     & i2,i3-1,1,1)+8.*rsxy(i1-2,i2,i3+1,1,1)-rsxy(i1-2,i2,i3+2,1,1))
     & /(12.*dr(2))-8.*(rsxy(i1-1,i2,i3-2,1,1)-8.*rsxy(i1-1,i2,i3-1,1,
     & 1)+8.*rsxy(i1-1,i2,i3+1,1,1)-rsxy(i1-1,i2,i3+2,1,1))/(12.*dr(2)
     & )+8.*(rsxy(i1+1,i2,i3-2,1,1)-8.*rsxy(i1+1,i2,i3-1,1,1)+8.*rsxy(
     & i1+1,i2,i3+1,1,1)-rsxy(i1+1,i2,i3+2,1,1))/(12.*dr(2))-(rsxy(i1+
     & 2,i2,i3-2,1,1)-8.*rsxy(i1+2,i2,i3-1,1,1)+8.*rsxy(i1+2,i2,i3+1,
     & 1,1)-rsxy(i1+2,i2,i3+2,1,1))/(12.*dr(2)))/(12.*dr(0))
                      ajsyst = ((rsxy(i1,i2-2,i3-2,1,1)-8.*rsxy(i1,i2-
     & 2,i3-1,1,1)+8.*rsxy(i1,i2-2,i3+1,1,1)-rsxy(i1,i2-2,i3+2,1,1))/(
     & 12.*dr(2))-8.*(rsxy(i1,i2-1,i3-2,1,1)-8.*rsxy(i1,i2-1,i3-1,1,1)
     & +8.*rsxy(i1,i2-1,i3+1,1,1)-rsxy(i1,i2-1,i3+2,1,1))/(12.*dr(2))+
     & 8.*(rsxy(i1,i2+1,i3-2,1,1)-8.*rsxy(i1,i2+1,i3-1,1,1)+8.*rsxy(
     & i1,i2+1,i3+1,1,1)-rsxy(i1,i2+1,i3+2,1,1))/(12.*dr(2))-(rsxy(i1,
     & i2+2,i3-2,1,1)-8.*rsxy(i1,i2+2,i3-1,1,1)+8.*rsxy(i1,i2+2,i3+1,
     & 1,1)-rsxy(i1,i2+2,i3+2,1,1))/(12.*dr(2)))/(12.*dr(1))
                      ajsytt = (-rsxy(i1,i2,i3-2,1,1)+16.*rsxy(i1,i2,
     & i3-1,1,1)-30.*rsxy(i1,i2,i3,1,1)+16.*rsxy(i1,i2,i3+1,1,1)-rsxy(
     & i1,i2,i3+2,1,1))/(12.*dr(2)**2)
                      ajty = rsxy(i1,i2,i3,2,1)
                      ajtyr = (rsxy(i1-2,i2,i3,2,1)-8.*rsxy(i1-1,i2,i3,
     & 2,1)+8.*rsxy(i1+1,i2,i3,2,1)-rsxy(i1+2,i2,i3,2,1))/(12.*dr(0))
                      ajtys = (rsxy(i1,i2-2,i3,2,1)-8.*rsxy(i1,i2-1,i3,
     & 2,1)+8.*rsxy(i1,i2+1,i3,2,1)-rsxy(i1,i2+2,i3,2,1))/(12.*dr(1))
                      ajtyt = (rsxy(i1,i2,i3-2,2,1)-8.*rsxy(i1,i2,i3-1,
     & 2,1)+8.*rsxy(i1,i2,i3+1,2,1)-rsxy(i1,i2,i3+2,2,1))/(12.*dr(2))
                      ajtyrr = (-rsxy(i1-2,i2,i3,2,1)+16.*rsxy(i1-1,i2,
     & i3,2,1)-30.*rsxy(i1,i2,i3,2,1)+16.*rsxy(i1+1,i2,i3,2,1)-rsxy(
     & i1+2,i2,i3,2,1))/(12.*dr(0)**2)
                      ajtyrs = ((rsxy(i1-2,i2-2,i3,2,1)-8.*rsxy(i1-2,
     & i2-1,i3,2,1)+8.*rsxy(i1-2,i2+1,i3,2,1)-rsxy(i1-2,i2+2,i3,2,1))
     & /(12.*dr(1))-8.*(rsxy(i1-1,i2-2,i3,2,1)-8.*rsxy(i1-1,i2-1,i3,2,
     & 1)+8.*rsxy(i1-1,i2+1,i3,2,1)-rsxy(i1-1,i2+2,i3,2,1))/(12.*dr(1)
     & )+8.*(rsxy(i1+1,i2-2,i3,2,1)-8.*rsxy(i1+1,i2-1,i3,2,1)+8.*rsxy(
     & i1+1,i2+1,i3,2,1)-rsxy(i1+1,i2+2,i3,2,1))/(12.*dr(1))-(rsxy(i1+
     & 2,i2-2,i3,2,1)-8.*rsxy(i1+2,i2-1,i3,2,1)+8.*rsxy(i1+2,i2+1,i3,
     & 2,1)-rsxy(i1+2,i2+2,i3,2,1))/(12.*dr(1)))/(12.*dr(0))
                      ajtyss = (-rsxy(i1,i2-2,i3,2,1)+16.*rsxy(i1,i2-1,
     & i3,2,1)-30.*rsxy(i1,i2,i3,2,1)+16.*rsxy(i1,i2+1,i3,2,1)-rsxy(
     & i1,i2+2,i3,2,1))/(12.*dr(1)**2)
                      ajtyrt = ((rsxy(i1-2,i2,i3-2,2,1)-8.*rsxy(i1-2,
     & i2,i3-1,2,1)+8.*rsxy(i1-2,i2,i3+1,2,1)-rsxy(i1-2,i2,i3+2,2,1))
     & /(12.*dr(2))-8.*(rsxy(i1-1,i2,i3-2,2,1)-8.*rsxy(i1-1,i2,i3-1,2,
     & 1)+8.*rsxy(i1-1,i2,i3+1,2,1)-rsxy(i1-1,i2,i3+2,2,1))/(12.*dr(2)
     & )+8.*(rsxy(i1+1,i2,i3-2,2,1)-8.*rsxy(i1+1,i2,i3-1,2,1)+8.*rsxy(
     & i1+1,i2,i3+1,2,1)-rsxy(i1+1,i2,i3+2,2,1))/(12.*dr(2))-(rsxy(i1+
     & 2,i2,i3-2,2,1)-8.*rsxy(i1+2,i2,i3-1,2,1)+8.*rsxy(i1+2,i2,i3+1,
     & 2,1)-rsxy(i1+2,i2,i3+2,2,1))/(12.*dr(2)))/(12.*dr(0))
                      ajtyst = ((rsxy(i1,i2-2,i3-2,2,1)-8.*rsxy(i1,i2-
     & 2,i3-1,2,1)+8.*rsxy(i1,i2-2,i3+1,2,1)-rsxy(i1,i2-2,i3+2,2,1))/(
     & 12.*dr(2))-8.*(rsxy(i1,i2-1,i3-2,2,1)-8.*rsxy(i1,i2-1,i3-1,2,1)
     & +8.*rsxy(i1,i2-1,i3+1,2,1)-rsxy(i1,i2-1,i3+2,2,1))/(12.*dr(2))+
     & 8.*(rsxy(i1,i2+1,i3-2,2,1)-8.*rsxy(i1,i2+1,i3-1,2,1)+8.*rsxy(
     & i1,i2+1,i3+1,2,1)-rsxy(i1,i2+1,i3+2,2,1))/(12.*dr(2))-(rsxy(i1,
     & i2+2,i3-2,2,1)-8.*rsxy(i1,i2+2,i3-1,2,1)+8.*rsxy(i1,i2+2,i3+1,
     & 2,1)-rsxy(i1,i2+2,i3+2,2,1))/(12.*dr(2)))/(12.*dr(1))
                      ajtytt = (-rsxy(i1,i2,i3-2,2,1)+16.*rsxy(i1,i2,
     & i3-1,2,1)-30.*rsxy(i1,i2,i3,2,1)+16.*rsxy(i1,i2,i3+1,2,1)-rsxy(
     & i1,i2,i3+2,2,1))/(12.*dr(2)**2)
                      ajrz = rsxy(i1,i2,i3,0,2)
                      ajrzr = (rsxy(i1-2,i2,i3,0,2)-8.*rsxy(i1-1,i2,i3,
     & 0,2)+8.*rsxy(i1+1,i2,i3,0,2)-rsxy(i1+2,i2,i3,0,2))/(12.*dr(0))
                      ajrzs = (rsxy(i1,i2-2,i3,0,2)-8.*rsxy(i1,i2-1,i3,
     & 0,2)+8.*rsxy(i1,i2+1,i3,0,2)-rsxy(i1,i2+2,i3,0,2))/(12.*dr(1))
                      ajrzt = (rsxy(i1,i2,i3-2,0,2)-8.*rsxy(i1,i2,i3-1,
     & 0,2)+8.*rsxy(i1,i2,i3+1,0,2)-rsxy(i1,i2,i3+2,0,2))/(12.*dr(2))
                      ajrzrr = (-rsxy(i1-2,i2,i3,0,2)+16.*rsxy(i1-1,i2,
     & i3,0,2)-30.*rsxy(i1,i2,i3,0,2)+16.*rsxy(i1+1,i2,i3,0,2)-rsxy(
     & i1+2,i2,i3,0,2))/(12.*dr(0)**2)
                      ajrzrs = ((rsxy(i1-2,i2-2,i3,0,2)-8.*rsxy(i1-2,
     & i2-1,i3,0,2)+8.*rsxy(i1-2,i2+1,i3,0,2)-rsxy(i1-2,i2+2,i3,0,2))
     & /(12.*dr(1))-8.*(rsxy(i1-1,i2-2,i3,0,2)-8.*rsxy(i1-1,i2-1,i3,0,
     & 2)+8.*rsxy(i1-1,i2+1,i3,0,2)-rsxy(i1-1,i2+2,i3,0,2))/(12.*dr(1)
     & )+8.*(rsxy(i1+1,i2-2,i3,0,2)-8.*rsxy(i1+1,i2-1,i3,0,2)+8.*rsxy(
     & i1+1,i2+1,i3,0,2)-rsxy(i1+1,i2+2,i3,0,2))/(12.*dr(1))-(rsxy(i1+
     & 2,i2-2,i3,0,2)-8.*rsxy(i1+2,i2-1,i3,0,2)+8.*rsxy(i1+2,i2+1,i3,
     & 0,2)-rsxy(i1+2,i2+2,i3,0,2))/(12.*dr(1)))/(12.*dr(0))
                      ajrzss = (-rsxy(i1,i2-2,i3,0,2)+16.*rsxy(i1,i2-1,
     & i3,0,2)-30.*rsxy(i1,i2,i3,0,2)+16.*rsxy(i1,i2+1,i3,0,2)-rsxy(
     & i1,i2+2,i3,0,2))/(12.*dr(1)**2)
                      ajrzrt = ((rsxy(i1-2,i2,i3-2,0,2)-8.*rsxy(i1-2,
     & i2,i3-1,0,2)+8.*rsxy(i1-2,i2,i3+1,0,2)-rsxy(i1-2,i2,i3+2,0,2))
     & /(12.*dr(2))-8.*(rsxy(i1-1,i2,i3-2,0,2)-8.*rsxy(i1-1,i2,i3-1,0,
     & 2)+8.*rsxy(i1-1,i2,i3+1,0,2)-rsxy(i1-1,i2,i3+2,0,2))/(12.*dr(2)
     & )+8.*(rsxy(i1+1,i2,i3-2,0,2)-8.*rsxy(i1+1,i2,i3-1,0,2)+8.*rsxy(
     & i1+1,i2,i3+1,0,2)-rsxy(i1+1,i2,i3+2,0,2))/(12.*dr(2))-(rsxy(i1+
     & 2,i2,i3-2,0,2)-8.*rsxy(i1+2,i2,i3-1,0,2)+8.*rsxy(i1+2,i2,i3+1,
     & 0,2)-rsxy(i1+2,i2,i3+2,0,2))/(12.*dr(2)))/(12.*dr(0))
                      ajrzst = ((rsxy(i1,i2-2,i3-2,0,2)-8.*rsxy(i1,i2-
     & 2,i3-1,0,2)+8.*rsxy(i1,i2-2,i3+1,0,2)-rsxy(i1,i2-2,i3+2,0,2))/(
     & 12.*dr(2))-8.*(rsxy(i1,i2-1,i3-2,0,2)-8.*rsxy(i1,i2-1,i3-1,0,2)
     & +8.*rsxy(i1,i2-1,i3+1,0,2)-rsxy(i1,i2-1,i3+2,0,2))/(12.*dr(2))+
     & 8.*(rsxy(i1,i2+1,i3-2,0,2)-8.*rsxy(i1,i2+1,i3-1,0,2)+8.*rsxy(
     & i1,i2+1,i3+1,0,2)-rsxy(i1,i2+1,i3+2,0,2))/(12.*dr(2))-(rsxy(i1,
     & i2+2,i3-2,0,2)-8.*rsxy(i1,i2+2,i3-1,0,2)+8.*rsxy(i1,i2+2,i3+1,
     & 0,2)-rsxy(i1,i2+2,i3+2,0,2))/(12.*dr(2)))/(12.*dr(1))
                      ajrztt = (-rsxy(i1,i2,i3-2,0,2)+16.*rsxy(i1,i2,
     & i3-1,0,2)-30.*rsxy(i1,i2,i3,0,2)+16.*rsxy(i1,i2,i3+1,0,2)-rsxy(
     & i1,i2,i3+2,0,2))/(12.*dr(2)**2)
                      ajsz = rsxy(i1,i2,i3,1,2)
                      ajszr = (rsxy(i1-2,i2,i3,1,2)-8.*rsxy(i1-1,i2,i3,
     & 1,2)+8.*rsxy(i1+1,i2,i3,1,2)-rsxy(i1+2,i2,i3,1,2))/(12.*dr(0))
                      ajszs = (rsxy(i1,i2-2,i3,1,2)-8.*rsxy(i1,i2-1,i3,
     & 1,2)+8.*rsxy(i1,i2+1,i3,1,2)-rsxy(i1,i2+2,i3,1,2))/(12.*dr(1))
                      ajszt = (rsxy(i1,i2,i3-2,1,2)-8.*rsxy(i1,i2,i3-1,
     & 1,2)+8.*rsxy(i1,i2,i3+1,1,2)-rsxy(i1,i2,i3+2,1,2))/(12.*dr(2))
                      ajszrr = (-rsxy(i1-2,i2,i3,1,2)+16.*rsxy(i1-1,i2,
     & i3,1,2)-30.*rsxy(i1,i2,i3,1,2)+16.*rsxy(i1+1,i2,i3,1,2)-rsxy(
     & i1+2,i2,i3,1,2))/(12.*dr(0)**2)
                      ajszrs = ((rsxy(i1-2,i2-2,i3,1,2)-8.*rsxy(i1-2,
     & i2-1,i3,1,2)+8.*rsxy(i1-2,i2+1,i3,1,2)-rsxy(i1-2,i2+2,i3,1,2))
     & /(12.*dr(1))-8.*(rsxy(i1-1,i2-2,i3,1,2)-8.*rsxy(i1-1,i2-1,i3,1,
     & 2)+8.*rsxy(i1-1,i2+1,i3,1,2)-rsxy(i1-1,i2+2,i3,1,2))/(12.*dr(1)
     & )+8.*(rsxy(i1+1,i2-2,i3,1,2)-8.*rsxy(i1+1,i2-1,i3,1,2)+8.*rsxy(
     & i1+1,i2+1,i3,1,2)-rsxy(i1+1,i2+2,i3,1,2))/(12.*dr(1))-(rsxy(i1+
     & 2,i2-2,i3,1,2)-8.*rsxy(i1+2,i2-1,i3,1,2)+8.*rsxy(i1+2,i2+1,i3,
     & 1,2)-rsxy(i1+2,i2+2,i3,1,2))/(12.*dr(1)))/(12.*dr(0))
                      ajszss = (-rsxy(i1,i2-2,i3,1,2)+16.*rsxy(i1,i2-1,
     & i3,1,2)-30.*rsxy(i1,i2,i3,1,2)+16.*rsxy(i1,i2+1,i3,1,2)-rsxy(
     & i1,i2+2,i3,1,2))/(12.*dr(1)**2)
                      ajszrt = ((rsxy(i1-2,i2,i3-2,1,2)-8.*rsxy(i1-2,
     & i2,i3-1,1,2)+8.*rsxy(i1-2,i2,i3+1,1,2)-rsxy(i1-2,i2,i3+2,1,2))
     & /(12.*dr(2))-8.*(rsxy(i1-1,i2,i3-2,1,2)-8.*rsxy(i1-1,i2,i3-1,1,
     & 2)+8.*rsxy(i1-1,i2,i3+1,1,2)-rsxy(i1-1,i2,i3+2,1,2))/(12.*dr(2)
     & )+8.*(rsxy(i1+1,i2,i3-2,1,2)-8.*rsxy(i1+1,i2,i3-1,1,2)+8.*rsxy(
     & i1+1,i2,i3+1,1,2)-rsxy(i1+1,i2,i3+2,1,2))/(12.*dr(2))-(rsxy(i1+
     & 2,i2,i3-2,1,2)-8.*rsxy(i1+2,i2,i3-1,1,2)+8.*rsxy(i1+2,i2,i3+1,
     & 1,2)-rsxy(i1+2,i2,i3+2,1,2))/(12.*dr(2)))/(12.*dr(0))
                      ajszst = ((rsxy(i1,i2-2,i3-2,1,2)-8.*rsxy(i1,i2-
     & 2,i3-1,1,2)+8.*rsxy(i1,i2-2,i3+1,1,2)-rsxy(i1,i2-2,i3+2,1,2))/(
     & 12.*dr(2))-8.*(rsxy(i1,i2-1,i3-2,1,2)-8.*rsxy(i1,i2-1,i3-1,1,2)
     & +8.*rsxy(i1,i2-1,i3+1,1,2)-rsxy(i1,i2-1,i3+2,1,2))/(12.*dr(2))+
     & 8.*(rsxy(i1,i2+1,i3-2,1,2)-8.*rsxy(i1,i2+1,i3-1,1,2)+8.*rsxy(
     & i1,i2+1,i3+1,1,2)-rsxy(i1,i2+1,i3+2,1,2))/(12.*dr(2))-(rsxy(i1,
     & i2+2,i3-2,1,2)-8.*rsxy(i1,i2+2,i3-1,1,2)+8.*rsxy(i1,i2+2,i3+1,
     & 1,2)-rsxy(i1,i2+2,i3+2,1,2))/(12.*dr(2)))/(12.*dr(1))
                      ajsztt = (-rsxy(i1,i2,i3-2,1,2)+16.*rsxy(i1,i2,
     & i3-1,1,2)-30.*rsxy(i1,i2,i3,1,2)+16.*rsxy(i1,i2,i3+1,1,2)-rsxy(
     & i1,i2,i3+2,1,2))/(12.*dr(2)**2)
                      ajtz = rsxy(i1,i2,i3,2,2)
                      ajtzr = (rsxy(i1-2,i2,i3,2,2)-8.*rsxy(i1-1,i2,i3,
     & 2,2)+8.*rsxy(i1+1,i2,i3,2,2)-rsxy(i1+2,i2,i3,2,2))/(12.*dr(0))
                      ajtzs = (rsxy(i1,i2-2,i3,2,2)-8.*rsxy(i1,i2-1,i3,
     & 2,2)+8.*rsxy(i1,i2+1,i3,2,2)-rsxy(i1,i2+2,i3,2,2))/(12.*dr(1))
                      ajtzt = (rsxy(i1,i2,i3-2,2,2)-8.*rsxy(i1,i2,i3-1,
     & 2,2)+8.*rsxy(i1,i2,i3+1,2,2)-rsxy(i1,i2,i3+2,2,2))/(12.*dr(2))
                      ajtzrr = (-rsxy(i1-2,i2,i3,2,2)+16.*rsxy(i1-1,i2,
     & i3,2,2)-30.*rsxy(i1,i2,i3,2,2)+16.*rsxy(i1+1,i2,i3,2,2)-rsxy(
     & i1+2,i2,i3,2,2))/(12.*dr(0)**2)
                      ajtzrs = ((rsxy(i1-2,i2-2,i3,2,2)-8.*rsxy(i1-2,
     & i2-1,i3,2,2)+8.*rsxy(i1-2,i2+1,i3,2,2)-rsxy(i1-2,i2+2,i3,2,2))
     & /(12.*dr(1))-8.*(rsxy(i1-1,i2-2,i3,2,2)-8.*rsxy(i1-1,i2-1,i3,2,
     & 2)+8.*rsxy(i1-1,i2+1,i3,2,2)-rsxy(i1-1,i2+2,i3,2,2))/(12.*dr(1)
     & )+8.*(rsxy(i1+1,i2-2,i3,2,2)-8.*rsxy(i1+1,i2-1,i3,2,2)+8.*rsxy(
     & i1+1,i2+1,i3,2,2)-rsxy(i1+1,i2+2,i3,2,2))/(12.*dr(1))-(rsxy(i1+
     & 2,i2-2,i3,2,2)-8.*rsxy(i1+2,i2-1,i3,2,2)+8.*rsxy(i1+2,i2+1,i3,
     & 2,2)-rsxy(i1+2,i2+2,i3,2,2))/(12.*dr(1)))/(12.*dr(0))
                      ajtzss = (-rsxy(i1,i2-2,i3,2,2)+16.*rsxy(i1,i2-1,
     & i3,2,2)-30.*rsxy(i1,i2,i3,2,2)+16.*rsxy(i1,i2+1,i3,2,2)-rsxy(
     & i1,i2+2,i3,2,2))/(12.*dr(1)**2)
                      ajtzrt = ((rsxy(i1-2,i2,i3-2,2,2)-8.*rsxy(i1-2,
     & i2,i3-1,2,2)+8.*rsxy(i1-2,i2,i3+1,2,2)-rsxy(i1-2,i2,i3+2,2,2))
     & /(12.*dr(2))-8.*(rsxy(i1-1,i2,i3-2,2,2)-8.*rsxy(i1-1,i2,i3-1,2,
     & 2)+8.*rsxy(i1-1,i2,i3+1,2,2)-rsxy(i1-1,i2,i3+2,2,2))/(12.*dr(2)
     & )+8.*(rsxy(i1+1,i2,i3-2,2,2)-8.*rsxy(i1+1,i2,i3-1,2,2)+8.*rsxy(
     & i1+1,i2,i3+1,2,2)-rsxy(i1+1,i2,i3+2,2,2))/(12.*dr(2))-(rsxy(i1+
     & 2,i2,i3-2,2,2)-8.*rsxy(i1+2,i2,i3-1,2,2)+8.*rsxy(i1+2,i2,i3+1,
     & 2,2)-rsxy(i1+2,i2,i3+2,2,2))/(12.*dr(2)))/(12.*dr(0))
                      ajtzst = ((rsxy(i1,i2-2,i3-2,2,2)-8.*rsxy(i1,i2-
     & 2,i3-1,2,2)+8.*rsxy(i1,i2-2,i3+1,2,2)-rsxy(i1,i2-2,i3+2,2,2))/(
     & 12.*dr(2))-8.*(rsxy(i1,i2-1,i3-2,2,2)-8.*rsxy(i1,i2-1,i3-1,2,2)
     & +8.*rsxy(i1,i2-1,i3+1,2,2)-rsxy(i1,i2-1,i3+2,2,2))/(12.*dr(2))+
     & 8.*(rsxy(i1,i2+1,i3-2,2,2)-8.*rsxy(i1,i2+1,i3-1,2,2)+8.*rsxy(
     & i1,i2+1,i3+1,2,2)-rsxy(i1,i2+1,i3+2,2,2))/(12.*dr(2))-(rsxy(i1,
     & i2+2,i3-2,2,2)-8.*rsxy(i1,i2+2,i3-1,2,2)+8.*rsxy(i1,i2+2,i3+1,
     & 2,2)-rsxy(i1,i2+2,i3+2,2,2))/(12.*dr(2)))/(12.*dr(1))
                      ajtztt = (-rsxy(i1,i2,i3-2,2,2)+16.*rsxy(i1,i2,
     & i3-1,2,2)-30.*rsxy(i1,i2,i3,2,2)+16.*rsxy(i1,i2,i3+1,2,2)-rsxy(
     & i1,i2,i3+2,2,2))/(12.*dr(2)**2)
                      ajrxx = ajrx*ajrxr+ajsx*ajrxs+ajtx*ajrxt
                      ajrxy = ajry*ajrxr+ajsy*ajrxs+ajty*ajrxt
                      ajrxz = ajrz*ajrxr+ajsz*ajrxs+ajtz*ajrxt
                      ajsxx = ajrx*ajsxr+ajsx*ajsxs+ajtx*ajsxt
                      ajsxy = ajry*ajsxr+ajsy*ajsxs+ajty*ajsxt
                      ajsxz = ajrz*ajsxr+ajsz*ajsxs+ajtz*ajsxt
                      ajtxx = ajrx*ajtxr+ajsx*ajtxs+ajtx*ajtxt
                      ajtxy = ajry*ajtxr+ajsy*ajtxs+ajty*ajtxt
                      ajtxz = ajrz*ajtxr+ajsz*ajtxs+ajtz*ajtxt
                      ajryx = ajrx*ajryr+ajsx*ajrys+ajtx*ajryt
                      ajryy = ajry*ajryr+ajsy*ajrys+ajty*ajryt
                      ajryz = ajrz*ajryr+ajsz*ajrys+ajtz*ajryt
                      ajsyx = ajrx*ajsyr+ajsx*ajsys+ajtx*ajsyt
                      ajsyy = ajry*ajsyr+ajsy*ajsys+ajty*ajsyt
                      ajsyz = ajrz*ajsyr+ajsz*ajsys+ajtz*ajsyt
                      ajtyx = ajrx*ajtyr+ajsx*ajtys+ajtx*ajtyt
                      ajtyy = ajry*ajtyr+ajsy*ajtys+ajty*ajtyt
                      ajtyz = ajrz*ajtyr+ajsz*ajtys+ajtz*ajtyt
                      ajrzx = ajrx*ajrzr+ajsx*ajrzs+ajtx*ajrzt
                      ajrzy = ajry*ajrzr+ajsy*ajrzs+ajty*ajrzt
                      ajrzz = ajrz*ajrzr+ajsz*ajrzs+ajtz*ajrzt
                      ajszx = ajrx*ajszr+ajsx*ajszs+ajtx*ajszt
                      ajszy = ajry*ajszr+ajsy*ajszs+ajty*ajszt
                      ajszz = ajrz*ajszr+ajsz*ajszs+ajtz*ajszt
                      ajtzx = ajrx*ajtzr+ajsx*ajtzs+ajtx*ajtzt
                      ajtzy = ajry*ajtzr+ajsy*ajtzs+ajty*ajtzt
                      ajtzz = ajrz*ajtzr+ajsz*ajtzs+ajtz*ajtzt
                      t1 = ajrx**2
                      t6 = ajsx**2
                      t14 = ajtx**2
                      ajrxxx = t1*ajrxrr+2*ajrx*ajsx*ajrxrs+t6*ajrxss+
     & 2*ajrx*ajtx*ajrxrt+2*ajsx*ajtx*ajrxst+t14*ajrxtt+ajrxx*ajrxr+
     & ajsxx*ajrxs+ajtxx*ajrxt
                      ajrxxy = ajry*ajrx*ajrxrr+(ajsy*ajrx+ajry*ajsx)*
     & ajrxrs+ajsy*ajsx*ajrxss+(ajry*ajtx+ajty*ajrx)*ajrxrt+(ajty*
     & ajsx+ajsy*ajtx)*ajrxst+ajty*ajtx*ajrxtt+ajrxy*ajrxr+ajsxy*
     & ajrxs+ajtxy*ajrxt
                      t1 = ajry**2
                      t6 = ajsy**2
                      t14 = ajty**2
                      ajrxyy = t1*ajrxrr+2*ajry*ajsy*ajrxrs+t6*ajrxss+
     & 2*ajry*ajty*ajrxrt+2*ajsy*ajty*ajrxst+t14*ajrxtt+ajryy*ajrxr+
     & ajsyy*ajrxs+ajtyy*ajrxt
                      ajrxxz = ajrz*ajrx*ajrxrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajrxrs+ajsz*ajsx*ajrxss+(ajrz*ajtx+ajtz*ajrx)*ajrxrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajrxst+ajtz*ajtx*ajrxtt+ajrxz*ajrxr+ajsxz*
     & ajrxs+ajtxz*ajrxt
                      ajrxyz = ajrz*ajry*ajrxrr+(ajsz*ajry+ajrz*ajsy)*
     & ajrxrs+ajsz*ajsy*ajrxss+(ajrz*ajty+ajtz*ajry)*ajrxrt+(ajtz*
     & ajsy+ajsz*ajty)*ajrxst+ajtz*ajty*ajrxtt+ajryz*ajrxr+ajsyz*
     & ajrxs+ajtyz*ajrxt
                      t1 = ajrz**2
                      t6 = ajsz**2
                      t14 = ajtz**2
                      ajrxzz = t1*ajrxrr+2*ajrz*ajsz*ajrxrs+t6*ajrxss+
     & 2*ajrz*ajtz*ajrxrt+2*ajsz*ajtz*ajrxst+t14*ajrxtt+ajrzz*ajrxr+
     & ajszz*ajrxs+ajtzz*ajrxt
                      t1 = ajrx**2
                      t6 = ajsx**2
                      t14 = ajtx**2
                      ajsxxx = t1*ajsxrr+2*ajrx*ajsx*ajsxrs+t6*ajsxss+
     & 2*ajrx*ajtx*ajsxrt+2*ajsx*ajtx*ajsxst+t14*ajsxtt+ajrxx*ajsxr+
     & ajsxx*ajsxs+ajtxx*ajsxt
                      ajsxxy = ajry*ajrx*ajsxrr+(ajsy*ajrx+ajry*ajsx)*
     & ajsxrs+ajsy*ajsx*ajsxss+(ajry*ajtx+ajty*ajrx)*ajsxrt+(ajty*
     & ajsx+ajsy*ajtx)*ajsxst+ajty*ajtx*ajsxtt+ajrxy*ajsxr+ajsxy*
     & ajsxs+ajtxy*ajsxt
                      t1 = ajry**2
                      t6 = ajsy**2
                      t14 = ajty**2
                      ajsxyy = t1*ajsxrr+2*ajry*ajsy*ajsxrs+t6*ajsxss+
     & 2*ajry*ajty*ajsxrt+2*ajsy*ajty*ajsxst+t14*ajsxtt+ajryy*ajsxr+
     & ajsyy*ajsxs+ajtyy*ajsxt
                      ajsxxz = ajrz*ajrx*ajsxrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajsxrs+ajsz*ajsx*ajsxss+(ajrz*ajtx+ajtz*ajrx)*ajsxrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajsxst+ajtz*ajtx*ajsxtt+ajrxz*ajsxr+ajsxz*
     & ajsxs+ajtxz*ajsxt
                      ajsxyz = ajrz*ajry*ajsxrr+(ajsz*ajry+ajrz*ajsy)*
     & ajsxrs+ajsz*ajsy*ajsxss+(ajrz*ajty+ajtz*ajry)*ajsxrt+(ajtz*
     & ajsy+ajsz*ajty)*ajsxst+ajtz*ajty*ajsxtt+ajryz*ajsxr+ajsyz*
     & ajsxs+ajtyz*ajsxt
                      t1 = ajrz**2
                      t6 = ajsz**2
                      t14 = ajtz**2
                      ajsxzz = t1*ajsxrr+2*ajrz*ajsz*ajsxrs+t6*ajsxss+
     & 2*ajrz*ajtz*ajsxrt+2*ajsz*ajtz*ajsxst+t14*ajsxtt+ajrzz*ajsxr+
     & ajszz*ajsxs+ajtzz*ajsxt
                      t1 = ajrx**2
                      t6 = ajsx**2
                      t14 = ajtx**2
                      ajtxxx = t1*ajtxrr+2*ajrx*ajsx*ajtxrs+t6*ajtxss+
     & 2*ajrx*ajtx*ajtxrt+2*ajsx*ajtx*ajtxst+t14*ajtxtt+ajrxx*ajtxr+
     & ajsxx*ajtxs+ajtxx*ajtxt
                      ajtxxy = ajry*ajrx*ajtxrr+(ajsy*ajrx+ajry*ajsx)*
     & ajtxrs+ajsy*ajsx*ajtxss+(ajry*ajtx+ajty*ajrx)*ajtxrt+(ajty*
     & ajsx+ajsy*ajtx)*ajtxst+ajty*ajtx*ajtxtt+ajrxy*ajtxr+ajsxy*
     & ajtxs+ajtxy*ajtxt
                      t1 = ajry**2
                      t6 = ajsy**2
                      t14 = ajty**2
                      ajtxyy = t1*ajtxrr+2*ajry*ajsy*ajtxrs+t6*ajtxss+
     & 2*ajry*ajty*ajtxrt+2*ajsy*ajty*ajtxst+t14*ajtxtt+ajryy*ajtxr+
     & ajsyy*ajtxs+ajtyy*ajtxt
                      ajtxxz = ajrz*ajrx*ajtxrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajtxrs+ajsz*ajsx*ajtxss+(ajrz*ajtx+ajtz*ajrx)*ajtxrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajtxst+ajtz*ajtx*ajtxtt+ajrxz*ajtxr+ajsxz*
     & ajtxs+ajtxz*ajtxt
                      ajtxyz = ajrz*ajry*ajtxrr+(ajsz*ajry+ajrz*ajsy)*
     & ajtxrs+ajsz*ajsy*ajtxss+(ajrz*ajty+ajtz*ajry)*ajtxrt+(ajtz*
     & ajsy+ajsz*ajty)*ajtxst+ajtz*ajty*ajtxtt+ajryz*ajtxr+ajsyz*
     & ajtxs+ajtyz*ajtxt
                      t1 = ajrz**2
                      t6 = ajsz**2
                      t14 = ajtz**2
                      ajtxzz = t1*ajtxrr+2*ajrz*ajsz*ajtxrs+t6*ajtxss+
     & 2*ajrz*ajtz*ajtxrt+2*ajsz*ajtz*ajtxst+t14*ajtxtt+ajrzz*ajtxr+
     & ajszz*ajtxs+ajtzz*ajtxt
                      t1 = ajrx**2
                      t6 = ajsx**2
                      t14 = ajtx**2
                      ajryxx = t1*ajryrr+2*ajrx*ajsx*ajryrs+t6*ajryss+
     & 2*ajrx*ajtx*ajryrt+2*ajsx*ajtx*ajryst+t14*ajrytt+ajrxx*ajryr+
     & ajsxx*ajrys+ajtxx*ajryt
                      ajryxy = ajry*ajrx*ajryrr+(ajsy*ajrx+ajry*ajsx)*
     & ajryrs+ajsy*ajsx*ajryss+(ajry*ajtx+ajty*ajrx)*ajryrt+(ajty*
     & ajsx+ajsy*ajtx)*ajryst+ajty*ajtx*ajrytt+ajrxy*ajryr+ajsxy*
     & ajrys+ajtxy*ajryt
                      t1 = ajry**2
                      t6 = ajsy**2
                      t14 = ajty**2
                      ajryyy = t1*ajryrr+2*ajry*ajsy*ajryrs+t6*ajryss+
     & 2*ajry*ajty*ajryrt+2*ajsy*ajty*ajryst+t14*ajrytt+ajryy*ajryr+
     & ajsyy*ajrys+ajtyy*ajryt
                      ajryxz = ajrz*ajrx*ajryrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajryrs+ajsz*ajsx*ajryss+(ajrz*ajtx+ajtz*ajrx)*ajryrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajryst+ajtz*ajtx*ajrytt+ajrxz*ajryr+ajsxz*
     & ajrys+ajtxz*ajryt
                      ajryyz = ajrz*ajry*ajryrr+(ajsz*ajry+ajrz*ajsy)*
     & ajryrs+ajsz*ajsy*ajryss+(ajrz*ajty+ajtz*ajry)*ajryrt+(ajtz*
     & ajsy+ajsz*ajty)*ajryst+ajtz*ajty*ajrytt+ajryz*ajryr+ajsyz*
     & ajrys+ajtyz*ajryt
                      t1 = ajrz**2
                      t6 = ajsz**2
                      t14 = ajtz**2
                      ajryzz = t1*ajryrr+2*ajrz*ajsz*ajryrs+t6*ajryss+
     & 2*ajrz*ajtz*ajryrt+2*ajsz*ajtz*ajryst+t14*ajrytt+ajrzz*ajryr+
     & ajszz*ajrys+ajtzz*ajryt
                      t1 = ajrx**2
                      t6 = ajsx**2
                      t14 = ajtx**2
                      ajsyxx = t1*ajsyrr+2*ajrx*ajsx*ajsyrs+t6*ajsyss+
     & 2*ajrx*ajtx*ajsyrt+2*ajsx*ajtx*ajsyst+t14*ajsytt+ajrxx*ajsyr+
     & ajsxx*ajsys+ajtxx*ajsyt
                      ajsyxy = ajry*ajrx*ajsyrr+(ajsy*ajrx+ajry*ajsx)*
     & ajsyrs+ajsy*ajsx*ajsyss+(ajry*ajtx+ajty*ajrx)*ajsyrt+(ajty*
     & ajsx+ajsy*ajtx)*ajsyst+ajty*ajtx*ajsytt+ajrxy*ajsyr+ajsxy*
     & ajsys+ajtxy*ajsyt
                      t1 = ajry**2
                      t6 = ajsy**2
                      t14 = ajty**2
                      ajsyyy = t1*ajsyrr+2*ajry*ajsy*ajsyrs+t6*ajsyss+
     & 2*ajry*ajty*ajsyrt+2*ajsy*ajty*ajsyst+t14*ajsytt+ajryy*ajsyr+
     & ajsyy*ajsys+ajtyy*ajsyt
                      ajsyxz = ajrz*ajrx*ajsyrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajsyrs+ajsz*ajsx*ajsyss+(ajrz*ajtx+ajtz*ajrx)*ajsyrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajsyst+ajtz*ajtx*ajsytt+ajrxz*ajsyr+ajsxz*
     & ajsys+ajtxz*ajsyt
                      ajsyyz = ajrz*ajry*ajsyrr+(ajsz*ajry+ajrz*ajsy)*
     & ajsyrs+ajsz*ajsy*ajsyss+(ajrz*ajty+ajtz*ajry)*ajsyrt+(ajtz*
     & ajsy+ajsz*ajty)*ajsyst+ajtz*ajty*ajsytt+ajryz*ajsyr+ajsyz*
     & ajsys+ajtyz*ajsyt
                      t1 = ajrz**2
                      t6 = ajsz**2
                      t14 = ajtz**2
                      ajsyzz = t1*ajsyrr+2*ajrz*ajsz*ajsyrs+t6*ajsyss+
     & 2*ajrz*ajtz*ajsyrt+2*ajsz*ajtz*ajsyst+t14*ajsytt+ajrzz*ajsyr+
     & ajszz*ajsys+ajtzz*ajsyt
                      t1 = ajrx**2
                      t6 = ajsx**2
                      t14 = ajtx**2
                      ajtyxx = t1*ajtyrr+2*ajrx*ajsx*ajtyrs+t6*ajtyss+
     & 2*ajrx*ajtx*ajtyrt+2*ajsx*ajtx*ajtyst+t14*ajtytt+ajrxx*ajtyr+
     & ajsxx*ajtys+ajtxx*ajtyt
                      ajtyxy = ajry*ajrx*ajtyrr+(ajsy*ajrx+ajry*ajsx)*
     & ajtyrs+ajsy*ajsx*ajtyss+(ajry*ajtx+ajty*ajrx)*ajtyrt+(ajty*
     & ajsx+ajsy*ajtx)*ajtyst+ajty*ajtx*ajtytt+ajrxy*ajtyr+ajsxy*
     & ajtys+ajtxy*ajtyt
                      t1 = ajry**2
                      t6 = ajsy**2
                      t14 = ajty**2
                      ajtyyy = t1*ajtyrr+2*ajry*ajsy*ajtyrs+t6*ajtyss+
     & 2*ajry*ajty*ajtyrt+2*ajsy*ajty*ajtyst+t14*ajtytt+ajryy*ajtyr+
     & ajsyy*ajtys+ajtyy*ajtyt
                      ajtyxz = ajrz*ajrx*ajtyrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajtyrs+ajsz*ajsx*ajtyss+(ajrz*ajtx+ajtz*ajrx)*ajtyrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajtyst+ajtz*ajtx*ajtytt+ajrxz*ajtyr+ajsxz*
     & ajtys+ajtxz*ajtyt
                      ajtyyz = ajrz*ajry*ajtyrr+(ajsz*ajry+ajrz*ajsy)*
     & ajtyrs+ajsz*ajsy*ajtyss+(ajrz*ajty+ajtz*ajry)*ajtyrt+(ajtz*
     & ajsy+ajsz*ajty)*ajtyst+ajtz*ajty*ajtytt+ajryz*ajtyr+ajsyz*
     & ajtys+ajtyz*ajtyt
                      t1 = ajrz**2
                      t6 = ajsz**2
                      t14 = ajtz**2
                      ajtyzz = t1*ajtyrr+2*ajrz*ajsz*ajtyrs+t6*ajtyss+
     & 2*ajrz*ajtz*ajtyrt+2*ajsz*ajtz*ajtyst+t14*ajtytt+ajrzz*ajtyr+
     & ajszz*ajtys+ajtzz*ajtyt
                      t1 = ajrx**2
                      t6 = ajsx**2
                      t14 = ajtx**2
                      ajrzxx = t1*ajrzrr+2*ajrx*ajsx*ajrzrs+t6*ajrzss+
     & 2*ajrx*ajtx*ajrzrt+2*ajsx*ajtx*ajrzst+t14*ajrztt+ajrxx*ajrzr+
     & ajsxx*ajrzs+ajtxx*ajrzt
                      ajrzxy = ajry*ajrx*ajrzrr+(ajsy*ajrx+ajry*ajsx)*
     & ajrzrs+ajsy*ajsx*ajrzss+(ajry*ajtx+ajty*ajrx)*ajrzrt+(ajty*
     & ajsx+ajsy*ajtx)*ajrzst+ajty*ajtx*ajrztt+ajrxy*ajrzr+ajsxy*
     & ajrzs+ajtxy*ajrzt
                      t1 = ajry**2
                      t6 = ajsy**2
                      t14 = ajty**2
                      ajrzyy = t1*ajrzrr+2*ajry*ajsy*ajrzrs+t6*ajrzss+
     & 2*ajry*ajty*ajrzrt+2*ajsy*ajty*ajrzst+t14*ajrztt+ajryy*ajrzr+
     & ajsyy*ajrzs+ajtyy*ajrzt
                      ajrzxz = ajrz*ajrx*ajrzrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajrzrs+ajsz*ajsx*ajrzss+(ajrz*ajtx+ajtz*ajrx)*ajrzrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajrzst+ajtz*ajtx*ajrztt+ajrxz*ajrzr+ajsxz*
     & ajrzs+ajtxz*ajrzt
                      ajrzyz = ajrz*ajry*ajrzrr+(ajsz*ajry+ajrz*ajsy)*
     & ajrzrs+ajsz*ajsy*ajrzss+(ajrz*ajty+ajtz*ajry)*ajrzrt+(ajtz*
     & ajsy+ajsz*ajty)*ajrzst+ajtz*ajty*ajrztt+ajryz*ajrzr+ajsyz*
     & ajrzs+ajtyz*ajrzt
                      t1 = ajrz**2
                      t6 = ajsz**2
                      t14 = ajtz**2
                      ajrzzz = t1*ajrzrr+2*ajrz*ajsz*ajrzrs+t6*ajrzss+
     & 2*ajrz*ajtz*ajrzrt+2*ajsz*ajtz*ajrzst+t14*ajrztt+ajrzz*ajrzr+
     & ajszz*ajrzs+ajtzz*ajrzt
                      t1 = ajrx**2
                      t6 = ajsx**2
                      t14 = ajtx**2
                      ajszxx = t1*ajszrr+2*ajrx*ajsx*ajszrs+t6*ajszss+
     & 2*ajrx*ajtx*ajszrt+2*ajsx*ajtx*ajszst+t14*ajsztt+ajrxx*ajszr+
     & ajsxx*ajszs+ajtxx*ajszt
                      ajszxy = ajry*ajrx*ajszrr+(ajsy*ajrx+ajry*ajsx)*
     & ajszrs+ajsy*ajsx*ajszss+(ajry*ajtx+ajty*ajrx)*ajszrt+(ajty*
     & ajsx+ajsy*ajtx)*ajszst+ajty*ajtx*ajsztt+ajrxy*ajszr+ajsxy*
     & ajszs+ajtxy*ajszt
                      t1 = ajry**2
                      t6 = ajsy**2
                      t14 = ajty**2
                      ajszyy = t1*ajszrr+2*ajry*ajsy*ajszrs+t6*ajszss+
     & 2*ajry*ajty*ajszrt+2*ajsy*ajty*ajszst+t14*ajsztt+ajryy*ajszr+
     & ajsyy*ajszs+ajtyy*ajszt
                      ajszxz = ajrz*ajrx*ajszrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajszrs+ajsz*ajsx*ajszss+(ajrz*ajtx+ajtz*ajrx)*ajszrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajszst+ajtz*ajtx*ajsztt+ajrxz*ajszr+ajsxz*
     & ajszs+ajtxz*ajszt
                      ajszyz = ajrz*ajry*ajszrr+(ajsz*ajry+ajrz*ajsy)*
     & ajszrs+ajsz*ajsy*ajszss+(ajrz*ajty+ajtz*ajry)*ajszrt+(ajtz*
     & ajsy+ajsz*ajty)*ajszst+ajtz*ajty*ajsztt+ajryz*ajszr+ajsyz*
     & ajszs+ajtyz*ajszt
                      t1 = ajrz**2
                      t6 = ajsz**2
                      t14 = ajtz**2
                      ajszzz = t1*ajszrr+2*ajrz*ajsz*ajszrs+t6*ajszss+
     & 2*ajrz*ajtz*ajszrt+2*ajsz*ajtz*ajszst+t14*ajsztt+ajrzz*ajszr+
     & ajszz*ajszs+ajtzz*ajszt
                      t1 = ajrx**2
                      t6 = ajsx**2
                      t14 = ajtx**2
                      ajtzxx = t1*ajtzrr+2*ajrx*ajsx*ajtzrs+t6*ajtzss+
     & 2*ajrx*ajtx*ajtzrt+2*ajsx*ajtx*ajtzst+t14*ajtztt+ajrxx*ajtzr+
     & ajsxx*ajtzs+ajtxx*ajtzt
                      ajtzxy = ajry*ajrx*ajtzrr+(ajsy*ajrx+ajry*ajsx)*
     & ajtzrs+ajsy*ajsx*ajtzss+(ajry*ajtx+ajty*ajrx)*ajtzrt+(ajty*
     & ajsx+ajsy*ajtx)*ajtzst+ajty*ajtx*ajtztt+ajrxy*ajtzr+ajsxy*
     & ajtzs+ajtxy*ajtzt
                      t1 = ajry**2
                      t6 = ajsy**2
                      t14 = ajty**2
                      ajtzyy = t1*ajtzrr+2*ajry*ajsy*ajtzrs+t6*ajtzss+
     & 2*ajry*ajty*ajtzrt+2*ajsy*ajty*ajtzst+t14*ajtztt+ajryy*ajtzr+
     & ajsyy*ajtzs+ajtyy*ajtzt
                      ajtzxz = ajrz*ajrx*ajtzrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajtzrs+ajsz*ajsx*ajtzss+(ajrz*ajtx+ajtz*ajrx)*ajtzrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajtzst+ajtz*ajtx*ajtztt+ajrxz*ajtzr+ajsxz*
     & ajtzs+ajtxz*ajtzt
                      ajtzyz = ajrz*ajry*ajtzrr+(ajsz*ajry+ajrz*ajsy)*
     & ajtzrs+ajsz*ajsy*ajtzss+(ajrz*ajty+ajtz*ajry)*ajtzrt+(ajtz*
     & ajsy+ajsz*ajty)*ajtzst+ajtz*ajty*ajtztt+ajryz*ajtzr+ajsyz*
     & ajtzs+ajtyz*ajtzt
                      t1 = ajrz**2
                      t6 = ajsz**2
                      t14 = ajtz**2
                      ajtzzz = t1*ajtzrr+2*ajrz*ajsz*ajtzrs+t6*ajtzss+
     & 2*ajrz*ajtz*ajtzrt+2*ajsz*ajtz*ajtzst+t14*ajtztt+ajrzz*ajtzr+
     & ajszz*ajtzs+ajtzz*ajtzt
                      ! define these derivatives of the mapping (which are not normally computed by the standard macros):
                     ajrxxr=ajrx*ajrxrr + ajsx*ajrxrs + ajtx*ajrxrt + 
     & ajrxr*ajrxr +ajsxr*ajrxs + ajtxr*ajrxt
                     ajrxxs=ajrx*ajrxrs + ajsx*ajrxss + ajtx*ajrxst + 
     & ajrxs*ajrxr +ajsxs*ajrxs + ajtxs*ajrxt
                     ajrxxt=ajrx*ajrxrt + ajsx*ajrxst + ajtx*ajrxtt + 
     & ajrxt*ajrxr +ajsxt*ajrxs + ajtxt*ajrxt
                     ajrxyr=ajry*ajrxrr + ajsy*ajrxrs + ajty*ajrxrt + 
     & ajryr*ajrxr +ajsyr*ajrxs + ajtyr*ajrxt
                     ajrxys=ajry*ajrxrs + ajsy*ajrxss + ajty*ajrxst + 
     & ajrys*ajrxr +ajsys*ajrxs + ajtys*ajrxt
                     ajrxyt=ajry*ajrxrt + ajsy*ajrxst + ajty*ajrxtt + 
     & ajryt*ajrxr +ajsyt*ajrxs + ajtyt*ajrxt
                     ajrxzr=ajrz*ajrxrr + ajsz*ajrxrs + ajtz*ajrxrt + 
     & ajrzr*ajrxr +ajszr*ajrxs + ajtzr*ajrxt
                     ajrxzs=ajrz*ajrxrs + ajsz*ajrxss + ajtz*ajrxst + 
     & ajrzs*ajrxr +ajszs*ajrxs + ajtzs*ajrxt
                     ajrxzt=ajrz*ajrxrt + ajsz*ajrxst + ajtz*ajrxtt + 
     & ajrzt*ajrxr +ajszt*ajrxs + ajtzt*ajrxt
                     ajryxr=ajrx*ajryrr + ajsx*ajryrs + ajtx*ajryrt + 
     & ajrxr*ajryr +ajsxr*ajrys + ajtxr*ajryt
                     ajryxs=ajrx*ajryrs + ajsx*ajryss + ajtx*ajryst + 
     & ajrxs*ajryr +ajsxs*ajrys + ajtxs*ajryt
                     ajryxt=ajrx*ajryrt + ajsx*ajryst + ajtx*ajrytt + 
     & ajrxt*ajryr +ajsxt*ajrys + ajtxt*ajryt
                     ajryyr=ajry*ajryrr + ajsy*ajryrs + ajty*ajryrt + 
     & ajryr*ajryr +ajsyr*ajrys + ajtyr*ajryt
                     ajryys=ajry*ajryrs + ajsy*ajryss + ajty*ajryst + 
     & ajrys*ajryr +ajsys*ajrys + ajtys*ajryt
                     ajryyt=ajry*ajryrt + ajsy*ajryst + ajty*ajrytt + 
     & ajryt*ajryr +ajsyt*ajrys + ajtyt*ajryt
                     ajryzr=ajrz*ajryrr + ajsz*ajryrs + ajtz*ajryrt + 
     & ajrzr*ajryr +ajszr*ajrys + ajtzr*ajryt
                     ajryzs=ajrz*ajryrs + ajsz*ajryss + ajtz*ajryst + 
     & ajrzs*ajryr +ajszs*ajrys + ajtzs*ajryt
                     ajryzt=ajrz*ajryrt + ajsz*ajryst + ajtz*ajrytt + 
     & ajrzt*ajryr +ajszt*ajrys + ajtzt*ajryt
                     ajrzxr=ajrx*ajrzrr + ajsx*ajrzrs + ajtx*ajrzrt + 
     & ajrxr*ajrzr +ajsxr*ajrzs + ajtxr*ajrzt
                     ajrzxs=ajrx*ajrzrs + ajsx*ajrzss + ajtx*ajrzst + 
     & ajrxs*ajrzr +ajsxs*ajrzs + ajtxs*ajrzt
                     ajrzxt=ajrx*ajrzrt + ajsx*ajrzst + ajtx*ajrztt + 
     & ajrxt*ajrzr +ajsxt*ajrzs + ajtxt*ajrzt
                     ajrzyr=ajry*ajrzrr + ajsy*ajrzrs + ajty*ajrzrt + 
     & ajryr*ajrzr +ajsyr*ajrzs + ajtyr*ajrzt
                     ajrzys=ajry*ajrzrs + ajsy*ajrzss + ajty*ajrzst + 
     & ajrys*ajrzr +ajsys*ajrzs + ajtys*ajrzt
                     ajrzyt=ajry*ajrzrt + ajsy*ajrzst + ajty*ajrztt + 
     & ajryt*ajrzr +ajsyt*ajrzs + ajtyt*ajrzt
                     ajrzzr=ajrz*ajrzrr + ajsz*ajrzrs + ajtz*ajrzrt + 
     & ajrzr*ajrzr +ajszr*ajrzs + ajtzr*ajrzt
                     ajrzzs=ajrz*ajrzrs + ajsz*ajrzss + ajtz*ajrzst + 
     & ajrzs*ajrzr +ajszs*ajrzs + ajtzs*ajrzt
                     ajrzzt=ajrz*ajrzrt + ajsz*ajrzst + ajtz*ajrztt + 
     & ajrzt*ajrzr +ajszt*ajrzs + ajtzt*ajrzt
                     ajsxxr=ajrx*ajsxrr + ajsx*ajsxrs + ajtx*ajsxrt + 
     & ajrxr*ajsxr +ajsxr*ajsxs + ajtxr*ajsxt
                     ajsxxs=ajrx*ajsxrs + ajsx*ajsxss + ajtx*ajsxst + 
     & ajrxs*ajsxr +ajsxs*ajsxs + ajtxs*ajsxt
                     ajsxxt=ajrx*ajsxrt + ajsx*ajsxst + ajtx*ajsxtt + 
     & ajrxt*ajsxr +ajsxt*ajsxs + ajtxt*ajsxt
                     ajsxyr=ajry*ajsxrr + ajsy*ajsxrs + ajty*ajsxrt + 
     & ajryr*ajsxr +ajsyr*ajsxs + ajtyr*ajsxt
                     ajsxys=ajry*ajsxrs + ajsy*ajsxss + ajty*ajsxst + 
     & ajrys*ajsxr +ajsys*ajsxs + ajtys*ajsxt
                     ajsxyt=ajry*ajsxrt + ajsy*ajsxst + ajty*ajsxtt + 
     & ajryt*ajsxr +ajsyt*ajsxs + ajtyt*ajsxt
                     ajsxzr=ajrz*ajsxrr + ajsz*ajsxrs + ajtz*ajsxrt + 
     & ajrzr*ajsxr +ajszr*ajsxs + ajtzr*ajsxt
                     ajsxzs=ajrz*ajsxrs + ajsz*ajsxss + ajtz*ajsxst + 
     & ajrzs*ajsxr +ajszs*ajsxs + ajtzs*ajsxt
                     ajsxzt=ajrz*ajsxrt + ajsz*ajsxst + ajtz*ajsxtt + 
     & ajrzt*ajsxr +ajszt*ajsxs + ajtzt*ajsxt
                     ajsyxr=ajrx*ajsyrr + ajsx*ajsyrs + ajtx*ajsyrt + 
     & ajrxr*ajsyr +ajsxr*ajsys + ajtxr*ajsyt
                     ajsyxs=ajrx*ajsyrs + ajsx*ajsyss + ajtx*ajsyst + 
     & ajrxs*ajsyr +ajsxs*ajsys + ajtxs*ajsyt
                     ajsyxt=ajrx*ajsyrt + ajsx*ajsyst + ajtx*ajsytt + 
     & ajrxt*ajsyr +ajsxt*ajsys + ajtxt*ajsyt
                     ajsyyr=ajry*ajsyrr + ajsy*ajsyrs + ajty*ajsyrt + 
     & ajryr*ajsyr +ajsyr*ajsys + ajtyr*ajsyt
                     ajsyys=ajry*ajsyrs + ajsy*ajsyss + ajty*ajsyst + 
     & ajrys*ajsyr +ajsys*ajsys + ajtys*ajsyt
                     ajsyyt=ajry*ajsyrt + ajsy*ajsyst + ajty*ajsytt + 
     & ajryt*ajsyr +ajsyt*ajsys + ajtyt*ajsyt
                     ajsyzr=ajrz*ajsyrr + ajsz*ajsyrs + ajtz*ajsyrt + 
     & ajrzr*ajsyr +ajszr*ajsys + ajtzr*ajsyt
                     ajsyzs=ajrz*ajsyrs + ajsz*ajsyss + ajtz*ajsyst + 
     & ajrzs*ajsyr +ajszs*ajsys + ajtzs*ajsyt
                     ajsyzt=ajrz*ajsyrt + ajsz*ajsyst + ajtz*ajsytt + 
     & ajrzt*ajsyr +ajszt*ajsys + ajtzt*ajsyt
                     ajszxr=ajrx*ajszrr + ajsx*ajszrs + ajtx*ajszrt + 
     & ajrxr*ajszr +ajsxr*ajszs + ajtxr*ajszt
                     ajszxs=ajrx*ajszrs + ajsx*ajszss + ajtx*ajszst + 
     & ajrxs*ajszr +ajsxs*ajszs + ajtxs*ajszt
                     ajszxt=ajrx*ajszrt + ajsx*ajszst + ajtx*ajsztt + 
     & ajrxt*ajszr +ajsxt*ajszs + ajtxt*ajszt
                     ajszyr=ajry*ajszrr + ajsy*ajszrs + ajty*ajszrt + 
     & ajryr*ajszr +ajsyr*ajszs + ajtyr*ajszt
                     ajszys=ajry*ajszrs + ajsy*ajszss + ajty*ajszst + 
     & ajrys*ajszr +ajsys*ajszs + ajtys*ajszt
                     ajszyt=ajry*ajszrt + ajsy*ajszst + ajty*ajsztt + 
     & ajryt*ajszr +ajsyt*ajszs + ajtyt*ajszt
                     ajszzr=ajrz*ajszrr + ajsz*ajszrs + ajtz*ajszrt + 
     & ajrzr*ajszr +ajszr*ajszs + ajtzr*ajszt
                     ajszzs=ajrz*ajszrs + ajsz*ajszss + ajtz*ajszst + 
     & ajrzs*ajszr +ajszs*ajszs + ajtzs*ajszt
                     ajszzt=ajrz*ajszrt + ajsz*ajszst + ajtz*ajsztt + 
     & ajrzt*ajszr +ajszt*ajszs + ajtzt*ajszt
                     ajtxxr=ajrx*ajtxrr + ajsx*ajtxrs + ajtx*ajtxrt + 
     & ajrxr*ajtxr +ajsxr*ajtxs + ajtxr*ajtxt
                     ajtxxs=ajrx*ajtxrs + ajsx*ajtxss + ajtx*ajtxst + 
     & ajrxs*ajtxr +ajsxs*ajtxs + ajtxs*ajtxt
                     ajtxxt=ajrx*ajtxrt + ajsx*ajtxst + ajtx*ajtxtt + 
     & ajrxt*ajtxr +ajsxt*ajtxs + ajtxt*ajtxt
                     ajtxyr=ajry*ajtxrr + ajsy*ajtxrs + ajty*ajtxrt + 
     & ajryr*ajtxr +ajsyr*ajtxs + ajtyr*ajtxt
                     ajtxys=ajry*ajtxrs + ajsy*ajtxss + ajty*ajtxst + 
     & ajrys*ajtxr +ajsys*ajtxs + ajtys*ajtxt
                     ajtxyt=ajry*ajtxrt + ajsy*ajtxst + ajty*ajtxtt + 
     & ajryt*ajtxr +ajsyt*ajtxs + ajtyt*ajtxt
                     ajtxzr=ajrz*ajtxrr + ajsz*ajtxrs + ajtz*ajtxrt + 
     & ajrzr*ajtxr +ajszr*ajtxs + ajtzr*ajtxt
                     ajtxzs=ajrz*ajtxrs + ajsz*ajtxss + ajtz*ajtxst + 
     & ajrzs*ajtxr +ajszs*ajtxs + ajtzs*ajtxt
                     ajtxzt=ajrz*ajtxrt + ajsz*ajtxst + ajtz*ajtxtt + 
     & ajrzt*ajtxr +ajszt*ajtxs + ajtzt*ajtxt
                     ajtyxr=ajrx*ajtyrr + ajsx*ajtyrs + ajtx*ajtyrt + 
     & ajrxr*ajtyr +ajsxr*ajtys + ajtxr*ajtyt
                     ajtyxs=ajrx*ajtyrs + ajsx*ajtyss + ajtx*ajtyst + 
     & ajrxs*ajtyr +ajsxs*ajtys + ajtxs*ajtyt
                     ajtyxt=ajrx*ajtyrt + ajsx*ajtyst + ajtx*ajtytt + 
     & ajrxt*ajtyr +ajsxt*ajtys + ajtxt*ajtyt
                     ajtyyr=ajry*ajtyrr + ajsy*ajtyrs + ajty*ajtyrt + 
     & ajryr*ajtyr +ajsyr*ajtys + ajtyr*ajtyt
                     ajtyys=ajry*ajtyrs + ajsy*ajtyss + ajty*ajtyst + 
     & ajrys*ajtyr +ajsys*ajtys + ajtys*ajtyt
                     ajtyyt=ajry*ajtyrt + ajsy*ajtyst + ajty*ajtytt + 
     & ajryt*ajtyr +ajsyt*ajtys + ajtyt*ajtyt
                     ajtyzr=ajrz*ajtyrr + ajsz*ajtyrs + ajtz*ajtyrt + 
     & ajrzr*ajtyr +ajszr*ajtys + ajtzr*ajtyt
                     ajtyzs=ajrz*ajtyrs + ajsz*ajtyss + ajtz*ajtyst + 
     & ajrzs*ajtyr +ajszs*ajtys + ajtzs*ajtyt
                     ajtyzt=ajrz*ajtyrt + ajsz*ajtyst + ajtz*ajtytt + 
     & ajrzt*ajtyr +ajszt*ajtys + ajtzt*ajtyt
                     ajtzxr=ajrx*ajtzrr + ajsx*ajtzrs + ajtx*ajtzrt + 
     & ajrxr*ajtzr +ajsxr*ajtzs + ajtxr*ajtzt
                     ajtzxs=ajrx*ajtzrs + ajsx*ajtzss + ajtx*ajtzst + 
     & ajrxs*ajtzr +ajsxs*ajtzs + ajtxs*ajtzt
                     ajtzxt=ajrx*ajtzrt + ajsx*ajtzst + ajtx*ajtztt + 
     & ajrxt*ajtzr +ajsxt*ajtzs + ajtxt*ajtzt
                     ajtzyr=ajry*ajtzrr + ajsy*ajtzrs + ajty*ajtzrt + 
     & ajryr*ajtzr +ajsyr*ajtzs + ajtyr*ajtzt
                     ajtzys=ajry*ajtzrs + ajsy*ajtzss + ajty*ajtzst + 
     & ajrys*ajtzr +ajsys*ajtzs + ajtys*ajtzt
                     ajtzyt=ajry*ajtzrt + ajsy*ajtzst + ajty*ajtztt + 
     & ajryt*ajtzr +ajsyt*ajtzs + ajtyt*ajtzt
                     ajtzzr=ajrz*ajtzrr + ajsz*ajtzrs + ajtz*ajtzrt + 
     & ajrzr*ajtzr +ajszr*ajtzs + ajtzr*ajtzt
                     ajtzzs=ajrz*ajtzrs + ajsz*ajtzss + ajtz*ajtzst + 
     & ajrzs*ajtzr +ajszs*ajtzs + ajtzs*ajtzt
                     ajtzzt=ajrz*ajtzrt + ajsz*ajtzst + ajtz*ajtztt + 
     & ajrzt*ajtzr +ajszt*ajtzs + ajtzt*ajtzt
                     ! ***************************************************************
                     ! PDE: cxx*uxx + cyy*uyy + czz*uzz + cxy*uxy + cxz*uxz + cyz*uyz + cx*ux + cy*uy + cz*uz + c0 *u = f 
                     ! PDE: cRR*urr + cSS*uss + cTT*utt + cRS*urs + cRT*urt + cST*ust  + ccR*ur + ccS*us + ccT*ut + c0 *u = f 
                     ! =============== Start: Laplace operator: ==================== 
                      cxx=1.
                      cyy=1.
                      czz=1.
                      cxy=0.
                      cxz=0.
                      cyz=0.
                      cx=0.
                      cy=0.
                      cz=0.
                      c0=0.
                      cRR=cxx*ajrx**2+cyy*ajry**2+czz*ajrz**2 +cxy*
     & ajrx*ajry+cxz*ajrx*ajrz+cyz*ajry*ajrz
                      cSS=cxx*ajsx**2+cyy*ajsy**2+czz*ajsz**2 +cxy*
     & ajsx*ajsy+cxz*ajsx*ajsz+cyz*ajsy*ajsz
                      cTT=cxx*ajtx**2+cyy*ajty**2+czz*ajtz**2 +cxy*
     & ajtx*ajty+cxz*ajtx*ajtz+cyz*ajty*ajtz
                      cRS=2.*(cxx*ajrx*ajsx+cyy*ajry*ajsy+czz*ajrz*
     & ajsz) +cxy*(ajrx*ajsy+ajry*ajsx)+cxz*(ajrx*ajsz+ajrz*ajsx)+cyz*
     & (ajry*ajsz+ajrz*ajsy)
                      cRT=2.*(cxx*ajrx*ajtx+cyy*ajry*ajty+czz*ajrz*
     & ajtz) +cxy*(ajrx*ajty+ajry*ajtx)+cxz*(ajrx*ajtz+ajrz*ajtx)+cyz*
     & (ajry*ajtz+ajrz*ajty)
                      cST=2.*(cxx*ajsx*ajtx+cyy*ajsy*ajty+czz*ajsz*
     & ajtz) +cxy*(ajsx*ajty+ajsy*ajtx)+cxz*(ajsx*ajtz+ajsz*ajtx)+cyz*
     & (ajsy*ajtz+ajsz*ajty)
                      ccR=cxx*ajrxx+cyy*ajryy+czz*ajrzz +cxy*ajrxy+cxz*
     & ajrxz+cyz*ajryz + cx*ajrx+cy*ajry+cz*ajrz
                      ccS=cxx*ajsxx+cyy*ajsyy+czz*ajszz +cxy*ajsxy+cxz*
     & ajsxz+cyz*ajsyz + cx*ajsx+cy*ajsy+cz*ajsz
                      ccT=cxx*ajtxx+cyy*ajtyy+czz*ajtzz +cxy*ajtxy+cxz*
     & ajtxz+cyz*ajtyz + cx*ajtx+cy*ajty+cz*ajtz
                     ! m=1...
                      cRRr=2.*(ajrx*ajrxr+ajry*ajryr+ajrz*ajrzr)
                      cRSr=2.*(ajrxr*ajsx+ajrx*ajsxr + ajryr*ajsy+ 
     & ajry*ajsyr + ajrzr*ajsz+ ajrz*ajszr)
                      cRTr=2.*(ajrxr*ajtx+ajrx*ajtxr + ajryr*ajty+ 
     & ajry*ajtyr + ajrzr*ajtz+ ajrz*ajtzr)
                      ccRr=ajrxxr+ajryyr+ajrzzr
                      cRRs=2.*(ajrx*ajrxs+ajry*ajrys+ajrz*ajrzs)
                      cRSs=2.*(ajrxs*ajsx+ajrx*ajsxs + ajrys*ajsy+ 
     & ajry*ajsys + ajrzs*ajsz+ ajrz*ajszs)
                      cRTs=2.*(ajrxs*ajtx+ajrx*ajtxs + ajrys*ajty+ 
     & ajry*ajtys + ajrzs*ajtz+ ajrz*ajtzs)
                      ccRs=ajrxxs+ajryys+ajrzzs
                      cRRt=2.*(ajrx*ajrxt+ajry*ajryt+ajrz*ajrzt)
                      cRSt=2.*(ajrxt*ajsx+ajrx*ajsxt + ajryt*ajsy+ 
     & ajry*ajsyt + ajrzt*ajsz+ ajrz*ajszt)
                      cRTt=2.*(ajrxt*ajtx+ajrx*ajtxt + ajryt*ajty+ 
     & ajry*ajtyt + ajrzt*ajtz+ ajrz*ajtzt)
                      ccRt=ajrxxt+ajryyt+ajrzzt
                     ! m=2...
                      cSSr=2.*(ajsx*ajsxr+ajsy*ajsyr+ajsz*ajszr)
                      cSTr=2.*(ajsxr*ajtx+ajsx*ajtxr + ajsyr*ajty+ 
     & ajsy*ajtyr + ajszr*ajtz+ ajsz*ajtzr)
                      ccSr=ajsxxr+ajsyyr+ajszzr
                      cSSs=2.*(ajsx*ajsxs+ajsy*ajsys+ajsz*ajszs)
                      cSTs=2.*(ajsxs*ajtx+ajsx*ajtxs + ajsys*ajty+ 
     & ajsy*ajtys + ajszs*ajtz+ ajsz*ajtzs)
                      ccSs=ajsxxs+ajsyys+ajszzs
                      cSSt=2.*(ajsx*ajsxt+ajsy*ajsyt+ajsz*ajszt)
                      cSTt=2.*(ajsxt*ajtx+ajsx*ajtxt + ajsyt*ajty+ 
     & ajsy*ajtyt + ajszt*ajtz+ ajsz*ajtzt)
                      ccSt=ajsxxt+ajsyyt+ajszzt
                     ! m=3...
                      cTTr=2.*(ajtx*ajtxr+ajty*ajtyr+ajtz*ajtzr)
                      ccTr=ajtxxr+ajtyyr+ajtzzr
                      cTTs=2.*(ajtx*ajtxs+ajty*ajtys+ajtz*ajtzs)
                      ccTs=ajtxxs+ajtyys+ajtzzs
                      cTTt=2.*(ajtx*ajtxt+ajty*ajtyt+ajtz*ajtzt)
                      ccTt=ajtxxt+ajtyyt+ajtzzt
                      c0r=0.
                      c0s=0.
                      c0t=0.
                     ! =============== End: Laplace operator: ==================== 
                     ! ---------------- Start: Boundary condition: --------------- 
                     ! BC: a1*u.n + a0*u = g 
                     ! nsign=2*side-1
                     ! a1=1.
                     ! a0=0.
                      ! ---------------- Start r direction ---------------
                      ! Outward normal : (n1,n2,n3) 
                      ani=nsign/sqrt(ajrx**2+ajry**2+ajrz**2)
                      n1=ajrx*ani
                      n2=ajry*ani
                      n3=ajrz*ani
                      ! BC : anR*ur + anS*us + anT*ut + a0*u 
                      anR=a1*(n1*ajrx+n2*ajry+n3*ajrz)
                      anS=a1*(n1*ajsx+n2*ajsy+n3*ajsz)
                      anT=a1*(n1*ajtx+n2*ajty+n3*ajtz)
                     ! >>>>>>>
                      anis=-(ajrx*ajrxs+ajry*ajrys+ajrz*ajrzs)*ani**3
                      aniss=-(ajrx*ajrxss+ajry*ajryss+ajrz*ajrzss+
     & ajrxs*ajrxs+ajrys*ajrys+ajrzs*ajrzs)*ani**3 -3.*(ajrx*ajrxs+
     & ajry*ajrys+ajrz*ajrzs)*ani**2*anis
                      n1s=ajrxs*ani + ajrx*anis
                      n1ss=ajrxss*ani + 2.*ajrxs*anis + ajrx*aniss
                      n2s=ajrys*ani + ajry*anis
                      n2ss=ajryss*ani + 2.*ajrys*anis + ajry*aniss
                      n3s=ajrzs*ani + ajrz*anis
                      n3ss=ajrzss*ani + 2.*ajrzs*anis + ajrz*aniss
                      anRs =a1*(n1*ajrxs+n2*ajrys+n3*ajrzs+n1s*ajrx+
     & n2s*ajry+n3s*ajrz)
                      anRss=a1*(n1*ajrxss+n2*ajryss+n3*ajrzss+2.*(n1s*
     & ajrxs+n2s*ajrys+n3s*ajrzs)+n1ss*ajrx+n2ss*ajry+n3ss*ajrz)
                      anSs =a1*(n1*ajsxs+n2*ajsys+n3*ajszs+n1s*ajsx+
     & n2s*ajsy+n3s*ajsz)
                      anSss=a1*(n1*ajsxss+n2*ajsyss+n3*ajszss+2.*(n1s*
     & ajsxs+n2s*ajsys+n3s*ajszs)+n1ss*ajsx+n2ss*ajsy+n3ss*ajsz)
                      anTs =a1*(n1*ajtxs+n2*ajtys+n3*ajtzs+n1s*ajtx+
     & n2s*ajty+n3s*ajtz)
                      anTss=a1*(n1*ajtxss+n2*ajtyss+n3*ajtzss+2.*(n1s*
     & ajtxs+n2s*ajtys+n3s*ajtzs)+n1ss*ajtx+n2ss*ajty+n3ss*ajtz)
                     ! <<<<<<<
                     ! >>>>>>>
                      anit=-(ajrx*ajrxt+ajry*ajryt+ajrz*ajrzt)*ani**3
                      anitt=-(ajrx*ajrxtt+ajry*ajrytt+ajrz*ajrztt+
     & ajrxt*ajrxt+ajryt*ajryt+ajrzt*ajrzt)*ani**3 -3.*(ajrx*ajrxt+
     & ajry*ajryt+ajrz*ajrzt)*ani**2*anit
                      anist=-(ajrx*ajrxst+ajry*ajryst+ajrz*ajrzst+
     & ajrxs*ajrxt+ajrys*ajryt+ajrzs*ajrzt)*ani**3 -3.*(ajrx*ajrxs+
     & ajry*ajrys+ajrz*ajrzs)*ani**2*anit
                      n1t=ajrxt*ani + ajrx*anit
                      n1tt=ajrxtt*ani + 2.*ajrxt*anit + ajrx*anitt
                      n1st=ajrxst*ani + ajrxt*anis + ajrxs*anit + ajrx*
     & anist
                      n2t=ajryt*ani + ajry*anit
                      n2tt=ajrytt*ani + 2.*ajryt*anit + ajry*anitt
                      n2st=ajryst*ani + ajryt*anis + ajrys*anit + ajry*
     & anist
                      n3t=ajrzt*ani + ajrz*anit
                      n3tt=ajrztt*ani + 2.*ajrzt*anit + ajrz*anitt
                      n3st=ajrzst*ani + ajrzt*anis + ajrzs*anit + ajrz*
     & anist
                      anRt =a1*(n1*ajrxt+n2*ajryt+n3*ajrzt+n1t*ajrx+
     & n2t*ajry+n3t*ajrz)
                      anRtt=a1*(n1*ajrxtt+n2*ajrytt+n3*ajrztt+2.*(n1t*
     & ajrxt+n2t*ajryt+n3t*ajrzt)+n1tt*ajrx+n2tt*ajry+n3tt*ajrz)
                      anRst=a1*(n1*ajrxst+n2*ajryst+n3*ajrzst +n1s*
     & ajrxt+n2s*ajryt+n3s*ajrzt +n1t*ajrxs+n2t*ajrys+n3t*ajrzs +n1st*
     & ajrx+n2st*ajry+n3st*ajrz)
                      anSt =a1*(n1*ajsxt+n2*ajsyt+n3*ajszt+n1t*ajsx+
     & n2t*ajsy+n3t*ajsz)
                      anStt=a1*(n1*ajsxtt+n2*ajsytt+n3*ajsztt+2.*(n1t*
     & ajsxt+n2t*ajsyt+n3t*ajszt)+n1tt*ajsx+n2tt*ajsy+n3tt*ajsz)
                      anSst=a1*(n1*ajsxst+n2*ajsyst+n3*ajszst +n1s*
     & ajsxt+n2s*ajsyt+n3s*ajszt +n1t*ajsxs+n2t*ajsys+n3t*ajszs +n1st*
     & ajsx+n2st*ajsy+n3st*ajsz)
                      anTt =a1*(n1*ajtxt+n2*ajtyt+n3*ajtzt+n1t*ajtx+
     & n2t*ajty+n3t*ajtz)
                      anTtt=a1*(n1*ajtxtt+n2*ajtytt+n3*ajtztt+2.*(n1t*
     & ajtxt+n2t*ajtyt+n3t*ajtzt)+n1tt*ajtx+n2tt*ajty+n3tt*ajtz)
                      anTst=a1*(n1*ajtxst+n2*ajtyst+n3*ajtzst +n1s*
     & ajtxt+n2s*ajtyt+n3s*ajtzt +n1t*ajtxs+n2t*ajtys+n3t*ajtzs +n1st*
     & ajtx+n2st*ajty+n3st*ajtz)
                     ! <<<<<<<
                      ! Here are the expressions for the normal derivatives
                     bn3 = 1
                     bn2 = 0
                     bn2 = 0
                     bn1 = 0
                     b0  = -(-c0r*anR**3*cRR**2+cRRr*anR**3*cRR*c0-cRS*
     & cRRs*anR**3*c0+cRS*c0s*anR**3*cRR-cRS**2*cRR*a0ss*anR**2-2*cRS*
     & *2*cRR*anRs**2*a0+cRRs*anR**2*cRS**2*a0s+cSS*cRR**2*a0ss*anR**
     & 2+2*cSS*cRR**2*anRs**2*a0+cRT*c0t*anR**3*cRR-cRT*cRRt*anR**3*
     & c0-cRT**2*cRR*a0tt*anR**2-2*cRT**2*cRR*anRt**2*a0+cRRt*anR**2*
     & cRT**2*a0t+cST*cRR**2*a0st*anR**2+cTT*cRR**2*a0tt*anR**2+2*cTT*
     & cRR**2*anRt**2*a0-ccR**2*anR**2*cRR*a0+ccR*anR**3*cRR*c0+ccS*
     & anR**2*cRR**2*a0s+ccT*anR**2*cRR**2*a0t+c0*anR**2*cRR**2*a0+
     & cRSr*anR**2*cRR**2*a0s+cRTr*anR**2*cRR**2*a0t+ccRr*anR**2*cRR**
     & 2*a0-cRRr*anR**2*cRR*cRS*a0s+cRRr*anR*cRR*cRS*anRs*a0-cRRr*anR*
     & *2*cRR*cRT*a0t+cRRr*anR*cRR*cRT*anRt*a0-cRRr*anR**2*cRR*ccR*a0+
     & 2*cRS**2*cRR*anRs*a0s*anR+cRS**2*cRR*anRss*anR*a0-2*cRS*cRT*
     & cRR*a0st*anR**2+2*cRS*cRT*cRR*anRs*a0t*anR-4*cRS*cRT*cRR*anRs*
     & anRt*a0+2*cRS*cRT*cRR*anRt*a0s*anR+2*cRS*cRT*cRR*anRst*anR*a0-
     & 2*cRS*ccR*anR**2*cRR*a0s+2*cRS*ccR*anR*cRR*anRs*a0-cRS*cRSs*
     & anR**2*cRR*a0s+cRS*cRSs*anR*cRR*anRs*a0-cRS*cRTs*anR**2*cRR*
     & a0t+cRS*cRTs*anR*cRR*anRt*a0-cRS*ccRs*anR**2*cRR*a0-cRRs*anR*
     & cRS**2*anRs*a0+cRS*cRRs*anR**2*cRT*a0t-cRS*cRRs*anR*cRT*anRt*
     & a0+cRS*cRRs*anR**2*ccR*a0-2*cSS*cRR**2*anRs*a0s*anR-cSS*cRR**2*
     & anRss*anR*a0+2*cRT**2*cRR*anRt*a0t*anR+cRT**2*cRR*anRtt*anR*a0-
     & 2*cRT*ccR*anR**2*cRR*a0t+2*cRT*ccR*anR*cRR*anRt*a0-cRT*cRSt*
     & anR**2*cRR*a0s+cRT*cRSt*anR*cRR*anRs*a0-cRT*cRTt*anR**2*cRR*
     & a0t+cRT*cRTt*anR*cRR*anRt*a0-cRT*ccRt*anR**2*cRR*a0+cRT*cRRt*
     & anR**2*cRS*a0s-cRT*cRRt*anR*cRS*anRs*a0-cRRt*anR*cRT**2*anRt*
     & a0+cRT*cRRt*anR**2*ccR*a0-cST*cRR**2*anRs*a0t*anR+2*cST*cRR**2*
     & anRs*anRt*a0-cST*cRR**2*anRt*a0s*anR-cST*cRR**2*anRst*anR*a0-2*
     & cTT*cRR**2*anRt*a0t*anR-cTT*cRR**2*anRtt*anR*a0-ccS*anR*cRR**2*
     & anRs*a0-ccT*anR*cRR**2*anRt*a0-cRSr*anR*cRR**2*anRs*a0-cRTr*
     & anR*cRR**2*anRt*a0)/anR**3/cRR**3
                      ! ---------------- Start s direction ---------------
                      ! ---------------- Start t direction ---------------
                     ! write(*,'(''LS:matrix: side,axis,axisp1,b0,b1,b3,br2 ='',2i2,i3,4e11.3)') side,axis,axisp1,b0,b1,b3,br2
                     ! bn2 = -(-cRRr*anR**3*cRR+cRT*cRRt*anR**3+cRS*cRRs*anR**3-ccR*anR**3*cRR)/anR**3/cRR**2
                     ! write(*,'("LS-NE4:matrix: i1,i2=",2i3," Values:")') i1,i2
                     ! write(*,'("  cRR,anR,cRRr,cRT,cRRt,cRS,cRRs,ccR=",8e11.3)') cRR,anR,cRRr,cRT,cRRt,cRS,cRRs,ccR
                  ! b0  = -(2*cRS**2*anRs*a0s*anR+cRS**2*anRss*anR*a0-2*cRS*cRT*a0st*anR**2-cRS*ccR*anR**2*a0s-cRS*cRSs*anR**2*a0s-cRS*cRTs*anR**2*a0t-cRS*ccRs*anR**2*a0+cSS*cRR*a0ss*anR**2+2*cSS*cRR*anRs**2*a0-cRT*ccR*anR**2*a0t-cRT*cRSt*anR**2*a0s+cRT*c0t*anR**3-c0r*anR**3*cRR-cRS**2*a0ss*anR**2-2*cRS**2*anRs**2*a0+cRS*c0s*anR**3-cRT**2*a0tt*anR**2-2*cRT**2*anRt**2*a0+2*cRS*cRT*anRs*a0t*anR-4*cRS*cRT*anRs*anRt*a0+2*cRS*cRT*anRt*a0s*anR+2*cRS*cRT*anRst*anR*a0+cRS*ccR*anR*anRs*a0+cRS*cRSs*anR*anRs*a0+cRS*cRTs*anR*anRt*a0-2*cSS*cRR*anRs*a0s*anR-cSS*cRR*anRss*anR*a0-cRT*cRTt*anR**2*a0t-cRT*ccRt*anR**2*a0+cRT**2*anRtt*anR*a0+2*cRT**2*anRt*a0t*anR+cST*cRR*a0st*anR**2+cTT*cRR*a0tt*anR**2+2*cTT*cRR*anRt**2*a0+ccS*anR**2*cRR*a0s+ccT*anR**2*cRR*a0t+c0*anR**2*cRR*a0+cRSr*anR**2*cRR*a0s+cRTr*anR**2*cRR*a0t+ccRr*anR**2*cRR*a0+cRT*ccR*anR*anRt*a0+cRT*cRSt*anR*anRs*a0+cRT*cRTt*anR*anRt*a0-cST*cRR*anRs*a0t*anR+2*cST*cRR*anRs*anRt*a0-cST*cRR*anRt*a0s*anR-cST*cRR*anRst*anR*a0-cTT*cRR*anRtt*anR*a0-2*cTT*cRR*anRt*a0t*anR-ccS*anR*cRR*anRs*a0-ccT*anR*cRR*anRt*a0-cRSr*anR*cRR*anRs*a0-cRTr*anR*cRR*anRt*a0)/anR**3/cRR**2
                     ! write(*,'("anRs,a0s,anRss,a0st,cRTs,a0t,a0,cSS,a0ss=",9e10.2)') anRs,a0s,anRss,a0st,cRTs,a0t,a0,cSS,a0ss
                     ! write(*,'(" b0,bn2 =",4e11.3)') b0,bn2
                     d(j1,j2,j3)=-.5/dr(axis)**3
                     e(j1,j2,j3)= 1./dr(axis)**3    +bn2/dr(axis)**2
                     a(j1,j2,j3)=                -2.*bn2/dr(axis)**2 - 
     & b0
                     b(j1,j2,j3)=-1./dr(axis)**3    +bn2/dr(axis)**2
                     c(j1,j2,j3)= .5/dr(axis)**3
                    else if( mask(i1,i2,i3).lt.0 ) then
                        b(j1,j2,j3)= 1.
                        c(j1,j2,j3)=-4.
                        d(j1,j2,j3)= 6.
                        e(j1,j2,j3)=-4.
                        a(j1,j2,j3)= 1.
                    end if
                   end do
                   end do
                   end do
                else if( axis.eq.1 .and. nd.eq.3 )then
                   if( equationToSolve.ne.laplaceEquation )then
                     write(*,'("Ogmg:LSB:ERROR: equation!=laplace")')
                     write(*,'("equationToSolve=",i2)') equationToSolve
                     write(*,'("gridType=",i2)') gridType
                     write(*,'("sparseStencil=",i2)') sparseStencil
                     stop 5054
                   end if
                   nsign = 2*side-1
                   ! write(*,'(''MGLS: neumannAndEquationCurvilinear: a0,a1='',2f6.2)') a0,a1
                   diag=0. ! for now
                   do j3=l3a,l3b
                   do j2=l2a,l2b
                   do j1=l1a,l1b
                    i1=j1+2*is1 ! (i1,i2,i3) is the boundary point
                    i2=j2+2*is2 ! (j1,j2,j3) is the 2nd ghost line
                    i3=j3+2*is3
                    if( mask(i1,i2,i3).gt.0 ) then
                     ! We need 2 parameteric and 1 real derivative. Do this for now: 
                      ! this next call will define the jacobian and its derivatives (parameteric and spatial)
                      ajrx = rsxy(i1,i2,i3,0,0)
                      ajrxr = (rsxy(i1-2,i2,i3,0,0)-8.*rsxy(i1-1,i2,i3,
     & 0,0)+8.*rsxy(i1+1,i2,i3,0,0)-rsxy(i1+2,i2,i3,0,0))/(12.*dr(0))
                      ajrxs = (rsxy(i1,i2-2,i3,0,0)-8.*rsxy(i1,i2-1,i3,
     & 0,0)+8.*rsxy(i1,i2+1,i3,0,0)-rsxy(i1,i2+2,i3,0,0))/(12.*dr(1))
                      ajrxt = (rsxy(i1,i2,i3-2,0,0)-8.*rsxy(i1,i2,i3-1,
     & 0,0)+8.*rsxy(i1,i2,i3+1,0,0)-rsxy(i1,i2,i3+2,0,0))/(12.*dr(2))
                      ajrxrr = (-rsxy(i1-2,i2,i3,0,0)+16.*rsxy(i1-1,i2,
     & i3,0,0)-30.*rsxy(i1,i2,i3,0,0)+16.*rsxy(i1+1,i2,i3,0,0)-rsxy(
     & i1+2,i2,i3,0,0))/(12.*dr(0)**2)
                      ajrxrs = ((rsxy(i1-2,i2-2,i3,0,0)-8.*rsxy(i1-2,
     & i2-1,i3,0,0)+8.*rsxy(i1-2,i2+1,i3,0,0)-rsxy(i1-2,i2+2,i3,0,0))
     & /(12.*dr(1))-8.*(rsxy(i1-1,i2-2,i3,0,0)-8.*rsxy(i1-1,i2-1,i3,0,
     & 0)+8.*rsxy(i1-1,i2+1,i3,0,0)-rsxy(i1-1,i2+2,i3,0,0))/(12.*dr(1)
     & )+8.*(rsxy(i1+1,i2-2,i3,0,0)-8.*rsxy(i1+1,i2-1,i3,0,0)+8.*rsxy(
     & i1+1,i2+1,i3,0,0)-rsxy(i1+1,i2+2,i3,0,0))/(12.*dr(1))-(rsxy(i1+
     & 2,i2-2,i3,0,0)-8.*rsxy(i1+2,i2-1,i3,0,0)+8.*rsxy(i1+2,i2+1,i3,
     & 0,0)-rsxy(i1+2,i2+2,i3,0,0))/(12.*dr(1)))/(12.*dr(0))
                      ajrxss = (-rsxy(i1,i2-2,i3,0,0)+16.*rsxy(i1,i2-1,
     & i3,0,0)-30.*rsxy(i1,i2,i3,0,0)+16.*rsxy(i1,i2+1,i3,0,0)-rsxy(
     & i1,i2+2,i3,0,0))/(12.*dr(1)**2)
                      ajrxrt = ((rsxy(i1-2,i2,i3-2,0,0)-8.*rsxy(i1-2,
     & i2,i3-1,0,0)+8.*rsxy(i1-2,i2,i3+1,0,0)-rsxy(i1-2,i2,i3+2,0,0))
     & /(12.*dr(2))-8.*(rsxy(i1-1,i2,i3-2,0,0)-8.*rsxy(i1-1,i2,i3-1,0,
     & 0)+8.*rsxy(i1-1,i2,i3+1,0,0)-rsxy(i1-1,i2,i3+2,0,0))/(12.*dr(2)
     & )+8.*(rsxy(i1+1,i2,i3-2,0,0)-8.*rsxy(i1+1,i2,i3-1,0,0)+8.*rsxy(
     & i1+1,i2,i3+1,0,0)-rsxy(i1+1,i2,i3+2,0,0))/(12.*dr(2))-(rsxy(i1+
     & 2,i2,i3-2,0,0)-8.*rsxy(i1+2,i2,i3-1,0,0)+8.*rsxy(i1+2,i2,i3+1,
     & 0,0)-rsxy(i1+2,i2,i3+2,0,0))/(12.*dr(2)))/(12.*dr(0))
                      ajrxst = ((rsxy(i1,i2-2,i3-2,0,0)-8.*rsxy(i1,i2-
     & 2,i3-1,0,0)+8.*rsxy(i1,i2-2,i3+1,0,0)-rsxy(i1,i2-2,i3+2,0,0))/(
     & 12.*dr(2))-8.*(rsxy(i1,i2-1,i3-2,0,0)-8.*rsxy(i1,i2-1,i3-1,0,0)
     & +8.*rsxy(i1,i2-1,i3+1,0,0)-rsxy(i1,i2-1,i3+2,0,0))/(12.*dr(2))+
     & 8.*(rsxy(i1,i2+1,i3-2,0,0)-8.*rsxy(i1,i2+1,i3-1,0,0)+8.*rsxy(
     & i1,i2+1,i3+1,0,0)-rsxy(i1,i2+1,i3+2,0,0))/(12.*dr(2))-(rsxy(i1,
     & i2+2,i3-2,0,0)-8.*rsxy(i1,i2+2,i3-1,0,0)+8.*rsxy(i1,i2+2,i3+1,
     & 0,0)-rsxy(i1,i2+2,i3+2,0,0))/(12.*dr(2)))/(12.*dr(1))
                      ajrxtt = (-rsxy(i1,i2,i3-2,0,0)+16.*rsxy(i1,i2,
     & i3-1,0,0)-30.*rsxy(i1,i2,i3,0,0)+16.*rsxy(i1,i2,i3+1,0,0)-rsxy(
     & i1,i2,i3+2,0,0))/(12.*dr(2)**2)
                      ajsx = rsxy(i1,i2,i3,1,0)
                      ajsxr = (rsxy(i1-2,i2,i3,1,0)-8.*rsxy(i1-1,i2,i3,
     & 1,0)+8.*rsxy(i1+1,i2,i3,1,0)-rsxy(i1+2,i2,i3,1,0))/(12.*dr(0))
                      ajsxs = (rsxy(i1,i2-2,i3,1,0)-8.*rsxy(i1,i2-1,i3,
     & 1,0)+8.*rsxy(i1,i2+1,i3,1,0)-rsxy(i1,i2+2,i3,1,0))/(12.*dr(1))
                      ajsxt = (rsxy(i1,i2,i3-2,1,0)-8.*rsxy(i1,i2,i3-1,
     & 1,0)+8.*rsxy(i1,i2,i3+1,1,0)-rsxy(i1,i2,i3+2,1,0))/(12.*dr(2))
                      ajsxrr = (-rsxy(i1-2,i2,i3,1,0)+16.*rsxy(i1-1,i2,
     & i3,1,0)-30.*rsxy(i1,i2,i3,1,0)+16.*rsxy(i1+1,i2,i3,1,0)-rsxy(
     & i1+2,i2,i3,1,0))/(12.*dr(0)**2)
                      ajsxrs = ((rsxy(i1-2,i2-2,i3,1,0)-8.*rsxy(i1-2,
     & i2-1,i3,1,0)+8.*rsxy(i1-2,i2+1,i3,1,0)-rsxy(i1-2,i2+2,i3,1,0))
     & /(12.*dr(1))-8.*(rsxy(i1-1,i2-2,i3,1,0)-8.*rsxy(i1-1,i2-1,i3,1,
     & 0)+8.*rsxy(i1-1,i2+1,i3,1,0)-rsxy(i1-1,i2+2,i3,1,0))/(12.*dr(1)
     & )+8.*(rsxy(i1+1,i2-2,i3,1,0)-8.*rsxy(i1+1,i2-1,i3,1,0)+8.*rsxy(
     & i1+1,i2+1,i3,1,0)-rsxy(i1+1,i2+2,i3,1,0))/(12.*dr(1))-(rsxy(i1+
     & 2,i2-2,i3,1,0)-8.*rsxy(i1+2,i2-1,i3,1,0)+8.*rsxy(i1+2,i2+1,i3,
     & 1,0)-rsxy(i1+2,i2+2,i3,1,0))/(12.*dr(1)))/(12.*dr(0))
                      ajsxss = (-rsxy(i1,i2-2,i3,1,0)+16.*rsxy(i1,i2-1,
     & i3,1,0)-30.*rsxy(i1,i2,i3,1,0)+16.*rsxy(i1,i2+1,i3,1,0)-rsxy(
     & i1,i2+2,i3,1,0))/(12.*dr(1)**2)
                      ajsxrt = ((rsxy(i1-2,i2,i3-2,1,0)-8.*rsxy(i1-2,
     & i2,i3-1,1,0)+8.*rsxy(i1-2,i2,i3+1,1,0)-rsxy(i1-2,i2,i3+2,1,0))
     & /(12.*dr(2))-8.*(rsxy(i1-1,i2,i3-2,1,0)-8.*rsxy(i1-1,i2,i3-1,1,
     & 0)+8.*rsxy(i1-1,i2,i3+1,1,0)-rsxy(i1-1,i2,i3+2,1,0))/(12.*dr(2)
     & )+8.*(rsxy(i1+1,i2,i3-2,1,0)-8.*rsxy(i1+1,i2,i3-1,1,0)+8.*rsxy(
     & i1+1,i2,i3+1,1,0)-rsxy(i1+1,i2,i3+2,1,0))/(12.*dr(2))-(rsxy(i1+
     & 2,i2,i3-2,1,0)-8.*rsxy(i1+2,i2,i3-1,1,0)+8.*rsxy(i1+2,i2,i3+1,
     & 1,0)-rsxy(i1+2,i2,i3+2,1,0))/(12.*dr(2)))/(12.*dr(0))
                      ajsxst = ((rsxy(i1,i2-2,i3-2,1,0)-8.*rsxy(i1,i2-
     & 2,i3-1,1,0)+8.*rsxy(i1,i2-2,i3+1,1,0)-rsxy(i1,i2-2,i3+2,1,0))/(
     & 12.*dr(2))-8.*(rsxy(i1,i2-1,i3-2,1,0)-8.*rsxy(i1,i2-1,i3-1,1,0)
     & +8.*rsxy(i1,i2-1,i3+1,1,0)-rsxy(i1,i2-1,i3+2,1,0))/(12.*dr(2))+
     & 8.*(rsxy(i1,i2+1,i3-2,1,0)-8.*rsxy(i1,i2+1,i3-1,1,0)+8.*rsxy(
     & i1,i2+1,i3+1,1,0)-rsxy(i1,i2+1,i3+2,1,0))/(12.*dr(2))-(rsxy(i1,
     & i2+2,i3-2,1,0)-8.*rsxy(i1,i2+2,i3-1,1,0)+8.*rsxy(i1,i2+2,i3+1,
     & 1,0)-rsxy(i1,i2+2,i3+2,1,0))/(12.*dr(2)))/(12.*dr(1))
                      ajsxtt = (-rsxy(i1,i2,i3-2,1,0)+16.*rsxy(i1,i2,
     & i3-1,1,0)-30.*rsxy(i1,i2,i3,1,0)+16.*rsxy(i1,i2,i3+1,1,0)-rsxy(
     & i1,i2,i3+2,1,0))/(12.*dr(2)**2)
                      ajtx = rsxy(i1,i2,i3,2,0)
                      ajtxr = (rsxy(i1-2,i2,i3,2,0)-8.*rsxy(i1-1,i2,i3,
     & 2,0)+8.*rsxy(i1+1,i2,i3,2,0)-rsxy(i1+2,i2,i3,2,0))/(12.*dr(0))
                      ajtxs = (rsxy(i1,i2-2,i3,2,0)-8.*rsxy(i1,i2-1,i3,
     & 2,0)+8.*rsxy(i1,i2+1,i3,2,0)-rsxy(i1,i2+2,i3,2,0))/(12.*dr(1))
                      ajtxt = (rsxy(i1,i2,i3-2,2,0)-8.*rsxy(i1,i2,i3-1,
     & 2,0)+8.*rsxy(i1,i2,i3+1,2,0)-rsxy(i1,i2,i3+2,2,0))/(12.*dr(2))
                      ajtxrr = (-rsxy(i1-2,i2,i3,2,0)+16.*rsxy(i1-1,i2,
     & i3,2,0)-30.*rsxy(i1,i2,i3,2,0)+16.*rsxy(i1+1,i2,i3,2,0)-rsxy(
     & i1+2,i2,i3,2,0))/(12.*dr(0)**2)
                      ajtxrs = ((rsxy(i1-2,i2-2,i3,2,0)-8.*rsxy(i1-2,
     & i2-1,i3,2,0)+8.*rsxy(i1-2,i2+1,i3,2,0)-rsxy(i1-2,i2+2,i3,2,0))
     & /(12.*dr(1))-8.*(rsxy(i1-1,i2-2,i3,2,0)-8.*rsxy(i1-1,i2-1,i3,2,
     & 0)+8.*rsxy(i1-1,i2+1,i3,2,0)-rsxy(i1-1,i2+2,i3,2,0))/(12.*dr(1)
     & )+8.*(rsxy(i1+1,i2-2,i3,2,0)-8.*rsxy(i1+1,i2-1,i3,2,0)+8.*rsxy(
     & i1+1,i2+1,i3,2,0)-rsxy(i1+1,i2+2,i3,2,0))/(12.*dr(1))-(rsxy(i1+
     & 2,i2-2,i3,2,0)-8.*rsxy(i1+2,i2-1,i3,2,0)+8.*rsxy(i1+2,i2+1,i3,
     & 2,0)-rsxy(i1+2,i2+2,i3,2,0))/(12.*dr(1)))/(12.*dr(0))
                      ajtxss = (-rsxy(i1,i2-2,i3,2,0)+16.*rsxy(i1,i2-1,
     & i3,2,0)-30.*rsxy(i1,i2,i3,2,0)+16.*rsxy(i1,i2+1,i3,2,0)-rsxy(
     & i1,i2+2,i3,2,0))/(12.*dr(1)**2)
                      ajtxrt = ((rsxy(i1-2,i2,i3-2,2,0)-8.*rsxy(i1-2,
     & i2,i3-1,2,0)+8.*rsxy(i1-2,i2,i3+1,2,0)-rsxy(i1-2,i2,i3+2,2,0))
     & /(12.*dr(2))-8.*(rsxy(i1-1,i2,i3-2,2,0)-8.*rsxy(i1-1,i2,i3-1,2,
     & 0)+8.*rsxy(i1-1,i2,i3+1,2,0)-rsxy(i1-1,i2,i3+2,2,0))/(12.*dr(2)
     & )+8.*(rsxy(i1+1,i2,i3-2,2,0)-8.*rsxy(i1+1,i2,i3-1,2,0)+8.*rsxy(
     & i1+1,i2,i3+1,2,0)-rsxy(i1+1,i2,i3+2,2,0))/(12.*dr(2))-(rsxy(i1+
     & 2,i2,i3-2,2,0)-8.*rsxy(i1+2,i2,i3-1,2,0)+8.*rsxy(i1+2,i2,i3+1,
     & 2,0)-rsxy(i1+2,i2,i3+2,2,0))/(12.*dr(2)))/(12.*dr(0))
                      ajtxst = ((rsxy(i1,i2-2,i3-2,2,0)-8.*rsxy(i1,i2-
     & 2,i3-1,2,0)+8.*rsxy(i1,i2-2,i3+1,2,0)-rsxy(i1,i2-2,i3+2,2,0))/(
     & 12.*dr(2))-8.*(rsxy(i1,i2-1,i3-2,2,0)-8.*rsxy(i1,i2-1,i3-1,2,0)
     & +8.*rsxy(i1,i2-1,i3+1,2,0)-rsxy(i1,i2-1,i3+2,2,0))/(12.*dr(2))+
     & 8.*(rsxy(i1,i2+1,i3-2,2,0)-8.*rsxy(i1,i2+1,i3-1,2,0)+8.*rsxy(
     & i1,i2+1,i3+1,2,0)-rsxy(i1,i2+1,i3+2,2,0))/(12.*dr(2))-(rsxy(i1,
     & i2+2,i3-2,2,0)-8.*rsxy(i1,i2+2,i3-1,2,0)+8.*rsxy(i1,i2+2,i3+1,
     & 2,0)-rsxy(i1,i2+2,i3+2,2,0))/(12.*dr(2)))/(12.*dr(1))
                      ajtxtt = (-rsxy(i1,i2,i3-2,2,0)+16.*rsxy(i1,i2,
     & i3-1,2,0)-30.*rsxy(i1,i2,i3,2,0)+16.*rsxy(i1,i2,i3+1,2,0)-rsxy(
     & i1,i2,i3+2,2,0))/(12.*dr(2)**2)
                      ajry = rsxy(i1,i2,i3,0,1)
                      ajryr = (rsxy(i1-2,i2,i3,0,1)-8.*rsxy(i1-1,i2,i3,
     & 0,1)+8.*rsxy(i1+1,i2,i3,0,1)-rsxy(i1+2,i2,i3,0,1))/(12.*dr(0))
                      ajrys = (rsxy(i1,i2-2,i3,0,1)-8.*rsxy(i1,i2-1,i3,
     & 0,1)+8.*rsxy(i1,i2+1,i3,0,1)-rsxy(i1,i2+2,i3,0,1))/(12.*dr(1))
                      ajryt = (rsxy(i1,i2,i3-2,0,1)-8.*rsxy(i1,i2,i3-1,
     & 0,1)+8.*rsxy(i1,i2,i3+1,0,1)-rsxy(i1,i2,i3+2,0,1))/(12.*dr(2))
                      ajryrr = (-rsxy(i1-2,i2,i3,0,1)+16.*rsxy(i1-1,i2,
     & i3,0,1)-30.*rsxy(i1,i2,i3,0,1)+16.*rsxy(i1+1,i2,i3,0,1)-rsxy(
     & i1+2,i2,i3,0,1))/(12.*dr(0)**2)
                      ajryrs = ((rsxy(i1-2,i2-2,i3,0,1)-8.*rsxy(i1-2,
     & i2-1,i3,0,1)+8.*rsxy(i1-2,i2+1,i3,0,1)-rsxy(i1-2,i2+2,i3,0,1))
     & /(12.*dr(1))-8.*(rsxy(i1-1,i2-2,i3,0,1)-8.*rsxy(i1-1,i2-1,i3,0,
     & 1)+8.*rsxy(i1-1,i2+1,i3,0,1)-rsxy(i1-1,i2+2,i3,0,1))/(12.*dr(1)
     & )+8.*(rsxy(i1+1,i2-2,i3,0,1)-8.*rsxy(i1+1,i2-1,i3,0,1)+8.*rsxy(
     & i1+1,i2+1,i3,0,1)-rsxy(i1+1,i2+2,i3,0,1))/(12.*dr(1))-(rsxy(i1+
     & 2,i2-2,i3,0,1)-8.*rsxy(i1+2,i2-1,i3,0,1)+8.*rsxy(i1+2,i2+1,i3,
     & 0,1)-rsxy(i1+2,i2+2,i3,0,1))/(12.*dr(1)))/(12.*dr(0))
                      ajryss = (-rsxy(i1,i2-2,i3,0,1)+16.*rsxy(i1,i2-1,
     & i3,0,1)-30.*rsxy(i1,i2,i3,0,1)+16.*rsxy(i1,i2+1,i3,0,1)-rsxy(
     & i1,i2+2,i3,0,1))/(12.*dr(1)**2)
                      ajryrt = ((rsxy(i1-2,i2,i3-2,0,1)-8.*rsxy(i1-2,
     & i2,i3-1,0,1)+8.*rsxy(i1-2,i2,i3+1,0,1)-rsxy(i1-2,i2,i3+2,0,1))
     & /(12.*dr(2))-8.*(rsxy(i1-1,i2,i3-2,0,1)-8.*rsxy(i1-1,i2,i3-1,0,
     & 1)+8.*rsxy(i1-1,i2,i3+1,0,1)-rsxy(i1-1,i2,i3+2,0,1))/(12.*dr(2)
     & )+8.*(rsxy(i1+1,i2,i3-2,0,1)-8.*rsxy(i1+1,i2,i3-1,0,1)+8.*rsxy(
     & i1+1,i2,i3+1,0,1)-rsxy(i1+1,i2,i3+2,0,1))/(12.*dr(2))-(rsxy(i1+
     & 2,i2,i3-2,0,1)-8.*rsxy(i1+2,i2,i3-1,0,1)+8.*rsxy(i1+2,i2,i3+1,
     & 0,1)-rsxy(i1+2,i2,i3+2,0,1))/(12.*dr(2)))/(12.*dr(0))
                      ajryst = ((rsxy(i1,i2-2,i3-2,0,1)-8.*rsxy(i1,i2-
     & 2,i3-1,0,1)+8.*rsxy(i1,i2-2,i3+1,0,1)-rsxy(i1,i2-2,i3+2,0,1))/(
     & 12.*dr(2))-8.*(rsxy(i1,i2-1,i3-2,0,1)-8.*rsxy(i1,i2-1,i3-1,0,1)
     & +8.*rsxy(i1,i2-1,i3+1,0,1)-rsxy(i1,i2-1,i3+2,0,1))/(12.*dr(2))+
     & 8.*(rsxy(i1,i2+1,i3-2,0,1)-8.*rsxy(i1,i2+1,i3-1,0,1)+8.*rsxy(
     & i1,i2+1,i3+1,0,1)-rsxy(i1,i2+1,i3+2,0,1))/(12.*dr(2))-(rsxy(i1,
     & i2+2,i3-2,0,1)-8.*rsxy(i1,i2+2,i3-1,0,1)+8.*rsxy(i1,i2+2,i3+1,
     & 0,1)-rsxy(i1,i2+2,i3+2,0,1))/(12.*dr(2)))/(12.*dr(1))
                      ajrytt = (-rsxy(i1,i2,i3-2,0,1)+16.*rsxy(i1,i2,
     & i3-1,0,1)-30.*rsxy(i1,i2,i3,0,1)+16.*rsxy(i1,i2,i3+1,0,1)-rsxy(
     & i1,i2,i3+2,0,1))/(12.*dr(2)**2)
                      ajsy = rsxy(i1,i2,i3,1,1)
                      ajsyr = (rsxy(i1-2,i2,i3,1,1)-8.*rsxy(i1-1,i2,i3,
     & 1,1)+8.*rsxy(i1+1,i2,i3,1,1)-rsxy(i1+2,i2,i3,1,1))/(12.*dr(0))
                      ajsys = (rsxy(i1,i2-2,i3,1,1)-8.*rsxy(i1,i2-1,i3,
     & 1,1)+8.*rsxy(i1,i2+1,i3,1,1)-rsxy(i1,i2+2,i3,1,1))/(12.*dr(1))
                      ajsyt = (rsxy(i1,i2,i3-2,1,1)-8.*rsxy(i1,i2,i3-1,
     & 1,1)+8.*rsxy(i1,i2,i3+1,1,1)-rsxy(i1,i2,i3+2,1,1))/(12.*dr(2))
                      ajsyrr = (-rsxy(i1-2,i2,i3,1,1)+16.*rsxy(i1-1,i2,
     & i3,1,1)-30.*rsxy(i1,i2,i3,1,1)+16.*rsxy(i1+1,i2,i3,1,1)-rsxy(
     & i1+2,i2,i3,1,1))/(12.*dr(0)**2)
                      ajsyrs = ((rsxy(i1-2,i2-2,i3,1,1)-8.*rsxy(i1-2,
     & i2-1,i3,1,1)+8.*rsxy(i1-2,i2+1,i3,1,1)-rsxy(i1-2,i2+2,i3,1,1))
     & /(12.*dr(1))-8.*(rsxy(i1-1,i2-2,i3,1,1)-8.*rsxy(i1-1,i2-1,i3,1,
     & 1)+8.*rsxy(i1-1,i2+1,i3,1,1)-rsxy(i1-1,i2+2,i3,1,1))/(12.*dr(1)
     & )+8.*(rsxy(i1+1,i2-2,i3,1,1)-8.*rsxy(i1+1,i2-1,i3,1,1)+8.*rsxy(
     & i1+1,i2+1,i3,1,1)-rsxy(i1+1,i2+2,i3,1,1))/(12.*dr(1))-(rsxy(i1+
     & 2,i2-2,i3,1,1)-8.*rsxy(i1+2,i2-1,i3,1,1)+8.*rsxy(i1+2,i2+1,i3,
     & 1,1)-rsxy(i1+2,i2+2,i3,1,1))/(12.*dr(1)))/(12.*dr(0))
                      ajsyss = (-rsxy(i1,i2-2,i3,1,1)+16.*rsxy(i1,i2-1,
     & i3,1,1)-30.*rsxy(i1,i2,i3,1,1)+16.*rsxy(i1,i2+1,i3,1,1)-rsxy(
     & i1,i2+2,i3,1,1))/(12.*dr(1)**2)
                      ajsyrt = ((rsxy(i1-2,i2,i3-2,1,1)-8.*rsxy(i1-2,
     & i2,i3-1,1,1)+8.*rsxy(i1-2,i2,i3+1,1,1)-rsxy(i1-2,i2,i3+2,1,1))
     & /(12.*dr(2))-8.*(rsxy(i1-1,i2,i3-2,1,1)-8.*rsxy(i1-1,i2,i3-1,1,
     & 1)+8.*rsxy(i1-1,i2,i3+1,1,1)-rsxy(i1-1,i2,i3+2,1,1))/(12.*dr(2)
     & )+8.*(rsxy(i1+1,i2,i3-2,1,1)-8.*rsxy(i1+1,i2,i3-1,1,1)+8.*rsxy(
     & i1+1,i2,i3+1,1,1)-rsxy(i1+1,i2,i3+2,1,1))/(12.*dr(2))-(rsxy(i1+
     & 2,i2,i3-2,1,1)-8.*rsxy(i1+2,i2,i3-1,1,1)+8.*rsxy(i1+2,i2,i3+1,
     & 1,1)-rsxy(i1+2,i2,i3+2,1,1))/(12.*dr(2)))/(12.*dr(0))
                      ajsyst = ((rsxy(i1,i2-2,i3-2,1,1)-8.*rsxy(i1,i2-
     & 2,i3-1,1,1)+8.*rsxy(i1,i2-2,i3+1,1,1)-rsxy(i1,i2-2,i3+2,1,1))/(
     & 12.*dr(2))-8.*(rsxy(i1,i2-1,i3-2,1,1)-8.*rsxy(i1,i2-1,i3-1,1,1)
     & +8.*rsxy(i1,i2-1,i3+1,1,1)-rsxy(i1,i2-1,i3+2,1,1))/(12.*dr(2))+
     & 8.*(rsxy(i1,i2+1,i3-2,1,1)-8.*rsxy(i1,i2+1,i3-1,1,1)+8.*rsxy(
     & i1,i2+1,i3+1,1,1)-rsxy(i1,i2+1,i3+2,1,1))/(12.*dr(2))-(rsxy(i1,
     & i2+2,i3-2,1,1)-8.*rsxy(i1,i2+2,i3-1,1,1)+8.*rsxy(i1,i2+2,i3+1,
     & 1,1)-rsxy(i1,i2+2,i3+2,1,1))/(12.*dr(2)))/(12.*dr(1))
                      ajsytt = (-rsxy(i1,i2,i3-2,1,1)+16.*rsxy(i1,i2,
     & i3-1,1,1)-30.*rsxy(i1,i2,i3,1,1)+16.*rsxy(i1,i2,i3+1,1,1)-rsxy(
     & i1,i2,i3+2,1,1))/(12.*dr(2)**2)
                      ajty = rsxy(i1,i2,i3,2,1)
                      ajtyr = (rsxy(i1-2,i2,i3,2,1)-8.*rsxy(i1-1,i2,i3,
     & 2,1)+8.*rsxy(i1+1,i2,i3,2,1)-rsxy(i1+2,i2,i3,2,1))/(12.*dr(0))
                      ajtys = (rsxy(i1,i2-2,i3,2,1)-8.*rsxy(i1,i2-1,i3,
     & 2,1)+8.*rsxy(i1,i2+1,i3,2,1)-rsxy(i1,i2+2,i3,2,1))/(12.*dr(1))
                      ajtyt = (rsxy(i1,i2,i3-2,2,1)-8.*rsxy(i1,i2,i3-1,
     & 2,1)+8.*rsxy(i1,i2,i3+1,2,1)-rsxy(i1,i2,i3+2,2,1))/(12.*dr(2))
                      ajtyrr = (-rsxy(i1-2,i2,i3,2,1)+16.*rsxy(i1-1,i2,
     & i3,2,1)-30.*rsxy(i1,i2,i3,2,1)+16.*rsxy(i1+1,i2,i3,2,1)-rsxy(
     & i1+2,i2,i3,2,1))/(12.*dr(0)**2)
                      ajtyrs = ((rsxy(i1-2,i2-2,i3,2,1)-8.*rsxy(i1-2,
     & i2-1,i3,2,1)+8.*rsxy(i1-2,i2+1,i3,2,1)-rsxy(i1-2,i2+2,i3,2,1))
     & /(12.*dr(1))-8.*(rsxy(i1-1,i2-2,i3,2,1)-8.*rsxy(i1-1,i2-1,i3,2,
     & 1)+8.*rsxy(i1-1,i2+1,i3,2,1)-rsxy(i1-1,i2+2,i3,2,1))/(12.*dr(1)
     & )+8.*(rsxy(i1+1,i2-2,i3,2,1)-8.*rsxy(i1+1,i2-1,i3,2,1)+8.*rsxy(
     & i1+1,i2+1,i3,2,1)-rsxy(i1+1,i2+2,i3,2,1))/(12.*dr(1))-(rsxy(i1+
     & 2,i2-2,i3,2,1)-8.*rsxy(i1+2,i2-1,i3,2,1)+8.*rsxy(i1+2,i2+1,i3,
     & 2,1)-rsxy(i1+2,i2+2,i3,2,1))/(12.*dr(1)))/(12.*dr(0))
                      ajtyss = (-rsxy(i1,i2-2,i3,2,1)+16.*rsxy(i1,i2-1,
     & i3,2,1)-30.*rsxy(i1,i2,i3,2,1)+16.*rsxy(i1,i2+1,i3,2,1)-rsxy(
     & i1,i2+2,i3,2,1))/(12.*dr(1)**2)
                      ajtyrt = ((rsxy(i1-2,i2,i3-2,2,1)-8.*rsxy(i1-2,
     & i2,i3-1,2,1)+8.*rsxy(i1-2,i2,i3+1,2,1)-rsxy(i1-2,i2,i3+2,2,1))
     & /(12.*dr(2))-8.*(rsxy(i1-1,i2,i3-2,2,1)-8.*rsxy(i1-1,i2,i3-1,2,
     & 1)+8.*rsxy(i1-1,i2,i3+1,2,1)-rsxy(i1-1,i2,i3+2,2,1))/(12.*dr(2)
     & )+8.*(rsxy(i1+1,i2,i3-2,2,1)-8.*rsxy(i1+1,i2,i3-1,2,1)+8.*rsxy(
     & i1+1,i2,i3+1,2,1)-rsxy(i1+1,i2,i3+2,2,1))/(12.*dr(2))-(rsxy(i1+
     & 2,i2,i3-2,2,1)-8.*rsxy(i1+2,i2,i3-1,2,1)+8.*rsxy(i1+2,i2,i3+1,
     & 2,1)-rsxy(i1+2,i2,i3+2,2,1))/(12.*dr(2)))/(12.*dr(0))
                      ajtyst = ((rsxy(i1,i2-2,i3-2,2,1)-8.*rsxy(i1,i2-
     & 2,i3-1,2,1)+8.*rsxy(i1,i2-2,i3+1,2,1)-rsxy(i1,i2-2,i3+2,2,1))/(
     & 12.*dr(2))-8.*(rsxy(i1,i2-1,i3-2,2,1)-8.*rsxy(i1,i2-1,i3-1,2,1)
     & +8.*rsxy(i1,i2-1,i3+1,2,1)-rsxy(i1,i2-1,i3+2,2,1))/(12.*dr(2))+
     & 8.*(rsxy(i1,i2+1,i3-2,2,1)-8.*rsxy(i1,i2+1,i3-1,2,1)+8.*rsxy(
     & i1,i2+1,i3+1,2,1)-rsxy(i1,i2+1,i3+2,2,1))/(12.*dr(2))-(rsxy(i1,
     & i2+2,i3-2,2,1)-8.*rsxy(i1,i2+2,i3-1,2,1)+8.*rsxy(i1,i2+2,i3+1,
     & 2,1)-rsxy(i1,i2+2,i3+2,2,1))/(12.*dr(2)))/(12.*dr(1))
                      ajtytt = (-rsxy(i1,i2,i3-2,2,1)+16.*rsxy(i1,i2,
     & i3-1,2,1)-30.*rsxy(i1,i2,i3,2,1)+16.*rsxy(i1,i2,i3+1,2,1)-rsxy(
     & i1,i2,i3+2,2,1))/(12.*dr(2)**2)
                      ajrz = rsxy(i1,i2,i3,0,2)
                      ajrzr = (rsxy(i1-2,i2,i3,0,2)-8.*rsxy(i1-1,i2,i3,
     & 0,2)+8.*rsxy(i1+1,i2,i3,0,2)-rsxy(i1+2,i2,i3,0,2))/(12.*dr(0))
                      ajrzs = (rsxy(i1,i2-2,i3,0,2)-8.*rsxy(i1,i2-1,i3,
     & 0,2)+8.*rsxy(i1,i2+1,i3,0,2)-rsxy(i1,i2+2,i3,0,2))/(12.*dr(1))
                      ajrzt = (rsxy(i1,i2,i3-2,0,2)-8.*rsxy(i1,i2,i3-1,
     & 0,2)+8.*rsxy(i1,i2,i3+1,0,2)-rsxy(i1,i2,i3+2,0,2))/(12.*dr(2))
                      ajrzrr = (-rsxy(i1-2,i2,i3,0,2)+16.*rsxy(i1-1,i2,
     & i3,0,2)-30.*rsxy(i1,i2,i3,0,2)+16.*rsxy(i1+1,i2,i3,0,2)-rsxy(
     & i1+2,i2,i3,0,2))/(12.*dr(0)**2)
                      ajrzrs = ((rsxy(i1-2,i2-2,i3,0,2)-8.*rsxy(i1-2,
     & i2-1,i3,0,2)+8.*rsxy(i1-2,i2+1,i3,0,2)-rsxy(i1-2,i2+2,i3,0,2))
     & /(12.*dr(1))-8.*(rsxy(i1-1,i2-2,i3,0,2)-8.*rsxy(i1-1,i2-1,i3,0,
     & 2)+8.*rsxy(i1-1,i2+1,i3,0,2)-rsxy(i1-1,i2+2,i3,0,2))/(12.*dr(1)
     & )+8.*(rsxy(i1+1,i2-2,i3,0,2)-8.*rsxy(i1+1,i2-1,i3,0,2)+8.*rsxy(
     & i1+1,i2+1,i3,0,2)-rsxy(i1+1,i2+2,i3,0,2))/(12.*dr(1))-(rsxy(i1+
     & 2,i2-2,i3,0,2)-8.*rsxy(i1+2,i2-1,i3,0,2)+8.*rsxy(i1+2,i2+1,i3,
     & 0,2)-rsxy(i1+2,i2+2,i3,0,2))/(12.*dr(1)))/(12.*dr(0))
                      ajrzss = (-rsxy(i1,i2-2,i3,0,2)+16.*rsxy(i1,i2-1,
     & i3,0,2)-30.*rsxy(i1,i2,i3,0,2)+16.*rsxy(i1,i2+1,i3,0,2)-rsxy(
     & i1,i2+2,i3,0,2))/(12.*dr(1)**2)
                      ajrzrt = ((rsxy(i1-2,i2,i3-2,0,2)-8.*rsxy(i1-2,
     & i2,i3-1,0,2)+8.*rsxy(i1-2,i2,i3+1,0,2)-rsxy(i1-2,i2,i3+2,0,2))
     & /(12.*dr(2))-8.*(rsxy(i1-1,i2,i3-2,0,2)-8.*rsxy(i1-1,i2,i3-1,0,
     & 2)+8.*rsxy(i1-1,i2,i3+1,0,2)-rsxy(i1-1,i2,i3+2,0,2))/(12.*dr(2)
     & )+8.*(rsxy(i1+1,i2,i3-2,0,2)-8.*rsxy(i1+1,i2,i3-1,0,2)+8.*rsxy(
     & i1+1,i2,i3+1,0,2)-rsxy(i1+1,i2,i3+2,0,2))/(12.*dr(2))-(rsxy(i1+
     & 2,i2,i3-2,0,2)-8.*rsxy(i1+2,i2,i3-1,0,2)+8.*rsxy(i1+2,i2,i3+1,
     & 0,2)-rsxy(i1+2,i2,i3+2,0,2))/(12.*dr(2)))/(12.*dr(0))
                      ajrzst = ((rsxy(i1,i2-2,i3-2,0,2)-8.*rsxy(i1,i2-
     & 2,i3-1,0,2)+8.*rsxy(i1,i2-2,i3+1,0,2)-rsxy(i1,i2-2,i3+2,0,2))/(
     & 12.*dr(2))-8.*(rsxy(i1,i2-1,i3-2,0,2)-8.*rsxy(i1,i2-1,i3-1,0,2)
     & +8.*rsxy(i1,i2-1,i3+1,0,2)-rsxy(i1,i2-1,i3+2,0,2))/(12.*dr(2))+
     & 8.*(rsxy(i1,i2+1,i3-2,0,2)-8.*rsxy(i1,i2+1,i3-1,0,2)+8.*rsxy(
     & i1,i2+1,i3+1,0,2)-rsxy(i1,i2+1,i3+2,0,2))/(12.*dr(2))-(rsxy(i1,
     & i2+2,i3-2,0,2)-8.*rsxy(i1,i2+2,i3-1,0,2)+8.*rsxy(i1,i2+2,i3+1,
     & 0,2)-rsxy(i1,i2+2,i3+2,0,2))/(12.*dr(2)))/(12.*dr(1))
                      ajrztt = (-rsxy(i1,i2,i3-2,0,2)+16.*rsxy(i1,i2,
     & i3-1,0,2)-30.*rsxy(i1,i2,i3,0,2)+16.*rsxy(i1,i2,i3+1,0,2)-rsxy(
     & i1,i2,i3+2,0,2))/(12.*dr(2)**2)
                      ajsz = rsxy(i1,i2,i3,1,2)
                      ajszr = (rsxy(i1-2,i2,i3,1,2)-8.*rsxy(i1-1,i2,i3,
     & 1,2)+8.*rsxy(i1+1,i2,i3,1,2)-rsxy(i1+2,i2,i3,1,2))/(12.*dr(0))
                      ajszs = (rsxy(i1,i2-2,i3,1,2)-8.*rsxy(i1,i2-1,i3,
     & 1,2)+8.*rsxy(i1,i2+1,i3,1,2)-rsxy(i1,i2+2,i3,1,2))/(12.*dr(1))
                      ajszt = (rsxy(i1,i2,i3-2,1,2)-8.*rsxy(i1,i2,i3-1,
     & 1,2)+8.*rsxy(i1,i2,i3+1,1,2)-rsxy(i1,i2,i3+2,1,2))/(12.*dr(2))
                      ajszrr = (-rsxy(i1-2,i2,i3,1,2)+16.*rsxy(i1-1,i2,
     & i3,1,2)-30.*rsxy(i1,i2,i3,1,2)+16.*rsxy(i1+1,i2,i3,1,2)-rsxy(
     & i1+2,i2,i3,1,2))/(12.*dr(0)**2)
                      ajszrs = ((rsxy(i1-2,i2-2,i3,1,2)-8.*rsxy(i1-2,
     & i2-1,i3,1,2)+8.*rsxy(i1-2,i2+1,i3,1,2)-rsxy(i1-2,i2+2,i3,1,2))
     & /(12.*dr(1))-8.*(rsxy(i1-1,i2-2,i3,1,2)-8.*rsxy(i1-1,i2-1,i3,1,
     & 2)+8.*rsxy(i1-1,i2+1,i3,1,2)-rsxy(i1-1,i2+2,i3,1,2))/(12.*dr(1)
     & )+8.*(rsxy(i1+1,i2-2,i3,1,2)-8.*rsxy(i1+1,i2-1,i3,1,2)+8.*rsxy(
     & i1+1,i2+1,i3,1,2)-rsxy(i1+1,i2+2,i3,1,2))/(12.*dr(1))-(rsxy(i1+
     & 2,i2-2,i3,1,2)-8.*rsxy(i1+2,i2-1,i3,1,2)+8.*rsxy(i1+2,i2+1,i3,
     & 1,2)-rsxy(i1+2,i2+2,i3,1,2))/(12.*dr(1)))/(12.*dr(0))
                      ajszss = (-rsxy(i1,i2-2,i3,1,2)+16.*rsxy(i1,i2-1,
     & i3,1,2)-30.*rsxy(i1,i2,i3,1,2)+16.*rsxy(i1,i2+1,i3,1,2)-rsxy(
     & i1,i2+2,i3,1,2))/(12.*dr(1)**2)
                      ajszrt = ((rsxy(i1-2,i2,i3-2,1,2)-8.*rsxy(i1-2,
     & i2,i3-1,1,2)+8.*rsxy(i1-2,i2,i3+1,1,2)-rsxy(i1-2,i2,i3+2,1,2))
     & /(12.*dr(2))-8.*(rsxy(i1-1,i2,i3-2,1,2)-8.*rsxy(i1-1,i2,i3-1,1,
     & 2)+8.*rsxy(i1-1,i2,i3+1,1,2)-rsxy(i1-1,i2,i3+2,1,2))/(12.*dr(2)
     & )+8.*(rsxy(i1+1,i2,i3-2,1,2)-8.*rsxy(i1+1,i2,i3-1,1,2)+8.*rsxy(
     & i1+1,i2,i3+1,1,2)-rsxy(i1+1,i2,i3+2,1,2))/(12.*dr(2))-(rsxy(i1+
     & 2,i2,i3-2,1,2)-8.*rsxy(i1+2,i2,i3-1,1,2)+8.*rsxy(i1+2,i2,i3+1,
     & 1,2)-rsxy(i1+2,i2,i3+2,1,2))/(12.*dr(2)))/(12.*dr(0))
                      ajszst = ((rsxy(i1,i2-2,i3-2,1,2)-8.*rsxy(i1,i2-
     & 2,i3-1,1,2)+8.*rsxy(i1,i2-2,i3+1,1,2)-rsxy(i1,i2-2,i3+2,1,2))/(
     & 12.*dr(2))-8.*(rsxy(i1,i2-1,i3-2,1,2)-8.*rsxy(i1,i2-1,i3-1,1,2)
     & +8.*rsxy(i1,i2-1,i3+1,1,2)-rsxy(i1,i2-1,i3+2,1,2))/(12.*dr(2))+
     & 8.*(rsxy(i1,i2+1,i3-2,1,2)-8.*rsxy(i1,i2+1,i3-1,1,2)+8.*rsxy(
     & i1,i2+1,i3+1,1,2)-rsxy(i1,i2+1,i3+2,1,2))/(12.*dr(2))-(rsxy(i1,
     & i2+2,i3-2,1,2)-8.*rsxy(i1,i2+2,i3-1,1,2)+8.*rsxy(i1,i2+2,i3+1,
     & 1,2)-rsxy(i1,i2+2,i3+2,1,2))/(12.*dr(2)))/(12.*dr(1))
                      ajsztt = (-rsxy(i1,i2,i3-2,1,2)+16.*rsxy(i1,i2,
     & i3-1,1,2)-30.*rsxy(i1,i2,i3,1,2)+16.*rsxy(i1,i2,i3+1,1,2)-rsxy(
     & i1,i2,i3+2,1,2))/(12.*dr(2)**2)
                      ajtz = rsxy(i1,i2,i3,2,2)
                      ajtzr = (rsxy(i1-2,i2,i3,2,2)-8.*rsxy(i1-1,i2,i3,
     & 2,2)+8.*rsxy(i1+1,i2,i3,2,2)-rsxy(i1+2,i2,i3,2,2))/(12.*dr(0))
                      ajtzs = (rsxy(i1,i2-2,i3,2,2)-8.*rsxy(i1,i2-1,i3,
     & 2,2)+8.*rsxy(i1,i2+1,i3,2,2)-rsxy(i1,i2+2,i3,2,2))/(12.*dr(1))
                      ajtzt = (rsxy(i1,i2,i3-2,2,2)-8.*rsxy(i1,i2,i3-1,
     & 2,2)+8.*rsxy(i1,i2,i3+1,2,2)-rsxy(i1,i2,i3+2,2,2))/(12.*dr(2))
                      ajtzrr = (-rsxy(i1-2,i2,i3,2,2)+16.*rsxy(i1-1,i2,
     & i3,2,2)-30.*rsxy(i1,i2,i3,2,2)+16.*rsxy(i1+1,i2,i3,2,2)-rsxy(
     & i1+2,i2,i3,2,2))/(12.*dr(0)**2)
                      ajtzrs = ((rsxy(i1-2,i2-2,i3,2,2)-8.*rsxy(i1-2,
     & i2-1,i3,2,2)+8.*rsxy(i1-2,i2+1,i3,2,2)-rsxy(i1-2,i2+2,i3,2,2))
     & /(12.*dr(1))-8.*(rsxy(i1-1,i2-2,i3,2,2)-8.*rsxy(i1-1,i2-1,i3,2,
     & 2)+8.*rsxy(i1-1,i2+1,i3,2,2)-rsxy(i1-1,i2+2,i3,2,2))/(12.*dr(1)
     & )+8.*(rsxy(i1+1,i2-2,i3,2,2)-8.*rsxy(i1+1,i2-1,i3,2,2)+8.*rsxy(
     & i1+1,i2+1,i3,2,2)-rsxy(i1+1,i2+2,i3,2,2))/(12.*dr(1))-(rsxy(i1+
     & 2,i2-2,i3,2,2)-8.*rsxy(i1+2,i2-1,i3,2,2)+8.*rsxy(i1+2,i2+1,i3,
     & 2,2)-rsxy(i1+2,i2+2,i3,2,2))/(12.*dr(1)))/(12.*dr(0))
                      ajtzss = (-rsxy(i1,i2-2,i3,2,2)+16.*rsxy(i1,i2-1,
     & i3,2,2)-30.*rsxy(i1,i2,i3,2,2)+16.*rsxy(i1,i2+1,i3,2,2)-rsxy(
     & i1,i2+2,i3,2,2))/(12.*dr(1)**2)
                      ajtzrt = ((rsxy(i1-2,i2,i3-2,2,2)-8.*rsxy(i1-2,
     & i2,i3-1,2,2)+8.*rsxy(i1-2,i2,i3+1,2,2)-rsxy(i1-2,i2,i3+2,2,2))
     & /(12.*dr(2))-8.*(rsxy(i1-1,i2,i3-2,2,2)-8.*rsxy(i1-1,i2,i3-1,2,
     & 2)+8.*rsxy(i1-1,i2,i3+1,2,2)-rsxy(i1-1,i2,i3+2,2,2))/(12.*dr(2)
     & )+8.*(rsxy(i1+1,i2,i3-2,2,2)-8.*rsxy(i1+1,i2,i3-1,2,2)+8.*rsxy(
     & i1+1,i2,i3+1,2,2)-rsxy(i1+1,i2,i3+2,2,2))/(12.*dr(2))-(rsxy(i1+
     & 2,i2,i3-2,2,2)-8.*rsxy(i1+2,i2,i3-1,2,2)+8.*rsxy(i1+2,i2,i3+1,
     & 2,2)-rsxy(i1+2,i2,i3+2,2,2))/(12.*dr(2)))/(12.*dr(0))
                      ajtzst = ((rsxy(i1,i2-2,i3-2,2,2)-8.*rsxy(i1,i2-
     & 2,i3-1,2,2)+8.*rsxy(i1,i2-2,i3+1,2,2)-rsxy(i1,i2-2,i3+2,2,2))/(
     & 12.*dr(2))-8.*(rsxy(i1,i2-1,i3-2,2,2)-8.*rsxy(i1,i2-1,i3-1,2,2)
     & +8.*rsxy(i1,i2-1,i3+1,2,2)-rsxy(i1,i2-1,i3+2,2,2))/(12.*dr(2))+
     & 8.*(rsxy(i1,i2+1,i3-2,2,2)-8.*rsxy(i1,i2+1,i3-1,2,2)+8.*rsxy(
     & i1,i2+1,i3+1,2,2)-rsxy(i1,i2+1,i3+2,2,2))/(12.*dr(2))-(rsxy(i1,
     & i2+2,i3-2,2,2)-8.*rsxy(i1,i2+2,i3-1,2,2)+8.*rsxy(i1,i2+2,i3+1,
     & 2,2)-rsxy(i1,i2+2,i3+2,2,2))/(12.*dr(2)))/(12.*dr(1))
                      ajtztt = (-rsxy(i1,i2,i3-2,2,2)+16.*rsxy(i1,i2,
     & i3-1,2,2)-30.*rsxy(i1,i2,i3,2,2)+16.*rsxy(i1,i2,i3+1,2,2)-rsxy(
     & i1,i2,i3+2,2,2))/(12.*dr(2)**2)
                      ajrxx = ajrx*ajrxr+ajsx*ajrxs+ajtx*ajrxt
                      ajrxy = ajry*ajrxr+ajsy*ajrxs+ajty*ajrxt
                      ajrxz = ajrz*ajrxr+ajsz*ajrxs+ajtz*ajrxt
                      ajsxx = ajrx*ajsxr+ajsx*ajsxs+ajtx*ajsxt
                      ajsxy = ajry*ajsxr+ajsy*ajsxs+ajty*ajsxt
                      ajsxz = ajrz*ajsxr+ajsz*ajsxs+ajtz*ajsxt
                      ajtxx = ajrx*ajtxr+ajsx*ajtxs+ajtx*ajtxt
                      ajtxy = ajry*ajtxr+ajsy*ajtxs+ajty*ajtxt
                      ajtxz = ajrz*ajtxr+ajsz*ajtxs+ajtz*ajtxt
                      ajryx = ajrx*ajryr+ajsx*ajrys+ajtx*ajryt
                      ajryy = ajry*ajryr+ajsy*ajrys+ajty*ajryt
                      ajryz = ajrz*ajryr+ajsz*ajrys+ajtz*ajryt
                      ajsyx = ajrx*ajsyr+ajsx*ajsys+ajtx*ajsyt
                      ajsyy = ajry*ajsyr+ajsy*ajsys+ajty*ajsyt
                      ajsyz = ajrz*ajsyr+ajsz*ajsys+ajtz*ajsyt
                      ajtyx = ajrx*ajtyr+ajsx*ajtys+ajtx*ajtyt
                      ajtyy = ajry*ajtyr+ajsy*ajtys+ajty*ajtyt
                      ajtyz = ajrz*ajtyr+ajsz*ajtys+ajtz*ajtyt
                      ajrzx = ajrx*ajrzr+ajsx*ajrzs+ajtx*ajrzt
                      ajrzy = ajry*ajrzr+ajsy*ajrzs+ajty*ajrzt
                      ajrzz = ajrz*ajrzr+ajsz*ajrzs+ajtz*ajrzt
                      ajszx = ajrx*ajszr+ajsx*ajszs+ajtx*ajszt
                      ajszy = ajry*ajszr+ajsy*ajszs+ajty*ajszt
                      ajszz = ajrz*ajszr+ajsz*ajszs+ajtz*ajszt
                      ajtzx = ajrx*ajtzr+ajsx*ajtzs+ajtx*ajtzt
                      ajtzy = ajry*ajtzr+ajsy*ajtzs+ajty*ajtzt
                      ajtzz = ajrz*ajtzr+ajsz*ajtzs+ajtz*ajtzt
                      t1 = ajrx**2
                      t6 = ajsx**2
                      t14 = ajtx**2
                      ajrxxx = t1*ajrxrr+2*ajrx*ajsx*ajrxrs+t6*ajrxss+
     & 2*ajrx*ajtx*ajrxrt+2*ajsx*ajtx*ajrxst+t14*ajrxtt+ajrxx*ajrxr+
     & ajsxx*ajrxs+ajtxx*ajrxt
                      ajrxxy = ajry*ajrx*ajrxrr+(ajsy*ajrx+ajry*ajsx)*
     & ajrxrs+ajsy*ajsx*ajrxss+(ajry*ajtx+ajty*ajrx)*ajrxrt+(ajty*
     & ajsx+ajsy*ajtx)*ajrxst+ajty*ajtx*ajrxtt+ajrxy*ajrxr+ajsxy*
     & ajrxs+ajtxy*ajrxt
                      t1 = ajry**2
                      t6 = ajsy**2
                      t14 = ajty**2
                      ajrxyy = t1*ajrxrr+2*ajry*ajsy*ajrxrs+t6*ajrxss+
     & 2*ajry*ajty*ajrxrt+2*ajsy*ajty*ajrxst+t14*ajrxtt+ajryy*ajrxr+
     & ajsyy*ajrxs+ajtyy*ajrxt
                      ajrxxz = ajrz*ajrx*ajrxrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajrxrs+ajsz*ajsx*ajrxss+(ajrz*ajtx+ajtz*ajrx)*ajrxrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajrxst+ajtz*ajtx*ajrxtt+ajrxz*ajrxr+ajsxz*
     & ajrxs+ajtxz*ajrxt
                      ajrxyz = ajrz*ajry*ajrxrr+(ajsz*ajry+ajrz*ajsy)*
     & ajrxrs+ajsz*ajsy*ajrxss+(ajrz*ajty+ajtz*ajry)*ajrxrt+(ajtz*
     & ajsy+ajsz*ajty)*ajrxst+ajtz*ajty*ajrxtt+ajryz*ajrxr+ajsyz*
     & ajrxs+ajtyz*ajrxt
                      t1 = ajrz**2
                      t6 = ajsz**2
                      t14 = ajtz**2
                      ajrxzz = t1*ajrxrr+2*ajrz*ajsz*ajrxrs+t6*ajrxss+
     & 2*ajrz*ajtz*ajrxrt+2*ajsz*ajtz*ajrxst+t14*ajrxtt+ajrzz*ajrxr+
     & ajszz*ajrxs+ajtzz*ajrxt
                      t1 = ajrx**2
                      t6 = ajsx**2
                      t14 = ajtx**2
                      ajsxxx = t1*ajsxrr+2*ajrx*ajsx*ajsxrs+t6*ajsxss+
     & 2*ajrx*ajtx*ajsxrt+2*ajsx*ajtx*ajsxst+t14*ajsxtt+ajrxx*ajsxr+
     & ajsxx*ajsxs+ajtxx*ajsxt
                      ajsxxy = ajry*ajrx*ajsxrr+(ajsy*ajrx+ajry*ajsx)*
     & ajsxrs+ajsy*ajsx*ajsxss+(ajry*ajtx+ajty*ajrx)*ajsxrt+(ajty*
     & ajsx+ajsy*ajtx)*ajsxst+ajty*ajtx*ajsxtt+ajrxy*ajsxr+ajsxy*
     & ajsxs+ajtxy*ajsxt
                      t1 = ajry**2
                      t6 = ajsy**2
                      t14 = ajty**2
                      ajsxyy = t1*ajsxrr+2*ajry*ajsy*ajsxrs+t6*ajsxss+
     & 2*ajry*ajty*ajsxrt+2*ajsy*ajty*ajsxst+t14*ajsxtt+ajryy*ajsxr+
     & ajsyy*ajsxs+ajtyy*ajsxt
                      ajsxxz = ajrz*ajrx*ajsxrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajsxrs+ajsz*ajsx*ajsxss+(ajrz*ajtx+ajtz*ajrx)*ajsxrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajsxst+ajtz*ajtx*ajsxtt+ajrxz*ajsxr+ajsxz*
     & ajsxs+ajtxz*ajsxt
                      ajsxyz = ajrz*ajry*ajsxrr+(ajsz*ajry+ajrz*ajsy)*
     & ajsxrs+ajsz*ajsy*ajsxss+(ajrz*ajty+ajtz*ajry)*ajsxrt+(ajtz*
     & ajsy+ajsz*ajty)*ajsxst+ajtz*ajty*ajsxtt+ajryz*ajsxr+ajsyz*
     & ajsxs+ajtyz*ajsxt
                      t1 = ajrz**2
                      t6 = ajsz**2
                      t14 = ajtz**2
                      ajsxzz = t1*ajsxrr+2*ajrz*ajsz*ajsxrs+t6*ajsxss+
     & 2*ajrz*ajtz*ajsxrt+2*ajsz*ajtz*ajsxst+t14*ajsxtt+ajrzz*ajsxr+
     & ajszz*ajsxs+ajtzz*ajsxt
                      t1 = ajrx**2
                      t6 = ajsx**2
                      t14 = ajtx**2
                      ajtxxx = t1*ajtxrr+2*ajrx*ajsx*ajtxrs+t6*ajtxss+
     & 2*ajrx*ajtx*ajtxrt+2*ajsx*ajtx*ajtxst+t14*ajtxtt+ajrxx*ajtxr+
     & ajsxx*ajtxs+ajtxx*ajtxt
                      ajtxxy = ajry*ajrx*ajtxrr+(ajsy*ajrx+ajry*ajsx)*
     & ajtxrs+ajsy*ajsx*ajtxss+(ajry*ajtx+ajty*ajrx)*ajtxrt+(ajty*
     & ajsx+ajsy*ajtx)*ajtxst+ajty*ajtx*ajtxtt+ajrxy*ajtxr+ajsxy*
     & ajtxs+ajtxy*ajtxt
                      t1 = ajry**2
                      t6 = ajsy**2
                      t14 = ajty**2
                      ajtxyy = t1*ajtxrr+2*ajry*ajsy*ajtxrs+t6*ajtxss+
     & 2*ajry*ajty*ajtxrt+2*ajsy*ajty*ajtxst+t14*ajtxtt+ajryy*ajtxr+
     & ajsyy*ajtxs+ajtyy*ajtxt
                      ajtxxz = ajrz*ajrx*ajtxrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajtxrs+ajsz*ajsx*ajtxss+(ajrz*ajtx+ajtz*ajrx)*ajtxrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajtxst+ajtz*ajtx*ajtxtt+ajrxz*ajtxr+ajsxz*
     & ajtxs+ajtxz*ajtxt
                      ajtxyz = ajrz*ajry*ajtxrr+(ajsz*ajry+ajrz*ajsy)*
     & ajtxrs+ajsz*ajsy*ajtxss+(ajrz*ajty+ajtz*ajry)*ajtxrt+(ajtz*
     & ajsy+ajsz*ajty)*ajtxst+ajtz*ajty*ajtxtt+ajryz*ajtxr+ajsyz*
     & ajtxs+ajtyz*ajtxt
                      t1 = ajrz**2
                      t6 = ajsz**2
                      t14 = ajtz**2
                      ajtxzz = t1*ajtxrr+2*ajrz*ajsz*ajtxrs+t6*ajtxss+
     & 2*ajrz*ajtz*ajtxrt+2*ajsz*ajtz*ajtxst+t14*ajtxtt+ajrzz*ajtxr+
     & ajszz*ajtxs+ajtzz*ajtxt
                      t1 = ajrx**2
                      t6 = ajsx**2
                      t14 = ajtx**2
                      ajryxx = t1*ajryrr+2*ajrx*ajsx*ajryrs+t6*ajryss+
     & 2*ajrx*ajtx*ajryrt+2*ajsx*ajtx*ajryst+t14*ajrytt+ajrxx*ajryr+
     & ajsxx*ajrys+ajtxx*ajryt
                      ajryxy = ajry*ajrx*ajryrr+(ajsy*ajrx+ajry*ajsx)*
     & ajryrs+ajsy*ajsx*ajryss+(ajry*ajtx+ajty*ajrx)*ajryrt+(ajty*
     & ajsx+ajsy*ajtx)*ajryst+ajty*ajtx*ajrytt+ajrxy*ajryr+ajsxy*
     & ajrys+ajtxy*ajryt
                      t1 = ajry**2
                      t6 = ajsy**2
                      t14 = ajty**2
                      ajryyy = t1*ajryrr+2*ajry*ajsy*ajryrs+t6*ajryss+
     & 2*ajry*ajty*ajryrt+2*ajsy*ajty*ajryst+t14*ajrytt+ajryy*ajryr+
     & ajsyy*ajrys+ajtyy*ajryt
                      ajryxz = ajrz*ajrx*ajryrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajryrs+ajsz*ajsx*ajryss+(ajrz*ajtx+ajtz*ajrx)*ajryrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajryst+ajtz*ajtx*ajrytt+ajrxz*ajryr+ajsxz*
     & ajrys+ajtxz*ajryt
                      ajryyz = ajrz*ajry*ajryrr+(ajsz*ajry+ajrz*ajsy)*
     & ajryrs+ajsz*ajsy*ajryss+(ajrz*ajty+ajtz*ajry)*ajryrt+(ajtz*
     & ajsy+ajsz*ajty)*ajryst+ajtz*ajty*ajrytt+ajryz*ajryr+ajsyz*
     & ajrys+ajtyz*ajryt
                      t1 = ajrz**2
                      t6 = ajsz**2
                      t14 = ajtz**2
                      ajryzz = t1*ajryrr+2*ajrz*ajsz*ajryrs+t6*ajryss+
     & 2*ajrz*ajtz*ajryrt+2*ajsz*ajtz*ajryst+t14*ajrytt+ajrzz*ajryr+
     & ajszz*ajrys+ajtzz*ajryt
                      t1 = ajrx**2
                      t6 = ajsx**2
                      t14 = ajtx**2
                      ajsyxx = t1*ajsyrr+2*ajrx*ajsx*ajsyrs+t6*ajsyss+
     & 2*ajrx*ajtx*ajsyrt+2*ajsx*ajtx*ajsyst+t14*ajsytt+ajrxx*ajsyr+
     & ajsxx*ajsys+ajtxx*ajsyt
                      ajsyxy = ajry*ajrx*ajsyrr+(ajsy*ajrx+ajry*ajsx)*
     & ajsyrs+ajsy*ajsx*ajsyss+(ajry*ajtx+ajty*ajrx)*ajsyrt+(ajty*
     & ajsx+ajsy*ajtx)*ajsyst+ajty*ajtx*ajsytt+ajrxy*ajsyr+ajsxy*
     & ajsys+ajtxy*ajsyt
                      t1 = ajry**2
                      t6 = ajsy**2
                      t14 = ajty**2
                      ajsyyy = t1*ajsyrr+2*ajry*ajsy*ajsyrs+t6*ajsyss+
     & 2*ajry*ajty*ajsyrt+2*ajsy*ajty*ajsyst+t14*ajsytt+ajryy*ajsyr+
     & ajsyy*ajsys+ajtyy*ajsyt
                      ajsyxz = ajrz*ajrx*ajsyrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajsyrs+ajsz*ajsx*ajsyss+(ajrz*ajtx+ajtz*ajrx)*ajsyrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajsyst+ajtz*ajtx*ajsytt+ajrxz*ajsyr+ajsxz*
     & ajsys+ajtxz*ajsyt
                      ajsyyz = ajrz*ajry*ajsyrr+(ajsz*ajry+ajrz*ajsy)*
     & ajsyrs+ajsz*ajsy*ajsyss+(ajrz*ajty+ajtz*ajry)*ajsyrt+(ajtz*
     & ajsy+ajsz*ajty)*ajsyst+ajtz*ajty*ajsytt+ajryz*ajsyr+ajsyz*
     & ajsys+ajtyz*ajsyt
                      t1 = ajrz**2
                      t6 = ajsz**2
                      t14 = ajtz**2
                      ajsyzz = t1*ajsyrr+2*ajrz*ajsz*ajsyrs+t6*ajsyss+
     & 2*ajrz*ajtz*ajsyrt+2*ajsz*ajtz*ajsyst+t14*ajsytt+ajrzz*ajsyr+
     & ajszz*ajsys+ajtzz*ajsyt
                      t1 = ajrx**2
                      t6 = ajsx**2
                      t14 = ajtx**2
                      ajtyxx = t1*ajtyrr+2*ajrx*ajsx*ajtyrs+t6*ajtyss+
     & 2*ajrx*ajtx*ajtyrt+2*ajsx*ajtx*ajtyst+t14*ajtytt+ajrxx*ajtyr+
     & ajsxx*ajtys+ajtxx*ajtyt
                      ajtyxy = ajry*ajrx*ajtyrr+(ajsy*ajrx+ajry*ajsx)*
     & ajtyrs+ajsy*ajsx*ajtyss+(ajry*ajtx+ajty*ajrx)*ajtyrt+(ajty*
     & ajsx+ajsy*ajtx)*ajtyst+ajty*ajtx*ajtytt+ajrxy*ajtyr+ajsxy*
     & ajtys+ajtxy*ajtyt
                      t1 = ajry**2
                      t6 = ajsy**2
                      t14 = ajty**2
                      ajtyyy = t1*ajtyrr+2*ajry*ajsy*ajtyrs+t6*ajtyss+
     & 2*ajry*ajty*ajtyrt+2*ajsy*ajty*ajtyst+t14*ajtytt+ajryy*ajtyr+
     & ajsyy*ajtys+ajtyy*ajtyt
                      ajtyxz = ajrz*ajrx*ajtyrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajtyrs+ajsz*ajsx*ajtyss+(ajrz*ajtx+ajtz*ajrx)*ajtyrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajtyst+ajtz*ajtx*ajtytt+ajrxz*ajtyr+ajsxz*
     & ajtys+ajtxz*ajtyt
                      ajtyyz = ajrz*ajry*ajtyrr+(ajsz*ajry+ajrz*ajsy)*
     & ajtyrs+ajsz*ajsy*ajtyss+(ajrz*ajty+ajtz*ajry)*ajtyrt+(ajtz*
     & ajsy+ajsz*ajty)*ajtyst+ajtz*ajty*ajtytt+ajryz*ajtyr+ajsyz*
     & ajtys+ajtyz*ajtyt
                      t1 = ajrz**2
                      t6 = ajsz**2
                      t14 = ajtz**2
                      ajtyzz = t1*ajtyrr+2*ajrz*ajsz*ajtyrs+t6*ajtyss+
     & 2*ajrz*ajtz*ajtyrt+2*ajsz*ajtz*ajtyst+t14*ajtytt+ajrzz*ajtyr+
     & ajszz*ajtys+ajtzz*ajtyt
                      t1 = ajrx**2
                      t6 = ajsx**2
                      t14 = ajtx**2
                      ajrzxx = t1*ajrzrr+2*ajrx*ajsx*ajrzrs+t6*ajrzss+
     & 2*ajrx*ajtx*ajrzrt+2*ajsx*ajtx*ajrzst+t14*ajrztt+ajrxx*ajrzr+
     & ajsxx*ajrzs+ajtxx*ajrzt
                      ajrzxy = ajry*ajrx*ajrzrr+(ajsy*ajrx+ajry*ajsx)*
     & ajrzrs+ajsy*ajsx*ajrzss+(ajry*ajtx+ajty*ajrx)*ajrzrt+(ajty*
     & ajsx+ajsy*ajtx)*ajrzst+ajty*ajtx*ajrztt+ajrxy*ajrzr+ajsxy*
     & ajrzs+ajtxy*ajrzt
                      t1 = ajry**2
                      t6 = ajsy**2
                      t14 = ajty**2
                      ajrzyy = t1*ajrzrr+2*ajry*ajsy*ajrzrs+t6*ajrzss+
     & 2*ajry*ajty*ajrzrt+2*ajsy*ajty*ajrzst+t14*ajrztt+ajryy*ajrzr+
     & ajsyy*ajrzs+ajtyy*ajrzt
                      ajrzxz = ajrz*ajrx*ajrzrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajrzrs+ajsz*ajsx*ajrzss+(ajrz*ajtx+ajtz*ajrx)*ajrzrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajrzst+ajtz*ajtx*ajrztt+ajrxz*ajrzr+ajsxz*
     & ajrzs+ajtxz*ajrzt
                      ajrzyz = ajrz*ajry*ajrzrr+(ajsz*ajry+ajrz*ajsy)*
     & ajrzrs+ajsz*ajsy*ajrzss+(ajrz*ajty+ajtz*ajry)*ajrzrt+(ajtz*
     & ajsy+ajsz*ajty)*ajrzst+ajtz*ajty*ajrztt+ajryz*ajrzr+ajsyz*
     & ajrzs+ajtyz*ajrzt
                      t1 = ajrz**2
                      t6 = ajsz**2
                      t14 = ajtz**2
                      ajrzzz = t1*ajrzrr+2*ajrz*ajsz*ajrzrs+t6*ajrzss+
     & 2*ajrz*ajtz*ajrzrt+2*ajsz*ajtz*ajrzst+t14*ajrztt+ajrzz*ajrzr+
     & ajszz*ajrzs+ajtzz*ajrzt
                      t1 = ajrx**2
                      t6 = ajsx**2
                      t14 = ajtx**2
                      ajszxx = t1*ajszrr+2*ajrx*ajsx*ajszrs+t6*ajszss+
     & 2*ajrx*ajtx*ajszrt+2*ajsx*ajtx*ajszst+t14*ajsztt+ajrxx*ajszr+
     & ajsxx*ajszs+ajtxx*ajszt
                      ajszxy = ajry*ajrx*ajszrr+(ajsy*ajrx+ajry*ajsx)*
     & ajszrs+ajsy*ajsx*ajszss+(ajry*ajtx+ajty*ajrx)*ajszrt+(ajty*
     & ajsx+ajsy*ajtx)*ajszst+ajty*ajtx*ajsztt+ajrxy*ajszr+ajsxy*
     & ajszs+ajtxy*ajszt
                      t1 = ajry**2
                      t6 = ajsy**2
                      t14 = ajty**2
                      ajszyy = t1*ajszrr+2*ajry*ajsy*ajszrs+t6*ajszss+
     & 2*ajry*ajty*ajszrt+2*ajsy*ajty*ajszst+t14*ajsztt+ajryy*ajszr+
     & ajsyy*ajszs+ajtyy*ajszt
                      ajszxz = ajrz*ajrx*ajszrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajszrs+ajsz*ajsx*ajszss+(ajrz*ajtx+ajtz*ajrx)*ajszrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajszst+ajtz*ajtx*ajsztt+ajrxz*ajszr+ajsxz*
     & ajszs+ajtxz*ajszt
                      ajszyz = ajrz*ajry*ajszrr+(ajsz*ajry+ajrz*ajsy)*
     & ajszrs+ajsz*ajsy*ajszss+(ajrz*ajty+ajtz*ajry)*ajszrt+(ajtz*
     & ajsy+ajsz*ajty)*ajszst+ajtz*ajty*ajsztt+ajryz*ajszr+ajsyz*
     & ajszs+ajtyz*ajszt
                      t1 = ajrz**2
                      t6 = ajsz**2
                      t14 = ajtz**2
                      ajszzz = t1*ajszrr+2*ajrz*ajsz*ajszrs+t6*ajszss+
     & 2*ajrz*ajtz*ajszrt+2*ajsz*ajtz*ajszst+t14*ajsztt+ajrzz*ajszr+
     & ajszz*ajszs+ajtzz*ajszt
                      t1 = ajrx**2
                      t6 = ajsx**2
                      t14 = ajtx**2
                      ajtzxx = t1*ajtzrr+2*ajrx*ajsx*ajtzrs+t6*ajtzss+
     & 2*ajrx*ajtx*ajtzrt+2*ajsx*ajtx*ajtzst+t14*ajtztt+ajrxx*ajtzr+
     & ajsxx*ajtzs+ajtxx*ajtzt
                      ajtzxy = ajry*ajrx*ajtzrr+(ajsy*ajrx+ajry*ajsx)*
     & ajtzrs+ajsy*ajsx*ajtzss+(ajry*ajtx+ajty*ajrx)*ajtzrt+(ajty*
     & ajsx+ajsy*ajtx)*ajtzst+ajty*ajtx*ajtztt+ajrxy*ajtzr+ajsxy*
     & ajtzs+ajtxy*ajtzt
                      t1 = ajry**2
                      t6 = ajsy**2
                      t14 = ajty**2
                      ajtzyy = t1*ajtzrr+2*ajry*ajsy*ajtzrs+t6*ajtzss+
     & 2*ajry*ajty*ajtzrt+2*ajsy*ajty*ajtzst+t14*ajtztt+ajryy*ajtzr+
     & ajsyy*ajtzs+ajtyy*ajtzt
                      ajtzxz = ajrz*ajrx*ajtzrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajtzrs+ajsz*ajsx*ajtzss+(ajrz*ajtx+ajtz*ajrx)*ajtzrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajtzst+ajtz*ajtx*ajtztt+ajrxz*ajtzr+ajsxz*
     & ajtzs+ajtxz*ajtzt
                      ajtzyz = ajrz*ajry*ajtzrr+(ajsz*ajry+ajrz*ajsy)*
     & ajtzrs+ajsz*ajsy*ajtzss+(ajrz*ajty+ajtz*ajry)*ajtzrt+(ajtz*
     & ajsy+ajsz*ajty)*ajtzst+ajtz*ajty*ajtztt+ajryz*ajtzr+ajsyz*
     & ajtzs+ajtyz*ajtzt
                      t1 = ajrz**2
                      t6 = ajsz**2
                      t14 = ajtz**2
                      ajtzzz = t1*ajtzrr+2*ajrz*ajsz*ajtzrs+t6*ajtzss+
     & 2*ajrz*ajtz*ajtzrt+2*ajsz*ajtz*ajtzst+t14*ajtztt+ajrzz*ajtzr+
     & ajszz*ajtzs+ajtzz*ajtzt
                      ! define these derivatives of the mapping (which are not normally computed by the standard macros):
                     ajrxxr=ajrx*ajrxrr + ajsx*ajrxrs + ajtx*ajrxrt + 
     & ajrxr*ajrxr +ajsxr*ajrxs + ajtxr*ajrxt
                     ajrxxs=ajrx*ajrxrs + ajsx*ajrxss + ajtx*ajrxst + 
     & ajrxs*ajrxr +ajsxs*ajrxs + ajtxs*ajrxt
                     ajrxxt=ajrx*ajrxrt + ajsx*ajrxst + ajtx*ajrxtt + 
     & ajrxt*ajrxr +ajsxt*ajrxs + ajtxt*ajrxt
                     ajrxyr=ajry*ajrxrr + ajsy*ajrxrs + ajty*ajrxrt + 
     & ajryr*ajrxr +ajsyr*ajrxs + ajtyr*ajrxt
                     ajrxys=ajry*ajrxrs + ajsy*ajrxss + ajty*ajrxst + 
     & ajrys*ajrxr +ajsys*ajrxs + ajtys*ajrxt
                     ajrxyt=ajry*ajrxrt + ajsy*ajrxst + ajty*ajrxtt + 
     & ajryt*ajrxr +ajsyt*ajrxs + ajtyt*ajrxt
                     ajrxzr=ajrz*ajrxrr + ajsz*ajrxrs + ajtz*ajrxrt + 
     & ajrzr*ajrxr +ajszr*ajrxs + ajtzr*ajrxt
                     ajrxzs=ajrz*ajrxrs + ajsz*ajrxss + ajtz*ajrxst + 
     & ajrzs*ajrxr +ajszs*ajrxs + ajtzs*ajrxt
                     ajrxzt=ajrz*ajrxrt + ajsz*ajrxst + ajtz*ajrxtt + 
     & ajrzt*ajrxr +ajszt*ajrxs + ajtzt*ajrxt
                     ajryxr=ajrx*ajryrr + ajsx*ajryrs + ajtx*ajryrt + 
     & ajrxr*ajryr +ajsxr*ajrys + ajtxr*ajryt
                     ajryxs=ajrx*ajryrs + ajsx*ajryss + ajtx*ajryst + 
     & ajrxs*ajryr +ajsxs*ajrys + ajtxs*ajryt
                     ajryxt=ajrx*ajryrt + ajsx*ajryst + ajtx*ajrytt + 
     & ajrxt*ajryr +ajsxt*ajrys + ajtxt*ajryt
                     ajryyr=ajry*ajryrr + ajsy*ajryrs + ajty*ajryrt + 
     & ajryr*ajryr +ajsyr*ajrys + ajtyr*ajryt
                     ajryys=ajry*ajryrs + ajsy*ajryss + ajty*ajryst + 
     & ajrys*ajryr +ajsys*ajrys + ajtys*ajryt
                     ajryyt=ajry*ajryrt + ajsy*ajryst + ajty*ajrytt + 
     & ajryt*ajryr +ajsyt*ajrys + ajtyt*ajryt
                     ajryzr=ajrz*ajryrr + ajsz*ajryrs + ajtz*ajryrt + 
     & ajrzr*ajryr +ajszr*ajrys + ajtzr*ajryt
                     ajryzs=ajrz*ajryrs + ajsz*ajryss + ajtz*ajryst + 
     & ajrzs*ajryr +ajszs*ajrys + ajtzs*ajryt
                     ajryzt=ajrz*ajryrt + ajsz*ajryst + ajtz*ajrytt + 
     & ajrzt*ajryr +ajszt*ajrys + ajtzt*ajryt
                     ajrzxr=ajrx*ajrzrr + ajsx*ajrzrs + ajtx*ajrzrt + 
     & ajrxr*ajrzr +ajsxr*ajrzs + ajtxr*ajrzt
                     ajrzxs=ajrx*ajrzrs + ajsx*ajrzss + ajtx*ajrzst + 
     & ajrxs*ajrzr +ajsxs*ajrzs + ajtxs*ajrzt
                     ajrzxt=ajrx*ajrzrt + ajsx*ajrzst + ajtx*ajrztt + 
     & ajrxt*ajrzr +ajsxt*ajrzs + ajtxt*ajrzt
                     ajrzyr=ajry*ajrzrr + ajsy*ajrzrs + ajty*ajrzrt + 
     & ajryr*ajrzr +ajsyr*ajrzs + ajtyr*ajrzt
                     ajrzys=ajry*ajrzrs + ajsy*ajrzss + ajty*ajrzst + 
     & ajrys*ajrzr +ajsys*ajrzs + ajtys*ajrzt
                     ajrzyt=ajry*ajrzrt + ajsy*ajrzst + ajty*ajrztt + 
     & ajryt*ajrzr +ajsyt*ajrzs + ajtyt*ajrzt
                     ajrzzr=ajrz*ajrzrr + ajsz*ajrzrs + ajtz*ajrzrt + 
     & ajrzr*ajrzr +ajszr*ajrzs + ajtzr*ajrzt
                     ajrzzs=ajrz*ajrzrs + ajsz*ajrzss + ajtz*ajrzst + 
     & ajrzs*ajrzr +ajszs*ajrzs + ajtzs*ajrzt
                     ajrzzt=ajrz*ajrzrt + ajsz*ajrzst + ajtz*ajrztt + 
     & ajrzt*ajrzr +ajszt*ajrzs + ajtzt*ajrzt
                     ajsxxr=ajrx*ajsxrr + ajsx*ajsxrs + ajtx*ajsxrt + 
     & ajrxr*ajsxr +ajsxr*ajsxs + ajtxr*ajsxt
                     ajsxxs=ajrx*ajsxrs + ajsx*ajsxss + ajtx*ajsxst + 
     & ajrxs*ajsxr +ajsxs*ajsxs + ajtxs*ajsxt
                     ajsxxt=ajrx*ajsxrt + ajsx*ajsxst + ajtx*ajsxtt + 
     & ajrxt*ajsxr +ajsxt*ajsxs + ajtxt*ajsxt
                     ajsxyr=ajry*ajsxrr + ajsy*ajsxrs + ajty*ajsxrt + 
     & ajryr*ajsxr +ajsyr*ajsxs + ajtyr*ajsxt
                     ajsxys=ajry*ajsxrs + ajsy*ajsxss + ajty*ajsxst + 
     & ajrys*ajsxr +ajsys*ajsxs + ajtys*ajsxt
                     ajsxyt=ajry*ajsxrt + ajsy*ajsxst + ajty*ajsxtt + 
     & ajryt*ajsxr +ajsyt*ajsxs + ajtyt*ajsxt
                     ajsxzr=ajrz*ajsxrr + ajsz*ajsxrs + ajtz*ajsxrt + 
     & ajrzr*ajsxr +ajszr*ajsxs + ajtzr*ajsxt
                     ajsxzs=ajrz*ajsxrs + ajsz*ajsxss + ajtz*ajsxst + 
     & ajrzs*ajsxr +ajszs*ajsxs + ajtzs*ajsxt
                     ajsxzt=ajrz*ajsxrt + ajsz*ajsxst + ajtz*ajsxtt + 
     & ajrzt*ajsxr +ajszt*ajsxs + ajtzt*ajsxt
                     ajsyxr=ajrx*ajsyrr + ajsx*ajsyrs + ajtx*ajsyrt + 
     & ajrxr*ajsyr +ajsxr*ajsys + ajtxr*ajsyt
                     ajsyxs=ajrx*ajsyrs + ajsx*ajsyss + ajtx*ajsyst + 
     & ajrxs*ajsyr +ajsxs*ajsys + ajtxs*ajsyt
                     ajsyxt=ajrx*ajsyrt + ajsx*ajsyst + ajtx*ajsytt + 
     & ajrxt*ajsyr +ajsxt*ajsys + ajtxt*ajsyt
                     ajsyyr=ajry*ajsyrr + ajsy*ajsyrs + ajty*ajsyrt + 
     & ajryr*ajsyr +ajsyr*ajsys + ajtyr*ajsyt
                     ajsyys=ajry*ajsyrs + ajsy*ajsyss + ajty*ajsyst + 
     & ajrys*ajsyr +ajsys*ajsys + ajtys*ajsyt
                     ajsyyt=ajry*ajsyrt + ajsy*ajsyst + ajty*ajsytt + 
     & ajryt*ajsyr +ajsyt*ajsys + ajtyt*ajsyt
                     ajsyzr=ajrz*ajsyrr + ajsz*ajsyrs + ajtz*ajsyrt + 
     & ajrzr*ajsyr +ajszr*ajsys + ajtzr*ajsyt
                     ajsyzs=ajrz*ajsyrs + ajsz*ajsyss + ajtz*ajsyst + 
     & ajrzs*ajsyr +ajszs*ajsys + ajtzs*ajsyt
                     ajsyzt=ajrz*ajsyrt + ajsz*ajsyst + ajtz*ajsytt + 
     & ajrzt*ajsyr +ajszt*ajsys + ajtzt*ajsyt
                     ajszxr=ajrx*ajszrr + ajsx*ajszrs + ajtx*ajszrt + 
     & ajrxr*ajszr +ajsxr*ajszs + ajtxr*ajszt
                     ajszxs=ajrx*ajszrs + ajsx*ajszss + ajtx*ajszst + 
     & ajrxs*ajszr +ajsxs*ajszs + ajtxs*ajszt
                     ajszxt=ajrx*ajszrt + ajsx*ajszst + ajtx*ajsztt + 
     & ajrxt*ajszr +ajsxt*ajszs + ajtxt*ajszt
                     ajszyr=ajry*ajszrr + ajsy*ajszrs + ajty*ajszrt + 
     & ajryr*ajszr +ajsyr*ajszs + ajtyr*ajszt
                     ajszys=ajry*ajszrs + ajsy*ajszss + ajty*ajszst + 
     & ajrys*ajszr +ajsys*ajszs + ajtys*ajszt
                     ajszyt=ajry*ajszrt + ajsy*ajszst + ajty*ajsztt + 
     & ajryt*ajszr +ajsyt*ajszs + ajtyt*ajszt
                     ajszzr=ajrz*ajszrr + ajsz*ajszrs + ajtz*ajszrt + 
     & ajrzr*ajszr +ajszr*ajszs + ajtzr*ajszt
                     ajszzs=ajrz*ajszrs + ajsz*ajszss + ajtz*ajszst + 
     & ajrzs*ajszr +ajszs*ajszs + ajtzs*ajszt
                     ajszzt=ajrz*ajszrt + ajsz*ajszst + ajtz*ajsztt + 
     & ajrzt*ajszr +ajszt*ajszs + ajtzt*ajszt
                     ajtxxr=ajrx*ajtxrr + ajsx*ajtxrs + ajtx*ajtxrt + 
     & ajrxr*ajtxr +ajsxr*ajtxs + ajtxr*ajtxt
                     ajtxxs=ajrx*ajtxrs + ajsx*ajtxss + ajtx*ajtxst + 
     & ajrxs*ajtxr +ajsxs*ajtxs + ajtxs*ajtxt
                     ajtxxt=ajrx*ajtxrt + ajsx*ajtxst + ajtx*ajtxtt + 
     & ajrxt*ajtxr +ajsxt*ajtxs + ajtxt*ajtxt
                     ajtxyr=ajry*ajtxrr + ajsy*ajtxrs + ajty*ajtxrt + 
     & ajryr*ajtxr +ajsyr*ajtxs + ajtyr*ajtxt
                     ajtxys=ajry*ajtxrs + ajsy*ajtxss + ajty*ajtxst + 
     & ajrys*ajtxr +ajsys*ajtxs + ajtys*ajtxt
                     ajtxyt=ajry*ajtxrt + ajsy*ajtxst + ajty*ajtxtt + 
     & ajryt*ajtxr +ajsyt*ajtxs + ajtyt*ajtxt
                     ajtxzr=ajrz*ajtxrr + ajsz*ajtxrs + ajtz*ajtxrt + 
     & ajrzr*ajtxr +ajszr*ajtxs + ajtzr*ajtxt
                     ajtxzs=ajrz*ajtxrs + ajsz*ajtxss + ajtz*ajtxst + 
     & ajrzs*ajtxr +ajszs*ajtxs + ajtzs*ajtxt
                     ajtxzt=ajrz*ajtxrt + ajsz*ajtxst + ajtz*ajtxtt + 
     & ajrzt*ajtxr +ajszt*ajtxs + ajtzt*ajtxt
                     ajtyxr=ajrx*ajtyrr + ajsx*ajtyrs + ajtx*ajtyrt + 
     & ajrxr*ajtyr +ajsxr*ajtys + ajtxr*ajtyt
                     ajtyxs=ajrx*ajtyrs + ajsx*ajtyss + ajtx*ajtyst + 
     & ajrxs*ajtyr +ajsxs*ajtys + ajtxs*ajtyt
                     ajtyxt=ajrx*ajtyrt + ajsx*ajtyst + ajtx*ajtytt + 
     & ajrxt*ajtyr +ajsxt*ajtys + ajtxt*ajtyt
                     ajtyyr=ajry*ajtyrr + ajsy*ajtyrs + ajty*ajtyrt + 
     & ajryr*ajtyr +ajsyr*ajtys + ajtyr*ajtyt
                     ajtyys=ajry*ajtyrs + ajsy*ajtyss + ajty*ajtyst + 
     & ajrys*ajtyr +ajsys*ajtys + ajtys*ajtyt
                     ajtyyt=ajry*ajtyrt + ajsy*ajtyst + ajty*ajtytt + 
     & ajryt*ajtyr +ajsyt*ajtys + ajtyt*ajtyt
                     ajtyzr=ajrz*ajtyrr + ajsz*ajtyrs + ajtz*ajtyrt + 
     & ajrzr*ajtyr +ajszr*ajtys + ajtzr*ajtyt
                     ajtyzs=ajrz*ajtyrs + ajsz*ajtyss + ajtz*ajtyst + 
     & ajrzs*ajtyr +ajszs*ajtys + ajtzs*ajtyt
                     ajtyzt=ajrz*ajtyrt + ajsz*ajtyst + ajtz*ajtytt + 
     & ajrzt*ajtyr +ajszt*ajtys + ajtzt*ajtyt
                     ajtzxr=ajrx*ajtzrr + ajsx*ajtzrs + ajtx*ajtzrt + 
     & ajrxr*ajtzr +ajsxr*ajtzs + ajtxr*ajtzt
                     ajtzxs=ajrx*ajtzrs + ajsx*ajtzss + ajtx*ajtzst + 
     & ajrxs*ajtzr +ajsxs*ajtzs + ajtxs*ajtzt
                     ajtzxt=ajrx*ajtzrt + ajsx*ajtzst + ajtx*ajtztt + 
     & ajrxt*ajtzr +ajsxt*ajtzs + ajtxt*ajtzt
                     ajtzyr=ajry*ajtzrr + ajsy*ajtzrs + ajty*ajtzrt + 
     & ajryr*ajtzr +ajsyr*ajtzs + ajtyr*ajtzt
                     ajtzys=ajry*ajtzrs + ajsy*ajtzss + ajty*ajtzst + 
     & ajrys*ajtzr +ajsys*ajtzs + ajtys*ajtzt
                     ajtzyt=ajry*ajtzrt + ajsy*ajtzst + ajty*ajtztt + 
     & ajryt*ajtzr +ajsyt*ajtzs + ajtyt*ajtzt
                     ajtzzr=ajrz*ajtzrr + ajsz*ajtzrs + ajtz*ajtzrt + 
     & ajrzr*ajtzr +ajszr*ajtzs + ajtzr*ajtzt
                     ajtzzs=ajrz*ajtzrs + ajsz*ajtzss + ajtz*ajtzst + 
     & ajrzs*ajtzr +ajszs*ajtzs + ajtzs*ajtzt
                     ajtzzt=ajrz*ajtzrt + ajsz*ajtzst + ajtz*ajtztt + 
     & ajrzt*ajtzr +ajszt*ajtzs + ajtzt*ajtzt
                     ! ***************************************************************
                     ! PDE: cxx*uxx + cyy*uyy + czz*uzz + cxy*uxy + cxz*uxz + cyz*uyz + cx*ux + cy*uy + cz*uz + c0 *u = f 
                     ! PDE: cRR*urr + cSS*uss + cTT*utt + cRS*urs + cRT*urt + cST*ust  + ccR*ur + ccS*us + ccT*ut + c0 *u = f 
                     ! =============== Start: Laplace operator: ==================== 
                      cxx=1.
                      cyy=1.
                      czz=1.
                      cxy=0.
                      cxz=0.
                      cyz=0.
                      cx=0.
                      cy=0.
                      cz=0.
                      c0=0.
                      cRR=cxx*ajrx**2+cyy*ajry**2+czz*ajrz**2 +cxy*
     & ajrx*ajry+cxz*ajrx*ajrz+cyz*ajry*ajrz
                      cSS=cxx*ajsx**2+cyy*ajsy**2+czz*ajsz**2 +cxy*
     & ajsx*ajsy+cxz*ajsx*ajsz+cyz*ajsy*ajsz
                      cTT=cxx*ajtx**2+cyy*ajty**2+czz*ajtz**2 +cxy*
     & ajtx*ajty+cxz*ajtx*ajtz+cyz*ajty*ajtz
                      cRS=2.*(cxx*ajrx*ajsx+cyy*ajry*ajsy+czz*ajrz*
     & ajsz) +cxy*(ajrx*ajsy+ajry*ajsx)+cxz*(ajrx*ajsz+ajrz*ajsx)+cyz*
     & (ajry*ajsz+ajrz*ajsy)
                      cRT=2.*(cxx*ajrx*ajtx+cyy*ajry*ajty+czz*ajrz*
     & ajtz) +cxy*(ajrx*ajty+ajry*ajtx)+cxz*(ajrx*ajtz+ajrz*ajtx)+cyz*
     & (ajry*ajtz+ajrz*ajty)
                      cST=2.*(cxx*ajsx*ajtx+cyy*ajsy*ajty+czz*ajsz*
     & ajtz) +cxy*(ajsx*ajty+ajsy*ajtx)+cxz*(ajsx*ajtz+ajsz*ajtx)+cyz*
     & (ajsy*ajtz+ajsz*ajty)
                      ccR=cxx*ajrxx+cyy*ajryy+czz*ajrzz +cxy*ajrxy+cxz*
     & ajrxz+cyz*ajryz + cx*ajrx+cy*ajry+cz*ajrz
                      ccS=cxx*ajsxx+cyy*ajsyy+czz*ajszz +cxy*ajsxy+cxz*
     & ajsxz+cyz*ajsyz + cx*ajsx+cy*ajsy+cz*ajsz
                      ccT=cxx*ajtxx+cyy*ajtyy+czz*ajtzz +cxy*ajtxy+cxz*
     & ajtxz+cyz*ajtyz + cx*ajtx+cy*ajty+cz*ajtz
                     ! m=1...
                      cRRr=2.*(ajrx*ajrxr+ajry*ajryr+ajrz*ajrzr)
                      cRSr=2.*(ajrxr*ajsx+ajrx*ajsxr + ajryr*ajsy+ 
     & ajry*ajsyr + ajrzr*ajsz+ ajrz*ajszr)
                      cRTr=2.*(ajrxr*ajtx+ajrx*ajtxr + ajryr*ajty+ 
     & ajry*ajtyr + ajrzr*ajtz+ ajrz*ajtzr)
                      ccRr=ajrxxr+ajryyr+ajrzzr
                      cRRs=2.*(ajrx*ajrxs+ajry*ajrys+ajrz*ajrzs)
                      cRSs=2.*(ajrxs*ajsx+ajrx*ajsxs + ajrys*ajsy+ 
     & ajry*ajsys + ajrzs*ajsz+ ajrz*ajszs)
                      cRTs=2.*(ajrxs*ajtx+ajrx*ajtxs + ajrys*ajty+ 
     & ajry*ajtys + ajrzs*ajtz+ ajrz*ajtzs)
                      ccRs=ajrxxs+ajryys+ajrzzs
                      cRRt=2.*(ajrx*ajrxt+ajry*ajryt+ajrz*ajrzt)
                      cRSt=2.*(ajrxt*ajsx+ajrx*ajsxt + ajryt*ajsy+ 
     & ajry*ajsyt + ajrzt*ajsz+ ajrz*ajszt)
                      cRTt=2.*(ajrxt*ajtx+ajrx*ajtxt + ajryt*ajty+ 
     & ajry*ajtyt + ajrzt*ajtz+ ajrz*ajtzt)
                      ccRt=ajrxxt+ajryyt+ajrzzt
                     ! m=2...
                      cSSr=2.*(ajsx*ajsxr+ajsy*ajsyr+ajsz*ajszr)
                      cSTr=2.*(ajsxr*ajtx+ajsx*ajtxr + ajsyr*ajty+ 
     & ajsy*ajtyr + ajszr*ajtz+ ajsz*ajtzr)
                      ccSr=ajsxxr+ajsyyr+ajszzr
                      cSSs=2.*(ajsx*ajsxs+ajsy*ajsys+ajsz*ajszs)
                      cSTs=2.*(ajsxs*ajtx+ajsx*ajtxs + ajsys*ajty+ 
     & ajsy*ajtys + ajszs*ajtz+ ajsz*ajtzs)
                      ccSs=ajsxxs+ajsyys+ajszzs
                      cSSt=2.*(ajsx*ajsxt+ajsy*ajsyt+ajsz*ajszt)
                      cSTt=2.*(ajsxt*ajtx+ajsx*ajtxt + ajsyt*ajty+ 
     & ajsy*ajtyt + ajszt*ajtz+ ajsz*ajtzt)
                      ccSt=ajsxxt+ajsyyt+ajszzt
                     ! m=3...
                      cTTr=2.*(ajtx*ajtxr+ajty*ajtyr+ajtz*ajtzr)
                      ccTr=ajtxxr+ajtyyr+ajtzzr
                      cTTs=2.*(ajtx*ajtxs+ajty*ajtys+ajtz*ajtzs)
                      ccTs=ajtxxs+ajtyys+ajtzzs
                      cTTt=2.*(ajtx*ajtxt+ajty*ajtyt+ajtz*ajtzt)
                      ccTt=ajtxxt+ajtyyt+ajtzzt
                      c0r=0.
                      c0s=0.
                      c0t=0.
                     ! =============== End: Laplace operator: ==================== 
                     ! ---------------- Start: Boundary condition: --------------- 
                     ! BC: a1*u.n + a0*u = g 
                     ! nsign=2*side-1
                     ! a1=1.
                     ! a0=0.
                      ! ---------------- Start r direction ---------------
                      ! ---------------- Start s direction ---------------
                      ! Outward normal : (n1,n2,n3) 
                      ani=nsign/sqrt(ajsx**2+ajsy**2+ajsz**2)
                      n1=ajsx*ani
                      n2=ajsy*ani
                      n3=ajsz*ani
                      ! BC : anS*us + anT*ut + anR*ur + a0*u 
                      anS=a1*(n1*ajsx+n2*ajsy+n3*ajsz)
                      anT=a1*(n1*ajtx+n2*ajty+n3*ajtz)
                      anR=a1*(n1*ajrx+n2*ajry+n3*ajrz)
                     ! >>>>>>>
                      anit=-(ajsx*ajsxt+ajsy*ajsyt+ajsz*ajszt)*ani**3
                      anitt=-(ajsx*ajsxtt+ajsy*ajsytt+ajsz*ajsztt+
     & ajsxt*ajsxt+ajsyt*ajsyt+ajszt*ajszt)*ani**3 -3.*(ajsx*ajsxt+
     & ajsy*ajsyt+ajsz*ajszt)*ani**2*anit
                      n1t=ajsxt*ani + ajsx*anit
                      n1tt=ajsxtt*ani + 2.*ajsxt*anit + ajsx*anitt
                      n2t=ajsyt*ani + ajsy*anit
                      n2tt=ajsytt*ani + 2.*ajsyt*anit + ajsy*anitt
                      n3t=ajszt*ani + ajsz*anit
                      n3tt=ajsztt*ani + 2.*ajszt*anit + ajsz*anitt
                      anSt =a1*(n1*ajsxt+n2*ajsyt+n3*ajszt+n1t*ajsx+
     & n2t*ajsy+n3t*ajsz)
                      anStt=a1*(n1*ajsxtt+n2*ajsytt+n3*ajsztt+2.*(n1t*
     & ajsxt+n2t*ajsyt+n3t*ajszt)+n1tt*ajsx+n2tt*ajsy+n3tt*ajsz)
                      anTt =a1*(n1*ajtxt+n2*ajtyt+n3*ajtzt+n1t*ajtx+
     & n2t*ajty+n3t*ajtz)
                      anTtt=a1*(n1*ajtxtt+n2*ajtytt+n3*ajtztt+2.*(n1t*
     & ajtxt+n2t*ajtyt+n3t*ajtzt)+n1tt*ajtx+n2tt*ajty+n3tt*ajtz)
                      anRt =a1*(n1*ajrxt+n2*ajryt+n3*ajrzt+n1t*ajrx+
     & n2t*ajry+n3t*ajrz)
                      anRtt=a1*(n1*ajrxtt+n2*ajrytt+n3*ajrztt+2.*(n1t*
     & ajrxt+n2t*ajryt+n3t*ajrzt)+n1tt*ajrx+n2tt*ajry+n3tt*ajrz)
                     ! <<<<<<<
                     ! >>>>>>>
                      anir=-(ajsx*ajsxr+ajsy*ajsyr+ajsz*ajszr)*ani**3
                      anirr=-(ajsx*ajsxrr+ajsy*ajsyrr+ajsz*ajszrr+
     & ajsxr*ajsxr+ajsyr*ajsyr+ajszr*ajszr)*ani**3 -3.*(ajsx*ajsxr+
     & ajsy*ajsyr+ajsz*ajszr)*ani**2*anir
                      anirt=-(ajsx*ajsxrt+ajsy*ajsyrt+ajsz*ajszrt+
     & ajsxt*ajsxr+ajsyt*ajsyr+ajszt*ajszr)*ani**3 -3.*(ajsx*ajsxt+
     & ajsy*ajsyt+ajsz*ajszt)*ani**2*anir
                      n1r=ajsxr*ani + ajsx*anir
                      n1rr=ajsxrr*ani + 2.*ajsxr*anir + ajsx*anirr
                      n1rt=ajsxrt*ani + ajsxr*anit + ajsxt*anir + ajsx*
     & anirt
                      n2r=ajsyr*ani + ajsy*anir
                      n2rr=ajsyrr*ani + 2.*ajsyr*anir + ajsy*anirr
                      n2rt=ajsyrt*ani + ajsyr*anit + ajsyt*anir + ajsy*
     & anirt
                      n3r=ajszr*ani + ajsz*anir
                      n3rr=ajszrr*ani + 2.*ajszr*anir + ajsz*anirr
                      n3rt=ajszrt*ani + ajszr*anit + ajszt*anir + ajsz*
     & anirt
                      anSr =a1*(n1*ajsxr+n2*ajsyr+n3*ajszr+n1r*ajsx+
     & n2r*ajsy+n3r*ajsz)
                      anSrr=a1*(n1*ajsxrr+n2*ajsyrr+n3*ajszrr+2.*(n1r*
     & ajsxr+n2r*ajsyr+n3r*ajszr)+n1rr*ajsx+n2rr*ajsy+n3rr*ajsz)
                      anSrt=a1*(n1*ajsxrt+n2*ajsyrt+n3*ajszrt +n1t*
     & ajsxr+n2t*ajsyr+n3t*ajszr +n1r*ajsxt+n2r*ajsyt+n3r*ajszt +n1rt*
     & ajsx+n2rt*ajsy+n3rt*ajsz)
                      anTr =a1*(n1*ajtxr+n2*ajtyr+n3*ajtzr+n1r*ajtx+
     & n2r*ajty+n3r*ajtz)
                      anTrr=a1*(n1*ajtxrr+n2*ajtyrr+n3*ajtzrr+2.*(n1r*
     & ajtxr+n2r*ajtyr+n3r*ajtzr)+n1rr*ajtx+n2rr*ajty+n3rr*ajtz)
                      anTrt=a1*(n1*ajtxrt+n2*ajtyrt+n3*ajtzrt +n1t*
     & ajtxr+n2t*ajtyr+n3t*ajtzr +n1r*ajtxt+n2r*ajtyt+n3r*ajtzt +n1rt*
     & ajtx+n2rt*ajty+n3rt*ajtz)
                      anRr =a1*(n1*ajrxr+n2*ajryr+n3*ajrzr+n1r*ajrx+
     & n2r*ajry+n3r*ajrz)
                      anRrr=a1*(n1*ajrxrr+n2*ajryrr+n3*ajrzrr+2.*(n1r*
     & ajrxr+n2r*ajryr+n3r*ajrzr)+n1rr*ajrx+n2rr*ajry+n3rr*ajrz)
                      anRrt=a1*(n1*ajrxrt+n2*ajryrt+n3*ajrzrt +n1t*
     & ajrxr+n2t*ajryr+n3t*ajrzr +n1r*ajrxt+n2r*ajryt+n3r*ajrzt +n1rt*
     & ajrx+n2rt*ajry+n3rt*ajrz)
                     ! <<<<<<<
                      ! Here are the expressions for the normal derivatives
                     bn3 = 1
                     bn2 = 0
                     bn2 = 0
                     bn1 = 0
                     b0  = -(-c0s*anS**3*cSS**2+cSSs*anS**3*cSS*c0-cST*
     & cSSt*anS**3*c0+cST*c0t*anS**3*cSS-cST**2*cSS*a0tt*anS**2-2*cST*
     & *2*cSS*anSt**2*a0+cSSt*anS**2*cST**2*a0t+cTT*cSS**2*a0tt*anS**
     & 2+2*cTT*cSS**2*anSt**2*a0+cRS*c0r*anS**3*cSS-cRS*cSSr*anS**3*
     & c0-cRS**2*cSS*a0rr*anS**2-2*cRS**2*cSS*anSr**2*a0+cSSr*anS**2*
     & cRS**2*a0r+cRT*cSS**2*a0rt*anS**2+cRR*cSS**2*a0rr*anS**2+2*cRR*
     & cSS**2*anSr**2*a0-ccS**2*anS**2*cSS*a0+ccS*anS**3*cSS*c0+ccT*
     & anS**2*cSS**2*a0t+ccR*anS**2*cSS**2*a0r+c0*anS**2*cSS**2*a0+
     & cSTs*anS**2*cSS**2*a0t+cRSs*anS**2*cSS**2*a0r+ccSs*anS**2*cSS**
     & 2*a0-cSSs*anS**2*cSS*cST*a0t+cSSs*anS*cSS*cST*anSt*a0-cSSs*anS*
     & *2*cSS*cRS*a0r+cSSs*anS*cSS*cRS*anSr*a0-cSSs*anS**2*cSS*ccS*a0+
     & 2*cST**2*cSS*anSt*a0t*anS+cST**2*cSS*anStt*anS*a0-2*cST*cRS*
     & cSS*a0rt*anS**2+2*cST*cRS*cSS*anSt*a0r*anS-4*cST*cRS*cSS*anSt*
     & anSr*a0+2*cST*cRS*cSS*anSr*a0t*anS+2*cST*cRS*cSS*anSrt*anS*a0-
     & 2*cST*ccS*anS**2*cSS*a0t+2*cST*ccS*anS*cSS*anSt*a0-cST*cSTt*
     & anS**2*cSS*a0t+cST*cSTt*anS*cSS*anSt*a0-cST*cRSt*anS**2*cSS*
     & a0r+cST*cRSt*anS*cSS*anSr*a0-cST*ccSt*anS**2*cSS*a0-cSSt*anS*
     & cST**2*anSt*a0+cST*cSSt*anS**2*cRS*a0r-cST*cSSt*anS*cRS*anSr*
     & a0+cST*cSSt*anS**2*ccS*a0-2*cTT*cSS**2*anSt*a0t*anS-cTT*cSS**2*
     & anStt*anS*a0+2*cRS**2*cSS*anSr*a0r*anS+cRS**2*cSS*anSrr*anS*a0-
     & 2*cRS*ccS*anS**2*cSS*a0r+2*cRS*ccS*anS*cSS*anSr*a0-cRS*cSTr*
     & anS**2*cSS*a0t+cRS*cSTr*anS*cSS*anSt*a0-cRS*cRSr*anS**2*cSS*
     & a0r+cRS*cRSr*anS*cSS*anSr*a0-cRS*ccSr*anS**2*cSS*a0+cRS*cSSr*
     & anS**2*cST*a0t-cRS*cSSr*anS*cST*anSt*a0-cSSr*anS*cRS**2*anSr*
     & a0+cRS*cSSr*anS**2*ccS*a0-cRT*cSS**2*anSt*a0r*anS+2*cRT*cSS**2*
     & anSt*anSr*a0-cRT*cSS**2*anSr*a0t*anS-cRT*cSS**2*anSrt*anS*a0-2*
     & cRR*cSS**2*anSr*a0r*anS-cRR*cSS**2*anSrr*anS*a0-ccT*anS*cSS**2*
     & anSt*a0-ccR*anS*cSS**2*anSr*a0-cSTs*anS*cSS**2*anSt*a0-cRSs*
     & anS*cSS**2*anSr*a0)/anS**3/cSS**3
                      ! ---------------- Start t direction ---------------
                     ! write(*,'(''LS:matrix: side,axis,axisp1,b0,b1,b3,br2 ='',2i2,i3,4e11.3)') side,axis,axisp1,b0,b1,b3,br2
                     ! bn2 = -(-cRRr*anR**3*cRR+cRT*cRRt*anR**3+cRS*cRRs*anR**3-ccR*anR**3*cRR)/anR**3/cRR**2
                     ! write(*,'("LS-NE4:matrix: i1,i2=",2i3," Values:")') i1,i2
                     ! write(*,'("  cRR,anR,cRRr,cRT,cRRt,cRS,cRRs,ccR=",8e11.3)') cRR,anR,cRRr,cRT,cRRt,cRS,cRRs,ccR
                  ! b0  = -(2*cRS**2*anRs*a0s*anR+cRS**2*anRss*anR*a0-2*cRS*cRT*a0st*anR**2-cRS*ccR*anR**2*a0s-cRS*cRSs*anR**2*a0s-cRS*cRTs*anR**2*a0t-cRS*ccRs*anR**2*a0+cSS*cRR*a0ss*anR**2+2*cSS*cRR*anRs**2*a0-cRT*ccR*anR**2*a0t-cRT*cRSt*anR**2*a0s+cRT*c0t*anR**3-c0r*anR**3*cRR-cRS**2*a0ss*anR**2-2*cRS**2*anRs**2*a0+cRS*c0s*anR**3-cRT**2*a0tt*anR**2-2*cRT**2*anRt**2*a0+2*cRS*cRT*anRs*a0t*anR-4*cRS*cRT*anRs*anRt*a0+2*cRS*cRT*anRt*a0s*anR+2*cRS*cRT*anRst*anR*a0+cRS*ccR*anR*anRs*a0+cRS*cRSs*anR*anRs*a0+cRS*cRTs*anR*anRt*a0-2*cSS*cRR*anRs*a0s*anR-cSS*cRR*anRss*anR*a0-cRT*cRTt*anR**2*a0t-cRT*ccRt*anR**2*a0+cRT**2*anRtt*anR*a0+2*cRT**2*anRt*a0t*anR+cST*cRR*a0st*anR**2+cTT*cRR*a0tt*anR**2+2*cTT*cRR*anRt**2*a0+ccS*anR**2*cRR*a0s+ccT*anR**2*cRR*a0t+c0*anR**2*cRR*a0+cRSr*anR**2*cRR*a0s+cRTr*anR**2*cRR*a0t+ccRr*anR**2*cRR*a0+cRT*ccR*anR*anRt*a0+cRT*cRSt*anR*anRs*a0+cRT*cRTt*anR*anRt*a0-cST*cRR*anRs*a0t*anR+2*cST*cRR*anRs*anRt*a0-cST*cRR*anRt*a0s*anR-cST*cRR*anRst*anR*a0-cTT*cRR*anRtt*anR*a0-2*cTT*cRR*anRt*a0t*anR-ccS*anR*cRR*anRs*a0-ccT*anR*cRR*anRt*a0-cRSr*anR*cRR*anRs*a0-cRTr*anR*cRR*anRt*a0)/anR**3/cRR**2
                     ! write(*,'("anRs,a0s,anRss,a0st,cRTs,a0t,a0,cSS,a0ss=",9e10.2)') anRs,a0s,anRss,a0st,cRTs,a0t,a0,cSS,a0ss
                     ! write(*,'(" b0,bn2 =",4e11.3)') b0,bn2
                     d(j1,j2,j3)=-.5/dr(axis)**3
                     e(j1,j2,j3)= 1./dr(axis)**3    +bn2/dr(axis)**2
                     a(j1,j2,j3)=                -2.*bn2/dr(axis)**2 - 
     & b0
                     b(j1,j2,j3)=-1./dr(axis)**3    +bn2/dr(axis)**2
                     c(j1,j2,j3)= .5/dr(axis)**3
                    else if( mask(i1,i2,i3).lt.0 ) then
                        b(j1,j2,j3)= 1.
                        c(j1,j2,j3)=-4.
                        d(j1,j2,j3)= 6.
                        e(j1,j2,j3)=-4.
                        a(j1,j2,j3)= 1.
                    end if
                   end do
                   end do
                   end do
                else if( axis.eq.2 .and. nd.eq.3 )then
                   if( equationToSolve.ne.laplaceEquation )then
                     write(*,'("Ogmg:LSB:ERROR: equation!=laplace")')
                     write(*,'("equationToSolve=",i2)') equationToSolve
                     write(*,'("gridType=",i2)') gridType
                     write(*,'("sparseStencil=",i2)') sparseStencil
                     stop 5054
                   end if
                   nsign = 2*side-1
                   ! write(*,'(''MGLS: neumannAndEquationCurvilinear: a0,a1='',2f6.2)') a0,a1
                   diag=0. ! for now
                   do j3=l3a,l3b
                   do j2=l2a,l2b
                   do j1=l1a,l1b
                    i1=j1+2*is1 ! (i1,i2,i3) is the boundary point
                    i2=j2+2*is2 ! (j1,j2,j3) is the 2nd ghost line
                    i3=j3+2*is3
                    if( mask(i1,i2,i3).gt.0 ) then
                     ! We need 2 parameteric and 1 real derivative. Do this for now: 
                      ! this next call will define the jacobian and its derivatives (parameteric and spatial)
                      ajrx = rsxy(i1,i2,i3,0,0)
                      ajrxr = (rsxy(i1-2,i2,i3,0,0)-8.*rsxy(i1-1,i2,i3,
     & 0,0)+8.*rsxy(i1+1,i2,i3,0,0)-rsxy(i1+2,i2,i3,0,0))/(12.*dr(0))
                      ajrxs = (rsxy(i1,i2-2,i3,0,0)-8.*rsxy(i1,i2-1,i3,
     & 0,0)+8.*rsxy(i1,i2+1,i3,0,0)-rsxy(i1,i2+2,i3,0,0))/(12.*dr(1))
                      ajrxt = (rsxy(i1,i2,i3-2,0,0)-8.*rsxy(i1,i2,i3-1,
     & 0,0)+8.*rsxy(i1,i2,i3+1,0,0)-rsxy(i1,i2,i3+2,0,0))/(12.*dr(2))
                      ajrxrr = (-rsxy(i1-2,i2,i3,0,0)+16.*rsxy(i1-1,i2,
     & i3,0,0)-30.*rsxy(i1,i2,i3,0,0)+16.*rsxy(i1+1,i2,i3,0,0)-rsxy(
     & i1+2,i2,i3,0,0))/(12.*dr(0)**2)
                      ajrxrs = ((rsxy(i1-2,i2-2,i3,0,0)-8.*rsxy(i1-2,
     & i2-1,i3,0,0)+8.*rsxy(i1-2,i2+1,i3,0,0)-rsxy(i1-2,i2+2,i3,0,0))
     & /(12.*dr(1))-8.*(rsxy(i1-1,i2-2,i3,0,0)-8.*rsxy(i1-1,i2-1,i3,0,
     & 0)+8.*rsxy(i1-1,i2+1,i3,0,0)-rsxy(i1-1,i2+2,i3,0,0))/(12.*dr(1)
     & )+8.*(rsxy(i1+1,i2-2,i3,0,0)-8.*rsxy(i1+1,i2-1,i3,0,0)+8.*rsxy(
     & i1+1,i2+1,i3,0,0)-rsxy(i1+1,i2+2,i3,0,0))/(12.*dr(1))-(rsxy(i1+
     & 2,i2-2,i3,0,0)-8.*rsxy(i1+2,i2-1,i3,0,0)+8.*rsxy(i1+2,i2+1,i3,
     & 0,0)-rsxy(i1+2,i2+2,i3,0,0))/(12.*dr(1)))/(12.*dr(0))
                      ajrxss = (-rsxy(i1,i2-2,i3,0,0)+16.*rsxy(i1,i2-1,
     & i3,0,0)-30.*rsxy(i1,i2,i3,0,0)+16.*rsxy(i1,i2+1,i3,0,0)-rsxy(
     & i1,i2+2,i3,0,0))/(12.*dr(1)**2)
                      ajrxrt = ((rsxy(i1-2,i2,i3-2,0,0)-8.*rsxy(i1-2,
     & i2,i3-1,0,0)+8.*rsxy(i1-2,i2,i3+1,0,0)-rsxy(i1-2,i2,i3+2,0,0))
     & /(12.*dr(2))-8.*(rsxy(i1-1,i2,i3-2,0,0)-8.*rsxy(i1-1,i2,i3-1,0,
     & 0)+8.*rsxy(i1-1,i2,i3+1,0,0)-rsxy(i1-1,i2,i3+2,0,0))/(12.*dr(2)
     & )+8.*(rsxy(i1+1,i2,i3-2,0,0)-8.*rsxy(i1+1,i2,i3-1,0,0)+8.*rsxy(
     & i1+1,i2,i3+1,0,0)-rsxy(i1+1,i2,i3+2,0,0))/(12.*dr(2))-(rsxy(i1+
     & 2,i2,i3-2,0,0)-8.*rsxy(i1+2,i2,i3-1,0,0)+8.*rsxy(i1+2,i2,i3+1,
     & 0,0)-rsxy(i1+2,i2,i3+2,0,0))/(12.*dr(2)))/(12.*dr(0))
                      ajrxst = ((rsxy(i1,i2-2,i3-2,0,0)-8.*rsxy(i1,i2-
     & 2,i3-1,0,0)+8.*rsxy(i1,i2-2,i3+1,0,0)-rsxy(i1,i2-2,i3+2,0,0))/(
     & 12.*dr(2))-8.*(rsxy(i1,i2-1,i3-2,0,0)-8.*rsxy(i1,i2-1,i3-1,0,0)
     & +8.*rsxy(i1,i2-1,i3+1,0,0)-rsxy(i1,i2-1,i3+2,0,0))/(12.*dr(2))+
     & 8.*(rsxy(i1,i2+1,i3-2,0,0)-8.*rsxy(i1,i2+1,i3-1,0,0)+8.*rsxy(
     & i1,i2+1,i3+1,0,0)-rsxy(i1,i2+1,i3+2,0,0))/(12.*dr(2))-(rsxy(i1,
     & i2+2,i3-2,0,0)-8.*rsxy(i1,i2+2,i3-1,0,0)+8.*rsxy(i1,i2+2,i3+1,
     & 0,0)-rsxy(i1,i2+2,i3+2,0,0))/(12.*dr(2)))/(12.*dr(1))
                      ajrxtt = (-rsxy(i1,i2,i3-2,0,0)+16.*rsxy(i1,i2,
     & i3-1,0,0)-30.*rsxy(i1,i2,i3,0,0)+16.*rsxy(i1,i2,i3+1,0,0)-rsxy(
     & i1,i2,i3+2,0,0))/(12.*dr(2)**2)
                      ajsx = rsxy(i1,i2,i3,1,0)
                      ajsxr = (rsxy(i1-2,i2,i3,1,0)-8.*rsxy(i1-1,i2,i3,
     & 1,0)+8.*rsxy(i1+1,i2,i3,1,0)-rsxy(i1+2,i2,i3,1,0))/(12.*dr(0))
                      ajsxs = (rsxy(i1,i2-2,i3,1,0)-8.*rsxy(i1,i2-1,i3,
     & 1,0)+8.*rsxy(i1,i2+1,i3,1,0)-rsxy(i1,i2+2,i3,1,0))/(12.*dr(1))
                      ajsxt = (rsxy(i1,i2,i3-2,1,0)-8.*rsxy(i1,i2,i3-1,
     & 1,0)+8.*rsxy(i1,i2,i3+1,1,0)-rsxy(i1,i2,i3+2,1,0))/(12.*dr(2))
                      ajsxrr = (-rsxy(i1-2,i2,i3,1,0)+16.*rsxy(i1-1,i2,
     & i3,1,0)-30.*rsxy(i1,i2,i3,1,0)+16.*rsxy(i1+1,i2,i3,1,0)-rsxy(
     & i1+2,i2,i3,1,0))/(12.*dr(0)**2)
                      ajsxrs = ((rsxy(i1-2,i2-2,i3,1,0)-8.*rsxy(i1-2,
     & i2-1,i3,1,0)+8.*rsxy(i1-2,i2+1,i3,1,0)-rsxy(i1-2,i2+2,i3,1,0))
     & /(12.*dr(1))-8.*(rsxy(i1-1,i2-2,i3,1,0)-8.*rsxy(i1-1,i2-1,i3,1,
     & 0)+8.*rsxy(i1-1,i2+1,i3,1,0)-rsxy(i1-1,i2+2,i3,1,0))/(12.*dr(1)
     & )+8.*(rsxy(i1+1,i2-2,i3,1,0)-8.*rsxy(i1+1,i2-1,i3,1,0)+8.*rsxy(
     & i1+1,i2+1,i3,1,0)-rsxy(i1+1,i2+2,i3,1,0))/(12.*dr(1))-(rsxy(i1+
     & 2,i2-2,i3,1,0)-8.*rsxy(i1+2,i2-1,i3,1,0)+8.*rsxy(i1+2,i2+1,i3,
     & 1,0)-rsxy(i1+2,i2+2,i3,1,0))/(12.*dr(1)))/(12.*dr(0))
                      ajsxss = (-rsxy(i1,i2-2,i3,1,0)+16.*rsxy(i1,i2-1,
     & i3,1,0)-30.*rsxy(i1,i2,i3,1,0)+16.*rsxy(i1,i2+1,i3,1,0)-rsxy(
     & i1,i2+2,i3,1,0))/(12.*dr(1)**2)
                      ajsxrt = ((rsxy(i1-2,i2,i3-2,1,0)-8.*rsxy(i1-2,
     & i2,i3-1,1,0)+8.*rsxy(i1-2,i2,i3+1,1,0)-rsxy(i1-2,i2,i3+2,1,0))
     & /(12.*dr(2))-8.*(rsxy(i1-1,i2,i3-2,1,0)-8.*rsxy(i1-1,i2,i3-1,1,
     & 0)+8.*rsxy(i1-1,i2,i3+1,1,0)-rsxy(i1-1,i2,i3+2,1,0))/(12.*dr(2)
     & )+8.*(rsxy(i1+1,i2,i3-2,1,0)-8.*rsxy(i1+1,i2,i3-1,1,0)+8.*rsxy(
     & i1+1,i2,i3+1,1,0)-rsxy(i1+1,i2,i3+2,1,0))/(12.*dr(2))-(rsxy(i1+
     & 2,i2,i3-2,1,0)-8.*rsxy(i1+2,i2,i3-1,1,0)+8.*rsxy(i1+2,i2,i3+1,
     & 1,0)-rsxy(i1+2,i2,i3+2,1,0))/(12.*dr(2)))/(12.*dr(0))
                      ajsxst = ((rsxy(i1,i2-2,i3-2,1,0)-8.*rsxy(i1,i2-
     & 2,i3-1,1,0)+8.*rsxy(i1,i2-2,i3+1,1,0)-rsxy(i1,i2-2,i3+2,1,0))/(
     & 12.*dr(2))-8.*(rsxy(i1,i2-1,i3-2,1,0)-8.*rsxy(i1,i2-1,i3-1,1,0)
     & +8.*rsxy(i1,i2-1,i3+1,1,0)-rsxy(i1,i2-1,i3+2,1,0))/(12.*dr(2))+
     & 8.*(rsxy(i1,i2+1,i3-2,1,0)-8.*rsxy(i1,i2+1,i3-1,1,0)+8.*rsxy(
     & i1,i2+1,i3+1,1,0)-rsxy(i1,i2+1,i3+2,1,0))/(12.*dr(2))-(rsxy(i1,
     & i2+2,i3-2,1,0)-8.*rsxy(i1,i2+2,i3-1,1,0)+8.*rsxy(i1,i2+2,i3+1,
     & 1,0)-rsxy(i1,i2+2,i3+2,1,0))/(12.*dr(2)))/(12.*dr(1))
                      ajsxtt = (-rsxy(i1,i2,i3-2,1,0)+16.*rsxy(i1,i2,
     & i3-1,1,0)-30.*rsxy(i1,i2,i3,1,0)+16.*rsxy(i1,i2,i3+1,1,0)-rsxy(
     & i1,i2,i3+2,1,0))/(12.*dr(2)**2)
                      ajtx = rsxy(i1,i2,i3,2,0)
                      ajtxr = (rsxy(i1-2,i2,i3,2,0)-8.*rsxy(i1-1,i2,i3,
     & 2,0)+8.*rsxy(i1+1,i2,i3,2,0)-rsxy(i1+2,i2,i3,2,0))/(12.*dr(0))
                      ajtxs = (rsxy(i1,i2-2,i3,2,0)-8.*rsxy(i1,i2-1,i3,
     & 2,0)+8.*rsxy(i1,i2+1,i3,2,0)-rsxy(i1,i2+2,i3,2,0))/(12.*dr(1))
                      ajtxt = (rsxy(i1,i2,i3-2,2,0)-8.*rsxy(i1,i2,i3-1,
     & 2,0)+8.*rsxy(i1,i2,i3+1,2,0)-rsxy(i1,i2,i3+2,2,0))/(12.*dr(2))
                      ajtxrr = (-rsxy(i1-2,i2,i3,2,0)+16.*rsxy(i1-1,i2,
     & i3,2,0)-30.*rsxy(i1,i2,i3,2,0)+16.*rsxy(i1+1,i2,i3,2,0)-rsxy(
     & i1+2,i2,i3,2,0))/(12.*dr(0)**2)
                      ajtxrs = ((rsxy(i1-2,i2-2,i3,2,0)-8.*rsxy(i1-2,
     & i2-1,i3,2,0)+8.*rsxy(i1-2,i2+1,i3,2,0)-rsxy(i1-2,i2+2,i3,2,0))
     & /(12.*dr(1))-8.*(rsxy(i1-1,i2-2,i3,2,0)-8.*rsxy(i1-1,i2-1,i3,2,
     & 0)+8.*rsxy(i1-1,i2+1,i3,2,0)-rsxy(i1-1,i2+2,i3,2,0))/(12.*dr(1)
     & )+8.*(rsxy(i1+1,i2-2,i3,2,0)-8.*rsxy(i1+1,i2-1,i3,2,0)+8.*rsxy(
     & i1+1,i2+1,i3,2,0)-rsxy(i1+1,i2+2,i3,2,0))/(12.*dr(1))-(rsxy(i1+
     & 2,i2-2,i3,2,0)-8.*rsxy(i1+2,i2-1,i3,2,0)+8.*rsxy(i1+2,i2+1,i3,
     & 2,0)-rsxy(i1+2,i2+2,i3,2,0))/(12.*dr(1)))/(12.*dr(0))
                      ajtxss = (-rsxy(i1,i2-2,i3,2,0)+16.*rsxy(i1,i2-1,
     & i3,2,0)-30.*rsxy(i1,i2,i3,2,0)+16.*rsxy(i1,i2+1,i3,2,0)-rsxy(
     & i1,i2+2,i3,2,0))/(12.*dr(1)**2)
                      ajtxrt = ((rsxy(i1-2,i2,i3-2,2,0)-8.*rsxy(i1-2,
     & i2,i3-1,2,0)+8.*rsxy(i1-2,i2,i3+1,2,0)-rsxy(i1-2,i2,i3+2,2,0))
     & /(12.*dr(2))-8.*(rsxy(i1-1,i2,i3-2,2,0)-8.*rsxy(i1-1,i2,i3-1,2,
     & 0)+8.*rsxy(i1-1,i2,i3+1,2,0)-rsxy(i1-1,i2,i3+2,2,0))/(12.*dr(2)
     & )+8.*(rsxy(i1+1,i2,i3-2,2,0)-8.*rsxy(i1+1,i2,i3-1,2,0)+8.*rsxy(
     & i1+1,i2,i3+1,2,0)-rsxy(i1+1,i2,i3+2,2,0))/(12.*dr(2))-(rsxy(i1+
     & 2,i2,i3-2,2,0)-8.*rsxy(i1+2,i2,i3-1,2,0)+8.*rsxy(i1+2,i2,i3+1,
     & 2,0)-rsxy(i1+2,i2,i3+2,2,0))/(12.*dr(2)))/(12.*dr(0))
                      ajtxst = ((rsxy(i1,i2-2,i3-2,2,0)-8.*rsxy(i1,i2-
     & 2,i3-1,2,0)+8.*rsxy(i1,i2-2,i3+1,2,0)-rsxy(i1,i2-2,i3+2,2,0))/(
     & 12.*dr(2))-8.*(rsxy(i1,i2-1,i3-2,2,0)-8.*rsxy(i1,i2-1,i3-1,2,0)
     & +8.*rsxy(i1,i2-1,i3+1,2,0)-rsxy(i1,i2-1,i3+2,2,0))/(12.*dr(2))+
     & 8.*(rsxy(i1,i2+1,i3-2,2,0)-8.*rsxy(i1,i2+1,i3-1,2,0)+8.*rsxy(
     & i1,i2+1,i3+1,2,0)-rsxy(i1,i2+1,i3+2,2,0))/(12.*dr(2))-(rsxy(i1,
     & i2+2,i3-2,2,0)-8.*rsxy(i1,i2+2,i3-1,2,0)+8.*rsxy(i1,i2+2,i3+1,
     & 2,0)-rsxy(i1,i2+2,i3+2,2,0))/(12.*dr(2)))/(12.*dr(1))
                      ajtxtt = (-rsxy(i1,i2,i3-2,2,0)+16.*rsxy(i1,i2,
     & i3-1,2,0)-30.*rsxy(i1,i2,i3,2,0)+16.*rsxy(i1,i2,i3+1,2,0)-rsxy(
     & i1,i2,i3+2,2,0))/(12.*dr(2)**2)
                      ajry = rsxy(i1,i2,i3,0,1)
                      ajryr = (rsxy(i1-2,i2,i3,0,1)-8.*rsxy(i1-1,i2,i3,
     & 0,1)+8.*rsxy(i1+1,i2,i3,0,1)-rsxy(i1+2,i2,i3,0,1))/(12.*dr(0))
                      ajrys = (rsxy(i1,i2-2,i3,0,1)-8.*rsxy(i1,i2-1,i3,
     & 0,1)+8.*rsxy(i1,i2+1,i3,0,1)-rsxy(i1,i2+2,i3,0,1))/(12.*dr(1))
                      ajryt = (rsxy(i1,i2,i3-2,0,1)-8.*rsxy(i1,i2,i3-1,
     & 0,1)+8.*rsxy(i1,i2,i3+1,0,1)-rsxy(i1,i2,i3+2,0,1))/(12.*dr(2))
                      ajryrr = (-rsxy(i1-2,i2,i3,0,1)+16.*rsxy(i1-1,i2,
     & i3,0,1)-30.*rsxy(i1,i2,i3,0,1)+16.*rsxy(i1+1,i2,i3,0,1)-rsxy(
     & i1+2,i2,i3,0,1))/(12.*dr(0)**2)
                      ajryrs = ((rsxy(i1-2,i2-2,i3,0,1)-8.*rsxy(i1-2,
     & i2-1,i3,0,1)+8.*rsxy(i1-2,i2+1,i3,0,1)-rsxy(i1-2,i2+2,i3,0,1))
     & /(12.*dr(1))-8.*(rsxy(i1-1,i2-2,i3,0,1)-8.*rsxy(i1-1,i2-1,i3,0,
     & 1)+8.*rsxy(i1-1,i2+1,i3,0,1)-rsxy(i1-1,i2+2,i3,0,1))/(12.*dr(1)
     & )+8.*(rsxy(i1+1,i2-2,i3,0,1)-8.*rsxy(i1+1,i2-1,i3,0,1)+8.*rsxy(
     & i1+1,i2+1,i3,0,1)-rsxy(i1+1,i2+2,i3,0,1))/(12.*dr(1))-(rsxy(i1+
     & 2,i2-2,i3,0,1)-8.*rsxy(i1+2,i2-1,i3,0,1)+8.*rsxy(i1+2,i2+1,i3,
     & 0,1)-rsxy(i1+2,i2+2,i3,0,1))/(12.*dr(1)))/(12.*dr(0))
                      ajryss = (-rsxy(i1,i2-2,i3,0,1)+16.*rsxy(i1,i2-1,
     & i3,0,1)-30.*rsxy(i1,i2,i3,0,1)+16.*rsxy(i1,i2+1,i3,0,1)-rsxy(
     & i1,i2+2,i3,0,1))/(12.*dr(1)**2)
                      ajryrt = ((rsxy(i1-2,i2,i3-2,0,1)-8.*rsxy(i1-2,
     & i2,i3-1,0,1)+8.*rsxy(i1-2,i2,i3+1,0,1)-rsxy(i1-2,i2,i3+2,0,1))
     & /(12.*dr(2))-8.*(rsxy(i1-1,i2,i3-2,0,1)-8.*rsxy(i1-1,i2,i3-1,0,
     & 1)+8.*rsxy(i1-1,i2,i3+1,0,1)-rsxy(i1-1,i2,i3+2,0,1))/(12.*dr(2)
     & )+8.*(rsxy(i1+1,i2,i3-2,0,1)-8.*rsxy(i1+1,i2,i3-1,0,1)+8.*rsxy(
     & i1+1,i2,i3+1,0,1)-rsxy(i1+1,i2,i3+2,0,1))/(12.*dr(2))-(rsxy(i1+
     & 2,i2,i3-2,0,1)-8.*rsxy(i1+2,i2,i3-1,0,1)+8.*rsxy(i1+2,i2,i3+1,
     & 0,1)-rsxy(i1+2,i2,i3+2,0,1))/(12.*dr(2)))/(12.*dr(0))
                      ajryst = ((rsxy(i1,i2-2,i3-2,0,1)-8.*rsxy(i1,i2-
     & 2,i3-1,0,1)+8.*rsxy(i1,i2-2,i3+1,0,1)-rsxy(i1,i2-2,i3+2,0,1))/(
     & 12.*dr(2))-8.*(rsxy(i1,i2-1,i3-2,0,1)-8.*rsxy(i1,i2-1,i3-1,0,1)
     & +8.*rsxy(i1,i2-1,i3+1,0,1)-rsxy(i1,i2-1,i3+2,0,1))/(12.*dr(2))+
     & 8.*(rsxy(i1,i2+1,i3-2,0,1)-8.*rsxy(i1,i2+1,i3-1,0,1)+8.*rsxy(
     & i1,i2+1,i3+1,0,1)-rsxy(i1,i2+1,i3+2,0,1))/(12.*dr(2))-(rsxy(i1,
     & i2+2,i3-2,0,1)-8.*rsxy(i1,i2+2,i3-1,0,1)+8.*rsxy(i1,i2+2,i3+1,
     & 0,1)-rsxy(i1,i2+2,i3+2,0,1))/(12.*dr(2)))/(12.*dr(1))
                      ajrytt = (-rsxy(i1,i2,i3-2,0,1)+16.*rsxy(i1,i2,
     & i3-1,0,1)-30.*rsxy(i1,i2,i3,0,1)+16.*rsxy(i1,i2,i3+1,0,1)-rsxy(
     & i1,i2,i3+2,0,1))/(12.*dr(2)**2)
                      ajsy = rsxy(i1,i2,i3,1,1)
                      ajsyr = (rsxy(i1-2,i2,i3,1,1)-8.*rsxy(i1-1,i2,i3,
     & 1,1)+8.*rsxy(i1+1,i2,i3,1,1)-rsxy(i1+2,i2,i3,1,1))/(12.*dr(0))
                      ajsys = (rsxy(i1,i2-2,i3,1,1)-8.*rsxy(i1,i2-1,i3,
     & 1,1)+8.*rsxy(i1,i2+1,i3,1,1)-rsxy(i1,i2+2,i3,1,1))/(12.*dr(1))
                      ajsyt = (rsxy(i1,i2,i3-2,1,1)-8.*rsxy(i1,i2,i3-1,
     & 1,1)+8.*rsxy(i1,i2,i3+1,1,1)-rsxy(i1,i2,i3+2,1,1))/(12.*dr(2))
                      ajsyrr = (-rsxy(i1-2,i2,i3,1,1)+16.*rsxy(i1-1,i2,
     & i3,1,1)-30.*rsxy(i1,i2,i3,1,1)+16.*rsxy(i1+1,i2,i3,1,1)-rsxy(
     & i1+2,i2,i3,1,1))/(12.*dr(0)**2)
                      ajsyrs = ((rsxy(i1-2,i2-2,i3,1,1)-8.*rsxy(i1-2,
     & i2-1,i3,1,1)+8.*rsxy(i1-2,i2+1,i3,1,1)-rsxy(i1-2,i2+2,i3,1,1))
     & /(12.*dr(1))-8.*(rsxy(i1-1,i2-2,i3,1,1)-8.*rsxy(i1-1,i2-1,i3,1,
     & 1)+8.*rsxy(i1-1,i2+1,i3,1,1)-rsxy(i1-1,i2+2,i3,1,1))/(12.*dr(1)
     & )+8.*(rsxy(i1+1,i2-2,i3,1,1)-8.*rsxy(i1+1,i2-1,i3,1,1)+8.*rsxy(
     & i1+1,i2+1,i3,1,1)-rsxy(i1+1,i2+2,i3,1,1))/(12.*dr(1))-(rsxy(i1+
     & 2,i2-2,i3,1,1)-8.*rsxy(i1+2,i2-1,i3,1,1)+8.*rsxy(i1+2,i2+1,i3,
     & 1,1)-rsxy(i1+2,i2+2,i3,1,1))/(12.*dr(1)))/(12.*dr(0))
                      ajsyss = (-rsxy(i1,i2-2,i3,1,1)+16.*rsxy(i1,i2-1,
     & i3,1,1)-30.*rsxy(i1,i2,i3,1,1)+16.*rsxy(i1,i2+1,i3,1,1)-rsxy(
     & i1,i2+2,i3,1,1))/(12.*dr(1)**2)
                      ajsyrt = ((rsxy(i1-2,i2,i3-2,1,1)-8.*rsxy(i1-2,
     & i2,i3-1,1,1)+8.*rsxy(i1-2,i2,i3+1,1,1)-rsxy(i1-2,i2,i3+2,1,1))
     & /(12.*dr(2))-8.*(rsxy(i1-1,i2,i3-2,1,1)-8.*rsxy(i1-1,i2,i3-1,1,
     & 1)+8.*rsxy(i1-1,i2,i3+1,1,1)-rsxy(i1-1,i2,i3+2,1,1))/(12.*dr(2)
     & )+8.*(rsxy(i1+1,i2,i3-2,1,1)-8.*rsxy(i1+1,i2,i3-1,1,1)+8.*rsxy(
     & i1+1,i2,i3+1,1,1)-rsxy(i1+1,i2,i3+2,1,1))/(12.*dr(2))-(rsxy(i1+
     & 2,i2,i3-2,1,1)-8.*rsxy(i1+2,i2,i3-1,1,1)+8.*rsxy(i1+2,i2,i3+1,
     & 1,1)-rsxy(i1+2,i2,i3+2,1,1))/(12.*dr(2)))/(12.*dr(0))
                      ajsyst = ((rsxy(i1,i2-2,i3-2,1,1)-8.*rsxy(i1,i2-
     & 2,i3-1,1,1)+8.*rsxy(i1,i2-2,i3+1,1,1)-rsxy(i1,i2-2,i3+2,1,1))/(
     & 12.*dr(2))-8.*(rsxy(i1,i2-1,i3-2,1,1)-8.*rsxy(i1,i2-1,i3-1,1,1)
     & +8.*rsxy(i1,i2-1,i3+1,1,1)-rsxy(i1,i2-1,i3+2,1,1))/(12.*dr(2))+
     & 8.*(rsxy(i1,i2+1,i3-2,1,1)-8.*rsxy(i1,i2+1,i3-1,1,1)+8.*rsxy(
     & i1,i2+1,i3+1,1,1)-rsxy(i1,i2+1,i3+2,1,1))/(12.*dr(2))-(rsxy(i1,
     & i2+2,i3-2,1,1)-8.*rsxy(i1,i2+2,i3-1,1,1)+8.*rsxy(i1,i2+2,i3+1,
     & 1,1)-rsxy(i1,i2+2,i3+2,1,1))/(12.*dr(2)))/(12.*dr(1))
                      ajsytt = (-rsxy(i1,i2,i3-2,1,1)+16.*rsxy(i1,i2,
     & i3-1,1,1)-30.*rsxy(i1,i2,i3,1,1)+16.*rsxy(i1,i2,i3+1,1,1)-rsxy(
     & i1,i2,i3+2,1,1))/(12.*dr(2)**2)
                      ajty = rsxy(i1,i2,i3,2,1)
                      ajtyr = (rsxy(i1-2,i2,i3,2,1)-8.*rsxy(i1-1,i2,i3,
     & 2,1)+8.*rsxy(i1+1,i2,i3,2,1)-rsxy(i1+2,i2,i3,2,1))/(12.*dr(0))
                      ajtys = (rsxy(i1,i2-2,i3,2,1)-8.*rsxy(i1,i2-1,i3,
     & 2,1)+8.*rsxy(i1,i2+1,i3,2,1)-rsxy(i1,i2+2,i3,2,1))/(12.*dr(1))
                      ajtyt = (rsxy(i1,i2,i3-2,2,1)-8.*rsxy(i1,i2,i3-1,
     & 2,1)+8.*rsxy(i1,i2,i3+1,2,1)-rsxy(i1,i2,i3+2,2,1))/(12.*dr(2))
                      ajtyrr = (-rsxy(i1-2,i2,i3,2,1)+16.*rsxy(i1-1,i2,
     & i3,2,1)-30.*rsxy(i1,i2,i3,2,1)+16.*rsxy(i1+1,i2,i3,2,1)-rsxy(
     & i1+2,i2,i3,2,1))/(12.*dr(0)**2)
                      ajtyrs = ((rsxy(i1-2,i2-2,i3,2,1)-8.*rsxy(i1-2,
     & i2-1,i3,2,1)+8.*rsxy(i1-2,i2+1,i3,2,1)-rsxy(i1-2,i2+2,i3,2,1))
     & /(12.*dr(1))-8.*(rsxy(i1-1,i2-2,i3,2,1)-8.*rsxy(i1-1,i2-1,i3,2,
     & 1)+8.*rsxy(i1-1,i2+1,i3,2,1)-rsxy(i1-1,i2+2,i3,2,1))/(12.*dr(1)
     & )+8.*(rsxy(i1+1,i2-2,i3,2,1)-8.*rsxy(i1+1,i2-1,i3,2,1)+8.*rsxy(
     & i1+1,i2+1,i3,2,1)-rsxy(i1+1,i2+2,i3,2,1))/(12.*dr(1))-(rsxy(i1+
     & 2,i2-2,i3,2,1)-8.*rsxy(i1+2,i2-1,i3,2,1)+8.*rsxy(i1+2,i2+1,i3,
     & 2,1)-rsxy(i1+2,i2+2,i3,2,1))/(12.*dr(1)))/(12.*dr(0))
                      ajtyss = (-rsxy(i1,i2-2,i3,2,1)+16.*rsxy(i1,i2-1,
     & i3,2,1)-30.*rsxy(i1,i2,i3,2,1)+16.*rsxy(i1,i2+1,i3,2,1)-rsxy(
     & i1,i2+2,i3,2,1))/(12.*dr(1)**2)
                      ajtyrt = ((rsxy(i1-2,i2,i3-2,2,1)-8.*rsxy(i1-2,
     & i2,i3-1,2,1)+8.*rsxy(i1-2,i2,i3+1,2,1)-rsxy(i1-2,i2,i3+2,2,1))
     & /(12.*dr(2))-8.*(rsxy(i1-1,i2,i3-2,2,1)-8.*rsxy(i1-1,i2,i3-1,2,
     & 1)+8.*rsxy(i1-1,i2,i3+1,2,1)-rsxy(i1-1,i2,i3+2,2,1))/(12.*dr(2)
     & )+8.*(rsxy(i1+1,i2,i3-2,2,1)-8.*rsxy(i1+1,i2,i3-1,2,1)+8.*rsxy(
     & i1+1,i2,i3+1,2,1)-rsxy(i1+1,i2,i3+2,2,1))/(12.*dr(2))-(rsxy(i1+
     & 2,i2,i3-2,2,1)-8.*rsxy(i1+2,i2,i3-1,2,1)+8.*rsxy(i1+2,i2,i3+1,
     & 2,1)-rsxy(i1+2,i2,i3+2,2,1))/(12.*dr(2)))/(12.*dr(0))
                      ajtyst = ((rsxy(i1,i2-2,i3-2,2,1)-8.*rsxy(i1,i2-
     & 2,i3-1,2,1)+8.*rsxy(i1,i2-2,i3+1,2,1)-rsxy(i1,i2-2,i3+2,2,1))/(
     & 12.*dr(2))-8.*(rsxy(i1,i2-1,i3-2,2,1)-8.*rsxy(i1,i2-1,i3-1,2,1)
     & +8.*rsxy(i1,i2-1,i3+1,2,1)-rsxy(i1,i2-1,i3+2,2,1))/(12.*dr(2))+
     & 8.*(rsxy(i1,i2+1,i3-2,2,1)-8.*rsxy(i1,i2+1,i3-1,2,1)+8.*rsxy(
     & i1,i2+1,i3+1,2,1)-rsxy(i1,i2+1,i3+2,2,1))/(12.*dr(2))-(rsxy(i1,
     & i2+2,i3-2,2,1)-8.*rsxy(i1,i2+2,i3-1,2,1)+8.*rsxy(i1,i2+2,i3+1,
     & 2,1)-rsxy(i1,i2+2,i3+2,2,1))/(12.*dr(2)))/(12.*dr(1))
                      ajtytt = (-rsxy(i1,i2,i3-2,2,1)+16.*rsxy(i1,i2,
     & i3-1,2,1)-30.*rsxy(i1,i2,i3,2,1)+16.*rsxy(i1,i2,i3+1,2,1)-rsxy(
     & i1,i2,i3+2,2,1))/(12.*dr(2)**2)
                      ajrz = rsxy(i1,i2,i3,0,2)
                      ajrzr = (rsxy(i1-2,i2,i3,0,2)-8.*rsxy(i1-1,i2,i3,
     & 0,2)+8.*rsxy(i1+1,i2,i3,0,2)-rsxy(i1+2,i2,i3,0,2))/(12.*dr(0))
                      ajrzs = (rsxy(i1,i2-2,i3,0,2)-8.*rsxy(i1,i2-1,i3,
     & 0,2)+8.*rsxy(i1,i2+1,i3,0,2)-rsxy(i1,i2+2,i3,0,2))/(12.*dr(1))
                      ajrzt = (rsxy(i1,i2,i3-2,0,2)-8.*rsxy(i1,i2,i3-1,
     & 0,2)+8.*rsxy(i1,i2,i3+1,0,2)-rsxy(i1,i2,i3+2,0,2))/(12.*dr(2))
                      ajrzrr = (-rsxy(i1-2,i2,i3,0,2)+16.*rsxy(i1-1,i2,
     & i3,0,2)-30.*rsxy(i1,i2,i3,0,2)+16.*rsxy(i1+1,i2,i3,0,2)-rsxy(
     & i1+2,i2,i3,0,2))/(12.*dr(0)**2)
                      ajrzrs = ((rsxy(i1-2,i2-2,i3,0,2)-8.*rsxy(i1-2,
     & i2-1,i3,0,2)+8.*rsxy(i1-2,i2+1,i3,0,2)-rsxy(i1-2,i2+2,i3,0,2))
     & /(12.*dr(1))-8.*(rsxy(i1-1,i2-2,i3,0,2)-8.*rsxy(i1-1,i2-1,i3,0,
     & 2)+8.*rsxy(i1-1,i2+1,i3,0,2)-rsxy(i1-1,i2+2,i3,0,2))/(12.*dr(1)
     & )+8.*(rsxy(i1+1,i2-2,i3,0,2)-8.*rsxy(i1+1,i2-1,i3,0,2)+8.*rsxy(
     & i1+1,i2+1,i3,0,2)-rsxy(i1+1,i2+2,i3,0,2))/(12.*dr(1))-(rsxy(i1+
     & 2,i2-2,i3,0,2)-8.*rsxy(i1+2,i2-1,i3,0,2)+8.*rsxy(i1+2,i2+1,i3,
     & 0,2)-rsxy(i1+2,i2+2,i3,0,2))/(12.*dr(1)))/(12.*dr(0))
                      ajrzss = (-rsxy(i1,i2-2,i3,0,2)+16.*rsxy(i1,i2-1,
     & i3,0,2)-30.*rsxy(i1,i2,i3,0,2)+16.*rsxy(i1,i2+1,i3,0,2)-rsxy(
     & i1,i2+2,i3,0,2))/(12.*dr(1)**2)
                      ajrzrt = ((rsxy(i1-2,i2,i3-2,0,2)-8.*rsxy(i1-2,
     & i2,i3-1,0,2)+8.*rsxy(i1-2,i2,i3+1,0,2)-rsxy(i1-2,i2,i3+2,0,2))
     & /(12.*dr(2))-8.*(rsxy(i1-1,i2,i3-2,0,2)-8.*rsxy(i1-1,i2,i3-1,0,
     & 2)+8.*rsxy(i1-1,i2,i3+1,0,2)-rsxy(i1-1,i2,i3+2,0,2))/(12.*dr(2)
     & )+8.*(rsxy(i1+1,i2,i3-2,0,2)-8.*rsxy(i1+1,i2,i3-1,0,2)+8.*rsxy(
     & i1+1,i2,i3+1,0,2)-rsxy(i1+1,i2,i3+2,0,2))/(12.*dr(2))-(rsxy(i1+
     & 2,i2,i3-2,0,2)-8.*rsxy(i1+2,i2,i3-1,0,2)+8.*rsxy(i1+2,i2,i3+1,
     & 0,2)-rsxy(i1+2,i2,i3+2,0,2))/(12.*dr(2)))/(12.*dr(0))
                      ajrzst = ((rsxy(i1,i2-2,i3-2,0,2)-8.*rsxy(i1,i2-
     & 2,i3-1,0,2)+8.*rsxy(i1,i2-2,i3+1,0,2)-rsxy(i1,i2-2,i3+2,0,2))/(
     & 12.*dr(2))-8.*(rsxy(i1,i2-1,i3-2,0,2)-8.*rsxy(i1,i2-1,i3-1,0,2)
     & +8.*rsxy(i1,i2-1,i3+1,0,2)-rsxy(i1,i2-1,i3+2,0,2))/(12.*dr(2))+
     & 8.*(rsxy(i1,i2+1,i3-2,0,2)-8.*rsxy(i1,i2+1,i3-1,0,2)+8.*rsxy(
     & i1,i2+1,i3+1,0,2)-rsxy(i1,i2+1,i3+2,0,2))/(12.*dr(2))-(rsxy(i1,
     & i2+2,i3-2,0,2)-8.*rsxy(i1,i2+2,i3-1,0,2)+8.*rsxy(i1,i2+2,i3+1,
     & 0,2)-rsxy(i1,i2+2,i3+2,0,2))/(12.*dr(2)))/(12.*dr(1))
                      ajrztt = (-rsxy(i1,i2,i3-2,0,2)+16.*rsxy(i1,i2,
     & i3-1,0,2)-30.*rsxy(i1,i2,i3,0,2)+16.*rsxy(i1,i2,i3+1,0,2)-rsxy(
     & i1,i2,i3+2,0,2))/(12.*dr(2)**2)
                      ajsz = rsxy(i1,i2,i3,1,2)
                      ajszr = (rsxy(i1-2,i2,i3,1,2)-8.*rsxy(i1-1,i2,i3,
     & 1,2)+8.*rsxy(i1+1,i2,i3,1,2)-rsxy(i1+2,i2,i3,1,2))/(12.*dr(0))
                      ajszs = (rsxy(i1,i2-2,i3,1,2)-8.*rsxy(i1,i2-1,i3,
     & 1,2)+8.*rsxy(i1,i2+1,i3,1,2)-rsxy(i1,i2+2,i3,1,2))/(12.*dr(1))
                      ajszt = (rsxy(i1,i2,i3-2,1,2)-8.*rsxy(i1,i2,i3-1,
     & 1,2)+8.*rsxy(i1,i2,i3+1,1,2)-rsxy(i1,i2,i3+2,1,2))/(12.*dr(2))
                      ajszrr = (-rsxy(i1-2,i2,i3,1,2)+16.*rsxy(i1-1,i2,
     & i3,1,2)-30.*rsxy(i1,i2,i3,1,2)+16.*rsxy(i1+1,i2,i3,1,2)-rsxy(
     & i1+2,i2,i3,1,2))/(12.*dr(0)**2)
                      ajszrs = ((rsxy(i1-2,i2-2,i3,1,2)-8.*rsxy(i1-2,
     & i2-1,i3,1,2)+8.*rsxy(i1-2,i2+1,i3,1,2)-rsxy(i1-2,i2+2,i3,1,2))
     & /(12.*dr(1))-8.*(rsxy(i1-1,i2-2,i3,1,2)-8.*rsxy(i1-1,i2-1,i3,1,
     & 2)+8.*rsxy(i1-1,i2+1,i3,1,2)-rsxy(i1-1,i2+2,i3,1,2))/(12.*dr(1)
     & )+8.*(rsxy(i1+1,i2-2,i3,1,2)-8.*rsxy(i1+1,i2-1,i3,1,2)+8.*rsxy(
     & i1+1,i2+1,i3,1,2)-rsxy(i1+1,i2+2,i3,1,2))/(12.*dr(1))-(rsxy(i1+
     & 2,i2-2,i3,1,2)-8.*rsxy(i1+2,i2-1,i3,1,2)+8.*rsxy(i1+2,i2+1,i3,
     & 1,2)-rsxy(i1+2,i2+2,i3,1,2))/(12.*dr(1)))/(12.*dr(0))
                      ajszss = (-rsxy(i1,i2-2,i3,1,2)+16.*rsxy(i1,i2-1,
     & i3,1,2)-30.*rsxy(i1,i2,i3,1,2)+16.*rsxy(i1,i2+1,i3,1,2)-rsxy(
     & i1,i2+2,i3,1,2))/(12.*dr(1)**2)
                      ajszrt = ((rsxy(i1-2,i2,i3-2,1,2)-8.*rsxy(i1-2,
     & i2,i3-1,1,2)+8.*rsxy(i1-2,i2,i3+1,1,2)-rsxy(i1-2,i2,i3+2,1,2))
     & /(12.*dr(2))-8.*(rsxy(i1-1,i2,i3-2,1,2)-8.*rsxy(i1-1,i2,i3-1,1,
     & 2)+8.*rsxy(i1-1,i2,i3+1,1,2)-rsxy(i1-1,i2,i3+2,1,2))/(12.*dr(2)
     & )+8.*(rsxy(i1+1,i2,i3-2,1,2)-8.*rsxy(i1+1,i2,i3-1,1,2)+8.*rsxy(
     & i1+1,i2,i3+1,1,2)-rsxy(i1+1,i2,i3+2,1,2))/(12.*dr(2))-(rsxy(i1+
     & 2,i2,i3-2,1,2)-8.*rsxy(i1+2,i2,i3-1,1,2)+8.*rsxy(i1+2,i2,i3+1,
     & 1,2)-rsxy(i1+2,i2,i3+2,1,2))/(12.*dr(2)))/(12.*dr(0))
                      ajszst = ((rsxy(i1,i2-2,i3-2,1,2)-8.*rsxy(i1,i2-
     & 2,i3-1,1,2)+8.*rsxy(i1,i2-2,i3+1,1,2)-rsxy(i1,i2-2,i3+2,1,2))/(
     & 12.*dr(2))-8.*(rsxy(i1,i2-1,i3-2,1,2)-8.*rsxy(i1,i2-1,i3-1,1,2)
     & +8.*rsxy(i1,i2-1,i3+1,1,2)-rsxy(i1,i2-1,i3+2,1,2))/(12.*dr(2))+
     & 8.*(rsxy(i1,i2+1,i3-2,1,2)-8.*rsxy(i1,i2+1,i3-1,1,2)+8.*rsxy(
     & i1,i2+1,i3+1,1,2)-rsxy(i1,i2+1,i3+2,1,2))/(12.*dr(2))-(rsxy(i1,
     & i2+2,i3-2,1,2)-8.*rsxy(i1,i2+2,i3-1,1,2)+8.*rsxy(i1,i2+2,i3+1,
     & 1,2)-rsxy(i1,i2+2,i3+2,1,2))/(12.*dr(2)))/(12.*dr(1))
                      ajsztt = (-rsxy(i1,i2,i3-2,1,2)+16.*rsxy(i1,i2,
     & i3-1,1,2)-30.*rsxy(i1,i2,i3,1,2)+16.*rsxy(i1,i2,i3+1,1,2)-rsxy(
     & i1,i2,i3+2,1,2))/(12.*dr(2)**2)
                      ajtz = rsxy(i1,i2,i3,2,2)
                      ajtzr = (rsxy(i1-2,i2,i3,2,2)-8.*rsxy(i1-1,i2,i3,
     & 2,2)+8.*rsxy(i1+1,i2,i3,2,2)-rsxy(i1+2,i2,i3,2,2))/(12.*dr(0))
                      ajtzs = (rsxy(i1,i2-2,i3,2,2)-8.*rsxy(i1,i2-1,i3,
     & 2,2)+8.*rsxy(i1,i2+1,i3,2,2)-rsxy(i1,i2+2,i3,2,2))/(12.*dr(1))
                      ajtzt = (rsxy(i1,i2,i3-2,2,2)-8.*rsxy(i1,i2,i3-1,
     & 2,2)+8.*rsxy(i1,i2,i3+1,2,2)-rsxy(i1,i2,i3+2,2,2))/(12.*dr(2))
                      ajtzrr = (-rsxy(i1-2,i2,i3,2,2)+16.*rsxy(i1-1,i2,
     & i3,2,2)-30.*rsxy(i1,i2,i3,2,2)+16.*rsxy(i1+1,i2,i3,2,2)-rsxy(
     & i1+2,i2,i3,2,2))/(12.*dr(0)**2)
                      ajtzrs = ((rsxy(i1-2,i2-2,i3,2,2)-8.*rsxy(i1-2,
     & i2-1,i3,2,2)+8.*rsxy(i1-2,i2+1,i3,2,2)-rsxy(i1-2,i2+2,i3,2,2))
     & /(12.*dr(1))-8.*(rsxy(i1-1,i2-2,i3,2,2)-8.*rsxy(i1-1,i2-1,i3,2,
     & 2)+8.*rsxy(i1-1,i2+1,i3,2,2)-rsxy(i1-1,i2+2,i3,2,2))/(12.*dr(1)
     & )+8.*(rsxy(i1+1,i2-2,i3,2,2)-8.*rsxy(i1+1,i2-1,i3,2,2)+8.*rsxy(
     & i1+1,i2+1,i3,2,2)-rsxy(i1+1,i2+2,i3,2,2))/(12.*dr(1))-(rsxy(i1+
     & 2,i2-2,i3,2,2)-8.*rsxy(i1+2,i2-1,i3,2,2)+8.*rsxy(i1+2,i2+1,i3,
     & 2,2)-rsxy(i1+2,i2+2,i3,2,2))/(12.*dr(1)))/(12.*dr(0))
                      ajtzss = (-rsxy(i1,i2-2,i3,2,2)+16.*rsxy(i1,i2-1,
     & i3,2,2)-30.*rsxy(i1,i2,i3,2,2)+16.*rsxy(i1,i2+1,i3,2,2)-rsxy(
     & i1,i2+2,i3,2,2))/(12.*dr(1)**2)
                      ajtzrt = ((rsxy(i1-2,i2,i3-2,2,2)-8.*rsxy(i1-2,
     & i2,i3-1,2,2)+8.*rsxy(i1-2,i2,i3+1,2,2)-rsxy(i1-2,i2,i3+2,2,2))
     & /(12.*dr(2))-8.*(rsxy(i1-1,i2,i3-2,2,2)-8.*rsxy(i1-1,i2,i3-1,2,
     & 2)+8.*rsxy(i1-1,i2,i3+1,2,2)-rsxy(i1-1,i2,i3+2,2,2))/(12.*dr(2)
     & )+8.*(rsxy(i1+1,i2,i3-2,2,2)-8.*rsxy(i1+1,i2,i3-1,2,2)+8.*rsxy(
     & i1+1,i2,i3+1,2,2)-rsxy(i1+1,i2,i3+2,2,2))/(12.*dr(2))-(rsxy(i1+
     & 2,i2,i3-2,2,2)-8.*rsxy(i1+2,i2,i3-1,2,2)+8.*rsxy(i1+2,i2,i3+1,
     & 2,2)-rsxy(i1+2,i2,i3+2,2,2))/(12.*dr(2)))/(12.*dr(0))
                      ajtzst = ((rsxy(i1,i2-2,i3-2,2,2)-8.*rsxy(i1,i2-
     & 2,i3-1,2,2)+8.*rsxy(i1,i2-2,i3+1,2,2)-rsxy(i1,i2-2,i3+2,2,2))/(
     & 12.*dr(2))-8.*(rsxy(i1,i2-1,i3-2,2,2)-8.*rsxy(i1,i2-1,i3-1,2,2)
     & +8.*rsxy(i1,i2-1,i3+1,2,2)-rsxy(i1,i2-1,i3+2,2,2))/(12.*dr(2))+
     & 8.*(rsxy(i1,i2+1,i3-2,2,2)-8.*rsxy(i1,i2+1,i3-1,2,2)+8.*rsxy(
     & i1,i2+1,i3+1,2,2)-rsxy(i1,i2+1,i3+2,2,2))/(12.*dr(2))-(rsxy(i1,
     & i2+2,i3-2,2,2)-8.*rsxy(i1,i2+2,i3-1,2,2)+8.*rsxy(i1,i2+2,i3+1,
     & 2,2)-rsxy(i1,i2+2,i3+2,2,2))/(12.*dr(2)))/(12.*dr(1))
                      ajtztt = (-rsxy(i1,i2,i3-2,2,2)+16.*rsxy(i1,i2,
     & i3-1,2,2)-30.*rsxy(i1,i2,i3,2,2)+16.*rsxy(i1,i2,i3+1,2,2)-rsxy(
     & i1,i2,i3+2,2,2))/(12.*dr(2)**2)
                      ajrxx = ajrx*ajrxr+ajsx*ajrxs+ajtx*ajrxt
                      ajrxy = ajry*ajrxr+ajsy*ajrxs+ajty*ajrxt
                      ajrxz = ajrz*ajrxr+ajsz*ajrxs+ajtz*ajrxt
                      ajsxx = ajrx*ajsxr+ajsx*ajsxs+ajtx*ajsxt
                      ajsxy = ajry*ajsxr+ajsy*ajsxs+ajty*ajsxt
                      ajsxz = ajrz*ajsxr+ajsz*ajsxs+ajtz*ajsxt
                      ajtxx = ajrx*ajtxr+ajsx*ajtxs+ajtx*ajtxt
                      ajtxy = ajry*ajtxr+ajsy*ajtxs+ajty*ajtxt
                      ajtxz = ajrz*ajtxr+ajsz*ajtxs+ajtz*ajtxt
                      ajryx = ajrx*ajryr+ajsx*ajrys+ajtx*ajryt
                      ajryy = ajry*ajryr+ajsy*ajrys+ajty*ajryt
                      ajryz = ajrz*ajryr+ajsz*ajrys+ajtz*ajryt
                      ajsyx = ajrx*ajsyr+ajsx*ajsys+ajtx*ajsyt
                      ajsyy = ajry*ajsyr+ajsy*ajsys+ajty*ajsyt
                      ajsyz = ajrz*ajsyr+ajsz*ajsys+ajtz*ajsyt
                      ajtyx = ajrx*ajtyr+ajsx*ajtys+ajtx*ajtyt
                      ajtyy = ajry*ajtyr+ajsy*ajtys+ajty*ajtyt
                      ajtyz = ajrz*ajtyr+ajsz*ajtys+ajtz*ajtyt
                      ajrzx = ajrx*ajrzr+ajsx*ajrzs+ajtx*ajrzt
                      ajrzy = ajry*ajrzr+ajsy*ajrzs+ajty*ajrzt
                      ajrzz = ajrz*ajrzr+ajsz*ajrzs+ajtz*ajrzt
                      ajszx = ajrx*ajszr+ajsx*ajszs+ajtx*ajszt
                      ajszy = ajry*ajszr+ajsy*ajszs+ajty*ajszt
                      ajszz = ajrz*ajszr+ajsz*ajszs+ajtz*ajszt
                      ajtzx = ajrx*ajtzr+ajsx*ajtzs+ajtx*ajtzt
                      ajtzy = ajry*ajtzr+ajsy*ajtzs+ajty*ajtzt
                      ajtzz = ajrz*ajtzr+ajsz*ajtzs+ajtz*ajtzt
                      t1 = ajrx**2
                      t6 = ajsx**2
                      t14 = ajtx**2
                      ajrxxx = t1*ajrxrr+2*ajrx*ajsx*ajrxrs+t6*ajrxss+
     & 2*ajrx*ajtx*ajrxrt+2*ajsx*ajtx*ajrxst+t14*ajrxtt+ajrxx*ajrxr+
     & ajsxx*ajrxs+ajtxx*ajrxt
                      ajrxxy = ajry*ajrx*ajrxrr+(ajsy*ajrx+ajry*ajsx)*
     & ajrxrs+ajsy*ajsx*ajrxss+(ajry*ajtx+ajty*ajrx)*ajrxrt+(ajty*
     & ajsx+ajsy*ajtx)*ajrxst+ajty*ajtx*ajrxtt+ajrxy*ajrxr+ajsxy*
     & ajrxs+ajtxy*ajrxt
                      t1 = ajry**2
                      t6 = ajsy**2
                      t14 = ajty**2
                      ajrxyy = t1*ajrxrr+2*ajry*ajsy*ajrxrs+t6*ajrxss+
     & 2*ajry*ajty*ajrxrt+2*ajsy*ajty*ajrxst+t14*ajrxtt+ajryy*ajrxr+
     & ajsyy*ajrxs+ajtyy*ajrxt
                      ajrxxz = ajrz*ajrx*ajrxrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajrxrs+ajsz*ajsx*ajrxss+(ajrz*ajtx+ajtz*ajrx)*ajrxrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajrxst+ajtz*ajtx*ajrxtt+ajrxz*ajrxr+ajsxz*
     & ajrxs+ajtxz*ajrxt
                      ajrxyz = ajrz*ajry*ajrxrr+(ajsz*ajry+ajrz*ajsy)*
     & ajrxrs+ajsz*ajsy*ajrxss+(ajrz*ajty+ajtz*ajry)*ajrxrt+(ajtz*
     & ajsy+ajsz*ajty)*ajrxst+ajtz*ajty*ajrxtt+ajryz*ajrxr+ajsyz*
     & ajrxs+ajtyz*ajrxt
                      t1 = ajrz**2
                      t6 = ajsz**2
                      t14 = ajtz**2
                      ajrxzz = t1*ajrxrr+2*ajrz*ajsz*ajrxrs+t6*ajrxss+
     & 2*ajrz*ajtz*ajrxrt+2*ajsz*ajtz*ajrxst+t14*ajrxtt+ajrzz*ajrxr+
     & ajszz*ajrxs+ajtzz*ajrxt
                      t1 = ajrx**2
                      t6 = ajsx**2
                      t14 = ajtx**2
                      ajsxxx = t1*ajsxrr+2*ajrx*ajsx*ajsxrs+t6*ajsxss+
     & 2*ajrx*ajtx*ajsxrt+2*ajsx*ajtx*ajsxst+t14*ajsxtt+ajrxx*ajsxr+
     & ajsxx*ajsxs+ajtxx*ajsxt
                      ajsxxy = ajry*ajrx*ajsxrr+(ajsy*ajrx+ajry*ajsx)*
     & ajsxrs+ajsy*ajsx*ajsxss+(ajry*ajtx+ajty*ajrx)*ajsxrt+(ajty*
     & ajsx+ajsy*ajtx)*ajsxst+ajty*ajtx*ajsxtt+ajrxy*ajsxr+ajsxy*
     & ajsxs+ajtxy*ajsxt
                      t1 = ajry**2
                      t6 = ajsy**2
                      t14 = ajty**2
                      ajsxyy = t1*ajsxrr+2*ajry*ajsy*ajsxrs+t6*ajsxss+
     & 2*ajry*ajty*ajsxrt+2*ajsy*ajty*ajsxst+t14*ajsxtt+ajryy*ajsxr+
     & ajsyy*ajsxs+ajtyy*ajsxt
                      ajsxxz = ajrz*ajrx*ajsxrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajsxrs+ajsz*ajsx*ajsxss+(ajrz*ajtx+ajtz*ajrx)*ajsxrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajsxst+ajtz*ajtx*ajsxtt+ajrxz*ajsxr+ajsxz*
     & ajsxs+ajtxz*ajsxt
                      ajsxyz = ajrz*ajry*ajsxrr+(ajsz*ajry+ajrz*ajsy)*
     & ajsxrs+ajsz*ajsy*ajsxss+(ajrz*ajty+ajtz*ajry)*ajsxrt+(ajtz*
     & ajsy+ajsz*ajty)*ajsxst+ajtz*ajty*ajsxtt+ajryz*ajsxr+ajsyz*
     & ajsxs+ajtyz*ajsxt
                      t1 = ajrz**2
                      t6 = ajsz**2
                      t14 = ajtz**2
                      ajsxzz = t1*ajsxrr+2*ajrz*ajsz*ajsxrs+t6*ajsxss+
     & 2*ajrz*ajtz*ajsxrt+2*ajsz*ajtz*ajsxst+t14*ajsxtt+ajrzz*ajsxr+
     & ajszz*ajsxs+ajtzz*ajsxt
                      t1 = ajrx**2
                      t6 = ajsx**2
                      t14 = ajtx**2
                      ajtxxx = t1*ajtxrr+2*ajrx*ajsx*ajtxrs+t6*ajtxss+
     & 2*ajrx*ajtx*ajtxrt+2*ajsx*ajtx*ajtxst+t14*ajtxtt+ajrxx*ajtxr+
     & ajsxx*ajtxs+ajtxx*ajtxt
                      ajtxxy = ajry*ajrx*ajtxrr+(ajsy*ajrx+ajry*ajsx)*
     & ajtxrs+ajsy*ajsx*ajtxss+(ajry*ajtx+ajty*ajrx)*ajtxrt+(ajty*
     & ajsx+ajsy*ajtx)*ajtxst+ajty*ajtx*ajtxtt+ajrxy*ajtxr+ajsxy*
     & ajtxs+ajtxy*ajtxt
                      t1 = ajry**2
                      t6 = ajsy**2
                      t14 = ajty**2
                      ajtxyy = t1*ajtxrr+2*ajry*ajsy*ajtxrs+t6*ajtxss+
     & 2*ajry*ajty*ajtxrt+2*ajsy*ajty*ajtxst+t14*ajtxtt+ajryy*ajtxr+
     & ajsyy*ajtxs+ajtyy*ajtxt
                      ajtxxz = ajrz*ajrx*ajtxrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajtxrs+ajsz*ajsx*ajtxss+(ajrz*ajtx+ajtz*ajrx)*ajtxrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajtxst+ajtz*ajtx*ajtxtt+ajrxz*ajtxr+ajsxz*
     & ajtxs+ajtxz*ajtxt
                      ajtxyz = ajrz*ajry*ajtxrr+(ajsz*ajry+ajrz*ajsy)*
     & ajtxrs+ajsz*ajsy*ajtxss+(ajrz*ajty+ajtz*ajry)*ajtxrt+(ajtz*
     & ajsy+ajsz*ajty)*ajtxst+ajtz*ajty*ajtxtt+ajryz*ajtxr+ajsyz*
     & ajtxs+ajtyz*ajtxt
                      t1 = ajrz**2
                      t6 = ajsz**2
                      t14 = ajtz**2
                      ajtxzz = t1*ajtxrr+2*ajrz*ajsz*ajtxrs+t6*ajtxss+
     & 2*ajrz*ajtz*ajtxrt+2*ajsz*ajtz*ajtxst+t14*ajtxtt+ajrzz*ajtxr+
     & ajszz*ajtxs+ajtzz*ajtxt
                      t1 = ajrx**2
                      t6 = ajsx**2
                      t14 = ajtx**2
                      ajryxx = t1*ajryrr+2*ajrx*ajsx*ajryrs+t6*ajryss+
     & 2*ajrx*ajtx*ajryrt+2*ajsx*ajtx*ajryst+t14*ajrytt+ajrxx*ajryr+
     & ajsxx*ajrys+ajtxx*ajryt
                      ajryxy = ajry*ajrx*ajryrr+(ajsy*ajrx+ajry*ajsx)*
     & ajryrs+ajsy*ajsx*ajryss+(ajry*ajtx+ajty*ajrx)*ajryrt+(ajty*
     & ajsx+ajsy*ajtx)*ajryst+ajty*ajtx*ajrytt+ajrxy*ajryr+ajsxy*
     & ajrys+ajtxy*ajryt
                      t1 = ajry**2
                      t6 = ajsy**2
                      t14 = ajty**2
                      ajryyy = t1*ajryrr+2*ajry*ajsy*ajryrs+t6*ajryss+
     & 2*ajry*ajty*ajryrt+2*ajsy*ajty*ajryst+t14*ajrytt+ajryy*ajryr+
     & ajsyy*ajrys+ajtyy*ajryt
                      ajryxz = ajrz*ajrx*ajryrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajryrs+ajsz*ajsx*ajryss+(ajrz*ajtx+ajtz*ajrx)*ajryrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajryst+ajtz*ajtx*ajrytt+ajrxz*ajryr+ajsxz*
     & ajrys+ajtxz*ajryt
                      ajryyz = ajrz*ajry*ajryrr+(ajsz*ajry+ajrz*ajsy)*
     & ajryrs+ajsz*ajsy*ajryss+(ajrz*ajty+ajtz*ajry)*ajryrt+(ajtz*
     & ajsy+ajsz*ajty)*ajryst+ajtz*ajty*ajrytt+ajryz*ajryr+ajsyz*
     & ajrys+ajtyz*ajryt
                      t1 = ajrz**2
                      t6 = ajsz**2
                      t14 = ajtz**2
                      ajryzz = t1*ajryrr+2*ajrz*ajsz*ajryrs+t6*ajryss+
     & 2*ajrz*ajtz*ajryrt+2*ajsz*ajtz*ajryst+t14*ajrytt+ajrzz*ajryr+
     & ajszz*ajrys+ajtzz*ajryt
                      t1 = ajrx**2
                      t6 = ajsx**2
                      t14 = ajtx**2
                      ajsyxx = t1*ajsyrr+2*ajrx*ajsx*ajsyrs+t6*ajsyss+
     & 2*ajrx*ajtx*ajsyrt+2*ajsx*ajtx*ajsyst+t14*ajsytt+ajrxx*ajsyr+
     & ajsxx*ajsys+ajtxx*ajsyt
                      ajsyxy = ajry*ajrx*ajsyrr+(ajsy*ajrx+ajry*ajsx)*
     & ajsyrs+ajsy*ajsx*ajsyss+(ajry*ajtx+ajty*ajrx)*ajsyrt+(ajty*
     & ajsx+ajsy*ajtx)*ajsyst+ajty*ajtx*ajsytt+ajrxy*ajsyr+ajsxy*
     & ajsys+ajtxy*ajsyt
                      t1 = ajry**2
                      t6 = ajsy**2
                      t14 = ajty**2
                      ajsyyy = t1*ajsyrr+2*ajry*ajsy*ajsyrs+t6*ajsyss+
     & 2*ajry*ajty*ajsyrt+2*ajsy*ajty*ajsyst+t14*ajsytt+ajryy*ajsyr+
     & ajsyy*ajsys+ajtyy*ajsyt
                      ajsyxz = ajrz*ajrx*ajsyrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajsyrs+ajsz*ajsx*ajsyss+(ajrz*ajtx+ajtz*ajrx)*ajsyrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajsyst+ajtz*ajtx*ajsytt+ajrxz*ajsyr+ajsxz*
     & ajsys+ajtxz*ajsyt
                      ajsyyz = ajrz*ajry*ajsyrr+(ajsz*ajry+ajrz*ajsy)*
     & ajsyrs+ajsz*ajsy*ajsyss+(ajrz*ajty+ajtz*ajry)*ajsyrt+(ajtz*
     & ajsy+ajsz*ajty)*ajsyst+ajtz*ajty*ajsytt+ajryz*ajsyr+ajsyz*
     & ajsys+ajtyz*ajsyt
                      t1 = ajrz**2
                      t6 = ajsz**2
                      t14 = ajtz**2
                      ajsyzz = t1*ajsyrr+2*ajrz*ajsz*ajsyrs+t6*ajsyss+
     & 2*ajrz*ajtz*ajsyrt+2*ajsz*ajtz*ajsyst+t14*ajsytt+ajrzz*ajsyr+
     & ajszz*ajsys+ajtzz*ajsyt
                      t1 = ajrx**2
                      t6 = ajsx**2
                      t14 = ajtx**2
                      ajtyxx = t1*ajtyrr+2*ajrx*ajsx*ajtyrs+t6*ajtyss+
     & 2*ajrx*ajtx*ajtyrt+2*ajsx*ajtx*ajtyst+t14*ajtytt+ajrxx*ajtyr+
     & ajsxx*ajtys+ajtxx*ajtyt
                      ajtyxy = ajry*ajrx*ajtyrr+(ajsy*ajrx+ajry*ajsx)*
     & ajtyrs+ajsy*ajsx*ajtyss+(ajry*ajtx+ajty*ajrx)*ajtyrt+(ajty*
     & ajsx+ajsy*ajtx)*ajtyst+ajty*ajtx*ajtytt+ajrxy*ajtyr+ajsxy*
     & ajtys+ajtxy*ajtyt
                      t1 = ajry**2
                      t6 = ajsy**2
                      t14 = ajty**2
                      ajtyyy = t1*ajtyrr+2*ajry*ajsy*ajtyrs+t6*ajtyss+
     & 2*ajry*ajty*ajtyrt+2*ajsy*ajty*ajtyst+t14*ajtytt+ajryy*ajtyr+
     & ajsyy*ajtys+ajtyy*ajtyt
                      ajtyxz = ajrz*ajrx*ajtyrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajtyrs+ajsz*ajsx*ajtyss+(ajrz*ajtx+ajtz*ajrx)*ajtyrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajtyst+ajtz*ajtx*ajtytt+ajrxz*ajtyr+ajsxz*
     & ajtys+ajtxz*ajtyt
                      ajtyyz = ajrz*ajry*ajtyrr+(ajsz*ajry+ajrz*ajsy)*
     & ajtyrs+ajsz*ajsy*ajtyss+(ajrz*ajty+ajtz*ajry)*ajtyrt+(ajtz*
     & ajsy+ajsz*ajty)*ajtyst+ajtz*ajty*ajtytt+ajryz*ajtyr+ajsyz*
     & ajtys+ajtyz*ajtyt
                      t1 = ajrz**2
                      t6 = ajsz**2
                      t14 = ajtz**2
                      ajtyzz = t1*ajtyrr+2*ajrz*ajsz*ajtyrs+t6*ajtyss+
     & 2*ajrz*ajtz*ajtyrt+2*ajsz*ajtz*ajtyst+t14*ajtytt+ajrzz*ajtyr+
     & ajszz*ajtys+ajtzz*ajtyt
                      t1 = ajrx**2
                      t6 = ajsx**2
                      t14 = ajtx**2
                      ajrzxx = t1*ajrzrr+2*ajrx*ajsx*ajrzrs+t6*ajrzss+
     & 2*ajrx*ajtx*ajrzrt+2*ajsx*ajtx*ajrzst+t14*ajrztt+ajrxx*ajrzr+
     & ajsxx*ajrzs+ajtxx*ajrzt
                      ajrzxy = ajry*ajrx*ajrzrr+(ajsy*ajrx+ajry*ajsx)*
     & ajrzrs+ajsy*ajsx*ajrzss+(ajry*ajtx+ajty*ajrx)*ajrzrt+(ajty*
     & ajsx+ajsy*ajtx)*ajrzst+ajty*ajtx*ajrztt+ajrxy*ajrzr+ajsxy*
     & ajrzs+ajtxy*ajrzt
                      t1 = ajry**2
                      t6 = ajsy**2
                      t14 = ajty**2
                      ajrzyy = t1*ajrzrr+2*ajry*ajsy*ajrzrs+t6*ajrzss+
     & 2*ajry*ajty*ajrzrt+2*ajsy*ajty*ajrzst+t14*ajrztt+ajryy*ajrzr+
     & ajsyy*ajrzs+ajtyy*ajrzt
                      ajrzxz = ajrz*ajrx*ajrzrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajrzrs+ajsz*ajsx*ajrzss+(ajrz*ajtx+ajtz*ajrx)*ajrzrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajrzst+ajtz*ajtx*ajrztt+ajrxz*ajrzr+ajsxz*
     & ajrzs+ajtxz*ajrzt
                      ajrzyz = ajrz*ajry*ajrzrr+(ajsz*ajry+ajrz*ajsy)*
     & ajrzrs+ajsz*ajsy*ajrzss+(ajrz*ajty+ajtz*ajry)*ajrzrt+(ajtz*
     & ajsy+ajsz*ajty)*ajrzst+ajtz*ajty*ajrztt+ajryz*ajrzr+ajsyz*
     & ajrzs+ajtyz*ajrzt
                      t1 = ajrz**2
                      t6 = ajsz**2
                      t14 = ajtz**2
                      ajrzzz = t1*ajrzrr+2*ajrz*ajsz*ajrzrs+t6*ajrzss+
     & 2*ajrz*ajtz*ajrzrt+2*ajsz*ajtz*ajrzst+t14*ajrztt+ajrzz*ajrzr+
     & ajszz*ajrzs+ajtzz*ajrzt
                      t1 = ajrx**2
                      t6 = ajsx**2
                      t14 = ajtx**2
                      ajszxx = t1*ajszrr+2*ajrx*ajsx*ajszrs+t6*ajszss+
     & 2*ajrx*ajtx*ajszrt+2*ajsx*ajtx*ajszst+t14*ajsztt+ajrxx*ajszr+
     & ajsxx*ajszs+ajtxx*ajszt
                      ajszxy = ajry*ajrx*ajszrr+(ajsy*ajrx+ajry*ajsx)*
     & ajszrs+ajsy*ajsx*ajszss+(ajry*ajtx+ajty*ajrx)*ajszrt+(ajty*
     & ajsx+ajsy*ajtx)*ajszst+ajty*ajtx*ajsztt+ajrxy*ajszr+ajsxy*
     & ajszs+ajtxy*ajszt
                      t1 = ajry**2
                      t6 = ajsy**2
                      t14 = ajty**2
                      ajszyy = t1*ajszrr+2*ajry*ajsy*ajszrs+t6*ajszss+
     & 2*ajry*ajty*ajszrt+2*ajsy*ajty*ajszst+t14*ajsztt+ajryy*ajszr+
     & ajsyy*ajszs+ajtyy*ajszt
                      ajszxz = ajrz*ajrx*ajszrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajszrs+ajsz*ajsx*ajszss+(ajrz*ajtx+ajtz*ajrx)*ajszrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajszst+ajtz*ajtx*ajsztt+ajrxz*ajszr+ajsxz*
     & ajszs+ajtxz*ajszt
                      ajszyz = ajrz*ajry*ajszrr+(ajsz*ajry+ajrz*ajsy)*
     & ajszrs+ajsz*ajsy*ajszss+(ajrz*ajty+ajtz*ajry)*ajszrt+(ajtz*
     & ajsy+ajsz*ajty)*ajszst+ajtz*ajty*ajsztt+ajryz*ajszr+ajsyz*
     & ajszs+ajtyz*ajszt
                      t1 = ajrz**2
                      t6 = ajsz**2
                      t14 = ajtz**2
                      ajszzz = t1*ajszrr+2*ajrz*ajsz*ajszrs+t6*ajszss+
     & 2*ajrz*ajtz*ajszrt+2*ajsz*ajtz*ajszst+t14*ajsztt+ajrzz*ajszr+
     & ajszz*ajszs+ajtzz*ajszt
                      t1 = ajrx**2
                      t6 = ajsx**2
                      t14 = ajtx**2
                      ajtzxx = t1*ajtzrr+2*ajrx*ajsx*ajtzrs+t6*ajtzss+
     & 2*ajrx*ajtx*ajtzrt+2*ajsx*ajtx*ajtzst+t14*ajtztt+ajrxx*ajtzr+
     & ajsxx*ajtzs+ajtxx*ajtzt
                      ajtzxy = ajry*ajrx*ajtzrr+(ajsy*ajrx+ajry*ajsx)*
     & ajtzrs+ajsy*ajsx*ajtzss+(ajry*ajtx+ajty*ajrx)*ajtzrt+(ajty*
     & ajsx+ajsy*ajtx)*ajtzst+ajty*ajtx*ajtztt+ajrxy*ajtzr+ajsxy*
     & ajtzs+ajtxy*ajtzt
                      t1 = ajry**2
                      t6 = ajsy**2
                      t14 = ajty**2
                      ajtzyy = t1*ajtzrr+2*ajry*ajsy*ajtzrs+t6*ajtzss+
     & 2*ajry*ajty*ajtzrt+2*ajsy*ajty*ajtzst+t14*ajtztt+ajryy*ajtzr+
     & ajsyy*ajtzs+ajtyy*ajtzt
                      ajtzxz = ajrz*ajrx*ajtzrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajtzrs+ajsz*ajsx*ajtzss+(ajrz*ajtx+ajtz*ajrx)*ajtzrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajtzst+ajtz*ajtx*ajtztt+ajrxz*ajtzr+ajsxz*
     & ajtzs+ajtxz*ajtzt
                      ajtzyz = ajrz*ajry*ajtzrr+(ajsz*ajry+ajrz*ajsy)*
     & ajtzrs+ajsz*ajsy*ajtzss+(ajrz*ajty+ajtz*ajry)*ajtzrt+(ajtz*
     & ajsy+ajsz*ajty)*ajtzst+ajtz*ajty*ajtztt+ajryz*ajtzr+ajsyz*
     & ajtzs+ajtyz*ajtzt
                      t1 = ajrz**2
                      t6 = ajsz**2
                      t14 = ajtz**2
                      ajtzzz = t1*ajtzrr+2*ajrz*ajsz*ajtzrs+t6*ajtzss+
     & 2*ajrz*ajtz*ajtzrt+2*ajsz*ajtz*ajtzst+t14*ajtztt+ajrzz*ajtzr+
     & ajszz*ajtzs+ajtzz*ajtzt
                      ! define these derivatives of the mapping (which are not normally computed by the standard macros):
                     ajrxxr=ajrx*ajrxrr + ajsx*ajrxrs + ajtx*ajrxrt + 
     & ajrxr*ajrxr +ajsxr*ajrxs + ajtxr*ajrxt
                     ajrxxs=ajrx*ajrxrs + ajsx*ajrxss + ajtx*ajrxst + 
     & ajrxs*ajrxr +ajsxs*ajrxs + ajtxs*ajrxt
                     ajrxxt=ajrx*ajrxrt + ajsx*ajrxst + ajtx*ajrxtt + 
     & ajrxt*ajrxr +ajsxt*ajrxs + ajtxt*ajrxt
                     ajrxyr=ajry*ajrxrr + ajsy*ajrxrs + ajty*ajrxrt + 
     & ajryr*ajrxr +ajsyr*ajrxs + ajtyr*ajrxt
                     ajrxys=ajry*ajrxrs + ajsy*ajrxss + ajty*ajrxst + 
     & ajrys*ajrxr +ajsys*ajrxs + ajtys*ajrxt
                     ajrxyt=ajry*ajrxrt + ajsy*ajrxst + ajty*ajrxtt + 
     & ajryt*ajrxr +ajsyt*ajrxs + ajtyt*ajrxt
                     ajrxzr=ajrz*ajrxrr + ajsz*ajrxrs + ajtz*ajrxrt + 
     & ajrzr*ajrxr +ajszr*ajrxs + ajtzr*ajrxt
                     ajrxzs=ajrz*ajrxrs + ajsz*ajrxss + ajtz*ajrxst + 
     & ajrzs*ajrxr +ajszs*ajrxs + ajtzs*ajrxt
                     ajrxzt=ajrz*ajrxrt + ajsz*ajrxst + ajtz*ajrxtt + 
     & ajrzt*ajrxr +ajszt*ajrxs + ajtzt*ajrxt
                     ajryxr=ajrx*ajryrr + ajsx*ajryrs + ajtx*ajryrt + 
     & ajrxr*ajryr +ajsxr*ajrys + ajtxr*ajryt
                     ajryxs=ajrx*ajryrs + ajsx*ajryss + ajtx*ajryst + 
     & ajrxs*ajryr +ajsxs*ajrys + ajtxs*ajryt
                     ajryxt=ajrx*ajryrt + ajsx*ajryst + ajtx*ajrytt + 
     & ajrxt*ajryr +ajsxt*ajrys + ajtxt*ajryt
                     ajryyr=ajry*ajryrr + ajsy*ajryrs + ajty*ajryrt + 
     & ajryr*ajryr +ajsyr*ajrys + ajtyr*ajryt
                     ajryys=ajry*ajryrs + ajsy*ajryss + ajty*ajryst + 
     & ajrys*ajryr +ajsys*ajrys + ajtys*ajryt
                     ajryyt=ajry*ajryrt + ajsy*ajryst + ajty*ajrytt + 
     & ajryt*ajryr +ajsyt*ajrys + ajtyt*ajryt
                     ajryzr=ajrz*ajryrr + ajsz*ajryrs + ajtz*ajryrt + 
     & ajrzr*ajryr +ajszr*ajrys + ajtzr*ajryt
                     ajryzs=ajrz*ajryrs + ajsz*ajryss + ajtz*ajryst + 
     & ajrzs*ajryr +ajszs*ajrys + ajtzs*ajryt
                     ajryzt=ajrz*ajryrt + ajsz*ajryst + ajtz*ajrytt + 
     & ajrzt*ajryr +ajszt*ajrys + ajtzt*ajryt
                     ajrzxr=ajrx*ajrzrr + ajsx*ajrzrs + ajtx*ajrzrt + 
     & ajrxr*ajrzr +ajsxr*ajrzs + ajtxr*ajrzt
                     ajrzxs=ajrx*ajrzrs + ajsx*ajrzss + ajtx*ajrzst + 
     & ajrxs*ajrzr +ajsxs*ajrzs + ajtxs*ajrzt
                     ajrzxt=ajrx*ajrzrt + ajsx*ajrzst + ajtx*ajrztt + 
     & ajrxt*ajrzr +ajsxt*ajrzs + ajtxt*ajrzt
                     ajrzyr=ajry*ajrzrr + ajsy*ajrzrs + ajty*ajrzrt + 
     & ajryr*ajrzr +ajsyr*ajrzs + ajtyr*ajrzt
                     ajrzys=ajry*ajrzrs + ajsy*ajrzss + ajty*ajrzst + 
     & ajrys*ajrzr +ajsys*ajrzs + ajtys*ajrzt
                     ajrzyt=ajry*ajrzrt + ajsy*ajrzst + ajty*ajrztt + 
     & ajryt*ajrzr +ajsyt*ajrzs + ajtyt*ajrzt
                     ajrzzr=ajrz*ajrzrr + ajsz*ajrzrs + ajtz*ajrzrt + 
     & ajrzr*ajrzr +ajszr*ajrzs + ajtzr*ajrzt
                     ajrzzs=ajrz*ajrzrs + ajsz*ajrzss + ajtz*ajrzst + 
     & ajrzs*ajrzr +ajszs*ajrzs + ajtzs*ajrzt
                     ajrzzt=ajrz*ajrzrt + ajsz*ajrzst + ajtz*ajrztt + 
     & ajrzt*ajrzr +ajszt*ajrzs + ajtzt*ajrzt
                     ajsxxr=ajrx*ajsxrr + ajsx*ajsxrs + ajtx*ajsxrt + 
     & ajrxr*ajsxr +ajsxr*ajsxs + ajtxr*ajsxt
                     ajsxxs=ajrx*ajsxrs + ajsx*ajsxss + ajtx*ajsxst + 
     & ajrxs*ajsxr +ajsxs*ajsxs + ajtxs*ajsxt
                     ajsxxt=ajrx*ajsxrt + ajsx*ajsxst + ajtx*ajsxtt + 
     & ajrxt*ajsxr +ajsxt*ajsxs + ajtxt*ajsxt
                     ajsxyr=ajry*ajsxrr + ajsy*ajsxrs + ajty*ajsxrt + 
     & ajryr*ajsxr +ajsyr*ajsxs + ajtyr*ajsxt
                     ajsxys=ajry*ajsxrs + ajsy*ajsxss + ajty*ajsxst + 
     & ajrys*ajsxr +ajsys*ajsxs + ajtys*ajsxt
                     ajsxyt=ajry*ajsxrt + ajsy*ajsxst + ajty*ajsxtt + 
     & ajryt*ajsxr +ajsyt*ajsxs + ajtyt*ajsxt
                     ajsxzr=ajrz*ajsxrr + ajsz*ajsxrs + ajtz*ajsxrt + 
     & ajrzr*ajsxr +ajszr*ajsxs + ajtzr*ajsxt
                     ajsxzs=ajrz*ajsxrs + ajsz*ajsxss + ajtz*ajsxst + 
     & ajrzs*ajsxr +ajszs*ajsxs + ajtzs*ajsxt
                     ajsxzt=ajrz*ajsxrt + ajsz*ajsxst + ajtz*ajsxtt + 
     & ajrzt*ajsxr +ajszt*ajsxs + ajtzt*ajsxt
                     ajsyxr=ajrx*ajsyrr + ajsx*ajsyrs + ajtx*ajsyrt + 
     & ajrxr*ajsyr +ajsxr*ajsys + ajtxr*ajsyt
                     ajsyxs=ajrx*ajsyrs + ajsx*ajsyss + ajtx*ajsyst + 
     & ajrxs*ajsyr +ajsxs*ajsys + ajtxs*ajsyt
                     ajsyxt=ajrx*ajsyrt + ajsx*ajsyst + ajtx*ajsytt + 
     & ajrxt*ajsyr +ajsxt*ajsys + ajtxt*ajsyt
                     ajsyyr=ajry*ajsyrr + ajsy*ajsyrs + ajty*ajsyrt + 
     & ajryr*ajsyr +ajsyr*ajsys + ajtyr*ajsyt
                     ajsyys=ajry*ajsyrs + ajsy*ajsyss + ajty*ajsyst + 
     & ajrys*ajsyr +ajsys*ajsys + ajtys*ajsyt
                     ajsyyt=ajry*ajsyrt + ajsy*ajsyst + ajty*ajsytt + 
     & ajryt*ajsyr +ajsyt*ajsys + ajtyt*ajsyt
                     ajsyzr=ajrz*ajsyrr + ajsz*ajsyrs + ajtz*ajsyrt + 
     & ajrzr*ajsyr +ajszr*ajsys + ajtzr*ajsyt
                     ajsyzs=ajrz*ajsyrs + ajsz*ajsyss + ajtz*ajsyst + 
     & ajrzs*ajsyr +ajszs*ajsys + ajtzs*ajsyt
                     ajsyzt=ajrz*ajsyrt + ajsz*ajsyst + ajtz*ajsytt + 
     & ajrzt*ajsyr +ajszt*ajsys + ajtzt*ajsyt
                     ajszxr=ajrx*ajszrr + ajsx*ajszrs + ajtx*ajszrt + 
     & ajrxr*ajszr +ajsxr*ajszs + ajtxr*ajszt
                     ajszxs=ajrx*ajszrs + ajsx*ajszss + ajtx*ajszst + 
     & ajrxs*ajszr +ajsxs*ajszs + ajtxs*ajszt
                     ajszxt=ajrx*ajszrt + ajsx*ajszst + ajtx*ajsztt + 
     & ajrxt*ajszr +ajsxt*ajszs + ajtxt*ajszt
                     ajszyr=ajry*ajszrr + ajsy*ajszrs + ajty*ajszrt + 
     & ajryr*ajszr +ajsyr*ajszs + ajtyr*ajszt
                     ajszys=ajry*ajszrs + ajsy*ajszss + ajty*ajszst + 
     & ajrys*ajszr +ajsys*ajszs + ajtys*ajszt
                     ajszyt=ajry*ajszrt + ajsy*ajszst + ajty*ajsztt + 
     & ajryt*ajszr +ajsyt*ajszs + ajtyt*ajszt
                     ajszzr=ajrz*ajszrr + ajsz*ajszrs + ajtz*ajszrt + 
     & ajrzr*ajszr +ajszr*ajszs + ajtzr*ajszt
                     ajszzs=ajrz*ajszrs + ajsz*ajszss + ajtz*ajszst + 
     & ajrzs*ajszr +ajszs*ajszs + ajtzs*ajszt
                     ajszzt=ajrz*ajszrt + ajsz*ajszst + ajtz*ajsztt + 
     & ajrzt*ajszr +ajszt*ajszs + ajtzt*ajszt
                     ajtxxr=ajrx*ajtxrr + ajsx*ajtxrs + ajtx*ajtxrt + 
     & ajrxr*ajtxr +ajsxr*ajtxs + ajtxr*ajtxt
                     ajtxxs=ajrx*ajtxrs + ajsx*ajtxss + ajtx*ajtxst + 
     & ajrxs*ajtxr +ajsxs*ajtxs + ajtxs*ajtxt
                     ajtxxt=ajrx*ajtxrt + ajsx*ajtxst + ajtx*ajtxtt + 
     & ajrxt*ajtxr +ajsxt*ajtxs + ajtxt*ajtxt
                     ajtxyr=ajry*ajtxrr + ajsy*ajtxrs + ajty*ajtxrt + 
     & ajryr*ajtxr +ajsyr*ajtxs + ajtyr*ajtxt
                     ajtxys=ajry*ajtxrs + ajsy*ajtxss + ajty*ajtxst + 
     & ajrys*ajtxr +ajsys*ajtxs + ajtys*ajtxt
                     ajtxyt=ajry*ajtxrt + ajsy*ajtxst + ajty*ajtxtt + 
     & ajryt*ajtxr +ajsyt*ajtxs + ajtyt*ajtxt
                     ajtxzr=ajrz*ajtxrr + ajsz*ajtxrs + ajtz*ajtxrt + 
     & ajrzr*ajtxr +ajszr*ajtxs + ajtzr*ajtxt
                     ajtxzs=ajrz*ajtxrs + ajsz*ajtxss + ajtz*ajtxst + 
     & ajrzs*ajtxr +ajszs*ajtxs + ajtzs*ajtxt
                     ajtxzt=ajrz*ajtxrt + ajsz*ajtxst + ajtz*ajtxtt + 
     & ajrzt*ajtxr +ajszt*ajtxs + ajtzt*ajtxt
                     ajtyxr=ajrx*ajtyrr + ajsx*ajtyrs + ajtx*ajtyrt + 
     & ajrxr*ajtyr +ajsxr*ajtys + ajtxr*ajtyt
                     ajtyxs=ajrx*ajtyrs + ajsx*ajtyss + ajtx*ajtyst + 
     & ajrxs*ajtyr +ajsxs*ajtys + ajtxs*ajtyt
                     ajtyxt=ajrx*ajtyrt + ajsx*ajtyst + ajtx*ajtytt + 
     & ajrxt*ajtyr +ajsxt*ajtys + ajtxt*ajtyt
                     ajtyyr=ajry*ajtyrr + ajsy*ajtyrs + ajty*ajtyrt + 
     & ajryr*ajtyr +ajsyr*ajtys + ajtyr*ajtyt
                     ajtyys=ajry*ajtyrs + ajsy*ajtyss + ajty*ajtyst + 
     & ajrys*ajtyr +ajsys*ajtys + ajtys*ajtyt
                     ajtyyt=ajry*ajtyrt + ajsy*ajtyst + ajty*ajtytt + 
     & ajryt*ajtyr +ajsyt*ajtys + ajtyt*ajtyt
                     ajtyzr=ajrz*ajtyrr + ajsz*ajtyrs + ajtz*ajtyrt + 
     & ajrzr*ajtyr +ajszr*ajtys + ajtzr*ajtyt
                     ajtyzs=ajrz*ajtyrs + ajsz*ajtyss + ajtz*ajtyst + 
     & ajrzs*ajtyr +ajszs*ajtys + ajtzs*ajtyt
                     ajtyzt=ajrz*ajtyrt + ajsz*ajtyst + ajtz*ajtytt + 
     & ajrzt*ajtyr +ajszt*ajtys + ajtzt*ajtyt
                     ajtzxr=ajrx*ajtzrr + ajsx*ajtzrs + ajtx*ajtzrt + 
     & ajrxr*ajtzr +ajsxr*ajtzs + ajtxr*ajtzt
                     ajtzxs=ajrx*ajtzrs + ajsx*ajtzss + ajtx*ajtzst + 
     & ajrxs*ajtzr +ajsxs*ajtzs + ajtxs*ajtzt
                     ajtzxt=ajrx*ajtzrt + ajsx*ajtzst + ajtx*ajtztt + 
     & ajrxt*ajtzr +ajsxt*ajtzs + ajtxt*ajtzt
                     ajtzyr=ajry*ajtzrr + ajsy*ajtzrs + ajty*ajtzrt + 
     & ajryr*ajtzr +ajsyr*ajtzs + ajtyr*ajtzt
                     ajtzys=ajry*ajtzrs + ajsy*ajtzss + ajty*ajtzst + 
     & ajrys*ajtzr +ajsys*ajtzs + ajtys*ajtzt
                     ajtzyt=ajry*ajtzrt + ajsy*ajtzst + ajty*ajtztt + 
     & ajryt*ajtzr +ajsyt*ajtzs + ajtyt*ajtzt
                     ajtzzr=ajrz*ajtzrr + ajsz*ajtzrs + ajtz*ajtzrt + 
     & ajrzr*ajtzr +ajszr*ajtzs + ajtzr*ajtzt
                     ajtzzs=ajrz*ajtzrs + ajsz*ajtzss + ajtz*ajtzst + 
     & ajrzs*ajtzr +ajszs*ajtzs + ajtzs*ajtzt
                     ajtzzt=ajrz*ajtzrt + ajsz*ajtzst + ajtz*ajtztt + 
     & ajrzt*ajtzr +ajszt*ajtzs + ajtzt*ajtzt
                     ! ***************************************************************
                     ! PDE: cxx*uxx + cyy*uyy + czz*uzz + cxy*uxy + cxz*uxz + cyz*uyz + cx*ux + cy*uy + cz*uz + c0 *u = f 
                     ! PDE: cRR*urr + cSS*uss + cTT*utt + cRS*urs + cRT*urt + cST*ust  + ccR*ur + ccS*us + ccT*ut + c0 *u = f 
                     ! =============== Start: Laplace operator: ==================== 
                      cxx=1.
                      cyy=1.
                      czz=1.
                      cxy=0.
                      cxz=0.
                      cyz=0.
                      cx=0.
                      cy=0.
                      cz=0.
                      c0=0.
                      cRR=cxx*ajrx**2+cyy*ajry**2+czz*ajrz**2 +cxy*
     & ajrx*ajry+cxz*ajrx*ajrz+cyz*ajry*ajrz
                      cSS=cxx*ajsx**2+cyy*ajsy**2+czz*ajsz**2 +cxy*
     & ajsx*ajsy+cxz*ajsx*ajsz+cyz*ajsy*ajsz
                      cTT=cxx*ajtx**2+cyy*ajty**2+czz*ajtz**2 +cxy*
     & ajtx*ajty+cxz*ajtx*ajtz+cyz*ajty*ajtz
                      cRS=2.*(cxx*ajrx*ajsx+cyy*ajry*ajsy+czz*ajrz*
     & ajsz) +cxy*(ajrx*ajsy+ajry*ajsx)+cxz*(ajrx*ajsz+ajrz*ajsx)+cyz*
     & (ajry*ajsz+ajrz*ajsy)
                      cRT=2.*(cxx*ajrx*ajtx+cyy*ajry*ajty+czz*ajrz*
     & ajtz) +cxy*(ajrx*ajty+ajry*ajtx)+cxz*(ajrx*ajtz+ajrz*ajtx)+cyz*
     & (ajry*ajtz+ajrz*ajty)
                      cST=2.*(cxx*ajsx*ajtx+cyy*ajsy*ajty+czz*ajsz*
     & ajtz) +cxy*(ajsx*ajty+ajsy*ajtx)+cxz*(ajsx*ajtz+ajsz*ajtx)+cyz*
     & (ajsy*ajtz+ajsz*ajty)
                      ccR=cxx*ajrxx+cyy*ajryy+czz*ajrzz +cxy*ajrxy+cxz*
     & ajrxz+cyz*ajryz + cx*ajrx+cy*ajry+cz*ajrz
                      ccS=cxx*ajsxx+cyy*ajsyy+czz*ajszz +cxy*ajsxy+cxz*
     & ajsxz+cyz*ajsyz + cx*ajsx+cy*ajsy+cz*ajsz
                      ccT=cxx*ajtxx+cyy*ajtyy+czz*ajtzz +cxy*ajtxy+cxz*
     & ajtxz+cyz*ajtyz + cx*ajtx+cy*ajty+cz*ajtz
                     ! m=1...
                      cRRr=2.*(ajrx*ajrxr+ajry*ajryr+ajrz*ajrzr)
                      cRSr=2.*(ajrxr*ajsx+ajrx*ajsxr + ajryr*ajsy+ 
     & ajry*ajsyr + ajrzr*ajsz+ ajrz*ajszr)
                      cRTr=2.*(ajrxr*ajtx+ajrx*ajtxr + ajryr*ajty+ 
     & ajry*ajtyr + ajrzr*ajtz+ ajrz*ajtzr)
                      ccRr=ajrxxr+ajryyr+ajrzzr
                      cRRs=2.*(ajrx*ajrxs+ajry*ajrys+ajrz*ajrzs)
                      cRSs=2.*(ajrxs*ajsx+ajrx*ajsxs + ajrys*ajsy+ 
     & ajry*ajsys + ajrzs*ajsz+ ajrz*ajszs)
                      cRTs=2.*(ajrxs*ajtx+ajrx*ajtxs + ajrys*ajty+ 
     & ajry*ajtys + ajrzs*ajtz+ ajrz*ajtzs)
                      ccRs=ajrxxs+ajryys+ajrzzs
                      cRRt=2.*(ajrx*ajrxt+ajry*ajryt+ajrz*ajrzt)
                      cRSt=2.*(ajrxt*ajsx+ajrx*ajsxt + ajryt*ajsy+ 
     & ajry*ajsyt + ajrzt*ajsz+ ajrz*ajszt)
                      cRTt=2.*(ajrxt*ajtx+ajrx*ajtxt + ajryt*ajty+ 
     & ajry*ajtyt + ajrzt*ajtz+ ajrz*ajtzt)
                      ccRt=ajrxxt+ajryyt+ajrzzt
                     ! m=2...
                      cSSr=2.*(ajsx*ajsxr+ajsy*ajsyr+ajsz*ajszr)
                      cSTr=2.*(ajsxr*ajtx+ajsx*ajtxr + ajsyr*ajty+ 
     & ajsy*ajtyr + ajszr*ajtz+ ajsz*ajtzr)
                      ccSr=ajsxxr+ajsyyr+ajszzr
                      cSSs=2.*(ajsx*ajsxs+ajsy*ajsys+ajsz*ajszs)
                      cSTs=2.*(ajsxs*ajtx+ajsx*ajtxs + ajsys*ajty+ 
     & ajsy*ajtys + ajszs*ajtz+ ajsz*ajtzs)
                      ccSs=ajsxxs+ajsyys+ajszzs
                      cSSt=2.*(ajsx*ajsxt+ajsy*ajsyt+ajsz*ajszt)
                      cSTt=2.*(ajsxt*ajtx+ajsx*ajtxt + ajsyt*ajty+ 
     & ajsy*ajtyt + ajszt*ajtz+ ajsz*ajtzt)
                      ccSt=ajsxxt+ajsyyt+ajszzt
                     ! m=3...
                      cTTr=2.*(ajtx*ajtxr+ajty*ajtyr+ajtz*ajtzr)
                      ccTr=ajtxxr+ajtyyr+ajtzzr
                      cTTs=2.*(ajtx*ajtxs+ajty*ajtys+ajtz*ajtzs)
                      ccTs=ajtxxs+ajtyys+ajtzzs
                      cTTt=2.*(ajtx*ajtxt+ajty*ajtyt+ajtz*ajtzt)
                      ccTt=ajtxxt+ajtyyt+ajtzzt
                      c0r=0.
                      c0s=0.
                      c0t=0.
                     ! =============== End: Laplace operator: ==================== 
                     ! ---------------- Start: Boundary condition: --------------- 
                     ! BC: a1*u.n + a0*u = g 
                     ! nsign=2*side-1
                     ! a1=1.
                     ! a0=0.
                      ! ---------------- Start r direction ---------------
                      ! ---------------- Start s direction ---------------
                      ! ---------------- Start t direction ---------------
                      ! Outward normal : (n1,n2,n3) 
                      ani=nsign/sqrt(ajtx**2+ajty**2+ajtz**2)
                      n1=ajtx*ani
                      n2=ajty*ani
                      n3=ajtz*ani
                      ! BC : anT*ut + anR*ur + anS*us + a0*u 
                      anT=a1*(n1*ajtx+n2*ajty+n3*ajtz)
                      anR=a1*(n1*ajrx+n2*ajry+n3*ajrz)
                      anS=a1*(n1*ajsx+n2*ajsy+n3*ajsz)
                     ! >>>>>>>
                      anir=-(ajtx*ajtxr+ajty*ajtyr+ajtz*ajtzr)*ani**3
                      anirr=-(ajtx*ajtxrr+ajty*ajtyrr+ajtz*ajtzrr+
     & ajtxr*ajtxr+ajtyr*ajtyr+ajtzr*ajtzr)*ani**3 -3.*(ajtx*ajtxr+
     & ajty*ajtyr+ajtz*ajtzr)*ani**2*anir
                      n1r=ajtxr*ani + ajtx*anir
                      n1rr=ajtxrr*ani + 2.*ajtxr*anir + ajtx*anirr
                      n2r=ajtyr*ani + ajty*anir
                      n2rr=ajtyrr*ani + 2.*ajtyr*anir + ajty*anirr
                      n3r=ajtzr*ani + ajtz*anir
                      n3rr=ajtzrr*ani + 2.*ajtzr*anir + ajtz*anirr
                      anTr =a1*(n1*ajtxr+n2*ajtyr+n3*ajtzr+n1r*ajtx+
     & n2r*ajty+n3r*ajtz)
                      anTrr=a1*(n1*ajtxrr+n2*ajtyrr+n3*ajtzrr+2.*(n1r*
     & ajtxr+n2r*ajtyr+n3r*ajtzr)+n1rr*ajtx+n2rr*ajty+n3rr*ajtz)
                      anRr =a1*(n1*ajrxr+n2*ajryr+n3*ajrzr+n1r*ajrx+
     & n2r*ajry+n3r*ajrz)
                      anRrr=a1*(n1*ajrxrr+n2*ajryrr+n3*ajrzrr+2.*(n1r*
     & ajrxr+n2r*ajryr+n3r*ajrzr)+n1rr*ajrx+n2rr*ajry+n3rr*ajrz)
                      anSr =a1*(n1*ajsxr+n2*ajsyr+n3*ajszr+n1r*ajsx+
     & n2r*ajsy+n3r*ajsz)
                      anSrr=a1*(n1*ajsxrr+n2*ajsyrr+n3*ajszrr+2.*(n1r*
     & ajsxr+n2r*ajsyr+n3r*ajszr)+n1rr*ajsx+n2rr*ajsy+n3rr*ajsz)
                     ! <<<<<<<
                     ! >>>>>>>
                      anis=-(ajtx*ajtxs+ajty*ajtys+ajtz*ajtzs)*ani**3
                      aniss=-(ajtx*ajtxss+ajty*ajtyss+ajtz*ajtzss+
     & ajtxs*ajtxs+ajtys*ajtys+ajtzs*ajtzs)*ani**3 -3.*(ajtx*ajtxs+
     & ajty*ajtys+ajtz*ajtzs)*ani**2*anis
                      anirs=-(ajtx*ajtxrs+ajty*ajtyrs+ajtz*ajtzrs+
     & ajtxr*ajtxs+ajtyr*ajtys+ajtzr*ajtzs)*ani**3 -3.*(ajtx*ajtxr+
     & ajty*ajtyr+ajtz*ajtzr)*ani**2*anis
                      n1s=ajtxs*ani + ajtx*anis
                      n1ss=ajtxss*ani + 2.*ajtxs*anis + ajtx*aniss
                      n1rs=ajtxrs*ani + ajtxs*anir + ajtxr*anis + ajtx*
     & anirs
                      n2s=ajtys*ani + ajty*anis
                      n2ss=ajtyss*ani + 2.*ajtys*anis + ajty*aniss
                      n2rs=ajtyrs*ani + ajtys*anir + ajtyr*anis + ajty*
     & anirs
                      n3s=ajtzs*ani + ajtz*anis
                      n3ss=ajtzss*ani + 2.*ajtzs*anis + ajtz*aniss
                      n3rs=ajtzrs*ani + ajtzs*anir + ajtzr*anis + ajtz*
     & anirs
                      anTs =a1*(n1*ajtxs+n2*ajtys+n3*ajtzs+n1s*ajtx+
     & n2s*ajty+n3s*ajtz)
                      anTss=a1*(n1*ajtxss+n2*ajtyss+n3*ajtzss+2.*(n1s*
     & ajtxs+n2s*ajtys+n3s*ajtzs)+n1ss*ajtx+n2ss*ajty+n3ss*ajtz)
                      anTrs=a1*(n1*ajtxrs+n2*ajtyrs+n3*ajtzrs +n1r*
     & ajtxs+n2r*ajtys+n3r*ajtzs +n1s*ajtxr+n2s*ajtyr+n3s*ajtzr +n1rs*
     & ajtx+n2rs*ajty+n3rs*ajtz)
                      anRs =a1*(n1*ajrxs+n2*ajrys+n3*ajrzs+n1s*ajrx+
     & n2s*ajry+n3s*ajrz)
                      anRss=a1*(n1*ajrxss+n2*ajryss+n3*ajrzss+2.*(n1s*
     & ajrxs+n2s*ajrys+n3s*ajrzs)+n1ss*ajrx+n2ss*ajry+n3ss*ajrz)
                      anRrs=a1*(n1*ajrxrs+n2*ajryrs+n3*ajrzrs +n1r*
     & ajrxs+n2r*ajrys+n3r*ajrzs +n1s*ajrxr+n2s*ajryr+n3s*ajrzr +n1rs*
     & ajrx+n2rs*ajry+n3rs*ajrz)
                      anSs =a1*(n1*ajsxs+n2*ajsys+n3*ajszs+n1s*ajsx+
     & n2s*ajsy+n3s*ajsz)
                      anSss=a1*(n1*ajsxss+n2*ajsyss+n3*ajszss+2.*(n1s*
     & ajsxs+n2s*ajsys+n3s*ajszs)+n1ss*ajsx+n2ss*ajsy+n3ss*ajsz)
                      anSrs=a1*(n1*ajsxrs+n2*ajsyrs+n3*ajszrs +n1r*
     & ajsxs+n2r*ajsys+n3r*ajszs +n1s*ajsxr+n2s*ajsyr+n3s*ajszr +n1rs*
     & ajsx+n2rs*ajsy+n3rs*ajsz)
                     ! <<<<<<<
                      ! Here are the expressions for the normal derivatives
                     bn3 = 1
                     bn2 = 0
                     bn2 = 0
                     bn1 = 0
                     b0  = -(-c0t*anT**3*cTT**2+cTTt*anT**3*cTT*c0-cRT*
     & cTTr*anT**3*c0+cRT*c0r*anT**3*cTT-cRT**2*cTT*a0rr*anT**2-2*cRT*
     & *2*cTT*anTr**2*a0+cTTr*anT**2*cRT**2*a0r+cRR*cTT**2*a0rr*anT**
     & 2+2*cRR*cTT**2*anTr**2*a0+cST*c0s*anT**3*cTT-cST*cTTs*anT**3*
     & c0-cST**2*cTT*a0ss*anT**2-2*cST**2*cTT*anTs**2*a0+cTTs*anT**2*
     & cST**2*a0s+cRS*cTT**2*a0rs*anT**2+cSS*cTT**2*a0ss*anT**2+2*cSS*
     & cTT**2*anTs**2*a0-ccT**2*anT**2*cTT*a0+ccT*anT**3*cTT*c0+ccR*
     & anT**2*cTT**2*a0r+ccS*anT**2*cTT**2*a0s+c0*anT**2*cTT**2*a0+
     & cRTt*anT**2*cTT**2*a0r+cSTt*anT**2*cTT**2*a0s+ccTt*anT**2*cTT**
     & 2*a0-cTTt*anT**2*cTT*cRT*a0r+cTTt*anT*cTT*cRT*anTr*a0-cTTt*anT*
     & *2*cTT*cST*a0s+cTTt*anT*cTT*cST*anTs*a0-cTTt*anT**2*cTT*ccT*a0+
     & 2*cRT**2*cTT*anTr*a0r*anT+cRT**2*cTT*anTrr*anT*a0-2*cRT*cST*
     & cTT*a0rs*anT**2+2*cRT*cST*cTT*anTr*a0s*anT-4*cRT*cST*cTT*anTr*
     & anTs*a0+2*cRT*cST*cTT*anTs*a0r*anT+2*cRT*cST*cTT*anTrs*anT*a0-
     & 2*cRT*ccT*anT**2*cTT*a0r+2*cRT*ccT*anT*cTT*anTr*a0-cRT*cRTr*
     & anT**2*cTT*a0r+cRT*cRTr*anT*cTT*anTr*a0-cRT*cSTr*anT**2*cTT*
     & a0s+cRT*cSTr*anT*cTT*anTs*a0-cRT*ccTr*anT**2*cTT*a0-cTTr*anT*
     & cRT**2*anTr*a0+cRT*cTTr*anT**2*cST*a0s-cRT*cTTr*anT*cST*anTs*
     & a0+cRT*cTTr*anT**2*ccT*a0-2*cRR*cTT**2*anTr*a0r*anT-cRR*cTT**2*
     & anTrr*anT*a0+2*cST**2*cTT*anTs*a0s*anT+cST**2*cTT*anTss*anT*a0-
     & 2*cST*ccT*anT**2*cTT*a0s+2*cST*ccT*anT*cTT*anTs*a0-cST*cRTs*
     & anT**2*cTT*a0r+cST*cRTs*anT*cTT*anTr*a0-cST*cSTs*anT**2*cTT*
     & a0s+cST*cSTs*anT*cTT*anTs*a0-cST*ccTs*anT**2*cTT*a0+cST*cTTs*
     & anT**2*cRT*a0r-cST*cTTs*anT*cRT*anTr*a0-cTTs*anT*cST**2*anTs*
     & a0+cST*cTTs*anT**2*ccT*a0-cRS*cTT**2*anTr*a0s*anT+2*cRS*cTT**2*
     & anTr*anTs*a0-cRS*cTT**2*anTs*a0r*anT-cRS*cTT**2*anTrs*anT*a0-2*
     & cSS*cTT**2*anTs*a0s*anT-cSS*cTT**2*anTss*anT*a0-ccR*anT*cTT**2*
     & anTr*a0-ccS*anT*cTT**2*anTs*a0-cRTt*anT*cTT**2*anTr*a0-cSTt*
     & anT*cTT**2*anTs*a0)/anT**3/cTT**3
                     ! write(*,'(''LS:matrix: side,axis,axisp1,b0,b1,b3,br2 ='',2i2,i3,4e11.3)') side,axis,axisp1,b0,b1,b3,br2
                     ! bn2 = -(-cRRr*anR**3*cRR+cRT*cRRt*anR**3+cRS*cRRs*anR**3-ccR*anR**3*cRR)/anR**3/cRR**2
                     ! write(*,'("LS-NE4:matrix: i1,i2=",2i3," Values:")') i1,i2
                     ! write(*,'("  cRR,anR,cRRr,cRT,cRRt,cRS,cRRs,ccR=",8e11.3)') cRR,anR,cRRr,cRT,cRRt,cRS,cRRs,ccR
                  ! b0  = -(2*cRS**2*anRs*a0s*anR+cRS**2*anRss*anR*a0-2*cRS*cRT*a0st*anR**2-cRS*ccR*anR**2*a0s-cRS*cRSs*anR**2*a0s-cRS*cRTs*anR**2*a0t-cRS*ccRs*anR**2*a0+cSS*cRR*a0ss*anR**2+2*cSS*cRR*anRs**2*a0-cRT*ccR*anR**2*a0t-cRT*cRSt*anR**2*a0s+cRT*c0t*anR**3-c0r*anR**3*cRR-cRS**2*a0ss*anR**2-2*cRS**2*anRs**2*a0+cRS*c0s*anR**3-cRT**2*a0tt*anR**2-2*cRT**2*anRt**2*a0+2*cRS*cRT*anRs*a0t*anR-4*cRS*cRT*anRs*anRt*a0+2*cRS*cRT*anRt*a0s*anR+2*cRS*cRT*anRst*anR*a0+cRS*ccR*anR*anRs*a0+cRS*cRSs*anR*anRs*a0+cRS*cRTs*anR*anRt*a0-2*cSS*cRR*anRs*a0s*anR-cSS*cRR*anRss*anR*a0-cRT*cRTt*anR**2*a0t-cRT*ccRt*anR**2*a0+cRT**2*anRtt*anR*a0+2*cRT**2*anRt*a0t*anR+cST*cRR*a0st*anR**2+cTT*cRR*a0tt*anR**2+2*cTT*cRR*anRt**2*a0+ccS*anR**2*cRR*a0s+ccT*anR**2*cRR*a0t+c0*anR**2*cRR*a0+cRSr*anR**2*cRR*a0s+cRTr*anR**2*cRR*a0t+ccRr*anR**2*cRR*a0+cRT*ccR*anR*anRt*a0+cRT*cRSt*anR*anRs*a0+cRT*cRTt*anR*anRt*a0-cST*cRR*anRs*a0t*anR+2*cST*cRR*anRs*anRt*a0-cST*cRR*anRt*a0s*anR-cST*cRR*anRst*anR*a0-cTT*cRR*anRtt*anR*a0-2*cTT*cRR*anRt*a0t*anR-ccS*anR*cRR*anRs*a0-ccT*anR*cRR*anRt*a0-cRSr*anR*cRR*anRs*a0-cRTr*anR*cRR*anRt*a0)/anR**3/cRR**2
                     ! write(*,'("anRs,a0s,anRss,a0st,cRTs,a0t,a0,cSS,a0ss=",9e10.2)') anRs,a0s,anRss,a0st,cRTs,a0t,a0,cSS,a0ss
                     ! write(*,'(" b0,bn2 =",4e11.3)') b0,bn2
                     d(j1,j2,j3)=-.5/dr(axis)**3
                     e(j1,j2,j3)= 1./dr(axis)**3    +bn2/dr(axis)**2
                     a(j1,j2,j3)=                -2.*bn2/dr(axis)**2 - 
     & b0
                     b(j1,j2,j3)=-1./dr(axis)**3    +bn2/dr(axis)**2
                     c(j1,j2,j3)= .5/dr(axis)**3
                    else if( mask(i1,i2,i3).lt.0 ) then
                        b(j1,j2,j3)= 1.
                        c(j1,j2,j3)=-4.
                        d(j1,j2,j3)= 6.
                        e(j1,j2,j3)=-4.
                        a(j1,j2,j3)= 1.
                    end if
                   end do
                   end do
                   end do
                else
                  stop 88
                end if
               end if

              else if( bcOptionN.eq.2 )then
                 ! 2nd ghost line on right:
                 !       [  d  e  a  b  c ]
                 !   i=n+[ -2 -1  0  1  2 ]
                 do i3=l3a,l3b
                 do i2=l2a,l2b
                 do i1=l1a,l1b
                    d(i1,i2,i3)=-1.
                    e(i1,i2,i3)= 0.
                    a(i1,i2,i3)= 0.
                    b(i1,i2,i3)= 0.
                    c(i1,i2,i3)= 1.
                 end do
                 end do
                 end do
              else if( bcOptionN.eq.3 )then
                ! mixed BC for both first and second ghost lines

                ! *new* 110308 -- apply real 2nd-order approximations on two ghost 
                ! write(*,'(">>>lineSmoothBuild: 2nd order Neumann/mixed on TWO lines")')

                 ! write(*,'("lineSmoothOpt:mixedToSecondOrder: side,axis=",2i2, " a0,a1=",2f6.2)') side,axis,a0,a1
                 is = 1-2*side
                 do i3=m3a,m3b
                 do i2=m2a,m2b
                 do i1=m1a,m1b
                  j1=i1+is1 ! (j1,j2,j3) is the boundary point
                  j2=i2+is2
                  j3=i3+is3
                  k1=i1-is1 ! (k1,k2,k3) is the 2nd ghost line
                  k2=i2-is2
                  k3=i3-is3
                  if( mask(j1,j2,j3).gt.0 ) then
                    ! Curvilinear:
                    ! (an1,an2,an3) is the outward normal
                    an1 = rsxy(j1,j2,j3,axis,0)
                    an2 = rsxy(j1,j2,j3,axis,1)
                    if( nd.eq.2 )then
                     aNormi = (-is)/sqrt(an1**2+an2**2)
                     an1=an1*aNormi
                     an2=an2*aNormi
                     t1=a1*( an1*rsxy(j1,j2,j3,axis,0)+an2*rsxy(j1,j2,
     & j3,axis,1) )/(2.*dr(axis))
                    else
                     an3 = rsxy(j1,j2,j3,axis,2)
                     aNormi = (-is)/sqrt(an1**2+an2**2+an3**2)
                     an1=an1*aNormi
                     an2=an2*aNormi
                     an3=an3*aNormi
                     t1=a1*( an1*rsxy(j1,j2,j3,axis,0)+an2*rsxy(j1,j2,
     & j3,axis,1)+an3*rsxy(j1,j2,j3,axis,2) )/(2.*dr(axis))
                    end if
                     ! 1st ghost line on right:
                     !       [  e  a  b  c  d ]
                     !  i=n+ [ -2 -1  0  1  2 ]
                     e(i1,i2,i3)= 0.
                     a(i1,i2,i3)= -t1
                     b(i1,i2,i3)= a0
                     c(i1,i2,i3)=  t1
                     d(i1,i2,i3)= 0.
                     ! 2nd ghost line on right:
                     !       [  d  e  a  b  c ]
                     !   i=n+[ -2 -1  0  1  2 ]
                     d(k1,k2,k3)= -t1*.5
                     e(k1,k2,k3)=  0.
                     a(k1,k2,k3)= a0
                     b(k1,k2,k3)=  0.
                     c(k1,k2,k3)=  t1*.5
                    ! write(*,'("lineSmoothBuild: i1,i2=",2i3," [B C A]=",3e10.2)') i1,i2,B(i1,i2,i3),C(i1,i2,i3),A(i1,i2,i3)
                  else if( mask(j1,j2,j3).lt.0 )then
                   ! What order should this be?
                    ! 1st ghost line on right: -- extrap to order=2 -- this should be fine for lower levels
                    ! note: reverse order since we extrap last ghost
                      if( 2.eq.4 )then
                        d(i1,i2,i3)= 1.
                        c(i1,i2,i3)=-4.
                        b(i1,i2,i3)= 6.
                        a(i1,i2,i3)=-4.
                        e(i1,i2,i3)= 1.
                      else if( 2.eq.5 )then
                        ! 5-th order extrap (NOTE: this does not fit entirely in the matrix so we need a residual)
                        d(i1,i2,i3)=  1.
                        c(i1,i2,i3)= -5.
                        b(i1,i2,i3)= 10.
                        a(i1,i2,i3)=-10.
                        e(i1,i2,i3)=  5.
                      else if( 2.eq.2 )then
                        d(i1,i2,i3)= 0.
                        c(i1,i2,i3)= 1.
                        b(i1,i2,i3)=-2.
                        a(i1,i2,i3)= 1.
                        e(i1,i2,i3)= 0.
                      else
                        stop 18520
                      end if
                    ! 2nd ghost on right:
                    ! note: reverse order of c,d,e,a,b
                      c(k1,k2,k3)= 1.
                      b(k1,k2,k3)=-4.
                      a(k1,k2,k3)= 6.
                      e(k1,k2,k3)=-4.
                      d(k1,k2,k3)= 1.
                  end if
                 end do
                 end do
                 end do
              else
                stop 14
              end if
              ! 1st ghost line on right:
              !       [  e  a  b  c  d ]
              !  i=n+ [ -2 -1  0  1  2 ]
              if( bcOptionN.eq.0 .and. isNeumannBC(1).eq.1 .and. 
     & level.gt.0 )then
                ! this is really a Neumann or Mixed BC *wdh* 110224
                ! On lower levels we fill in the BC to 2nd order

                 ! write(*,'("$$$ lineSmoothOpt: fill mixed BC right 2nd order for penta")') 

                 if( gridType.eq.rectangular )then
                   ! write(*,'("lineSmoothOpt:mixedToSecondOrder: side,axis=",2i2, " a0,a1=",2f6.2)') side,axis,a0,a1
                   is = 1-2*side
                   do i3=m3a,m3b
                   do i2=m2a,m2b
                   do i1=m1a,m1b
                    j1=i1+is1 ! (j1,j2,j3) is the boundary point
                    j2=i2+is2
                    j3=i3+is3
                    if( mask(j1,j2,j3).gt.0 ) then
                       t1 = (-is*a1)/(2.*dx(axis))
                      e(i1,i2,i3)= 0.
                      a(i1,i2,i3)= -t1
                      b(i1,i2,i3)= a0
                      c(i1,i2,i3)=  t1
                      d(i1,i2,i3)= 0.
                      ! write(*,'("lineSmoothBuild: i1,i2=",2i3," [e a d]=",3e10.2)') i1,i2,e(i1,i2,i3),a(i1,i2,i3),d(i1,i2,i3)
                    else if( mask(j1,j2,j3).lt.0 )then
                     ! What order should this be?
                      ! note: reverse order of b,c,d,e,a since we extrap point a: 
                        d(i1,i2,i3)= 1.
                        c(i1,i2,i3)=-4.
                        b(i1,i2,i3)= 6.
                        a(i1,i2,i3)=-4.
                        e(i1,i2,i3)= 1.
                    end if
                   end do
                   end do
                   end do
                 else
                   ! write(*,'("lineSmoothOpt:mixedToSecondOrder: side,axis=",2i2, " a0,a1=",2f6.2)') side,axis,a0,a1
                   is = 1-2*side
                   do i3=m3a,m3b
                   do i2=m2a,m2b
                   do i1=m1a,m1b
                    j1=i1+is1 ! (j1,j2,j3) is the boundary point
                    j2=i2+is2
                    j3=i3+is3
                    if( mask(j1,j2,j3).gt.0 ) then
                      ! Curvilinear:
                      ! (an1,an2,an3) is the outward normal
                      an1 = rsxy(j1,j2,j3,axis,0)
                      an2 = rsxy(j1,j2,j3,axis,1)
                      if( nd.eq.2 )then
                       aNormi = (-is)/sqrt(an1**2+an2**2)
                       an1=an1*aNormi
                       an2=an2*aNormi
                       t1=a1*( an1*rsxy(j1,j2,j3,axis,0)+an2*rsxy(j1,
     & j2,j3,axis,1) )/(2.*dr(axis))
                      else
                       an3 = rsxy(j1,j2,j3,axis,2)
                       aNormi = (-is)/sqrt(an1**2+an2**2+an3**2)
                       an1=an1*aNormi
                       an2=an2*aNormi
                       an3=an3*aNormi
                       t1=a1*( an1*rsxy(j1,j2,j3,axis,0)+an2*rsxy(j1,
     & j2,j3,axis,1)+an3*rsxy(j1,j2,j3,axis,2) )/(2.*dr(axis))
                      end if
                      e(i1,i2,i3)= 0.
                      a(i1,i2,i3)= -t1
                      b(i1,i2,i3)= a0
                      c(i1,i2,i3)=  t1
                      d(i1,i2,i3)= 0.
                      ! write(*,'("lineSmoothBuild: i1,i2=",2i3," [e a d]=",3e10.2)') i1,i2,e(i1,i2,i3),a(i1,i2,i3),d(i1,i2,i3)
                    else if( mask(j1,j2,j3).lt.0 )then
                     ! What order should this be?
                      ! note: reverse order of b,c,d,e,a since we extrap point a: 
                        d(i1,i2,i3)= 1.
                        c(i1,i2,i3)=-4.
                        b(i1,i2,i3)= 6.
                        a(i1,i2,i3)=-4.
                        e(i1,i2,i3)= 1.
                    end if
                   end do
                   end do
                   end do
                 end if

              else if( bcOptionN.eq.0 .or. bcOptionN.eq.1 )then

                ! BC is store in the coeff matrix 

                do i3=m3a,m3b
                do i2=m2a,m2b
                do i1=m1a,m1b
                 j1=i1+is1 ! (j1,j2,j3) is the boundary point
                 j2=i2+is2
                 j3=i3+is3
                   if( mask(j1,j2,j3).gt.0 ) then
                  e(i1,i2,i3)=coeff(mdm2,i1,i2,i3)
                  a(i1,i2,i3)=coeff(mdm1,i1,i2,i3)
                  b(i1,i2,i3)=coeff(md  ,i1,i2,i3)
                  c(i1,i2,i3)=coeff(mdp1,i1,i2,i3)
                  d(i1,i2,i3)=coeff(mdp2,i1,i2,i3)
                 else if( mask(j1,j2,j3).lt.0 ) then
                     d(i1,i2,i3)= 1.
                     c(i1,i2,i3)=-4.
                     b(i1,i2,i3)= 6.
                     a(i1,i2,i3)=-4.
                     e(i1,i2,i3)= 1.
                 end if
                end do
                end do
                end do

              else if( bcOptionN.eq.2 )then
                ! 1st ghost line on right:
                !       [  e  a  b  c  d ]
                !  i=n+ [ -2 -1  0  1  2 ]
                 do i3=m3a,m3b
                 do i2=m2a,m2b
                 do i1=m1a,m1b
                   e(i1,i2,i3)= 0.
                   a(i1,i2,i3)=-1.
                   b(i1,i2,i3)= 0.
                   c(i1,i2,i3)= 1.
                   d(i1,i2,i3)= 0.
                 end do
                 end do
                 end do
              else if( bcOptionN.eq.3 )then
                ! mixed BC already done
              else
                stop 91
              end if

             end if
            else
              stop 6
            end if

          end if
        end do ! do side

      end if

      return
      end

! Define the fourth-order accurate neumann BC which uses the normal derivative of the equation on the
! boundary. 



! ---------------------------------------------------------------------------------------------------------
! Define the fourth-order accurate neumann BC which uses the normal derivative of the equation on the
! boundary. 
!
! Cartesian Grid: 
!    u.xx + u.yy + u.zz = f
!    a1n*u.x + a0*u = g     -> u.x = (g-a0*u)/a1n 
!
!    u.xxx = f.x - ( u.xyy + u.xzz )
!          = f.x - ( g.yy -a0*u.yy + g.zz - a0*u.zz )/a1n 
! 
! Here is the numerical boundary condition:
!    u.xxx + (a0/a1n)*u.xx = f.x - ( g.yy+g.zz -a0*f )/a1n 
! 
! Curvilinear grid:
!   See ogmg/doc/neumann.maple
! --------------------------------------------------------------------------------------------------------

! --- These macros are from similar ones in defectOpt ----
!  - for boundary conditions we may need to evaluate the coefficients at (j1,j2,j3) 
!    and the solution centered at (i1,i2,i3)
! line smooth direction 1 




! ===============================================================================
! Loop over boundary points (alos compute the ghost points)
!   (i1,i2,i3) = boundary point
!   (j1,j2,j3) = ghost point
!   
! ===============================================================================


! ===============================================================================
! Line-smooth RHS for Neumann/Mixed BC, 2nd-order, constant coefficients
! ===============================================================================


! ===================================================================================
! Line-smooth RHS for Neumann/Mixed BC, 2nd-order, stored in the coefficient matrix
!
!  DIM : 2 or 3
!  DIR : 0, 1 or 2 for line smooth in direction DIR
! ===================================================================================

! ===============================================================================
! Line-smooth RHS for true Neumann/Mixed BC, 2nd-order, curvilinear
!
! We discretize the following BC to second order: 
! 
! a1*( n1*ux + n2*ux + n3*uz ) + a0*u = f 
! a1*( (n1*rx+n2*ry+n3*rz)*ur + (n1*sx+n2*sy+n3*sz)*us + (n1*tx+n2*ty+n3*st)*ut ) + a0*u = f 
!
! ===============================================================================


! ===============================================================================
! Line-smooth RHS for true Neumann/Mixed BC, 2nd-order, curvilinear, TWO LINES 
!   *wdh* 110308
!
! Note: This BC is used on lower levels when fourth-order is used on the finest level.
!
! We discretize the following BC to second order: 
! 
! a1*( n1*ux + n2*ux + n3*uz ) + a0*u = f 
! a1*( (n1*rx+n2*ry+n3*rz)*ur + (n1*sx+n2*sy+n3*sz)*us + (n1*tx+n2*ty+n3*st)*ut ) + a0*u = f 
!
! ===============================================================================

      subroutine lineSmoothRHS( nd,nd1a,nd1b,nd2a,nd2b,nd3a,nd3b,
     & ndc, c, cc,  r, s, u, f, mask, rsxy, ipar, rpar, ndbcd,bcData )
! ===================================================================================
!  Line smooth assign RHS
!
!  r : rhs to be filled in
!  
! ===================================================================================

      implicit none
      integer nd,nd1a,nd1b,nd2a,nd2b,nd3a,nd3b,ndc,ndbcd
      integer nda1a,nda1b,nda2a,nda2b,nda3a,nda3b

      integer mask(nd1a:nd1b,nd2a:nd2b,nd3a:nd3b)
      real bcData(0:ndbcd-1,0:1,0:2)
      integer ipar(0:*)


      real r(nd1a:nd1b,nd2a:nd2b,nd3a:nd3b)
      real u(nd1a:nd1b,nd2a:nd2b,nd3a:nd3b)
      real f(nd1a:nd1b,nd2a:nd2b,nd3a:nd3b)
      real rsxy(nd1a:nd1b,nd2a:nd2b,nd3a:nd3b,0:nd-1,0:nd-1)
      real c(1:ndc,nd1a:nd1b,nd2a:nd2b,nd3a:nd3b)
      real s(nd1a:nd1b,nd2a:nd2b,nd3a:nd3b)
      real cc(0:*)
      real rpar(0:*)

!....local variables
      integer n1a,n1b,n1c,n2a,n2b,n2c,n3a,n3b,n3c,sparseStencil,
     & orderOfAccuracy,bcOptionD,bcOptionN
      integer i1,i2,i3,m1a,m1b,m1c,m2a,m2b,m2c,m3a,m3b,m3c,j1,j2,j3,
     & is1,is2,is3,is
      integer i1m1,i1p1,i2m1,i2p1,i3m1,i3p1,k1,k2,k3
      integer l1a,l1b,l2a,l2b,l3a,l3b,kd,shift
      integer nn1a,nn1b,nn2a,nn2b,nn3a,nn3b
      integer useBoundaryForcing,grid,level,axisp1,axisp2
      integer direction,width,width2,md,mdm1,mdp1,mdm2,mdp2,side,axis,
     & md2,md2m1,md2p1,ms2
      integer bc(0:1,0:2),orderOfExtrapD,orderOfExtrapN,gridType,
     & isNeumannBC(0:1)
      real dx(0:2),dr(0:2),urv(0:2),urv2(0:2)
      real dxi,dx2i,dxm

      real nsign,aNormi

      real drn
      real cf1,cf2,cg1,cg2
      real uu,us,uss,usss,ur,urr,urrr,urs,urss,urrs
      real ut,utt,uttt, ust,urt, urrt, usst, urtt, ustt, urst

      real a0,a1,a2,alpha1,alpha2
      real rxi,ryi,sxi,syi,rxr,rxs,sxr,sxs,ryr,rys,syr,sys
      real rxxi,ryyi,sxxi,syyi
      real rxrr,rxrs,rxss,ryrr,ryrs,ryss
      real sxrr,sxrs,sxss,syrr,syrs,syss
      real rxx,ryy,sxx,syy
      real rxxr,ryyr,rxxs,ryys, sxxr,syyr,sxxs,syys
      real rxNormI,rxNormIs,rxNormIss,rxNormIr,rxNormIrr
      real sxNormI,sxNormIs,sxNormIss,sxNormIr,sxNormIrr
      ! real n1,n1s,n1ss,n2,n2s,n2ss,n1r,n2r,n1rr,n2rr
      ! real an1,an1s,an1ss,an2,an2s,an2ss,an1r,an1rr,an2r,an2rs,an2rr
      ! real ff,ffs,ffr,g,gs,gss,gr,grr,gtt,fft,gt,gst,grt,grs
      ! real c11,c11r,c11s,c12,c12r,c12s,c22,c22r,c22s,c1,c1r,c1s,c2,c2r,c2s,c0,c0r,c0s
      ! real b0,b1,b2,b3,bf,br2

      real fv(-1:1,-1:1,-1:1), gv(-1:1,-1:1,-1:1)

      ! Delare variables for the order 4 Neumann BCs
       integer ax1,ax2
       integer iv(0:2),dv(0:2),mdim(0:1,0:2)
       real n1,n1r,n1rr, n1s,n1ss, n1t,n1tt, n1rs, n1rt, n1st
       real n2,n2r,n2rr, n2s,n2ss, n2t,n2tt, n2rs, n2rt, n2st
       real n3,n3r,n3rr, n3s,n3ss, n3t,n3tt, n3rs, n3rt, n3st
       real an1,an1s,an1ss,an2,an2s,an2ss,an1r,an1rr,an2r,an2rs,an2rr, 
     & an3
       real ff,ffs,ffr,g,gs,gss,gr,grr,grs,grt, gt,gst,gtt, fft,ffst,
     & fftt
       real c11,c11r,c11s,c12,c12r,c12s,c22,c22r,c22s,c1,c1r,c1s,c2,
     & c2r,c2s
       real b0,b1,b2,b3,bf
       real br,brr,brrr,bs,bss,bsss,bt,btt,bttt, brs,brt,bst, brrs, 
     & brrt, brss, brtt, bsst, bstt, brst, br2, bn1,bn2,bn3
       real cxx,cyy,czz,cxy,cxz,cyz,cx,cy,cz,c0
       real cRR,cSS,cTT,cRS,cRT,cST,ccR,ccS,ccT
       real cRRr,cSSr,cTTr,cRSr,cRTr,cSTr,ccRr,ccSr,ccTr,c0r
       real cRRs,cSSs,cTTs,cRSs,cRTs,cSTs,ccRs,ccSs,ccTs,c0s
       real cRRt,cSSt,cTTt,cRSt,cRTt,cSTt,ccRt,ccSt,ccTt,c0t
       real ani,anir,anis,anit, anirr,anirs, anirt, aniss, anist, anitt
       real anR, anRr,anRs,anRt, anRrr,anRrs, anRrt, anRss, anRst, 
     & anRtt
       real anS, anSr,anSs,anSt, anSrr,anSrs, anSrt, anSss, anSst, 
     & anStt
       real anT, anTr,anTs,anTt, anTrr,anTrs, anTrt, anTss, anTst, 
     & anTtt
       real a0r,a0s,a0t, a0rr,a0ss,a0tt,a0rs,a0rt,a0st
       real bogus
       real ajrxxr
       real ajrxxs
       real ajrxxt
       real ajrxyr
       real ajrxys
       real ajrxyt
       real ajrxzr
       real ajrxzs
       real ajrxzt
       real ajryxr
       real ajryxs
       real ajryxt
       real ajryyr
       real ajryys
       real ajryyt
       real ajryzr
       real ajryzs
       real ajryzt
       real ajrzxr
       real ajrzxs
       real ajrzxt
       real ajrzyr
       real ajrzys
       real ajrzyt
       real ajrzzr
       real ajrzzs
       real ajrzzt
       real ajsxxr
       real ajsxxs
       real ajsxxt
       real ajsxyr
       real ajsxys
       real ajsxyt
       real ajsxzr
       real ajsxzs
       real ajsxzt
       real ajsyxr
       real ajsyxs
       real ajsyxt
       real ajsyyr
       real ajsyys
       real ajsyyt
       real ajsyzr
       real ajsyzs
       real ajsyzt
       real ajszxr
       real ajszxs
       real ajszxt
       real ajszyr
       real ajszys
       real ajszyt
       real ajszzr
       real ajszzs
       real ajszzt
       real ajtxxr
       real ajtxxs
       real ajtxxt
       real ajtxyr
       real ajtxys
       real ajtxyt
       real ajtxzr
       real ajtxzs
       real ajtxzt
       real ajtyxr
       real ajtyxs
       real ajtyxt
       real ajtyyr
       real ajtyys
       real ajtyyt
       real ajtyzr
       real ajtyzs
       real ajtyzt
       real ajtzxr
       real ajtzxs
       real ajtzxt
       real ajtzyr
       real ajtzys
       real ajtzyt
       real ajtzzr
       real ajtzzs
       real ajtzzt
       real t0,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,
     & t17,t18,t19,t20,t21,t22,t23,t24,t25,t26,t27,t28,t29,t30,t31,
     & t32,t33,t34,t35,t36,t37,t38,t39,t40,t41,t42,t43,t44,t45,t46,
     & t47,t48,t49,t50,t51,t52,t53,t54,t55,t56,t57,t58,t59,t60,t61,
     & t62,t63,t64,t65,t66,t67,t68,t69,t70,t71,t72,t73,t74,t75,t76,
     & t77,t78,t79,t80,t81,t82,t83,t84,t85,t86,t87,t88,t89,t90,t91,
     & t92,t93,t94,t95,t96,t97,t98,t99,t100,t101,t102,t103,t104,t105,
     & t106,t107,t108,t109,t110,t111,t112,t113,t114,t115,t116,t117,
     & t118,t119,t120,t121,t122,t123,t124,t125,t126,t127,t128,t129,
     & t130,t131,t132,t133,t134,t135,t136,t137,t138,t139,t140,t141,
     & t142,t143,t144,t145,t146,t147,t148,t149,t150,t151,t152,t153,
     & t154,t155,t156,t157,t158,t159,t160,t161,t162,t163,t164,t165,
     & t166,t167,t168,t169,t170,t171,t172,t173,t174,t175,t176,t177,
     & t178,t179,t180,t181,t182,t183,t184,t185,t186,t187,t188,t189,
     & t190,t191,t192,t193,t194,t195,t196,t197,t198,t199,t200,t201,
     & t202,t203,t204,t205,t206,t207,t208,t209,t210,t211,t212,t213,
     & t214,t215,t216,t217,t218,t219,t220,t221,t222,t223,t224,t225,
     & t226,t227,t228,t229,t230,t231,t232,t233,t234,t235,t236,t237,
     & t238,t239,t240,t241,t242,t243,t244,t245,t246,t247,t248,t249,
     & t250,t251,t252,t253,t254,t255,t256,t257,t258,t259,t260,t261,
     & t262,t263,t264,t265,t266,t267,t268,t269,t270,t271,t272,t273,
     & t274,t275,t276,t277,t278,t279,t280,t281,t282,t283,t284,t285,
     & t286,t287,t288,t289,t290,t291,t292,t293,t294,t295,t296,t297,
     & t298,t299,t300,t301,t302,t303,t304,t305,t306,t307,t308,t309,
     & t310,t311,t312,t313,t314,t315,t316,t317,t318,t319,t320,t321,
     & t322,t323,t324,t325,t326,t327,t328,t329,t330,t331,t332,t333,
     & t334,t335,t336,t337,t338,t339,t340,t341,t342,t343,t344,t345,
     & t346,t347,t348,t349,t350,t351,t352,t353,t354,t355,t356,t357,
     & t358,t359,t360,t361,t362,t363,t364,t365,t366,t367,t368,t369,
     & t370,t371,t372,t373,t374,t375,t376,t377,t378,t379,t380,t381,
     & t382,t383,t384,t385,t386,t387,t388,t389,t390,t391,t392,t393,
     & t394,t395,t396,t397,t398,t399,t400,t401,t402,t403,t404,t405,
     & t406,t407,t408,t409,t410,t411,t412,t413,t414,t415,t416,t417,
     & t418,t419,t420,t421,t422,t423,t424,t425,t426,t427,t428,t429,
     & t430,t431,t432,t433,t434,t435,t436,t437,t438,t439,t440,t441,
     & t442,t443,t444,t445,t446,t447,t448,t449,t450,t451,t452,t453,
     & t454,t455,t456,t457,t458,t459,t460,t461,t462,t463,t464,t465,
     & t466,t467,t468,t469,t470,t471,t472,t473,t474,t475,t476,t477,
     & t478,t479,t480,t481,t482,t483,t484,t485,t486,t487,t488,t489,
     & t490,t491,t492,t493,t494,t495,t496,t497,t498,t499,t500,t501,
     & t502,t503,t504,t505,t506,t507,t508,t509,t510,t511,t512,t513,
     & t514,t515,t516,t517,t518,t519,t520,t521,t522,t523,t524,t525,
     & t526,t527,t528,t529,t530,t531,t532,t533,t534,t535,t536,t537,
     & t538,t539,t540,t541,t542,t543,t544,t545,t546,t547,t548,t549,
     & t550,t551,t552,t553,t554,t555,t556,t557,t558,t559,t560,t561,
     & t562,t563,t564,t565,t566,t567,t568,t569,t570,t571,t572,t573,
     & t574,t575,t576,t577,t578,t579,t580,t581,t582,t583,t584,t585,
     & t586,t587,t588,t589,t590,t591,t592,t593,t594,t595,t596,t597,
     & t598,t599,t600,t601,t602,t603,t604,t605,t606,t607,t608,t609,
     & t610,t611,t612,t613,t614,t615,t616,t617,t618,t619,t620,t621,
     & t622,t623,t624,t625,t626,t627,t628,t629,t630,t631,t632,t633,
     & t634,t635,t636,t637,t638,t639,t640,t641,t642,t643,t644,t645,
     & t646,t647,t648,t649,t650,t651,t652,t653,t654,t655,t656,t657,
     & t658,t659,t660,t661,t662,t663,t664,t665,t666,t667,t668,t669,
     & t670,t671,t672,t673,t674,t675,t676,t677,t678,t679,t680,t681,
     & t682,t683,t684,t685,t686,t687,t688,t689,t690,t691,t692,t693,
     & t694,t695,t696,t697,t698,t699,t700,t701,t702,t703,t704,t705,
     & t706,t707,t708,t709,t710,t711,t712,t713,t714,t715,t716,t717,
     & t718,t719,t720,t721,t722,t723,t724,t725,t726,t727,t728,t729,
     & t730,t731,t732,t733,t734,t735,t736,t737,t738,t739,t740,t741,
     & t742,t743,t744,t745,t746,t747,t748,t749,t750,t751,t752,t753,
     & t754,t755,t756,t757,t758,t759,t760,t761,t762,t763,t764,t765,
     & t766,t767,t768,t769,t770,t771,t772,t773,t774,t775,t776,t777,
     & t778,t779,t780,t781,t782,t783,t784,t785,t786,t787,t788,t789,
     & t790,t791,t792,t793,t794,t795,t796,t797,t798,t799,t800,t801,
     & t802,t803,t804,t805,t806,t807,t808,t809,t810,t811,t812,t813,
     & t814,t815,t816,t817,t818,t819,t820,t821,t822,t823,t824,t825,
     & t826,t827,t828,t829,t830,t831,t832,t833,t834,t835,t836,t837,
     & t838,t839,t840,t841,t842,t843,t844,t845,t846,t847,t848,t849,
     & t850,t851,t852,t853,t854,t855,t856,t857,t858,t859,t860,t861,
     & t862,t863,t864,t865,t866,t867,t868,t869,t870,t871,t872,t873,
     & t874,t875,t876,t877,t878,t879,t880,t881,t882,t883,t884,t885,
     & t886,t887,t888,t889,t890,t891,t892,t893,t894,t895,t896,t897,
     & t898,t899,t900,t901,t902,t903,t904,t905,t906,t907,t908,t909,
     & t910,t911,t912,t913,t914,t915,t916,t917,t918,t919,t920,t921,
     & t922,t923,t924,t925,t926,t927,t928,t929,t930,t931,t932,t933,
     & t934,t935,t936,t937,t938,t939,t940,t941,t942,t943,t944,t945,
     & t946,t947,t948,t949,t950,t951,t952,t953,t954,t955,t956,t957,
     & t958,t959,t960,t961,t962,t963,t964,t965,t966,t967,t968,t969,
     & t970,t971,t972,t973,t974,t975,t976,t977,t978,t979,t980,t981,
     & t982,t983,t984,t985,t986,t987,t988,t989,t990,t991,t992,t993,
     & t994,t995,t996,t997,t998,t999,t1000,t1001,t1002,t1003,t1004,
     & t1005,t1006,t1007,t1008,t1009,t1010,t1011,t1012,t1013,t1014,
     & t1015,t1016,t1017,t1018,t1019,t1020,t1021,t1022,t1023,t1024,
     & t1025,t1026,t1027,t1028,t1029,t1030,t1031,t1032,t1033,t1034,
     & t1035,t1036,t1037,t1038,t1039,t1040,t1041,t1042,t1043,t1044,
     & t1045,t1046,t1047,t1048,t1049,t1050,t1051,t1052,t1053,t1054,
     & t1055,t1056,t1057,t1058,t1059,t1060,t1061,t1062,t1063,t1064,
     & t1065,t1066,t1067,t1068,t1069,t1070,t1071,t1072,t1073,t1074,
     & t1075,t1076,t1077,t1078,t1079,t1080,t1081,t1082,t1083,t1084,
     & t1085,t1086,t1087,t1088,t1089,t1090,t1091,t1092,t1093,t1094,
     & t1095,t1096,t1097,t1098,t1099,t1100,t1101,t1102,t1103,t1104,
     & t1105,t1106,t1107,t1108,t1109,t1110,t1111,t1112,t1113,t1114,
     & t1115,t1116,t1117,t1118,t1119,t1120,t1121,t1122,t1123,t1124,
     & t1125,t1126,t1127,t1128,t1129,t1130,t1131,t1132,t1133,t1134,
     & t1135,t1136,t1137,t1138,t1139,t1140,t1141,t1142,t1143,t1144,
     & t1145,t1146,t1147,t1148,t1149,t1150,t1151,t1152,t1153,t1154,
     & t1155,t1156,t1157,t1158,t1159,t1160,t1161,t1162,t1163,t1164,
     & t1165,t1166,t1167,t1168,t1169,t1170,t1171,t1172,t1173,t1174,
     & t1175,t1176,t1177,t1178,t1179,t1180,t1181,t1182,t1183,t1184,
     & t1185,t1186,t1187,t1188,t1189,t1190,t1191,t1192,t1193,t1194,
     & t1195,t1196,t1197,t1198,t1199,t1200,t1201,t1202,t1203,t1204,
     & t1205,t1206,t1207,t1208,t1209,t1210,t1211,t1212,t1213,t1214,
     & t1215,t1216,t1217,t1218,t1219,t1220,t1221,t1222,t1223,t1224,
     & t1225,t1226,t1227,t1228,t1229,t1230,t1231,t1232,t1233,t1234,
     & t1235,t1236,t1237,t1238,t1239,t1240,t1241,t1242,t1243,t1244,
     & t1245,t1246,t1247,t1248,t1249,t1250,t1251,t1252,t1253,t1254,
     & t1255,t1256,t1257,t1258,t1259,t1260,t1261,t1262,t1263,t1264,
     & t1265,t1266,t1267,t1268,t1269,t1270,t1271,t1272,t1273,t1274,
     & t1275,t1276,t1277,t1278,t1279,t1280,t1281,t1282,t1283,t1284,
     & t1285,t1286,t1287,t1288,t1289,t1290,t1291,t1292,t1293,t1294,
     & t1295,t1296,t1297,t1298,t1299,t1300,t1301,t1302,t1303,t1304,
     & t1305,t1306,t1307,t1308,t1309,t1310,t1311,t1312,t1313,t1314,
     & t1315,t1316,t1317,t1318,t1319,t1320,t1321,t1322,t1323,t1324,
     & t1325,t1326,t1327,t1328,t1329,t1330,t1331,t1332,t1333,t1334,
     & t1335,t1336,t1337,t1338,t1339,t1340,t1341,t1342,t1343,t1344,
     & t1345,t1346,t1347,t1348,t1349,t1350,t1351,t1352,t1353,t1354,
     & t1355,t1356,t1357,t1358,t1359,t1360,t1361,t1362,t1363,t1364,
     & t1365,t1366,t1367,t1368,t1369,t1370,t1371,t1372,t1373,t1374,
     & t1375,t1376,t1377,t1378,t1379,t1380,t1381,t1382,t1383,t1384,
     & t1385,t1386,t1387,t1388,t1389,t1390,t1391,t1392,t1393,t1394,
     & t1395,t1396,t1397,t1398,t1399,t1400,t1401,t1402,t1403,t1404,
     & t1405,t1406,t1407,t1408,t1409,t1410,t1411,t1412,t1413,t1414,
     & t1415,t1416,t1417,t1418,t1419,t1420,t1421,t1422,t1423,t1424,
     & t1425,t1426,t1427,t1428,t1429,t1430,t1431,t1432,t1433,t1434,
     & t1435,t1436,t1437,t1438,t1439,t1440,t1441,t1442,t1443,t1444,
     & t1445,t1446,t1447,t1448,t1449,t1450,t1451,t1452,t1453,t1454,
     & t1455,t1456,t1457,t1458,t1459,t1460,t1461,t1462,t1463,t1464,
     & t1465,t1466,t1467,t1468,t1469,t1470,t1471,t1472,t1473,t1474,
     & t1475,t1476,t1477,t1478,t1479,t1480,t1481,t1482,t1483,t1484,
     & t1485,t1486,t1487,t1488,t1489,t1490,t1491,t1492,t1493,t1494,
     & t1495,t1496,t1497,t1498,t1499,t1500,t1501,t1502,t1503,t1504,
     & t1505,t1506,t1507,t1508,t1509,t1510,t1511,t1512,t1513,t1514,
     & t1515,t1516,t1517,t1518,t1519,t1520,t1521,t1522,t1523,t1524,
     & t1525,t1526,t1527,t1528,t1529,t1530,t1531,t1532,t1533,t1534,
     & t1535,t1536,t1537,t1538,t1539,t1540,t1541,t1542,t1543,t1544,
     & t1545,t1546,t1547,t1548,t1549,t1550,t1551,t1552,t1553,t1554,
     & t1555,t1556,t1557,t1558,t1559,t1560,t1561,t1562,t1563,t1564,
     & t1565,t1566,t1567,t1568,t1569,t1570,t1571,t1572,t1573,t1574,
     & t1575,t1576,t1577,t1578,t1579,t1580,t1581,t1582,t1583,t1584,
     & t1585,t1586,t1587,t1588,t1589,t1590,t1591,t1592,t1593,t1594,
     & t1595,t1596,t1597,t1598,t1599,t1600,t1601,t1602,t1603,t1604,
     & t1605,t1606,t1607,t1608,t1609,t1610,t1611,t1612,t1613,t1614,
     & t1615,t1616,t1617,t1618,t1619,t1620,t1621,t1622,t1623,t1624,
     & t1625,t1626,t1627,t1628,t1629,t1630,t1631,t1632,t1633,t1634,
     & t1635,t1636,t1637,t1638,t1639,t1640,t1641,t1642,t1643,t1644,
     & t1645,t1646,t1647,t1648,t1649,t1650,t1651,t1652,t1653,t1654,
     & t1655,t1656,t1657,t1658,t1659,t1660,t1661,t1662,t1663,t1664,
     & t1665,t1666,t1667,t1668,t1669,t1670,t1671,t1672,t1673,t1674,
     & t1675,t1676,t1677,t1678,t1679,t1680,t1681,t1682,t1683,t1684,
     & t1685,t1686,t1687,t1688,t1689,t1690,t1691,t1692,t1693,t1694,
     & t1695,t1696,t1697,t1698,t1699,t1700,t1701,t1702,t1703,t1704,
     & t1705,t1706,t1707,t1708,t1709,t1710,t1711,t1712,t1713,t1714,
     & t1715,t1716,t1717,t1718,t1719,t1720,t1721,t1722,t1723,t1724,
     & t1725,t1726,t1727,t1728,t1729,t1730,t1731,t1732,t1733,t1734,
     & t1735,t1736,t1737,t1738,t1739,t1740,t1741,t1742,t1743,t1744,
     & t1745,t1746,t1747,t1748,t1749,t1750,t1751,t1752,t1753,t1754,
     & t1755,t1756,t1757,t1758,t1759,t1760,t1761,t1762,t1763,t1764,
     & t1765,t1766,t1767,t1768,t1769,t1770,t1771,t1772,t1773,t1774,
     & t1775,t1776,t1777,t1778,t1779,t1780,t1781,t1782,t1783,t1784,
     & t1785,t1786,t1787,t1788,t1789,t1790,t1791,t1792,t1793,t1794,
     & t1795,t1796,t1797,t1798,t1799,t1800,t1801,t1802,t1803,t1804,
     & t1805,t1806,t1807,t1808,t1809,t1810,t1811,t1812,t1813,t1814,
     & t1815,t1816,t1817,t1818,t1819,t1820,t1821,t1822,t1823,t1824,
     & t1825,t1826,t1827,t1828,t1829,t1830,t1831,t1832,t1833,t1834,
     & t1835,t1836,t1837,t1838,t1839,t1840,t1841,t1842,t1843,t1844,
     & t1845,t1846,t1847,t1848,t1849,t1850,t1851,t1852,t1853,t1854,
     & t1855,t1856,t1857,t1858,t1859,t1860,t1861,t1862,t1863,t1864,
     & t1865,t1866,t1867,t1868,t1869,t1870,t1871,t1872,t1873,t1874,
     & t1875,t1876,t1877,t1878,t1879,t1880,t1881,t1882,t1883,t1884,
     & t1885,t1886,t1887,t1888,t1889,t1890,t1891,t1892,t1893,t1894,
     & t1895,t1896,t1897,t1898,t1899,t1900,t1901,t1902,t1903,t1904,
     & t1905,t1906,t1907,t1908,t1909,t1910,t1911,t1912,t1913,t1914,
     & t1915,t1916,t1917,t1918,t1919,t1920,t1921,t1922,t1923,t1924,
     & t1925,t1926,t1927,t1928,t1929,t1930,t1931,t1932,t1933,t1934,
     & t1935,t1936,t1937,t1938,t1939,t1940,t1941,t1942,t1943,t1944,
     & t1945,t1946,t1947,t1948,t1949,t1950,t1951,t1952,t1953,t1954,
     & t1955,t1956,t1957,t1958,t1959,t1960,t1961,t1962,t1963,t1964,
     & t1965,t1966,t1967,t1968,t1969,t1970,t1971,t1972,t1973,t1974,
     & t1975,t1976,t1977,t1978,t1979,t1980,t1981,t1982,t1983,t1984,
     & t1985,t1986,t1987,t1988,t1989,t1990,t1991,t1992,t1993,t1994,
     & t1995,t1996,t1997,t1998,t1999,t2000,t2001,t2002,t2003,t2004,
     & t2005,t2006,t2007,t2008,t2009,t2010,t2011,t2012,t2013,t2014,
     & t2015,t2016,t2017,t2018,t2019,t2020,t2021,t2022,t2023,t2024,
     & t2025,t2026,t2027,t2028,t2029,t2030,t2031,t2032,t2033,t2034,
     & t2035,t2036,t2037,t2038,t2039,t2040,t2041,t2042,t2043,t2044,
     & t2045,t2046,t2047,t2048,t2049,t2050,t2051,t2052,t2053,t2054,
     & t2055,t2056,t2057,t2058,t2059,t2060,t2061,t2062,t2063,t2064,
     & t2065,t2066,t2067,t2068,t2069,t2070,t2071,t2072,t2073,t2074,
     & t2075,t2076,t2077,t2078,t2079,t2080,t2081,t2082,t2083,t2084,
     & t2085,t2086,t2087,t2088,t2089,t2090,t2091,t2092,t2093,t2094,
     & t2095,t2096,t2097,t2098,t2099,t2100,t2101,t2102,t2103,t2104,
     & t2105,t2106,t2107,t2108,t2109,t2110,t2111,t2112,t2113,t2114,
     & t2115,t2116,t2117,t2118,t2119,t2120,t2121,t2122,t2123,t2124,
     & t2125,t2126,t2127,t2128,t2129,t2130,t2131,t2132,t2133,t2134,
     & t2135,t2136,t2137,t2138,t2139,t2140,t2141,t2142,t2143,t2144,
     & t2145,t2146,t2147,t2148,t2149,t2150,t2151,t2152,t2153,t2154,
     & t2155,t2156,t2157,t2158,t2159,t2160,t2161,t2162,t2163,t2164,
     & t2165,t2166,t2167,t2168,t2169,t2170,t2171,t2172,t2173,t2174,
     & t2175,t2176,t2177,t2178,t2179,t2180,t2181,t2182,t2183,t2184,
     & t2185,t2186,t2187,t2188,t2189,t2190,t2191,t2192,t2193,t2194,
     & t2195,t2196,t2197,t2198,t2199,t2200,t2201,t2202,t2203,t2204,
     & t2205,t2206,t2207,t2208,t2209,t2210,t2211,t2212,t2213,t2214,
     & t2215,t2216,t2217,t2218,t2219,t2220,t2221,t2222,t2223,t2224,
     & t2225,t2226,t2227,t2228,t2229,t2230,t2231,t2232,t2233,t2234,
     & t2235,t2236,t2237,t2238,t2239,t2240,t2241,t2242,t2243,t2244,
     & t2245,t2246,t2247,t2248,t2249,t2250,t2251,t2252,t2253,t2254,
     & t2255,t2256,t2257,t2258,t2259,t2260,t2261,t2262,t2263,t2264,
     & t2265,t2266,t2267,t2268,t2269,t2270,t2271,t2272,t2273,t2274,
     & t2275,t2276,t2277,t2278,t2279,t2280,t2281,t2282,t2283,t2284,
     & t2285,t2286,t2287,t2288,t2289,t2290,t2291,t2292,t2293,t2294,
     & t2295,t2296,t2297,t2298,t2299,t2300,t2301,t2302,t2303,t2304,
     & t2305,t2306,t2307,t2308,t2309,t2310,t2311,t2312,t2313,t2314,
     & t2315,t2316,t2317,t2318,t2319,t2320,t2321,t2322,t2323,t2324,
     & t2325,t2326,t2327,t2328,t2329,t2330,t2331,t2332,t2333,t2334,
     & t2335,t2336,t2337,t2338,t2339,t2340,t2341,t2342,t2343,t2344,
     & t2345,t2346,t2347,t2348,t2349,t2350,t2351,t2352,t2353,t2354,
     & t2355,t2356,t2357,t2358,t2359,t2360,t2361,t2362,t2363,t2364,
     & t2365,t2366,t2367,t2368,t2369,t2370,t2371,t2372,t2373,t2374,
     & t2375,t2376,t2377,t2378,t2379,t2380,t2381,t2382,t2383,t2384,
     & t2385,t2386,t2387,t2388,t2389,t2390,t2391,t2392,t2393,t2394,
     & t2395,t2396,t2397,t2398,t2399,t2400,t2401,t2402,t2403,t2404,
     & t2405,t2406,t2407,t2408,t2409,t2410,t2411,t2412,t2413,t2414,
     & t2415,t2416,t2417,t2418,t2419,t2420,t2421,t2422,t2423,t2424,
     & t2425,t2426,t2427,t2428,t2429,t2430,t2431,t2432,t2433,t2434,
     & t2435,t2436,t2437,t2438,t2439,t2440,t2441,t2442,t2443,t2444,
     & t2445,t2446,t2447,t2448,t2449,t2450,t2451,t2452,t2453,t2454,
     & t2455,t2456,t2457,t2458,t2459,t2460,t2461,t2462,t2463,t2464,
     & t2465,t2466,t2467,t2468,t2469,t2470,t2471,t2472,t2473,t2474,
     & t2475,t2476,t2477,t2478,t2479,t2480,t2481,t2482,t2483,t2484,
     & t2485,t2486,t2487,t2488,t2489,t2490,t2491,t2492,t2493,t2494,
     & t2495,t2496,t2497,t2498,t2499,t2500,t2501,t2502,t2503,t2504,
     & t2505,t2506,t2507,t2508,t2509,t2510,t2511,t2512,t2513,t2514,
     & t2515,t2516,t2517,t2518,t2519,t2520,t2521,t2522,t2523,t2524,
     & t2525,t2526,t2527,t2528,t2529,t2530,t2531,t2532,t2533,t2534,
     & t2535,t2536,t2537,t2538,t2539,t2540,t2541,t2542,t2543,t2544,
     & t2545,t2546,t2547,t2548,t2549,t2550,t2551,t2552,t2553,t2554,
     & t2555,t2556,t2557,t2558,t2559,t2560,t2561,t2562,t2563,t2564,
     & t2565,t2566,t2567,t2568,t2569,t2570,t2571,t2572,t2573,t2574,
     & t2575,t2576,t2577,t2578,t2579,t2580,t2581,t2582,t2583,t2584,
     & t2585,t2586,t2587,t2588,t2589,t2590,t2591,t2592,t2593,t2594,
     & t2595,t2596,t2597,t2598,t2599,t2600,t2601,t2602,t2603,t2604,
     & t2605,t2606,t2607,t2608,t2609,t2610,t2611,t2612,t2613,t2614,
     & t2615,t2616,t2617,t2618,t2619,t2620,t2621,t2622,t2623,t2624,
     & t2625,t2626,t2627,t2628,t2629,t2630,t2631,t2632,t2633,t2634,
     & t2635,t2636,t2637,t2638,t2639,t2640,t2641,t2642,t2643,t2644,
     & t2645,t2646,t2647,t2648,t2649,t2650,t2651,t2652,t2653,t2654,
     & t2655,t2656,t2657,t2658,t2659,t2660,t2661,t2662,t2663,t2664,
     & t2665,t2666,t2667,t2668,t2669,t2670,t2671,t2672,t2673,t2674,
     & t2675,t2676,t2677,t2678,t2679,t2680,t2681,t2682,t2683,t2684,
     & t2685,t2686,t2687,t2688,t2689,t2690,t2691,t2692,t2693,t2694,
     & t2695,t2696,t2697,t2698,t2699,t2700,t2701,t2702,t2703,t2704,
     & t2705,t2706,t2707,t2708,t2709,t2710,t2711,t2712,t2713,t2714,
     & t2715,t2716,t2717,t2718,t2719,t2720,t2721,t2722,t2723,t2724,
     & t2725,t2726,t2727,t2728,t2729,t2730,t2731,t2732,t2733,t2734,
     & t2735,t2736,t2737,t2738,t2739,t2740,t2741,t2742,t2743,t2744,
     & t2745,t2746,t2747,t2748,t2749,t2750,t2751,t2752,t2753,t2754,
     & t2755,t2756,t2757,t2758,t2759,t2760,t2761,t2762,t2763,t2764,
     & t2765,t2766,t2767,t2768,t2769,t2770,t2771,t2772,t2773,t2774,
     & t2775,t2776,t2777,t2778,t2779,t2780,t2781,t2782,t2783,t2784,
     & t2785,t2786,t2787,t2788,t2789,t2790,t2791,t2792,t2793,t2794,
     & t2795,t2796,t2797,t2798,t2799,t2800,t2801,t2802,t2803,t2804,
     & t2805,t2806,t2807,t2808,t2809,t2810,t2811,t2812,t2813,t2814,
     & t2815,t2816,t2817,t2818,t2819,t2820,t2821,t2822,t2823,t2824,
     & t2825,t2826,t2827,t2828,t2829,t2830,t2831,t2832,t2833,t2834,
     & t2835,t2836,t2837,t2838,t2839,t2840,t2841,t2842,t2843,t2844,
     & t2845,t2846,t2847,t2848,t2849,t2850,t2851,t2852,t2853,t2854,
     & t2855,t2856,t2857,t2858,t2859,t2860,t2861,t2862,t2863,t2864,
     & t2865,t2866,t2867,t2868,t2869,t2870,t2871,t2872,t2873,t2874,
     & t2875,t2876,t2877,t2878,t2879,t2880,t2881,t2882,t2883,t2884,
     & t2885,t2886,t2887,t2888,t2889,t2890,t2891,t2892,t2893,t2894,
     & t2895,t2896,t2897,t2898,t2899,t2900,t2901,t2902,t2903,t2904,
     & t2905,t2906,t2907,t2908,t2909,t2910,t2911,t2912,t2913,t2914,
     & t2915,t2916,t2917,t2918,t2919,t2920,t2921,t2922,t2923,t2924,
     & t2925,t2926,t2927,t2928,t2929,t2930,t2931,t2932,t2933,t2934,
     & t2935,t2936,t2937,t2938,t2939,t2940,t2941,t2942,t2943,t2944,
     & t2945,t2946,t2947,t2948,t2949,t2950,t2951,t2952,t2953,t2954,
     & t2955,t2956,t2957,t2958,t2959,t2960,t2961,t2962,t2963,t2964,
     & t2965,t2966,t2967,t2968,t2969,t2970,t2971,t2972,t2973,t2974,
     & t2975,t2976,t2977,t2978,t2979,t2980,t2981,t2982,t2983,t2984,
     & t2985,t2986,t2987,t2988,t2989,t2990,t2991,t2992,t2993,t2994,
     & t2995,t2996,t2997,t2998,t2999,t3000
        real ajrx,ajrxr,ajrxs,ajrxt,ajrxrr,ajrxrs,ajrxss,ajrxrt,ajrxst,
     & ajrxtt,ajrxrrr,ajrxrrs,ajrxrss,ajrxsss,ajrxrrt,ajrxrst,ajrxsst,
     & ajrxrtt,ajrxstt,ajrxttt,ajrxrrrr,ajrxrrrs,ajrxrrss,ajrxrsss,
     & ajrxssss,ajrxrrrt,ajrxrrst,ajrxrsst,ajrxssst,ajrxrrtt,ajrxrstt,
     & ajrxsstt,ajrxrttt,ajrxsttt,ajrxtttt,ajrxrrrrr,ajrxrrrrs,
     & ajrxrrrss,ajrxrrsss,ajrxrssss,ajrxsssss,ajrxrrrrt,ajrxrrrst,
     & ajrxrrsst,ajrxrssst,ajrxsssst,ajrxrrrtt,ajrxrrstt,ajrxrsstt,
     & ajrxssstt,ajrxrrttt,ajrxrsttt,ajrxssttt,ajrxrtttt,ajrxstttt,
     & ajrxttttt,ajrxrrrrrr,ajrxrrrrrs,ajrxrrrrss,ajrxrrrsss,
     & ajrxrrssss,ajrxrsssss,ajrxssssss,ajrxrrrrrt,ajrxrrrrst,
     & ajrxrrrsst,ajrxrrssst,ajrxrsssst,ajrxssssst,ajrxrrrrtt,
     & ajrxrrrstt,ajrxrrsstt,ajrxrssstt,ajrxsssstt,ajrxrrrttt,
     & ajrxrrsttt,ajrxrssttt,ajrxsssttt,ajrxrrtttt,ajrxrstttt,
     & ajrxsstttt,ajrxrttttt,ajrxsttttt,ajrxtttttt
        real ajsx,ajsxr,ajsxs,ajsxt,ajsxrr,ajsxrs,ajsxss,ajsxrt,ajsxst,
     & ajsxtt,ajsxrrr,ajsxrrs,ajsxrss,ajsxsss,ajsxrrt,ajsxrst,ajsxsst,
     & ajsxrtt,ajsxstt,ajsxttt,ajsxrrrr,ajsxrrrs,ajsxrrss,ajsxrsss,
     & ajsxssss,ajsxrrrt,ajsxrrst,ajsxrsst,ajsxssst,ajsxrrtt,ajsxrstt,
     & ajsxsstt,ajsxrttt,ajsxsttt,ajsxtttt,ajsxrrrrr,ajsxrrrrs,
     & ajsxrrrss,ajsxrrsss,ajsxrssss,ajsxsssss,ajsxrrrrt,ajsxrrrst,
     & ajsxrrsst,ajsxrssst,ajsxsssst,ajsxrrrtt,ajsxrrstt,ajsxrsstt,
     & ajsxssstt,ajsxrrttt,ajsxrsttt,ajsxssttt,ajsxrtttt,ajsxstttt,
     & ajsxttttt,ajsxrrrrrr,ajsxrrrrrs,ajsxrrrrss,ajsxrrrsss,
     & ajsxrrssss,ajsxrsssss,ajsxssssss,ajsxrrrrrt,ajsxrrrrst,
     & ajsxrrrsst,ajsxrrssst,ajsxrsssst,ajsxssssst,ajsxrrrrtt,
     & ajsxrrrstt,ajsxrrsstt,ajsxrssstt,ajsxsssstt,ajsxrrrttt,
     & ajsxrrsttt,ajsxrssttt,ajsxsssttt,ajsxrrtttt,ajsxrstttt,
     & ajsxsstttt,ajsxrttttt,ajsxsttttt,ajsxtttttt
        real ajry,ajryr,ajrys,ajryt,ajryrr,ajryrs,ajryss,ajryrt,ajryst,
     & ajrytt,ajryrrr,ajryrrs,ajryrss,ajrysss,ajryrrt,ajryrst,ajrysst,
     & ajryrtt,ajrystt,ajryttt,ajryrrrr,ajryrrrs,ajryrrss,ajryrsss,
     & ajryssss,ajryrrrt,ajryrrst,ajryrsst,ajryssst,ajryrrtt,ajryrstt,
     & ajrysstt,ajryrttt,ajrysttt,ajrytttt,ajryrrrrr,ajryrrrrs,
     & ajryrrrss,ajryrrsss,ajryrssss,ajrysssss,ajryrrrrt,ajryrrrst,
     & ajryrrsst,ajryrssst,ajrysssst,ajryrrrtt,ajryrrstt,ajryrsstt,
     & ajryssstt,ajryrrttt,ajryrsttt,ajryssttt,ajryrtttt,ajrystttt,
     & ajryttttt,ajryrrrrrr,ajryrrrrrs,ajryrrrrss,ajryrrrsss,
     & ajryrrssss,ajryrsssss,ajryssssss,ajryrrrrrt,ajryrrrrst,
     & ajryrrrsst,ajryrrssst,ajryrsssst,ajryssssst,ajryrrrrtt,
     & ajryrrrstt,ajryrrsstt,ajryrssstt,ajrysssstt,ajryrrrttt,
     & ajryrrsttt,ajryrssttt,ajrysssttt,ajryrrtttt,ajryrstttt,
     & ajrysstttt,ajryrttttt,ajrysttttt,ajrytttttt
        real ajsy,ajsyr,ajsys,ajsyt,ajsyrr,ajsyrs,ajsyss,ajsyrt,ajsyst,
     & ajsytt,ajsyrrr,ajsyrrs,ajsyrss,ajsysss,ajsyrrt,ajsyrst,ajsysst,
     & ajsyrtt,ajsystt,ajsyttt,ajsyrrrr,ajsyrrrs,ajsyrrss,ajsyrsss,
     & ajsyssss,ajsyrrrt,ajsyrrst,ajsyrsst,ajsyssst,ajsyrrtt,ajsyrstt,
     & ajsysstt,ajsyrttt,ajsysttt,ajsytttt,ajsyrrrrr,ajsyrrrrs,
     & ajsyrrrss,ajsyrrsss,ajsyrssss,ajsysssss,ajsyrrrrt,ajsyrrrst,
     & ajsyrrsst,ajsyrssst,ajsysssst,ajsyrrrtt,ajsyrrstt,ajsyrsstt,
     & ajsyssstt,ajsyrrttt,ajsyrsttt,ajsyssttt,ajsyrtttt,ajsystttt,
     & ajsyttttt,ajsyrrrrrr,ajsyrrrrrs,ajsyrrrrss,ajsyrrrsss,
     & ajsyrrssss,ajsyrsssss,ajsyssssss,ajsyrrrrrt,ajsyrrrrst,
     & ajsyrrrsst,ajsyrrssst,ajsyrsssst,ajsyssssst,ajsyrrrrtt,
     & ajsyrrrstt,ajsyrrsstt,ajsyrssstt,ajsysssstt,ajsyrrrttt,
     & ajsyrrsttt,ajsyrssttt,ajsysssttt,ajsyrrtttt,ajsyrstttt,
     & ajsysstttt,ajsyrttttt,ajsysttttt,ajsytttttt
        real ajrxx,ajrxy,ajrxz,ajrxxx,ajrxxy,ajrxyy,ajrxxz,ajrxyz,
     & ajrxzz,ajrxxxx,ajrxxxy,ajrxxyy,ajrxyyy,ajrxxxz,ajrxxyz,ajrxyyz,
     & ajrxxzz,ajrxyzz,ajrxzzz,ajrxxxxx,ajrxxxxy,ajrxxxyy,ajrxxyyy,
     & ajrxyyyy,ajrxxxxz,ajrxxxyz,ajrxxyyz,ajrxyyyz,ajrxxxzz,ajrxxyzz,
     & ajrxyyzz,ajrxxzzz,ajrxyzzz,ajrxzzzz,ajrxxxxxx,ajrxxxxxy,
     & ajrxxxxyy,ajrxxxyyy,ajrxxyyyy,ajrxyyyyy,ajrxxxxxz,ajrxxxxyz,
     & ajrxxxyyz,ajrxxyyyz,ajrxyyyyz,ajrxxxxzz,ajrxxxyzz,ajrxxyyzz,
     & ajrxyyyzz,ajrxxxzzz,ajrxxyzzz,ajrxyyzzz,ajrxxzzzz,ajrxyzzzz,
     & ajrxzzzzz,ajrxxxxxxx,ajrxxxxxxy,ajrxxxxxyy,ajrxxxxyyy,
     & ajrxxxyyyy,ajrxxyyyyy,ajrxyyyyyy,ajrxxxxxxz,ajrxxxxxyz,
     & ajrxxxxyyz,ajrxxxyyyz,ajrxxyyyyz,ajrxyyyyyz,ajrxxxxxzz,
     & ajrxxxxyzz,ajrxxxyyzz,ajrxxyyyzz,ajrxyyyyzz,ajrxxxxzzz,
     & ajrxxxyzzz,ajrxxyyzzz,ajrxyyyzzz,ajrxxxzzzz,ajrxxyzzzz,
     & ajrxyyzzzz,ajrxxzzzzz,ajrxyzzzzz,ajrxzzzzzz
        real ajsxx,ajsxy,ajsxz,ajsxxx,ajsxxy,ajsxyy,ajsxxz,ajsxyz,
     & ajsxzz,ajsxxxx,ajsxxxy,ajsxxyy,ajsxyyy,ajsxxxz,ajsxxyz,ajsxyyz,
     & ajsxxzz,ajsxyzz,ajsxzzz,ajsxxxxx,ajsxxxxy,ajsxxxyy,ajsxxyyy,
     & ajsxyyyy,ajsxxxxz,ajsxxxyz,ajsxxyyz,ajsxyyyz,ajsxxxzz,ajsxxyzz,
     & ajsxyyzz,ajsxxzzz,ajsxyzzz,ajsxzzzz,ajsxxxxxx,ajsxxxxxy,
     & ajsxxxxyy,ajsxxxyyy,ajsxxyyyy,ajsxyyyyy,ajsxxxxxz,ajsxxxxyz,
     & ajsxxxyyz,ajsxxyyyz,ajsxyyyyz,ajsxxxxzz,ajsxxxyzz,ajsxxyyzz,
     & ajsxyyyzz,ajsxxxzzz,ajsxxyzzz,ajsxyyzzz,ajsxxzzzz,ajsxyzzzz,
     & ajsxzzzzz,ajsxxxxxxx,ajsxxxxxxy,ajsxxxxxyy,ajsxxxxyyy,
     & ajsxxxyyyy,ajsxxyyyyy,ajsxyyyyyy,ajsxxxxxxz,ajsxxxxxyz,
     & ajsxxxxyyz,ajsxxxyyyz,ajsxxyyyyz,ajsxyyyyyz,ajsxxxxxzz,
     & ajsxxxxyzz,ajsxxxyyzz,ajsxxyyyzz,ajsxyyyyzz,ajsxxxxzzz,
     & ajsxxxyzzz,ajsxxyyzzz,ajsxyyyzzz,ajsxxxzzzz,ajsxxyzzzz,
     & ajsxyyzzzz,ajsxxzzzzz,ajsxyzzzzz,ajsxzzzzzz
        real ajryx,ajryy,ajryz,ajryxx,ajryxy,ajryyy,ajryxz,ajryyz,
     & ajryzz,ajryxxx,ajryxxy,ajryxyy,ajryyyy,ajryxxz,ajryxyz,ajryyyz,
     & ajryxzz,ajryyzz,ajryzzz,ajryxxxx,ajryxxxy,ajryxxyy,ajryxyyy,
     & ajryyyyy,ajryxxxz,ajryxxyz,ajryxyyz,ajryyyyz,ajryxxzz,ajryxyzz,
     & ajryyyzz,ajryxzzz,ajryyzzz,ajryzzzz,ajryxxxxx,ajryxxxxy,
     & ajryxxxyy,ajryxxyyy,ajryxyyyy,ajryyyyyy,ajryxxxxz,ajryxxxyz,
     & ajryxxyyz,ajryxyyyz,ajryyyyyz,ajryxxxzz,ajryxxyzz,ajryxyyzz,
     & ajryyyyzz,ajryxxzzz,ajryxyzzz,ajryyyzzz,ajryxzzzz,ajryyzzzz,
     & ajryzzzzz,ajryxxxxxx,ajryxxxxxy,ajryxxxxyy,ajryxxxyyy,
     & ajryxxyyyy,ajryxyyyyy,ajryyyyyyy,ajryxxxxxz,ajryxxxxyz,
     & ajryxxxyyz,ajryxxyyyz,ajryxyyyyz,ajryyyyyyz,ajryxxxxzz,
     & ajryxxxyzz,ajryxxyyzz,ajryxyyyzz,ajryyyyyzz,ajryxxxzzz,
     & ajryxxyzzz,ajryxyyzzz,ajryyyyzzz,ajryxxzzzz,ajryxyzzzz,
     & ajryyyzzzz,ajryxzzzzz,ajryyzzzzz,ajryzzzzzz
        real ajsyx,ajsyy,ajsyz,ajsyxx,ajsyxy,ajsyyy,ajsyxz,ajsyyz,
     & ajsyzz,ajsyxxx,ajsyxxy,ajsyxyy,ajsyyyy,ajsyxxz,ajsyxyz,ajsyyyz,
     & ajsyxzz,ajsyyzz,ajsyzzz,ajsyxxxx,ajsyxxxy,ajsyxxyy,ajsyxyyy,
     & ajsyyyyy,ajsyxxxz,ajsyxxyz,ajsyxyyz,ajsyyyyz,ajsyxxzz,ajsyxyzz,
     & ajsyyyzz,ajsyxzzz,ajsyyzzz,ajsyzzzz,ajsyxxxxx,ajsyxxxxy,
     & ajsyxxxyy,ajsyxxyyy,ajsyxyyyy,ajsyyyyyy,ajsyxxxxz,ajsyxxxyz,
     & ajsyxxyyz,ajsyxyyyz,ajsyyyyyz,ajsyxxxzz,ajsyxxyzz,ajsyxyyzz,
     & ajsyyyyzz,ajsyxxzzz,ajsyxyzzz,ajsyyyzzz,ajsyxzzzz,ajsyyzzzz,
     & ajsyzzzzz,ajsyxxxxxx,ajsyxxxxxy,ajsyxxxxyy,ajsyxxxyyy,
     & ajsyxxyyyy,ajsyxyyyyy,ajsyyyyyyy,ajsyxxxxxz,ajsyxxxxyz,
     & ajsyxxxyyz,ajsyxxyyyz,ajsyxyyyyz,ajsyyyyyyz,ajsyxxxxzz,
     & ajsyxxxyzz,ajsyxxyyzz,ajsyxyyyzz,ajsyyyyyzz,ajsyxxxzzz,
     & ajsyxxyzzz,ajsyxyyzzz,ajsyyyyzzz,ajsyxxzzzz,ajsyxyzzzz,
     & ajsyyyzzzz,ajsyxzzzzz,ajsyyzzzzz,ajsyzzzzzz
        real ajrz,ajrzr,ajrzs,ajrzt,ajrzrr,ajrzrs,ajrzss,ajrzrt,ajrzst,
     & ajrztt,ajrzrrr,ajrzrrs,ajrzrss,ajrzsss,ajrzrrt,ajrzrst,ajrzsst,
     & ajrzrtt,ajrzstt,ajrzttt,ajrzrrrr,ajrzrrrs,ajrzrrss,ajrzrsss,
     & ajrzssss,ajrzrrrt,ajrzrrst,ajrzrsst,ajrzssst,ajrzrrtt,ajrzrstt,
     & ajrzsstt,ajrzrttt,ajrzsttt,ajrztttt,ajrzrrrrr,ajrzrrrrs,
     & ajrzrrrss,ajrzrrsss,ajrzrssss,ajrzsssss,ajrzrrrrt,ajrzrrrst,
     & ajrzrrsst,ajrzrssst,ajrzsssst,ajrzrrrtt,ajrzrrstt,ajrzrsstt,
     & ajrzssstt,ajrzrrttt,ajrzrsttt,ajrzssttt,ajrzrtttt,ajrzstttt,
     & ajrzttttt,ajrzrrrrrr,ajrzrrrrrs,ajrzrrrrss,ajrzrrrsss,
     & ajrzrrssss,ajrzrsssss,ajrzssssss,ajrzrrrrrt,ajrzrrrrst,
     & ajrzrrrsst,ajrzrrssst,ajrzrsssst,ajrzssssst,ajrzrrrrtt,
     & ajrzrrrstt,ajrzrrsstt,ajrzrssstt,ajrzsssstt,ajrzrrrttt,
     & ajrzrrsttt,ajrzrssttt,ajrzsssttt,ajrzrrtttt,ajrzrstttt,
     & ajrzsstttt,ajrzrttttt,ajrzsttttt,ajrztttttt
        real ajsz,ajszr,ajszs,ajszt,ajszrr,ajszrs,ajszss,ajszrt,ajszst,
     & ajsztt,ajszrrr,ajszrrs,ajszrss,ajszsss,ajszrrt,ajszrst,ajszsst,
     & ajszrtt,ajszstt,ajszttt,ajszrrrr,ajszrrrs,ajszrrss,ajszrsss,
     & ajszssss,ajszrrrt,ajszrrst,ajszrsst,ajszssst,ajszrrtt,ajszrstt,
     & ajszsstt,ajszrttt,ajszsttt,ajsztttt,ajszrrrrr,ajszrrrrs,
     & ajszrrrss,ajszrrsss,ajszrssss,ajszsssss,ajszrrrrt,ajszrrrst,
     & ajszrrsst,ajszrssst,ajszsssst,ajszrrrtt,ajszrrstt,ajszrsstt,
     & ajszssstt,ajszrrttt,ajszrsttt,ajszssttt,ajszrtttt,ajszstttt,
     & ajszttttt,ajszrrrrrr,ajszrrrrrs,ajszrrrrss,ajszrrrsss,
     & ajszrrssss,ajszrsssss,ajszssssss,ajszrrrrrt,ajszrrrrst,
     & ajszrrrsst,ajszrrssst,ajszrsssst,ajszssssst,ajszrrrrtt,
     & ajszrrrstt,ajszrrsstt,ajszrssstt,ajszsssstt,ajszrrrttt,
     & ajszrrsttt,ajszrssttt,ajszsssttt,ajszrrtttt,ajszrstttt,
     & ajszsstttt,ajszrttttt,ajszsttttt,ajsztttttt
        real ajtx,ajtxr,ajtxs,ajtxt,ajtxrr,ajtxrs,ajtxss,ajtxrt,ajtxst,
     & ajtxtt,ajtxrrr,ajtxrrs,ajtxrss,ajtxsss,ajtxrrt,ajtxrst,ajtxsst,
     & ajtxrtt,ajtxstt,ajtxttt,ajtxrrrr,ajtxrrrs,ajtxrrss,ajtxrsss,
     & ajtxssss,ajtxrrrt,ajtxrrst,ajtxrsst,ajtxssst,ajtxrrtt,ajtxrstt,
     & ajtxsstt,ajtxrttt,ajtxsttt,ajtxtttt,ajtxrrrrr,ajtxrrrrs,
     & ajtxrrrss,ajtxrrsss,ajtxrssss,ajtxsssss,ajtxrrrrt,ajtxrrrst,
     & ajtxrrsst,ajtxrssst,ajtxsssst,ajtxrrrtt,ajtxrrstt,ajtxrsstt,
     & ajtxssstt,ajtxrrttt,ajtxrsttt,ajtxssttt,ajtxrtttt,ajtxstttt,
     & ajtxttttt,ajtxrrrrrr,ajtxrrrrrs,ajtxrrrrss,ajtxrrrsss,
     & ajtxrrssss,ajtxrsssss,ajtxssssss,ajtxrrrrrt,ajtxrrrrst,
     & ajtxrrrsst,ajtxrrssst,ajtxrsssst,ajtxssssst,ajtxrrrrtt,
     & ajtxrrrstt,ajtxrrsstt,ajtxrssstt,ajtxsssstt,ajtxrrrttt,
     & ajtxrrsttt,ajtxrssttt,ajtxsssttt,ajtxrrtttt,ajtxrstttt,
     & ajtxsstttt,ajtxrttttt,ajtxsttttt,ajtxtttttt
        real ajty,ajtyr,ajtys,ajtyt,ajtyrr,ajtyrs,ajtyss,ajtyrt,ajtyst,
     & ajtytt,ajtyrrr,ajtyrrs,ajtyrss,ajtysss,ajtyrrt,ajtyrst,ajtysst,
     & ajtyrtt,ajtystt,ajtyttt,ajtyrrrr,ajtyrrrs,ajtyrrss,ajtyrsss,
     & ajtyssss,ajtyrrrt,ajtyrrst,ajtyrsst,ajtyssst,ajtyrrtt,ajtyrstt,
     & ajtysstt,ajtyrttt,ajtysttt,ajtytttt,ajtyrrrrr,ajtyrrrrs,
     & ajtyrrrss,ajtyrrsss,ajtyrssss,ajtysssss,ajtyrrrrt,ajtyrrrst,
     & ajtyrrsst,ajtyrssst,ajtysssst,ajtyrrrtt,ajtyrrstt,ajtyrsstt,
     & ajtyssstt,ajtyrrttt,ajtyrsttt,ajtyssttt,ajtyrtttt,ajtystttt,
     & ajtyttttt,ajtyrrrrrr,ajtyrrrrrs,ajtyrrrrss,ajtyrrrsss,
     & ajtyrrssss,ajtyrsssss,ajtyssssss,ajtyrrrrrt,ajtyrrrrst,
     & ajtyrrrsst,ajtyrrssst,ajtyrsssst,ajtyssssst,ajtyrrrrtt,
     & ajtyrrrstt,ajtyrrsstt,ajtyrssstt,ajtysssstt,ajtyrrrttt,
     & ajtyrrsttt,ajtyrssttt,ajtysssttt,ajtyrrtttt,ajtyrstttt,
     & ajtysstttt,ajtyrttttt,ajtysttttt,ajtytttttt
        real ajtz,ajtzr,ajtzs,ajtzt,ajtzrr,ajtzrs,ajtzss,ajtzrt,ajtzst,
     & ajtztt,ajtzrrr,ajtzrrs,ajtzrss,ajtzsss,ajtzrrt,ajtzrst,ajtzsst,
     & ajtzrtt,ajtzstt,ajtzttt,ajtzrrrr,ajtzrrrs,ajtzrrss,ajtzrsss,
     & ajtzssss,ajtzrrrt,ajtzrrst,ajtzrsst,ajtzssst,ajtzrrtt,ajtzrstt,
     & ajtzsstt,ajtzrttt,ajtzsttt,ajtztttt,ajtzrrrrr,ajtzrrrrs,
     & ajtzrrrss,ajtzrrsss,ajtzrssss,ajtzsssss,ajtzrrrrt,ajtzrrrst,
     & ajtzrrsst,ajtzrssst,ajtzsssst,ajtzrrrtt,ajtzrrstt,ajtzrsstt,
     & ajtzssstt,ajtzrrttt,ajtzrsttt,ajtzssttt,ajtzrtttt,ajtzstttt,
     & ajtzttttt,ajtzrrrrrr,ajtzrrrrrs,ajtzrrrrss,ajtzrrrsss,
     & ajtzrrssss,ajtzrsssss,ajtzssssss,ajtzrrrrrt,ajtzrrrrst,
     & ajtzrrrsst,ajtzrrssst,ajtzrsssst,ajtzssssst,ajtzrrrrtt,
     & ajtzrrrstt,ajtzrrsstt,ajtzrssstt,ajtzsssstt,ajtzrrrttt,
     & ajtzrrsttt,ajtzrssttt,ajtzsssttt,ajtzrrtttt,ajtzrstttt,
     & ajtzsstttt,ajtzrttttt,ajtzsttttt,ajtztttttt
        real ajrzx,ajrzy,ajrzz,ajrzxx,ajrzxy,ajrzyy,ajrzxz,ajrzyz,
     & ajrzzz,ajrzxxx,ajrzxxy,ajrzxyy,ajrzyyy,ajrzxxz,ajrzxyz,ajrzyyz,
     & ajrzxzz,ajrzyzz,ajrzzzz,ajrzxxxx,ajrzxxxy,ajrzxxyy,ajrzxyyy,
     & ajrzyyyy,ajrzxxxz,ajrzxxyz,ajrzxyyz,ajrzyyyz,ajrzxxzz,ajrzxyzz,
     & ajrzyyzz,ajrzxzzz,ajrzyzzz,ajrzzzzz,ajrzxxxxx,ajrzxxxxy,
     & ajrzxxxyy,ajrzxxyyy,ajrzxyyyy,ajrzyyyyy,ajrzxxxxz,ajrzxxxyz,
     & ajrzxxyyz,ajrzxyyyz,ajrzyyyyz,ajrzxxxzz,ajrzxxyzz,ajrzxyyzz,
     & ajrzyyyzz,ajrzxxzzz,ajrzxyzzz,ajrzyyzzz,ajrzxzzzz,ajrzyzzzz,
     & ajrzzzzzz,ajrzxxxxxx,ajrzxxxxxy,ajrzxxxxyy,ajrzxxxyyy,
     & ajrzxxyyyy,ajrzxyyyyy,ajrzyyyyyy,ajrzxxxxxz,ajrzxxxxyz,
     & ajrzxxxyyz,ajrzxxyyyz,ajrzxyyyyz,ajrzyyyyyz,ajrzxxxxzz,
     & ajrzxxxyzz,ajrzxxyyzz,ajrzxyyyzz,ajrzyyyyzz,ajrzxxxzzz,
     & ajrzxxyzzz,ajrzxyyzzz,ajrzyyyzzz,ajrzxxzzzz,ajrzxyzzzz,
     & ajrzyyzzzz,ajrzxzzzzz,ajrzyzzzzz,ajrzzzzzzz
        real ajszx,ajszy,ajszz,ajszxx,ajszxy,ajszyy,ajszxz,ajszyz,
     & ajszzz,ajszxxx,ajszxxy,ajszxyy,ajszyyy,ajszxxz,ajszxyz,ajszyyz,
     & ajszxzz,ajszyzz,ajszzzz,ajszxxxx,ajszxxxy,ajszxxyy,ajszxyyy,
     & ajszyyyy,ajszxxxz,ajszxxyz,ajszxyyz,ajszyyyz,ajszxxzz,ajszxyzz,
     & ajszyyzz,ajszxzzz,ajszyzzz,ajszzzzz,ajszxxxxx,ajszxxxxy,
     & ajszxxxyy,ajszxxyyy,ajszxyyyy,ajszyyyyy,ajszxxxxz,ajszxxxyz,
     & ajszxxyyz,ajszxyyyz,ajszyyyyz,ajszxxxzz,ajszxxyzz,ajszxyyzz,
     & ajszyyyzz,ajszxxzzz,ajszxyzzz,ajszyyzzz,ajszxzzzz,ajszyzzzz,
     & ajszzzzzz,ajszxxxxxx,ajszxxxxxy,ajszxxxxyy,ajszxxxyyy,
     & ajszxxyyyy,ajszxyyyyy,ajszyyyyyy,ajszxxxxxz,ajszxxxxyz,
     & ajszxxxyyz,ajszxxyyyz,ajszxyyyyz,ajszyyyyyz,ajszxxxxzz,
     & ajszxxxyzz,ajszxxyyzz,ajszxyyyzz,ajszyyyyzz,ajszxxxzzz,
     & ajszxxyzzz,ajszxyyzzz,ajszyyyzzz,ajszxxzzzz,ajszxyzzzz,
     & ajszyyzzzz,ajszxzzzzz,ajszyzzzzz,ajszzzzzzz
        real ajtxx,ajtxy,ajtxz,ajtxxx,ajtxxy,ajtxyy,ajtxxz,ajtxyz,
     & ajtxzz,ajtxxxx,ajtxxxy,ajtxxyy,ajtxyyy,ajtxxxz,ajtxxyz,ajtxyyz,
     & ajtxxzz,ajtxyzz,ajtxzzz,ajtxxxxx,ajtxxxxy,ajtxxxyy,ajtxxyyy,
     & ajtxyyyy,ajtxxxxz,ajtxxxyz,ajtxxyyz,ajtxyyyz,ajtxxxzz,ajtxxyzz,
     & ajtxyyzz,ajtxxzzz,ajtxyzzz,ajtxzzzz,ajtxxxxxx,ajtxxxxxy,
     & ajtxxxxyy,ajtxxxyyy,ajtxxyyyy,ajtxyyyyy,ajtxxxxxz,ajtxxxxyz,
     & ajtxxxyyz,ajtxxyyyz,ajtxyyyyz,ajtxxxxzz,ajtxxxyzz,ajtxxyyzz,
     & ajtxyyyzz,ajtxxxzzz,ajtxxyzzz,ajtxyyzzz,ajtxxzzzz,ajtxyzzzz,
     & ajtxzzzzz,ajtxxxxxxx,ajtxxxxxxy,ajtxxxxxyy,ajtxxxxyyy,
     & ajtxxxyyyy,ajtxxyyyyy,ajtxyyyyyy,ajtxxxxxxz,ajtxxxxxyz,
     & ajtxxxxyyz,ajtxxxyyyz,ajtxxyyyyz,ajtxyyyyyz,ajtxxxxxzz,
     & ajtxxxxyzz,ajtxxxyyzz,ajtxxyyyzz,ajtxyyyyzz,ajtxxxxzzz,
     & ajtxxxyzzz,ajtxxyyzzz,ajtxyyyzzz,ajtxxxzzzz,ajtxxyzzzz,
     & ajtxyyzzzz,ajtxxzzzzz,ajtxyzzzzz,ajtxzzzzzz
        real ajtyx,ajtyy,ajtyz,ajtyxx,ajtyxy,ajtyyy,ajtyxz,ajtyyz,
     & ajtyzz,ajtyxxx,ajtyxxy,ajtyxyy,ajtyyyy,ajtyxxz,ajtyxyz,ajtyyyz,
     & ajtyxzz,ajtyyzz,ajtyzzz,ajtyxxxx,ajtyxxxy,ajtyxxyy,ajtyxyyy,
     & ajtyyyyy,ajtyxxxz,ajtyxxyz,ajtyxyyz,ajtyyyyz,ajtyxxzz,ajtyxyzz,
     & ajtyyyzz,ajtyxzzz,ajtyyzzz,ajtyzzzz,ajtyxxxxx,ajtyxxxxy,
     & ajtyxxxyy,ajtyxxyyy,ajtyxyyyy,ajtyyyyyy,ajtyxxxxz,ajtyxxxyz,
     & ajtyxxyyz,ajtyxyyyz,ajtyyyyyz,ajtyxxxzz,ajtyxxyzz,ajtyxyyzz,
     & ajtyyyyzz,ajtyxxzzz,ajtyxyzzz,ajtyyyzzz,ajtyxzzzz,ajtyyzzzz,
     & ajtyzzzzz,ajtyxxxxxx,ajtyxxxxxy,ajtyxxxxyy,ajtyxxxyyy,
     & ajtyxxyyyy,ajtyxyyyyy,ajtyyyyyyy,ajtyxxxxxz,ajtyxxxxyz,
     & ajtyxxxyyz,ajtyxxyyyz,ajtyxyyyyz,ajtyyyyyyz,ajtyxxxxzz,
     & ajtyxxxyzz,ajtyxxyyzz,ajtyxyyyzz,ajtyyyyyzz,ajtyxxxzzz,
     & ajtyxxyzzz,ajtyxyyzzz,ajtyyyyzzz,ajtyxxzzzz,ajtyxyzzzz,
     & ajtyyyzzzz,ajtyxzzzzz,ajtyyzzzzz,ajtyzzzzzz
        real ajtzx,ajtzy,ajtzz,ajtzxx,ajtzxy,ajtzyy,ajtzxz,ajtzyz,
     & ajtzzz,ajtzxxx,ajtzxxy,ajtzxyy,ajtzyyy,ajtzxxz,ajtzxyz,ajtzyyz,
     & ajtzxzz,ajtzyzz,ajtzzzz,ajtzxxxx,ajtzxxxy,ajtzxxyy,ajtzxyyy,
     & ajtzyyyy,ajtzxxxz,ajtzxxyz,ajtzxyyz,ajtzyyyz,ajtzxxzz,ajtzxyzz,
     & ajtzyyzz,ajtzxzzz,ajtzyzzz,ajtzzzzz,ajtzxxxxx,ajtzxxxxy,
     & ajtzxxxyy,ajtzxxyyy,ajtzxyyyy,ajtzyyyyy,ajtzxxxxz,ajtzxxxyz,
     & ajtzxxyyz,ajtzxyyyz,ajtzyyyyz,ajtzxxxzz,ajtzxxyzz,ajtzxyyzz,
     & ajtzyyyzz,ajtzxxzzz,ajtzxyzzz,ajtzyyzzz,ajtzxzzzz,ajtzyzzzz,
     & ajtzzzzzz,ajtzxxxxxx,ajtzxxxxxy,ajtzxxxxyy,ajtzxxxyyy,
     & ajtzxxyyyy,ajtzxyyyyy,ajtzyyyyyy,ajtzxxxxxz,ajtzxxxxyz,
     & ajtzxxxyyz,ajtzxxyyyz,ajtzxyyyyz,ajtzyyyyyz,ajtzxxxxzz,
     & ajtzxxxyzz,ajtzxxyyzz,ajtzxyyyzz,ajtzyyyyzz,ajtzxxxzzz,
     & ajtzxxyzzz,ajtzxyyzzz,ajtzyyyzzz,ajtzxxzzzz,ajtzxyzzzz,
     & ajtzyyzzzz,ajtzxzzzzz,ajtzyzzzzz,ajtzzzzzzz


      integer m11,m12,m13,m14,m15,
     &        m21,m22,m23,m24,m25,
     &        m31,m32,m33,m34,m35,
     &        m41,m42,m43,m44,m45,
     &        m51,m52,m53,m54,m55
      integer    m111,m211,m311,m411,m511,
     &           m121,m221,m321,m421,m521,
     &           m131,m231,m331,m431,m531,
     &           m141,m241,m341,m441,m541,
     &           m151,m251,m351,m451,m551,
     &           m112,m212,m312,m412,m512,
     &           m122,m222,m322,m422,m522,
     &           m132,m232,m332,m432,m532,
     &           m142,m242,m342,m442,m542,
     &           m152,m252,m352,m452,m552,
     &           m113,m213,m313,m413,m513,
     &           m123,m223,m323,m423,m523,
     &           m133,m233,m333,m433,m533,
     &           m143,m243,m343,m443,m543,
     &           m153,m253,m353,m453,m553,
     &           m114,m214,m314,m414,m514,
     &           m124,m224,m324,m424,m524,
     &           m134,m234,m334,m434,m534,
     &           m144,m244,m344,m444,m544,
     &           m154,m254,m354,m454,m554,
     &           m115,m215,m315,m415,m515,
     &           m125,m225,m325,m425,m525,
     &           m135,m235,m335,m435,m535,
     &           m145,m245,m345,m445,m545,
     &           m155,m255,m355,m455,m555

      integer general, sparse, constantCoefficients,
     &   sparseConstantCoefficients,sparseVariableCoefficients,
     &   variableCoefficients
      parameter( general=0,
     &           sparse=1,
     &           constantCoefficients=2,
     &           sparseConstantCoefficients=3,
     &           sparseVariableCoefficients=4,
     &           variableCoefficients=5 )

      integer dirichlet,neumann,mixed,equation,extrapolation,
     &        combination

      parameter(
     &     dirichlet=1,
     &     neumann=2,
     &     mixed=3,
     &     equation=4,
     &     extrapolation=5,
     &     combination=6 )

      integer rectangular,curvilinear
      parameter(
     &     rectangular=0,
     &     curvilinear=1)

      integer equationToSolve
      integer userDefined,laplaceEquation,divScalarGradOperator,
     &  heatEquationOperator,variableHeatEquationOperator,
     &   divScalarGradHeatOperator,secondOrderConstantCoefficients,
     & axisymmetricLaplaceEquation
      parameter(
     & userDefined=0,
     & laplaceEquation=1,
     & divScalarGradOperator=2,              ! div[ s[x] grad ]
     & heatEquationOperator=3,               ! I + c0*Delta
     & variableHeatEquationOperator=4,       ! I + s[x]*Delta
     & divScalarGradHeatOperator=5,  ! I + div[ s[x] grad ]
     & secondOrderConstantCoefficients=6,
     & axisymmetricLaplaceEquation=7 )

      real rx,ry,rz,sx,sy,sz,tx,ty,tz
       real d12
       real d22
       real h12
       real h22
       real rxr2
       real rxs2
       real rxt2
       real rxrr2
       real rxss2
       real rxrs2
       real ryr2
       real rys2
       real ryt2
       real ryrr2
       real ryss2
       real ryrs2
       real rzr2
       real rzs2
       real rzt2
       real rzrr2
       real rzss2
       real rzrs2
       real sxr2
       real sxs2
       real sxt2
       real sxrr2
       real sxss2
       real sxrs2
       real syr2
       real sys2
       real syt2
       real syrr2
       real syss2
       real syrs2
       real szr2
       real szs2
       real szt2
       real szrr2
       real szss2
       real szrs2
       real txr2
       real txs2
       real txt2
       real txrr2
       real txss2
       real txrs2
       real tyr2
       real tys2
       real tyt2
       real tyrr2
       real tyss2
       real tyrs2
       real tzr2
       real tzs2
       real tzt2
       real tzrr2
       real tzss2
       real tzrs2
       real rxx21
       real rxx22
       real rxy22
       real rxx23
       real rxy23
       real rxz23
       real ryx22
       real ryy22
       real ryx23
       real ryy23
       real ryz23
       real rzx22
       real rzy22
       real rzx23
       real rzy23
       real rzz23
       real sxx22
       real sxy22
       real sxx23
       real sxy23
       real sxz23
       real syx22
       real syy22
       real syx23
       real syy23
       real syz23
       real szx22
       real szy22
       real szx23
       real szy23
       real szz23
       real txx22
       real txy22
       real txx23
       real txy23
       real txz23
       real tyx22
       real tyy22
       real tyx23
       real tyy23
       real tyz23
       real tzx22
       real tzy22
       real tzx23
       real tzy23
       real tzz23
       real ur2
       real us2
       real ut2
       real urr2
       real uss2
       real urs2
       real utt2
       real urt2
       real ust2
       real urrr2
       real usss2
       real uttt2
       real ux21
       real uy21
       real uz21
       real ux22
       real uy22
       real uz22
       real ux23
       real uy23
       real uz23
       real uxx21
       real uyy21
       real uxy21
       real uxz21
       real uyz21
       real uzz21
       real ulaplacian21
       real uxx22
       real uyy22
       real uxy22
       real uxz22
       real uyz22
       real uzz22
       real ulaplacian22
       real uxx23
       real uyy23
       real uzz23
       real uxy23
       real uxz23
       real uyz23
       real ulaplacian23
       real ux23r
       real uy23r
       real uz23r
       real uxx23r
       real uyy23r
       real uxy23r
       real uzz23r
       real uxz23r
       real uyz23r
       real ux21r
       real uy21r
       real uz21r
       real uxx21r
       real uyy21r
       real uzz21r
       real uxy21r
       real uxz21r
       real uyz21r
       real ulaplacian21r
       real ux22r
       real uy22r
       real uz22r
       real uxx22r
       real uyy22r
       real uzz22r
       real uxy22r
       real uxz22r
       real uyz22r
       real ulaplacian22r
       real ulaplacian23r
       real uxxx22r
       real uyyy22r
       real uxxy22r
       real uxyy22r
       real uxxxx22r
       real uyyyy22r
       real uxxyy22r
       real uxxx23r
       real uyyy23r
       real uzzz23r
       real uxxy23r
       real uxxz23r
       real uxyy23r
       real uyyz23r
       real uxzz23r
       real uyzz23r
       real uxxxx23r
       real uyyyy23r
       real uzzzz23r
       real uxxyy23r
       real uxxzz23r
       real uyyzz23r
       real uLapSq22r
       real uLapSq23r
       real d14
       real d24
       real h41
       real h42
       real rxr4
       real rxs4
       real rxt4
       real ryr4
       real rys4
       real ryt4
       real rzr4
       real rzs4
       real rzt4
       real sxr4
       real sxs4
       real sxt4
       real syr4
       real sys4
       real syt4
       real szr4
       real szs4
       real szt4
       real txr4
       real txs4
       real txt4
       real tyr4
       real tys4
       real tyt4
       real tzr4
       real tzs4
       real tzt4
       real rxx41
       real rxx42
       real rxy42
       real rxx43
       real rxy43
       real rxz43
       real ryx42
       real ryy42
       real ryx43
       real ryy43
       real ryz43
       real rzx42
       real rzy42
       real rzx43
       real rzy43
       real rzz43
       real sxx42
       real sxy42
       real sxx43
       real sxy43
       real sxz43
       real syx42
       real syy42
       real syx43
       real syy43
       real syz43
       real szx42
       real szy42
       real szx43
       real szy43
       real szz43
       real txx42
       real txy42
       real txx43
       real txy43
       real txz43
       real tyx42
       real tyy42
       real tyx43
       real tyy43
       real tyz43
       real tzx42
       real tzy42
       real tzx43
       real tzy43
       real tzz43
       real ur4
       real us4
       real ut4
       real urr4
       real uss4
       real utt4
       real urs4
       real urt4
       real ust4
       real ux41
       real uy41
       real uz41
       real ux42
       real uy42
       real uz42
       real ux43
       real uy43
       real uz43
       real uxx41
       real uyy41
       real uxy41
       real uxz41
       real uyz41
       real uzz41
       real ulaplacian41
       real uxx42
       real uyy42
       real uxy42
       real uxz42
       real uyz42
       real uzz42
       real ulaplacian42
       real uxx43
       real uyy43
       real uzz43
       real uxy43
       real uxz43
       real uyz43
       real ulaplacian43
       real ux43r
       real uy43r
       real uz43r
       real uxx43r
       real uyy43r
       real uzz43r
       real uxy43r
       real uxz43r
       real uyz43r
       real ux41r
       real uy41r
       real uz41r
       real uxx41r
       real uyy41r
       real uzz41r
       real uxy41r
       real uxz41r
       real uyz41r
       real ulaplacian41r
       real ux42r
       real uy42r
       real uz42r
       real uxx42r
       real uyy42r
       real uzz42r
       real uxy42r
       real uxz42r
       real uyz42r
       real ulaplacian42r
       real ulaplacian43r

      real urss2,urtt2, urrs2, ustt2, urrt2, usst2

!....start statement functions 

      rx(i1,i2,i3)=rsxy(i1,i2,i3,0,0)
      ry(i1,i2,i3)=rsxy(i1,i2,i3,0,1)
      rz(i1,i2,i3)=rsxy(i1,i2,i3,0,2)
      sx(i1,i2,i3)=rsxy(i1,i2,i3,1,0)
      sy(i1,i2,i3)=rsxy(i1,i2,i3,1,1)
      sz(i1,i2,i3)=rsxy(i1,i2,i3,1,2)
      tx(i1,i2,i3)=rsxy(i1,i2,i3,2,0)
      ty(i1,i2,i3)=rsxy(i1,i2,i3,2,1)
      tz(i1,i2,i3)=rsxy(i1,i2,i3,2,2)
!     The next macro call will define the difference approximation statement functions
      d12(kd) = 1./(2.*dr(kd))
      d22(kd) = 1./(dr(kd)**2)
      ur2(i1,i2,i3)=(u(i1+1,i2,i3)-u(i1-1,i2,i3))*d12(0)
      us2(i1,i2,i3)=(u(i1,i2+1,i3)-u(i1,i2-1,i3))*d12(1)
      ut2(i1,i2,i3)=(u(i1,i2,i3+1)-u(i1,i2,i3-1))*d12(2)
      urr2(i1,i2,i3)=(-2.*u(i1,i2,i3)+(u(i1+1,i2,i3)+u(i1-1,i2,i3)) )*
     & d22(0)
      uss2(i1,i2,i3)=(-2.*u(i1,i2,i3)+(u(i1,i2+1,i3)+u(i1,i2-1,i3)) )*
     & d22(1)
      urs2(i1,i2,i3)=(ur2(i1,i2+1,i3)-ur2(i1,i2-1,i3))*d12(1)
      utt2(i1,i2,i3)=(-2.*u(i1,i2,i3)+(u(i1,i2,i3+1)+u(i1,i2,i3-1)) )*
     & d22(2)
      urt2(i1,i2,i3)=(ur2(i1,i2,i3+1)-ur2(i1,i2,i3-1))*d12(2)
      ust2(i1,i2,i3)=(us2(i1,i2,i3+1)-us2(i1,i2,i3-1))*d12(2)
      urrr2(i1,i2,i3)=(-2.*(u(i1+1,i2,i3)-u(i1-1,i2,i3))+(u(i1+2,i2,i3)
     & -u(i1-2,i2,i3)) )*d22(0)*d12(0)
      usss2(i1,i2,i3)=(-2.*(u(i1,i2+1,i3)-u(i1,i2-1,i3))+(u(i1,i2+2,i3)
     & -u(i1,i2-2,i3)) )*d22(1)*d12(1)
      uttt2(i1,i2,i3)=(-2.*(u(i1,i2,i3+1)-u(i1,i2,i3-1))+(u(i1,i2,i3+2)
     & -u(i1,i2,i3-2)) )*d22(2)*d12(2)
      rxr2(i1,i2,i3)=(rx(i1+1,i2,i3)-rx(i1-1,i2,i3))*d12(0)
      rxs2(i1,i2,i3)=(rx(i1,i2+1,i3)-rx(i1,i2-1,i3))*d12(1)
      rxt2(i1,i2,i3)=(rx(i1,i2,i3+1)-rx(i1,i2,i3-1))*d12(2)
      rxrr2(i1,i2,i3)=(-2.*rx(i1,i2,i3)+(rx(i1+1,i2,i3)+rx(i1-1,i2,i3))
     &  )*d22(0)
      rxss2(i1,i2,i3)=(-2.*rx(i1,i2,i3)+(rx(i1,i2+1,i3)+rx(i1,i2-1,i3))
     &  )*d22(1)
      rxrs2(i1,i2,i3)=(rxr2(i1,i2+1,i3)-rxr2(i1,i2-1,i3))*d12(1)
      ryr2(i1,i2,i3)=(ry(i1+1,i2,i3)-ry(i1-1,i2,i3))*d12(0)
      rys2(i1,i2,i3)=(ry(i1,i2+1,i3)-ry(i1,i2-1,i3))*d12(1)
      ryt2(i1,i2,i3)=(ry(i1,i2,i3+1)-ry(i1,i2,i3-1))*d12(2)
      ryrr2(i1,i2,i3)=(-2.*ry(i1,i2,i3)+(ry(i1+1,i2,i3)+ry(i1-1,i2,i3))
     &  )*d22(0)
      ryss2(i1,i2,i3)=(-2.*ry(i1,i2,i3)+(ry(i1,i2+1,i3)+ry(i1,i2-1,i3))
     &  )*d22(1)
      ryrs2(i1,i2,i3)=(ryr2(i1,i2+1,i3)-ryr2(i1,i2-1,i3))*d12(1)
      rzr2(i1,i2,i3)=(rz(i1+1,i2,i3)-rz(i1-1,i2,i3))*d12(0)
      rzs2(i1,i2,i3)=(rz(i1,i2+1,i3)-rz(i1,i2-1,i3))*d12(1)
      rzt2(i1,i2,i3)=(rz(i1,i2,i3+1)-rz(i1,i2,i3-1))*d12(2)
      rzrr2(i1,i2,i3)=(-2.*rz(i1,i2,i3)+(rz(i1+1,i2,i3)+rz(i1-1,i2,i3))
     &  )*d22(0)
      rzss2(i1,i2,i3)=(-2.*rz(i1,i2,i3)+(rz(i1,i2+1,i3)+rz(i1,i2-1,i3))
     &  )*d22(1)
      rzrs2(i1,i2,i3)=(rzr2(i1,i2+1,i3)-rzr2(i1,i2-1,i3))*d12(1)
      sxr2(i1,i2,i3)=(sx(i1+1,i2,i3)-sx(i1-1,i2,i3))*d12(0)
      sxs2(i1,i2,i3)=(sx(i1,i2+1,i3)-sx(i1,i2-1,i3))*d12(1)
      sxt2(i1,i2,i3)=(sx(i1,i2,i3+1)-sx(i1,i2,i3-1))*d12(2)
      sxrr2(i1,i2,i3)=(-2.*sx(i1,i2,i3)+(sx(i1+1,i2,i3)+sx(i1-1,i2,i3))
     &  )*d22(0)
      sxss2(i1,i2,i3)=(-2.*sx(i1,i2,i3)+(sx(i1,i2+1,i3)+sx(i1,i2-1,i3))
     &  )*d22(1)
      sxrs2(i1,i2,i3)=(sxr2(i1,i2+1,i3)-sxr2(i1,i2-1,i3))*d12(1)
      syr2(i1,i2,i3)=(sy(i1+1,i2,i3)-sy(i1-1,i2,i3))*d12(0)
      sys2(i1,i2,i3)=(sy(i1,i2+1,i3)-sy(i1,i2-1,i3))*d12(1)
      syt2(i1,i2,i3)=(sy(i1,i2,i3+1)-sy(i1,i2,i3-1))*d12(2)
      syrr2(i1,i2,i3)=(-2.*sy(i1,i2,i3)+(sy(i1+1,i2,i3)+sy(i1-1,i2,i3))
     &  )*d22(0)
      syss2(i1,i2,i3)=(-2.*sy(i1,i2,i3)+(sy(i1,i2+1,i3)+sy(i1,i2-1,i3))
     &  )*d22(1)
      syrs2(i1,i2,i3)=(syr2(i1,i2+1,i3)-syr2(i1,i2-1,i3))*d12(1)
      szr2(i1,i2,i3)=(sz(i1+1,i2,i3)-sz(i1-1,i2,i3))*d12(0)
      szs2(i1,i2,i3)=(sz(i1,i2+1,i3)-sz(i1,i2-1,i3))*d12(1)
      szt2(i1,i2,i3)=(sz(i1,i2,i3+1)-sz(i1,i2,i3-1))*d12(2)
      szrr2(i1,i2,i3)=(-2.*sz(i1,i2,i3)+(sz(i1+1,i2,i3)+sz(i1-1,i2,i3))
     &  )*d22(0)
      szss2(i1,i2,i3)=(-2.*sz(i1,i2,i3)+(sz(i1,i2+1,i3)+sz(i1,i2-1,i3))
     &  )*d22(1)
      szrs2(i1,i2,i3)=(szr2(i1,i2+1,i3)-szr2(i1,i2-1,i3))*d12(1)
      txr2(i1,i2,i3)=(tx(i1+1,i2,i3)-tx(i1-1,i2,i3))*d12(0)
      txs2(i1,i2,i3)=(tx(i1,i2+1,i3)-tx(i1,i2-1,i3))*d12(1)
      txt2(i1,i2,i3)=(tx(i1,i2,i3+1)-tx(i1,i2,i3-1))*d12(2)
      txrr2(i1,i2,i3)=(-2.*tx(i1,i2,i3)+(tx(i1+1,i2,i3)+tx(i1-1,i2,i3))
     &  )*d22(0)
      txss2(i1,i2,i3)=(-2.*tx(i1,i2,i3)+(tx(i1,i2+1,i3)+tx(i1,i2-1,i3))
     &  )*d22(1)
      txrs2(i1,i2,i3)=(txr2(i1,i2+1,i3)-txr2(i1,i2-1,i3))*d12(1)
      tyr2(i1,i2,i3)=(ty(i1+1,i2,i3)-ty(i1-1,i2,i3))*d12(0)
      tys2(i1,i2,i3)=(ty(i1,i2+1,i3)-ty(i1,i2-1,i3))*d12(1)
      tyt2(i1,i2,i3)=(ty(i1,i2,i3+1)-ty(i1,i2,i3-1))*d12(2)
      tyrr2(i1,i2,i3)=(-2.*ty(i1,i2,i3)+(ty(i1+1,i2,i3)+ty(i1-1,i2,i3))
     &  )*d22(0)
      tyss2(i1,i2,i3)=(-2.*ty(i1,i2,i3)+(ty(i1,i2+1,i3)+ty(i1,i2-1,i3))
     &  )*d22(1)
      tyrs2(i1,i2,i3)=(tyr2(i1,i2+1,i3)-tyr2(i1,i2-1,i3))*d12(1)
      tzr2(i1,i2,i3)=(tz(i1+1,i2,i3)-tz(i1-1,i2,i3))*d12(0)
      tzs2(i1,i2,i3)=(tz(i1,i2+1,i3)-tz(i1,i2-1,i3))*d12(1)
      tzt2(i1,i2,i3)=(tz(i1,i2,i3+1)-tz(i1,i2,i3-1))*d12(2)
      tzrr2(i1,i2,i3)=(-2.*tz(i1,i2,i3)+(tz(i1+1,i2,i3)+tz(i1-1,i2,i3))
     &  )*d22(0)
      tzss2(i1,i2,i3)=(-2.*tz(i1,i2,i3)+(tz(i1,i2+1,i3)+tz(i1,i2-1,i3))
     &  )*d22(1)
      tzrs2(i1,i2,i3)=(tzr2(i1,i2+1,i3)-tzr2(i1,i2-1,i3))*d12(1)
      ux21(i1,i2,i3)= rx(i1,i2,i3)*ur2(i1,i2,i3)
      uy21(i1,i2,i3)=0
      uz21(i1,i2,i3)=0
      ux22(i1,i2,i3)= rx(i1,i2,i3)*ur2(i1,i2,i3)+sx(i1,i2,i3)*us2(i1,
     & i2,i3)
      uy22(i1,i2,i3)= ry(i1,i2,i3)*ur2(i1,i2,i3)+sy(i1,i2,i3)*us2(i1,
     & i2,i3)
      uz22(i1,i2,i3)=0
      ux23(i1,i2,i3)=rx(i1,i2,i3)*ur2(i1,i2,i3)+sx(i1,i2,i3)*us2(i1,i2,
     & i3)+tx(i1,i2,i3)*ut2(i1,i2,i3)
      uy23(i1,i2,i3)=ry(i1,i2,i3)*ur2(i1,i2,i3)+sy(i1,i2,i3)*us2(i1,i2,
     & i3)+ty(i1,i2,i3)*ut2(i1,i2,i3)
      uz23(i1,i2,i3)=rz(i1,i2,i3)*ur2(i1,i2,i3)+sz(i1,i2,i3)*us2(i1,i2,
     & i3)+tz(i1,i2,i3)*ut2(i1,i2,i3)
      rxx21(i1,i2,i3)= rx(i1,i2,i3)*rxr2(i1,i2,i3)
      rxx22(i1,i2,i3)= rx(i1,i2,i3)*rxr2(i1,i2,i3)+sx(i1,i2,i3)*rxs2(
     & i1,i2,i3)
      rxy22(i1,i2,i3)= ry(i1,i2,i3)*rxr2(i1,i2,i3)+sy(i1,i2,i3)*rxs2(
     & i1,i2,i3)
      rxx23(i1,i2,i3)=rx(i1,i2,i3)*rxr2(i1,i2,i3)+sx(i1,i2,i3)*rxs2(i1,
     & i2,i3)+tx(i1,i2,i3)*rxt2(i1,i2,i3)
      rxy23(i1,i2,i3)=ry(i1,i2,i3)*rxr2(i1,i2,i3)+sy(i1,i2,i3)*rxs2(i1,
     & i2,i3)+ty(i1,i2,i3)*rxt2(i1,i2,i3)
      rxz23(i1,i2,i3)=rz(i1,i2,i3)*rxr2(i1,i2,i3)+sz(i1,i2,i3)*rxs2(i1,
     & i2,i3)+tz(i1,i2,i3)*rxt2(i1,i2,i3)
      ryx22(i1,i2,i3)= rx(i1,i2,i3)*ryr2(i1,i2,i3)+sx(i1,i2,i3)*rys2(
     & i1,i2,i3)
      ryy22(i1,i2,i3)= ry(i1,i2,i3)*ryr2(i1,i2,i3)+sy(i1,i2,i3)*rys2(
     & i1,i2,i3)
      ryx23(i1,i2,i3)=rx(i1,i2,i3)*ryr2(i1,i2,i3)+sx(i1,i2,i3)*rys2(i1,
     & i2,i3)+tx(i1,i2,i3)*ryt2(i1,i2,i3)
      ryy23(i1,i2,i3)=ry(i1,i2,i3)*ryr2(i1,i2,i3)+sy(i1,i2,i3)*rys2(i1,
     & i2,i3)+ty(i1,i2,i3)*ryt2(i1,i2,i3)
      ryz23(i1,i2,i3)=rz(i1,i2,i3)*ryr2(i1,i2,i3)+sz(i1,i2,i3)*rys2(i1,
     & i2,i3)+tz(i1,i2,i3)*ryt2(i1,i2,i3)
      rzx22(i1,i2,i3)= rx(i1,i2,i3)*rzr2(i1,i2,i3)+sx(i1,i2,i3)*rzs2(
     & i1,i2,i3)
      rzy22(i1,i2,i3)= ry(i1,i2,i3)*rzr2(i1,i2,i3)+sy(i1,i2,i3)*rzs2(
     & i1,i2,i3)
      rzx23(i1,i2,i3)=rx(i1,i2,i3)*rzr2(i1,i2,i3)+sx(i1,i2,i3)*rzs2(i1,
     & i2,i3)+tx(i1,i2,i3)*rzt2(i1,i2,i3)
      rzy23(i1,i2,i3)=ry(i1,i2,i3)*rzr2(i1,i2,i3)+sy(i1,i2,i3)*rzs2(i1,
     & i2,i3)+ty(i1,i2,i3)*rzt2(i1,i2,i3)
      rzz23(i1,i2,i3)=rz(i1,i2,i3)*rzr2(i1,i2,i3)+sz(i1,i2,i3)*rzs2(i1,
     & i2,i3)+tz(i1,i2,i3)*rzt2(i1,i2,i3)
      sxx22(i1,i2,i3)= rx(i1,i2,i3)*sxr2(i1,i2,i3)+sx(i1,i2,i3)*sxs2(
     & i1,i2,i3)
      sxy22(i1,i2,i3)= ry(i1,i2,i3)*sxr2(i1,i2,i3)+sy(i1,i2,i3)*sxs2(
     & i1,i2,i3)
      sxx23(i1,i2,i3)=rx(i1,i2,i3)*sxr2(i1,i2,i3)+sx(i1,i2,i3)*sxs2(i1,
     & i2,i3)+tx(i1,i2,i3)*sxt2(i1,i2,i3)
      sxy23(i1,i2,i3)=ry(i1,i2,i3)*sxr2(i1,i2,i3)+sy(i1,i2,i3)*sxs2(i1,
     & i2,i3)+ty(i1,i2,i3)*sxt2(i1,i2,i3)
      sxz23(i1,i2,i3)=rz(i1,i2,i3)*sxr2(i1,i2,i3)+sz(i1,i2,i3)*sxs2(i1,
     & i2,i3)+tz(i1,i2,i3)*sxt2(i1,i2,i3)
      syx22(i1,i2,i3)= rx(i1,i2,i3)*syr2(i1,i2,i3)+sx(i1,i2,i3)*sys2(
     & i1,i2,i3)
      syy22(i1,i2,i3)= ry(i1,i2,i3)*syr2(i1,i2,i3)+sy(i1,i2,i3)*sys2(
     & i1,i2,i3)
      syx23(i1,i2,i3)=rx(i1,i2,i3)*syr2(i1,i2,i3)+sx(i1,i2,i3)*sys2(i1,
     & i2,i3)+tx(i1,i2,i3)*syt2(i1,i2,i3)
      syy23(i1,i2,i3)=ry(i1,i2,i3)*syr2(i1,i2,i3)+sy(i1,i2,i3)*sys2(i1,
     & i2,i3)+ty(i1,i2,i3)*syt2(i1,i2,i3)
      syz23(i1,i2,i3)=rz(i1,i2,i3)*syr2(i1,i2,i3)+sz(i1,i2,i3)*sys2(i1,
     & i2,i3)+tz(i1,i2,i3)*syt2(i1,i2,i3)
      szx22(i1,i2,i3)= rx(i1,i2,i3)*szr2(i1,i2,i3)+sx(i1,i2,i3)*szs2(
     & i1,i2,i3)
      szy22(i1,i2,i3)= ry(i1,i2,i3)*szr2(i1,i2,i3)+sy(i1,i2,i3)*szs2(
     & i1,i2,i3)
      szx23(i1,i2,i3)=rx(i1,i2,i3)*szr2(i1,i2,i3)+sx(i1,i2,i3)*szs2(i1,
     & i2,i3)+tx(i1,i2,i3)*szt2(i1,i2,i3)
      szy23(i1,i2,i3)=ry(i1,i2,i3)*szr2(i1,i2,i3)+sy(i1,i2,i3)*szs2(i1,
     & i2,i3)+ty(i1,i2,i3)*szt2(i1,i2,i3)
      szz23(i1,i2,i3)=rz(i1,i2,i3)*szr2(i1,i2,i3)+sz(i1,i2,i3)*szs2(i1,
     & i2,i3)+tz(i1,i2,i3)*szt2(i1,i2,i3)
      txx22(i1,i2,i3)= rx(i1,i2,i3)*txr2(i1,i2,i3)+sx(i1,i2,i3)*txs2(
     & i1,i2,i3)
      txy22(i1,i2,i3)= ry(i1,i2,i3)*txr2(i1,i2,i3)+sy(i1,i2,i3)*txs2(
     & i1,i2,i3)
      txx23(i1,i2,i3)=rx(i1,i2,i3)*txr2(i1,i2,i3)+sx(i1,i2,i3)*txs2(i1,
     & i2,i3)+tx(i1,i2,i3)*txt2(i1,i2,i3)
      txy23(i1,i2,i3)=ry(i1,i2,i3)*txr2(i1,i2,i3)+sy(i1,i2,i3)*txs2(i1,
     & i2,i3)+ty(i1,i2,i3)*txt2(i1,i2,i3)
      txz23(i1,i2,i3)=rz(i1,i2,i3)*txr2(i1,i2,i3)+sz(i1,i2,i3)*txs2(i1,
     & i2,i3)+tz(i1,i2,i3)*txt2(i1,i2,i3)
      tyx22(i1,i2,i3)= rx(i1,i2,i3)*tyr2(i1,i2,i3)+sx(i1,i2,i3)*tys2(
     & i1,i2,i3)
      tyy22(i1,i2,i3)= ry(i1,i2,i3)*tyr2(i1,i2,i3)+sy(i1,i2,i3)*tys2(
     & i1,i2,i3)
      tyx23(i1,i2,i3)=rx(i1,i2,i3)*tyr2(i1,i2,i3)+sx(i1,i2,i3)*tys2(i1,
     & i2,i3)+tx(i1,i2,i3)*tyt2(i1,i2,i3)
      tyy23(i1,i2,i3)=ry(i1,i2,i3)*tyr2(i1,i2,i3)+sy(i1,i2,i3)*tys2(i1,
     & i2,i3)+ty(i1,i2,i3)*tyt2(i1,i2,i3)
      tyz23(i1,i2,i3)=rz(i1,i2,i3)*tyr2(i1,i2,i3)+sz(i1,i2,i3)*tys2(i1,
     & i2,i3)+tz(i1,i2,i3)*tyt2(i1,i2,i3)
      tzx22(i1,i2,i3)= rx(i1,i2,i3)*tzr2(i1,i2,i3)+sx(i1,i2,i3)*tzs2(
     & i1,i2,i3)
      tzy22(i1,i2,i3)= ry(i1,i2,i3)*tzr2(i1,i2,i3)+sy(i1,i2,i3)*tzs2(
     & i1,i2,i3)
      tzx23(i1,i2,i3)=rx(i1,i2,i3)*tzr2(i1,i2,i3)+sx(i1,i2,i3)*tzs2(i1,
     & i2,i3)+tx(i1,i2,i3)*tzt2(i1,i2,i3)
      tzy23(i1,i2,i3)=ry(i1,i2,i3)*tzr2(i1,i2,i3)+sy(i1,i2,i3)*tzs2(i1,
     & i2,i3)+ty(i1,i2,i3)*tzt2(i1,i2,i3)
      tzz23(i1,i2,i3)=rz(i1,i2,i3)*tzr2(i1,i2,i3)+sz(i1,i2,i3)*tzs2(i1,
     & i2,i3)+tz(i1,i2,i3)*tzt2(i1,i2,i3)
      uxx21(i1,i2,i3)=(rx(i1,i2,i3)**2)*urr2(i1,i2,i3)+(rxx22(i1,i2,i3)
     & )*ur2(i1,i2,i3)
      uyy21(i1,i2,i3)=0
      uxy21(i1,i2,i3)=0
      uxz21(i1,i2,i3)=0
      uyz21(i1,i2,i3)=0
      uzz21(i1,i2,i3)=0
      ulaplacian21(i1,i2,i3)=uxx21(i1,i2,i3)
      uxx22(i1,i2,i3)=(rx(i1,i2,i3)**2)*urr2(i1,i2,i3)+2.*(rx(i1,i2,i3)
     & *sx(i1,i2,i3))*urs2(i1,i2,i3)+(sx(i1,i2,i3)**2)*uss2(i1,i2,i3)+
     & (rxx22(i1,i2,i3))*ur2(i1,i2,i3)+(sxx22(i1,i2,i3))*us2(i1,i2,i3)
      uyy22(i1,i2,i3)=(ry(i1,i2,i3)**2)*urr2(i1,i2,i3)+2.*(ry(i1,i2,i3)
     & *sy(i1,i2,i3))*urs2(i1,i2,i3)+(sy(i1,i2,i3)**2)*uss2(i1,i2,i3)+
     & (ryy22(i1,i2,i3))*ur2(i1,i2,i3)+(syy22(i1,i2,i3))*us2(i1,i2,i3)
      uxy22(i1,i2,i3)=rx(i1,i2,i3)*ry(i1,i2,i3)*urr2(i1,i2,i3)+(rx(i1,
     & i2,i3)*sy(i1,i2,i3)+ry(i1,i2,i3)*sx(i1,i2,i3))*urs2(i1,i2,i3)+
     & sx(i1,i2,i3)*sy(i1,i2,i3)*uss2(i1,i2,i3)+rxy22(i1,i2,i3)*ur2(
     & i1,i2,i3)+sxy22(i1,i2,i3)*us2(i1,i2,i3)
      uxz22(i1,i2,i3)=0
      uyz22(i1,i2,i3)=0
      uzz22(i1,i2,i3)=0
      ulaplacian22(i1,i2,i3)=(rx(i1,i2,i3)**2+ry(i1,i2,i3)**2)*urr2(i1,
     & i2,i3)+2.*(rx(i1,i2,i3)*sx(i1,i2,i3)+ ry(i1,i2,i3)*sy(i1,i2,i3)
     & )*urs2(i1,i2,i3)+(sx(i1,i2,i3)**2+sy(i1,i2,i3)**2)*uss2(i1,i2,
     & i3)+(rxx22(i1,i2,i3)+ryy22(i1,i2,i3))*ur2(i1,i2,i3)+(sxx22(i1,
     & i2,i3)+syy22(i1,i2,i3))*us2(i1,i2,i3)
      uxx23(i1,i2,i3)=rx(i1,i2,i3)**2*urr2(i1,i2,i3)+sx(i1,i2,i3)**2*
     & uss2(i1,i2,i3)+tx(i1,i2,i3)**2*utt2(i1,i2,i3)+2.*rx(i1,i2,i3)*
     & sx(i1,i2,i3)*urs2(i1,i2,i3)+2.*rx(i1,i2,i3)*tx(i1,i2,i3)*urt2(
     & i1,i2,i3)+2.*sx(i1,i2,i3)*tx(i1,i2,i3)*ust2(i1,i2,i3)+rxx23(i1,
     & i2,i3)*ur2(i1,i2,i3)+sxx23(i1,i2,i3)*us2(i1,i2,i3)+txx23(i1,i2,
     & i3)*ut2(i1,i2,i3)
      uyy23(i1,i2,i3)=ry(i1,i2,i3)**2*urr2(i1,i2,i3)+sy(i1,i2,i3)**2*
     & uss2(i1,i2,i3)+ty(i1,i2,i3)**2*utt2(i1,i2,i3)+2.*ry(i1,i2,i3)*
     & sy(i1,i2,i3)*urs2(i1,i2,i3)+2.*ry(i1,i2,i3)*ty(i1,i2,i3)*urt2(
     & i1,i2,i3)+2.*sy(i1,i2,i3)*ty(i1,i2,i3)*ust2(i1,i2,i3)+ryy23(i1,
     & i2,i3)*ur2(i1,i2,i3)+syy23(i1,i2,i3)*us2(i1,i2,i3)+tyy23(i1,i2,
     & i3)*ut2(i1,i2,i3)
      uzz23(i1,i2,i3)=rz(i1,i2,i3)**2*urr2(i1,i2,i3)+sz(i1,i2,i3)**2*
     & uss2(i1,i2,i3)+tz(i1,i2,i3)**2*utt2(i1,i2,i3)+2.*rz(i1,i2,i3)*
     & sz(i1,i2,i3)*urs2(i1,i2,i3)+2.*rz(i1,i2,i3)*tz(i1,i2,i3)*urt2(
     & i1,i2,i3)+2.*sz(i1,i2,i3)*tz(i1,i2,i3)*ust2(i1,i2,i3)+rzz23(i1,
     & i2,i3)*ur2(i1,i2,i3)+szz23(i1,i2,i3)*us2(i1,i2,i3)+tzz23(i1,i2,
     & i3)*ut2(i1,i2,i3)
      uxy23(i1,i2,i3)=rx(i1,i2,i3)*ry(i1,i2,i3)*urr2(i1,i2,i3)+sx(i1,
     & i2,i3)*sy(i1,i2,i3)*uss2(i1,i2,i3)+tx(i1,i2,i3)*ty(i1,i2,i3)*
     & utt2(i1,i2,i3)+(rx(i1,i2,i3)*sy(i1,i2,i3)+ry(i1,i2,i3)*sx(i1,
     & i2,i3))*urs2(i1,i2,i3)+(rx(i1,i2,i3)*ty(i1,i2,i3)+ry(i1,i2,i3)*
     & tx(i1,i2,i3))*urt2(i1,i2,i3)+(sx(i1,i2,i3)*ty(i1,i2,i3)+sy(i1,
     & i2,i3)*tx(i1,i2,i3))*ust2(i1,i2,i3)+rxy23(i1,i2,i3)*ur2(i1,i2,
     & i3)+sxy23(i1,i2,i3)*us2(i1,i2,i3)+txy23(i1,i2,i3)*ut2(i1,i2,i3)
      uxz23(i1,i2,i3)=rx(i1,i2,i3)*rz(i1,i2,i3)*urr2(i1,i2,i3)+sx(i1,
     & i2,i3)*sz(i1,i2,i3)*uss2(i1,i2,i3)+tx(i1,i2,i3)*tz(i1,i2,i3)*
     & utt2(i1,i2,i3)+(rx(i1,i2,i3)*sz(i1,i2,i3)+rz(i1,i2,i3)*sx(i1,
     & i2,i3))*urs2(i1,i2,i3)+(rx(i1,i2,i3)*tz(i1,i2,i3)+rz(i1,i2,i3)*
     & tx(i1,i2,i3))*urt2(i1,i2,i3)+(sx(i1,i2,i3)*tz(i1,i2,i3)+sz(i1,
     & i2,i3)*tx(i1,i2,i3))*ust2(i1,i2,i3)+rxz23(i1,i2,i3)*ur2(i1,i2,
     & i3)+sxz23(i1,i2,i3)*us2(i1,i2,i3)+txz23(i1,i2,i3)*ut2(i1,i2,i3)
      uyz23(i1,i2,i3)=ry(i1,i2,i3)*rz(i1,i2,i3)*urr2(i1,i2,i3)+sy(i1,
     & i2,i3)*sz(i1,i2,i3)*uss2(i1,i2,i3)+ty(i1,i2,i3)*tz(i1,i2,i3)*
     & utt2(i1,i2,i3)+(ry(i1,i2,i3)*sz(i1,i2,i3)+rz(i1,i2,i3)*sy(i1,
     & i2,i3))*urs2(i1,i2,i3)+(ry(i1,i2,i3)*tz(i1,i2,i3)+rz(i1,i2,i3)*
     & ty(i1,i2,i3))*urt2(i1,i2,i3)+(sy(i1,i2,i3)*tz(i1,i2,i3)+sz(i1,
     & i2,i3)*ty(i1,i2,i3))*ust2(i1,i2,i3)+ryz23(i1,i2,i3)*ur2(i1,i2,
     & i3)+syz23(i1,i2,i3)*us2(i1,i2,i3)+tyz23(i1,i2,i3)*ut2(i1,i2,i3)
      ulaplacian23(i1,i2,i3)=(rx(i1,i2,i3)**2+ry(i1,i2,i3)**2+rz(i1,i2,
     & i3)**2)*urr2(i1,i2,i3)+(sx(i1,i2,i3)**2+sy(i1,i2,i3)**2+sz(i1,
     & i2,i3)**2)*uss2(i1,i2,i3)+(tx(i1,i2,i3)**2+ty(i1,i2,i3)**2+tz(
     & i1,i2,i3)**2)*utt2(i1,i2,i3)+2.*(rx(i1,i2,i3)*sx(i1,i2,i3)+ ry(
     & i1,i2,i3)*sy(i1,i2,i3)+rz(i1,i2,i3)*sz(i1,i2,i3))*urs2(i1,i2,
     & i3)+2.*(rx(i1,i2,i3)*tx(i1,i2,i3)+ ry(i1,i2,i3)*ty(i1,i2,i3)+
     & rz(i1,i2,i3)*tz(i1,i2,i3))*urt2(i1,i2,i3)+2.*(sx(i1,i2,i3)*tx(
     & i1,i2,i3)+ sy(i1,i2,i3)*ty(i1,i2,i3)+sz(i1,i2,i3)*tz(i1,i2,i3))
     & *ust2(i1,i2,i3)+(rxx23(i1,i2,i3)+ryy23(i1,i2,i3)+rzz23(i1,i2,
     & i3))*ur2(i1,i2,i3)+(sxx23(i1,i2,i3)+syy23(i1,i2,i3)+szz23(i1,
     & i2,i3))*us2(i1,i2,i3)+(txx23(i1,i2,i3)+tyy23(i1,i2,i3)+tzz23(
     & i1,i2,i3))*ut2(i1,i2,i3)
c============================================================================================
c Define derivatives for a rectangular grid
c
c============================================================================================
      h12(kd) = 1./(2.*dx(kd))
      h22(kd) = 1./(dx(kd)**2)
      ux23r(i1,i2,i3)=(u(i1+1,i2,i3)-u(i1-1,i2,i3))*h12(0)
      uy23r(i1,i2,i3)=(u(i1,i2+1,i3)-u(i1,i2-1,i3))*h12(1)
      uz23r(i1,i2,i3)=(u(i1,i2,i3+1)-u(i1,i2,i3-1))*h12(2)
      uxx23r(i1,i2,i3)=(-2.*u(i1,i2,i3)+(u(i1+1,i2,i3)+u(i1-1,i2,i3)) )
     & *h22(0)
      uyy23r(i1,i2,i3)=(-2.*u(i1,i2,i3)+(u(i1,i2+1,i3)+u(i1,i2-1,i3)) )
     & *h22(1)
      uxy23r(i1,i2,i3)=(ux23r(i1,i2+1,i3)-ux23r(i1,i2-1,i3))*h12(1)
      uzz23r(i1,i2,i3)=(-2.*u(i1,i2,i3)+(u(i1,i2,i3+1)+u(i1,i2,i3-1)) )
     & *h22(2)
      uxz23r(i1,i2,i3)=(ux23r(i1,i2,i3+1)-ux23r(i1,i2,i3-1))*h12(2)
      uyz23r(i1,i2,i3)=(uy23r(i1,i2,i3+1)-uy23r(i1,i2,i3-1))*h12(2)
      ux21r(i1,i2,i3)= ux23r(i1,i2,i3)
      uy21r(i1,i2,i3)= uy23r(i1,i2,i3)
      uz21r(i1,i2,i3)= uz23r(i1,i2,i3)
      uxx21r(i1,i2,i3)= uxx23r(i1,i2,i3)
      uyy21r(i1,i2,i3)= uyy23r(i1,i2,i3)
      uzz21r(i1,i2,i3)= uzz23r(i1,i2,i3)
      uxy21r(i1,i2,i3)= uxy23r(i1,i2,i3)
      uxz21r(i1,i2,i3)= uxz23r(i1,i2,i3)
      uyz21r(i1,i2,i3)= uyz23r(i1,i2,i3)
      ulaplacian21r(i1,i2,i3)=uxx23r(i1,i2,i3)
      ux22r(i1,i2,i3)= ux23r(i1,i2,i3)
      uy22r(i1,i2,i3)= uy23r(i1,i2,i3)
      uz22r(i1,i2,i3)= uz23r(i1,i2,i3)
      uxx22r(i1,i2,i3)= uxx23r(i1,i2,i3)
      uyy22r(i1,i2,i3)= uyy23r(i1,i2,i3)
      uzz22r(i1,i2,i3)= uzz23r(i1,i2,i3)
      uxy22r(i1,i2,i3)= uxy23r(i1,i2,i3)
      uxz22r(i1,i2,i3)= uxz23r(i1,i2,i3)
      uyz22r(i1,i2,i3)= uyz23r(i1,i2,i3)
      ulaplacian22r(i1,i2,i3)=uxx23r(i1,i2,i3)+uyy23r(i1,i2,i3)
      ulaplacian23r(i1,i2,i3)=uxx23r(i1,i2,i3)+uyy23r(i1,i2,i3)+uzz23r(
     & i1,i2,i3)
      uxxx22r(i1,i2,i3)=(-2.*(u(i1+1,i2,i3)-u(i1-1,i2,i3))+(u(i1+2,i2,
     & i3)-u(i1-2,i2,i3)) )*h22(0)*h12(0)
      uyyy22r(i1,i2,i3)=(-2.*(u(i1,i2+1,i3)-u(i1,i2-1,i3))+(u(i1,i2+2,
     & i3)-u(i1,i2-2,i3)) )*h22(1)*h12(1)
      uxxy22r(i1,i2,i3,kd)=( uxx22r(i1,i2+1,i3)-uxx22r(i1,i2-1,i3))/(
     & 2.*dx(1))
      uxyy22r(i1,i2,i3,kd)=( uyy22r(i1+1,i2,i3)-uyy22r(i1-1,i2,i3))/(
     & 2.*dx(0))
      uxxxx22r(i1,i2,i3)=(6.*u(i1,i2,i3)-4.*(u(i1+1,i2,i3)+u(i1-1,i2,
     & i3))+(u(i1+2,i2,i3)+u(i1-2,i2,i3)) )/(dx(0)**4)
      uyyyy22r(i1,i2,i3)=(6.*u(i1,i2,i3)-4.*(u(i1,i2+1,i3)+u(i1,i2-1,
     & i3))+(u(i1,i2+2,i3)+u(i1,i2-2,i3)) )/(dx(1)**4)
      uxxyy22r(i1,i2,i3)=( 4.*u(i1,i2,i3)     -2.*(u(i1+1,i2,i3)+u(i1-
     & 1,i2,i3)+u(i1,i2+1,i3)+u(i1,i2-1,i3))   +   (u(i1+1,i2+1,i3)+u(
     & i1-1,i2+1,i3)+u(i1+1,i2-1,i3)+u(i1-1,i2-1,i3)) )/(dx(0)**2*dx(
     & 1)**2)
      ! 2D laplacian squared = u.xxxx + 2 u.xxyy + u.yyyy
      uLapSq22r(i1,i2,i3)= ( 6.*u(i1,i2,i3)   - 4.*(u(i1+1,i2,i3)+u(i1-
     & 1,i2,i3))    +(u(i1+2,i2,i3)+u(i1-2,i2,i3)) )/(dx(0)**4) +( 6.*
     & u(i1,i2,i3)    -4.*(u(i1,i2+1,i3)+u(i1,i2-1,i3))    +(u(i1,i2+
     & 2,i3)+u(i1,i2-2,i3)) )/(dx(1)**4)  +( 8.*u(i1,i2,i3)     -4.*(
     & u(i1+1,i2,i3)+u(i1-1,i2,i3)+u(i1,i2+1,i3)+u(i1,i2-1,i3))   +2.*
     & (u(i1+1,i2+1,i3)+u(i1-1,i2+1,i3)+u(i1+1,i2-1,i3)+u(i1-1,i2-1,
     & i3)) )/(dx(0)**2*dx(1)**2)
      uxxx23r(i1,i2,i3)=(-2.*(u(i1+1,i2,i3)-u(i1-1,i2,i3))+(u(i1+2,i2,
     & i3)-u(i1-2,i2,i3)) )*h22(0)*h12(0)
      uyyy23r(i1,i2,i3)=(-2.*(u(i1,i2+1,i3)-u(i1,i2-1,i3))+(u(i1,i2+2,
     & i3)-u(i1,i2-2,i3)) )*h22(1)*h12(1)
      uzzz23r(i1,i2,i3)=(-2.*(u(i1,i2,i3+1)-u(i1,i2,i3-1))+(u(i1,i2,i3+
     & 2)-u(i1,i2,i3-2)) )*h22(1)*h12(2)
      uxxy23r(i1,i2,i3)=( uxx22r(i1,i2+1,i3)-uxx22r(i1,i2-1,i3))/(2.*
     & dx(1))
      uxyy23r(i1,i2,i3)=( uyy22r(i1+1,i2,i3)-uyy22r(i1-1,i2,i3))/(2.*
     & dx(0))
      uxxz23r(i1,i2,i3)=( uxx22r(i1,i2,i3+1)-uxx22r(i1,i2,i3-1))/(2.*
     & dx(2))
      uyyz23r(i1,i2,i3)=( uyy22r(i1,i2,i3+1)-uyy22r(i1,i2,i3-1))/(2.*
     & dx(2))
      uxzz23r(i1,i2,i3)=( uzz22r(i1+1,i2,i3)-uzz22r(i1-1,i2,i3))/(2.*
     & dx(0))
      uyzz23r(i1,i2,i3)=( uzz22r(i1,i2+1,i3)-uzz22r(i1,i2-1,i3))/(2.*
     & dx(1))
      uxxxx23r(i1,i2,i3)=(6.*u(i1,i2,i3)-4.*(u(i1+1,i2,i3)+u(i1-1,i2,
     & i3))+(u(i1+2,i2,i3)+u(i1-2,i2,i3)) )/(dx(0)**4)
      uyyyy23r(i1,i2,i3)=(6.*u(i1,i2,i3)-4.*(u(i1,i2+1,i3)+u(i1,i2-1,
     & i3))+(u(i1,i2+2,i3)+u(i1,i2-2,i3)) )/(dx(1)**4)
      uzzzz23r(i1,i2,i3)=(6.*u(i1,i2,i3)-4.*(u(i1,i2,i3+1)+u(i1,i2,i3-
     & 1))+(u(i1,i2,i3+2)+u(i1,i2,i3-2)) )/(dx(2)**4)
      uxxyy23r(i1,i2,i3)=( 4.*u(i1,i2,i3)     -2.*(u(i1+1,i2,i3)+u(i1-
     & 1,i2,i3)+u(i1,i2+1,i3)+u(i1,i2-1,i3))   +   (u(i1+1,i2+1,i3)+u(
     & i1-1,i2+1,i3)+u(i1+1,i2-1,i3)+u(i1-1,i2-1,i3)) )/(dx(0)**2*dx(
     & 1)**2)
      uxxzz23r(i1,i2,i3)=( 4.*u(i1,i2,i3)     -2.*(u(i1+1,i2,i3)+u(i1-
     & 1,i2,i3)+u(i1,i2,i3+1)+u(i1,i2,i3-1))   +   (u(i1+1,i2,i3+1)+u(
     & i1-1,i2,i3+1)+u(i1+1,i2,i3-1)+u(i1-1,i2,i3-1)) )/(dx(0)**2*dx(
     & 2)**2)
      uyyzz23r(i1,i2,i3)=( 4.*u(i1,i2,i3)     -2.*(u(i1,i2+1,i3)  +u(
     & i1,i2-1,i3)+  u(i1,i2  ,i3+1)+u(i1,i2  ,i3-1))   +   (u(i1,i2+
     & 1,i3+1)+u(i1,i2-1,i3+1)+u(i1,i2+1,i3-1)+u(i1,i2-1,i3-1)) )/(dx(
     & 1)**2*dx(2)**2)
      d14(kd) = 1./(12.*dr(kd))
      d24(kd) = 1./(12.*dr(kd)**2)
      ur4(i1,i2,i3)=(8.*(u(i1+1,i2,i3)-u(i1-1,i2,i3))-(u(i1+2,i2,i3)-u(
     & i1-2,i2,i3)))*d14(0)
      us4(i1,i2,i3)=(8.*(u(i1,i2+1,i3)-u(i1,i2-1,i3))-(u(i1,i2+2,i3)-u(
     & i1,i2-2,i3)))*d14(1)
      ut4(i1,i2,i3)=(8.*(u(i1,i2,i3+1)-u(i1,i2,i3-1))-(u(i1,i2,i3+2)-u(
     & i1,i2,i3-2)))*d14(2)
      urr4(i1,i2,i3)=(-30.*u(i1,i2,i3)+16.*(u(i1+1,i2,i3)+u(i1-1,i2,i3)
     & )-(u(i1+2,i2,i3)+u(i1-2,i2,i3)) )*d24(0)
      uss4(i1,i2,i3)=(-30.*u(i1,i2,i3)+16.*(u(i1,i2+1,i3)+u(i1,i2-1,i3)
     & )-(u(i1,i2+2,i3)+u(i1,i2-2,i3)) )*d24(1)
      utt4(i1,i2,i3)=(-30.*u(i1,i2,i3)+16.*(u(i1,i2,i3+1)+u(i1,i2,i3-1)
     & )-(u(i1,i2,i3+2)+u(i1,i2,i3-2)) )*d24(2)
      urs4(i1,i2,i3)=(8.*(ur4(i1,i2+1,i3)-ur4(i1,i2-1,i3))-(ur4(i1,i2+
     & 2,i3)-ur4(i1,i2-2,i3)))*d14(1)
      urt4(i1,i2,i3)=(8.*(ur4(i1,i2,i3+1)-ur4(i1,i2,i3-1))-(ur4(i1,i2,
     & i3+2)-ur4(i1,i2,i3-2)))*d14(2)
      ust4(i1,i2,i3)=(8.*(us4(i1,i2,i3+1)-us4(i1,i2,i3-1))-(us4(i1,i2,
     & i3+2)-us4(i1,i2,i3-2)))*d14(2)
      rxr4(i1,i2,i3)=(8.*(rx(i1+1,i2,i3)-rx(i1-1,i2,i3))-(rx(i1+2,i2,
     & i3)-rx(i1-2,i2,i3)))*d14(0)
      rxs4(i1,i2,i3)=(8.*(rx(i1,i2+1,i3)-rx(i1,i2-1,i3))-(rx(i1,i2+2,
     & i3)-rx(i1,i2-2,i3)))*d14(1)
      rxt4(i1,i2,i3)=(8.*(rx(i1,i2,i3+1)-rx(i1,i2,i3-1))-(rx(i1,i2,i3+
     & 2)-rx(i1,i2,i3-2)))*d14(2)
      ryr4(i1,i2,i3)=(8.*(ry(i1+1,i2,i3)-ry(i1-1,i2,i3))-(ry(i1+2,i2,
     & i3)-ry(i1-2,i2,i3)))*d14(0)
      rys4(i1,i2,i3)=(8.*(ry(i1,i2+1,i3)-ry(i1,i2-1,i3))-(ry(i1,i2+2,
     & i3)-ry(i1,i2-2,i3)))*d14(1)
      ryt4(i1,i2,i3)=(8.*(ry(i1,i2,i3+1)-ry(i1,i2,i3-1))-(ry(i1,i2,i3+
     & 2)-ry(i1,i2,i3-2)))*d14(2)
      rzr4(i1,i2,i3)=(8.*(rz(i1+1,i2,i3)-rz(i1-1,i2,i3))-(rz(i1+2,i2,
     & i3)-rz(i1-2,i2,i3)))*d14(0)
      rzs4(i1,i2,i3)=(8.*(rz(i1,i2+1,i3)-rz(i1,i2-1,i3))-(rz(i1,i2+2,
     & i3)-rz(i1,i2-2,i3)))*d14(1)
      rzt4(i1,i2,i3)=(8.*(rz(i1,i2,i3+1)-rz(i1,i2,i3-1))-(rz(i1,i2,i3+
     & 2)-rz(i1,i2,i3-2)))*d14(2)
      sxr4(i1,i2,i3)=(8.*(sx(i1+1,i2,i3)-sx(i1-1,i2,i3))-(sx(i1+2,i2,
     & i3)-sx(i1-2,i2,i3)))*d14(0)
      sxs4(i1,i2,i3)=(8.*(sx(i1,i2+1,i3)-sx(i1,i2-1,i3))-(sx(i1,i2+2,
     & i3)-sx(i1,i2-2,i3)))*d14(1)
      sxt4(i1,i2,i3)=(8.*(sx(i1,i2,i3+1)-sx(i1,i2,i3-1))-(sx(i1,i2,i3+
     & 2)-sx(i1,i2,i3-2)))*d14(2)
      syr4(i1,i2,i3)=(8.*(sy(i1+1,i2,i3)-sy(i1-1,i2,i3))-(sy(i1+2,i2,
     & i3)-sy(i1-2,i2,i3)))*d14(0)
      sys4(i1,i2,i3)=(8.*(sy(i1,i2+1,i3)-sy(i1,i2-1,i3))-(sy(i1,i2+2,
     & i3)-sy(i1,i2-2,i3)))*d14(1)
      syt4(i1,i2,i3)=(8.*(sy(i1,i2,i3+1)-sy(i1,i2,i3-1))-(sy(i1,i2,i3+
     & 2)-sy(i1,i2,i3-2)))*d14(2)
      szr4(i1,i2,i3)=(8.*(sz(i1+1,i2,i3)-sz(i1-1,i2,i3))-(sz(i1+2,i2,
     & i3)-sz(i1-2,i2,i3)))*d14(0)
      szs4(i1,i2,i3)=(8.*(sz(i1,i2+1,i3)-sz(i1,i2-1,i3))-(sz(i1,i2+2,
     & i3)-sz(i1,i2-2,i3)))*d14(1)
      szt4(i1,i2,i3)=(8.*(sz(i1,i2,i3+1)-sz(i1,i2,i3-1))-(sz(i1,i2,i3+
     & 2)-sz(i1,i2,i3-2)))*d14(2)
      txr4(i1,i2,i3)=(8.*(tx(i1+1,i2,i3)-tx(i1-1,i2,i3))-(tx(i1+2,i2,
     & i3)-tx(i1-2,i2,i3)))*d14(0)
      txs4(i1,i2,i3)=(8.*(tx(i1,i2+1,i3)-tx(i1,i2-1,i3))-(tx(i1,i2+2,
     & i3)-tx(i1,i2-2,i3)))*d14(1)
      txt4(i1,i2,i3)=(8.*(tx(i1,i2,i3+1)-tx(i1,i2,i3-1))-(tx(i1,i2,i3+
     & 2)-tx(i1,i2,i3-2)))*d14(2)
      tyr4(i1,i2,i3)=(8.*(ty(i1+1,i2,i3)-ty(i1-1,i2,i3))-(ty(i1+2,i2,
     & i3)-ty(i1-2,i2,i3)))*d14(0)
      tys4(i1,i2,i3)=(8.*(ty(i1,i2+1,i3)-ty(i1,i2-1,i3))-(ty(i1,i2+2,
     & i3)-ty(i1,i2-2,i3)))*d14(1)
      tyt4(i1,i2,i3)=(8.*(ty(i1,i2,i3+1)-ty(i1,i2,i3-1))-(ty(i1,i2,i3+
     & 2)-ty(i1,i2,i3-2)))*d14(2)
      tzr4(i1,i2,i3)=(8.*(tz(i1+1,i2,i3)-tz(i1-1,i2,i3))-(tz(i1+2,i2,
     & i3)-tz(i1-2,i2,i3)))*d14(0)
      tzs4(i1,i2,i3)=(8.*(tz(i1,i2+1,i3)-tz(i1,i2-1,i3))-(tz(i1,i2+2,
     & i3)-tz(i1,i2-2,i3)))*d14(1)
      tzt4(i1,i2,i3)=(8.*(tz(i1,i2,i3+1)-tz(i1,i2,i3-1))-(tz(i1,i2,i3+
     & 2)-tz(i1,i2,i3-2)))*d14(2)
      ux41(i1,i2,i3)= rx(i1,i2,i3)*ur4(i1,i2,i3)
      uy41(i1,i2,i3)=0
      uz41(i1,i2,i3)=0
      ux42(i1,i2,i3)= rx(i1,i2,i3)*ur4(i1,i2,i3)+sx(i1,i2,i3)*us4(i1,
     & i2,i3)
      uy42(i1,i2,i3)= ry(i1,i2,i3)*ur4(i1,i2,i3)+sy(i1,i2,i3)*us4(i1,
     & i2,i3)
      uz42(i1,i2,i3)=0
      ux43(i1,i2,i3)=rx(i1,i2,i3)*ur4(i1,i2,i3)+sx(i1,i2,i3)*us4(i1,i2,
     & i3)+tx(i1,i2,i3)*ut4(i1,i2,i3)
      uy43(i1,i2,i3)=ry(i1,i2,i3)*ur4(i1,i2,i3)+sy(i1,i2,i3)*us4(i1,i2,
     & i3)+ty(i1,i2,i3)*ut4(i1,i2,i3)
      uz43(i1,i2,i3)=rz(i1,i2,i3)*ur4(i1,i2,i3)+sz(i1,i2,i3)*us4(i1,i2,
     & i3)+tz(i1,i2,i3)*ut4(i1,i2,i3)
      rxx41(i1,i2,i3)= rx(i1,i2,i3)*rxr4(i1,i2,i3)
      rxx42(i1,i2,i3)= rx(i1,i2,i3)*rxr4(i1,i2,i3)+sx(i1,i2,i3)*rxs4(
     & i1,i2,i3)
      rxy42(i1,i2,i3)= ry(i1,i2,i3)*rxr4(i1,i2,i3)+sy(i1,i2,i3)*rxs4(
     & i1,i2,i3)
      rxx43(i1,i2,i3)=rx(i1,i2,i3)*rxr4(i1,i2,i3)+sx(i1,i2,i3)*rxs4(i1,
     & i2,i3)+tx(i1,i2,i3)*rxt4(i1,i2,i3)
      rxy43(i1,i2,i3)=ry(i1,i2,i3)*rxr4(i1,i2,i3)+sy(i1,i2,i3)*rxs4(i1,
     & i2,i3)+ty(i1,i2,i3)*rxt4(i1,i2,i3)
      rxz43(i1,i2,i3)=rz(i1,i2,i3)*rxr4(i1,i2,i3)+sz(i1,i2,i3)*rxs4(i1,
     & i2,i3)+tz(i1,i2,i3)*rxt4(i1,i2,i3)
      ryx42(i1,i2,i3)= rx(i1,i2,i3)*ryr4(i1,i2,i3)+sx(i1,i2,i3)*rys4(
     & i1,i2,i3)
      ryy42(i1,i2,i3)= ry(i1,i2,i3)*ryr4(i1,i2,i3)+sy(i1,i2,i3)*rys4(
     & i1,i2,i3)
      ryx43(i1,i2,i3)=rx(i1,i2,i3)*ryr4(i1,i2,i3)+sx(i1,i2,i3)*rys4(i1,
     & i2,i3)+tx(i1,i2,i3)*ryt4(i1,i2,i3)
      ryy43(i1,i2,i3)=ry(i1,i2,i3)*ryr4(i1,i2,i3)+sy(i1,i2,i3)*rys4(i1,
     & i2,i3)+ty(i1,i2,i3)*ryt4(i1,i2,i3)
      ryz43(i1,i2,i3)=rz(i1,i2,i3)*ryr4(i1,i2,i3)+sz(i1,i2,i3)*rys4(i1,
     & i2,i3)+tz(i1,i2,i3)*ryt4(i1,i2,i3)
      rzx42(i1,i2,i3)= rx(i1,i2,i3)*rzr4(i1,i2,i3)+sx(i1,i2,i3)*rzs4(
     & i1,i2,i3)
      rzy42(i1,i2,i3)= ry(i1,i2,i3)*rzr4(i1,i2,i3)+sy(i1,i2,i3)*rzs4(
     & i1,i2,i3)
      rzx43(i1,i2,i3)=rx(i1,i2,i3)*rzr4(i1,i2,i3)+sx(i1,i2,i3)*rzs4(i1,
     & i2,i3)+tx(i1,i2,i3)*rzt4(i1,i2,i3)
      rzy43(i1,i2,i3)=ry(i1,i2,i3)*rzr4(i1,i2,i3)+sy(i1,i2,i3)*rzs4(i1,
     & i2,i3)+ty(i1,i2,i3)*rzt4(i1,i2,i3)
      rzz43(i1,i2,i3)=rz(i1,i2,i3)*rzr4(i1,i2,i3)+sz(i1,i2,i3)*rzs4(i1,
     & i2,i3)+tz(i1,i2,i3)*rzt4(i1,i2,i3)
      sxx42(i1,i2,i3)= rx(i1,i2,i3)*sxr4(i1,i2,i3)+sx(i1,i2,i3)*sxs4(
     & i1,i2,i3)
      sxy42(i1,i2,i3)= ry(i1,i2,i3)*sxr4(i1,i2,i3)+sy(i1,i2,i3)*sxs4(
     & i1,i2,i3)
      sxx43(i1,i2,i3)=rx(i1,i2,i3)*sxr4(i1,i2,i3)+sx(i1,i2,i3)*sxs4(i1,
     & i2,i3)+tx(i1,i2,i3)*sxt4(i1,i2,i3)
      sxy43(i1,i2,i3)=ry(i1,i2,i3)*sxr4(i1,i2,i3)+sy(i1,i2,i3)*sxs4(i1,
     & i2,i3)+ty(i1,i2,i3)*sxt4(i1,i2,i3)
      sxz43(i1,i2,i3)=rz(i1,i2,i3)*sxr4(i1,i2,i3)+sz(i1,i2,i3)*sxs4(i1,
     & i2,i3)+tz(i1,i2,i3)*sxt4(i1,i2,i3)
      syx42(i1,i2,i3)= rx(i1,i2,i3)*syr4(i1,i2,i3)+sx(i1,i2,i3)*sys4(
     & i1,i2,i3)
      syy42(i1,i2,i3)= ry(i1,i2,i3)*syr4(i1,i2,i3)+sy(i1,i2,i3)*sys4(
     & i1,i2,i3)
      syx43(i1,i2,i3)=rx(i1,i2,i3)*syr4(i1,i2,i3)+sx(i1,i2,i3)*sys4(i1,
     & i2,i3)+tx(i1,i2,i3)*syt4(i1,i2,i3)
      syy43(i1,i2,i3)=ry(i1,i2,i3)*syr4(i1,i2,i3)+sy(i1,i2,i3)*sys4(i1,
     & i2,i3)+ty(i1,i2,i3)*syt4(i1,i2,i3)
      syz43(i1,i2,i3)=rz(i1,i2,i3)*syr4(i1,i2,i3)+sz(i1,i2,i3)*sys4(i1,
     & i2,i3)+tz(i1,i2,i3)*syt4(i1,i2,i3)
      szx42(i1,i2,i3)= rx(i1,i2,i3)*szr4(i1,i2,i3)+sx(i1,i2,i3)*szs4(
     & i1,i2,i3)
      szy42(i1,i2,i3)= ry(i1,i2,i3)*szr4(i1,i2,i3)+sy(i1,i2,i3)*szs4(
     & i1,i2,i3)
      szx43(i1,i2,i3)=rx(i1,i2,i3)*szr4(i1,i2,i3)+sx(i1,i2,i3)*szs4(i1,
     & i2,i3)+tx(i1,i2,i3)*szt4(i1,i2,i3)
      szy43(i1,i2,i3)=ry(i1,i2,i3)*szr4(i1,i2,i3)+sy(i1,i2,i3)*szs4(i1,
     & i2,i3)+ty(i1,i2,i3)*szt4(i1,i2,i3)
      szz43(i1,i2,i3)=rz(i1,i2,i3)*szr4(i1,i2,i3)+sz(i1,i2,i3)*szs4(i1,
     & i2,i3)+tz(i1,i2,i3)*szt4(i1,i2,i3)
      txx42(i1,i2,i3)= rx(i1,i2,i3)*txr4(i1,i2,i3)+sx(i1,i2,i3)*txs4(
     & i1,i2,i3)
      txy42(i1,i2,i3)= ry(i1,i2,i3)*txr4(i1,i2,i3)+sy(i1,i2,i3)*txs4(
     & i1,i2,i3)
      txx43(i1,i2,i3)=rx(i1,i2,i3)*txr4(i1,i2,i3)+sx(i1,i2,i3)*txs4(i1,
     & i2,i3)+tx(i1,i2,i3)*txt4(i1,i2,i3)
      txy43(i1,i2,i3)=ry(i1,i2,i3)*txr4(i1,i2,i3)+sy(i1,i2,i3)*txs4(i1,
     & i2,i3)+ty(i1,i2,i3)*txt4(i1,i2,i3)
      txz43(i1,i2,i3)=rz(i1,i2,i3)*txr4(i1,i2,i3)+sz(i1,i2,i3)*txs4(i1,
     & i2,i3)+tz(i1,i2,i3)*txt4(i1,i2,i3)
      tyx42(i1,i2,i3)= rx(i1,i2,i3)*tyr4(i1,i2,i3)+sx(i1,i2,i3)*tys4(
     & i1,i2,i3)
      tyy42(i1,i2,i3)= ry(i1,i2,i3)*tyr4(i1,i2,i3)+sy(i1,i2,i3)*tys4(
     & i1,i2,i3)
      tyx43(i1,i2,i3)=rx(i1,i2,i3)*tyr4(i1,i2,i3)+sx(i1,i2,i3)*tys4(i1,
     & i2,i3)+tx(i1,i2,i3)*tyt4(i1,i2,i3)
      tyy43(i1,i2,i3)=ry(i1,i2,i3)*tyr4(i1,i2,i3)+sy(i1,i2,i3)*tys4(i1,
     & i2,i3)+ty(i1,i2,i3)*tyt4(i1,i2,i3)
      tyz43(i1,i2,i3)=rz(i1,i2,i3)*tyr4(i1,i2,i3)+sz(i1,i2,i3)*tys4(i1,
     & i2,i3)+tz(i1,i2,i3)*tyt4(i1,i2,i3)
      tzx42(i1,i2,i3)= rx(i1,i2,i3)*tzr4(i1,i2,i3)+sx(i1,i2,i3)*tzs4(
     & i1,i2,i3)
      tzy42(i1,i2,i3)= ry(i1,i2,i3)*tzr4(i1,i2,i3)+sy(i1,i2,i3)*tzs4(
     & i1,i2,i3)
      tzx43(i1,i2,i3)=rx(i1,i2,i3)*tzr4(i1,i2,i3)+sx(i1,i2,i3)*tzs4(i1,
     & i2,i3)+tx(i1,i2,i3)*tzt4(i1,i2,i3)
      tzy43(i1,i2,i3)=ry(i1,i2,i3)*tzr4(i1,i2,i3)+sy(i1,i2,i3)*tzs4(i1,
     & i2,i3)+ty(i1,i2,i3)*tzt4(i1,i2,i3)
      tzz43(i1,i2,i3)=rz(i1,i2,i3)*tzr4(i1,i2,i3)+sz(i1,i2,i3)*tzs4(i1,
     & i2,i3)+tz(i1,i2,i3)*tzt4(i1,i2,i3)
      uxx41(i1,i2,i3)=(rx(i1,i2,i3)**2)*urr4(i1,i2,i3)+(rxx42(i1,i2,i3)
     & )*ur4(i1,i2,i3)
      uyy41(i1,i2,i3)=0
      uxy41(i1,i2,i3)=0
      uxz41(i1,i2,i3)=0
      uyz41(i1,i2,i3)=0
      uzz41(i1,i2,i3)=0
      ulaplacian41(i1,i2,i3)=uxx41(i1,i2,i3)
      uxx42(i1,i2,i3)=(rx(i1,i2,i3)**2)*urr4(i1,i2,i3)+2.*(rx(i1,i2,i3)
     & *sx(i1,i2,i3))*urs4(i1,i2,i3)+(sx(i1,i2,i3)**2)*uss4(i1,i2,i3)+
     & (rxx42(i1,i2,i3))*ur4(i1,i2,i3)+(sxx42(i1,i2,i3))*us4(i1,i2,i3)
      uyy42(i1,i2,i3)=(ry(i1,i2,i3)**2)*urr4(i1,i2,i3)+2.*(ry(i1,i2,i3)
     & *sy(i1,i2,i3))*urs4(i1,i2,i3)+(sy(i1,i2,i3)**2)*uss4(i1,i2,i3)+
     & (ryy42(i1,i2,i3))*ur4(i1,i2,i3)+(syy42(i1,i2,i3))*us4(i1,i2,i3)
      uxy42(i1,i2,i3)=rx(i1,i2,i3)*ry(i1,i2,i3)*urr4(i1,i2,i3)+(rx(i1,
     & i2,i3)*sy(i1,i2,i3)+ry(i1,i2,i3)*sx(i1,i2,i3))*urs4(i1,i2,i3)+
     & sx(i1,i2,i3)*sy(i1,i2,i3)*uss4(i1,i2,i3)+rxy42(i1,i2,i3)*ur4(
     & i1,i2,i3)+sxy42(i1,i2,i3)*us4(i1,i2,i3)
      uxz42(i1,i2,i3)=0
      uyz42(i1,i2,i3)=0
      uzz42(i1,i2,i3)=0
      ulaplacian42(i1,i2,i3)=(rx(i1,i2,i3)**2+ry(i1,i2,i3)**2)*urr4(i1,
     & i2,i3)+2.*(rx(i1,i2,i3)*sx(i1,i2,i3)+ ry(i1,i2,i3)*sy(i1,i2,i3)
     & )*urs4(i1,i2,i3)+(sx(i1,i2,i3)**2+sy(i1,i2,i3)**2)*uss4(i1,i2,
     & i3)+(rxx42(i1,i2,i3)+ryy42(i1,i2,i3))*ur4(i1,i2,i3)+(sxx42(i1,
     & i2,i3)+syy42(i1,i2,i3))*us4(i1,i2,i3)
      uxx43(i1,i2,i3)=rx(i1,i2,i3)**2*urr4(i1,i2,i3)+sx(i1,i2,i3)**2*
     & uss4(i1,i2,i3)+tx(i1,i2,i3)**2*utt4(i1,i2,i3)+2.*rx(i1,i2,i3)*
     & sx(i1,i2,i3)*urs4(i1,i2,i3)+2.*rx(i1,i2,i3)*tx(i1,i2,i3)*urt4(
     & i1,i2,i3)+2.*sx(i1,i2,i3)*tx(i1,i2,i3)*ust4(i1,i2,i3)+rxx43(i1,
     & i2,i3)*ur4(i1,i2,i3)+sxx43(i1,i2,i3)*us4(i1,i2,i3)+txx43(i1,i2,
     & i3)*ut4(i1,i2,i3)
      uyy43(i1,i2,i3)=ry(i1,i2,i3)**2*urr4(i1,i2,i3)+sy(i1,i2,i3)**2*
     & uss4(i1,i2,i3)+ty(i1,i2,i3)**2*utt4(i1,i2,i3)+2.*ry(i1,i2,i3)*
     & sy(i1,i2,i3)*urs4(i1,i2,i3)+2.*ry(i1,i2,i3)*ty(i1,i2,i3)*urt4(
     & i1,i2,i3)+2.*sy(i1,i2,i3)*ty(i1,i2,i3)*ust4(i1,i2,i3)+ryy43(i1,
     & i2,i3)*ur4(i1,i2,i3)+syy43(i1,i2,i3)*us4(i1,i2,i3)+tyy43(i1,i2,
     & i3)*ut4(i1,i2,i3)
      uzz43(i1,i2,i3)=rz(i1,i2,i3)**2*urr4(i1,i2,i3)+sz(i1,i2,i3)**2*
     & uss4(i1,i2,i3)+tz(i1,i2,i3)**2*utt4(i1,i2,i3)+2.*rz(i1,i2,i3)*
     & sz(i1,i2,i3)*urs4(i1,i2,i3)+2.*rz(i1,i2,i3)*tz(i1,i2,i3)*urt4(
     & i1,i2,i3)+2.*sz(i1,i2,i3)*tz(i1,i2,i3)*ust4(i1,i2,i3)+rzz43(i1,
     & i2,i3)*ur4(i1,i2,i3)+szz43(i1,i2,i3)*us4(i1,i2,i3)+tzz43(i1,i2,
     & i3)*ut4(i1,i2,i3)
      uxy43(i1,i2,i3)=rx(i1,i2,i3)*ry(i1,i2,i3)*urr4(i1,i2,i3)+sx(i1,
     & i2,i3)*sy(i1,i2,i3)*uss4(i1,i2,i3)+tx(i1,i2,i3)*ty(i1,i2,i3)*
     & utt4(i1,i2,i3)+(rx(i1,i2,i3)*sy(i1,i2,i3)+ry(i1,i2,i3)*sx(i1,
     & i2,i3))*urs4(i1,i2,i3)+(rx(i1,i2,i3)*ty(i1,i2,i3)+ry(i1,i2,i3)*
     & tx(i1,i2,i3))*urt4(i1,i2,i3)+(sx(i1,i2,i3)*ty(i1,i2,i3)+sy(i1,
     & i2,i3)*tx(i1,i2,i3))*ust4(i1,i2,i3)+rxy43(i1,i2,i3)*ur4(i1,i2,
     & i3)+sxy43(i1,i2,i3)*us4(i1,i2,i3)+txy43(i1,i2,i3)*ut4(i1,i2,i3)
      uxz43(i1,i2,i3)=rx(i1,i2,i3)*rz(i1,i2,i3)*urr4(i1,i2,i3)+sx(i1,
     & i2,i3)*sz(i1,i2,i3)*uss4(i1,i2,i3)+tx(i1,i2,i3)*tz(i1,i2,i3)*
     & utt4(i1,i2,i3)+(rx(i1,i2,i3)*sz(i1,i2,i3)+rz(i1,i2,i3)*sx(i1,
     & i2,i3))*urs4(i1,i2,i3)+(rx(i1,i2,i3)*tz(i1,i2,i3)+rz(i1,i2,i3)*
     & tx(i1,i2,i3))*urt4(i1,i2,i3)+(sx(i1,i2,i3)*tz(i1,i2,i3)+sz(i1,
     & i2,i3)*tx(i1,i2,i3))*ust4(i1,i2,i3)+rxz43(i1,i2,i3)*ur4(i1,i2,
     & i3)+sxz43(i1,i2,i3)*us4(i1,i2,i3)+txz43(i1,i2,i3)*ut4(i1,i2,i3)
      uyz43(i1,i2,i3)=ry(i1,i2,i3)*rz(i1,i2,i3)*urr4(i1,i2,i3)+sy(i1,
     & i2,i3)*sz(i1,i2,i3)*uss4(i1,i2,i3)+ty(i1,i2,i3)*tz(i1,i2,i3)*
     & utt4(i1,i2,i3)+(ry(i1,i2,i3)*sz(i1,i2,i3)+rz(i1,i2,i3)*sy(i1,
     & i2,i3))*urs4(i1,i2,i3)+(ry(i1,i2,i3)*tz(i1,i2,i3)+rz(i1,i2,i3)*
     & ty(i1,i2,i3))*urt4(i1,i2,i3)+(sy(i1,i2,i3)*tz(i1,i2,i3)+sz(i1,
     & i2,i3)*ty(i1,i2,i3))*ust4(i1,i2,i3)+ryz43(i1,i2,i3)*ur4(i1,i2,
     & i3)+syz43(i1,i2,i3)*us4(i1,i2,i3)+tyz43(i1,i2,i3)*ut4(i1,i2,i3)
      ulaplacian43(i1,i2,i3)=(rx(i1,i2,i3)**2+ry(i1,i2,i3)**2+rz(i1,i2,
     & i3)**2)*urr4(i1,i2,i3)+(sx(i1,i2,i3)**2+sy(i1,i2,i3)**2+sz(i1,
     & i2,i3)**2)*uss4(i1,i2,i3)+(tx(i1,i2,i3)**2+ty(i1,i2,i3)**2+tz(
     & i1,i2,i3)**2)*utt4(i1,i2,i3)+2.*(rx(i1,i2,i3)*sx(i1,i2,i3)+ ry(
     & i1,i2,i3)*sy(i1,i2,i3)+rz(i1,i2,i3)*sz(i1,i2,i3))*urs4(i1,i2,
     & i3)+2.*(rx(i1,i2,i3)*tx(i1,i2,i3)+ ry(i1,i2,i3)*ty(i1,i2,i3)+
     & rz(i1,i2,i3)*tz(i1,i2,i3))*urt4(i1,i2,i3)+2.*(sx(i1,i2,i3)*tx(
     & i1,i2,i3)+ sy(i1,i2,i3)*ty(i1,i2,i3)+sz(i1,i2,i3)*tz(i1,i2,i3))
     & *ust4(i1,i2,i3)+(rxx43(i1,i2,i3)+ryy43(i1,i2,i3)+rzz43(i1,i2,
     & i3))*ur4(i1,i2,i3)+(sxx43(i1,i2,i3)+syy43(i1,i2,i3)+szz43(i1,
     & i2,i3))*us4(i1,i2,i3)+(txx43(i1,i2,i3)+tyy43(i1,i2,i3)+tzz43(
     & i1,i2,i3))*ut4(i1,i2,i3)
c============================================================================================
c Define derivatives for a rectangular grid
c
c============================================================================================
      h41(kd) = 1./(12.*dx(kd))
      h42(kd) = 1./(12.*dx(kd)**2)
      ux43r(i1,i2,i3)=(8.*(u(i1+1,i2,i3)-u(i1-1,i2,i3))-(u(i1+2,i2,i3)-
     & u(i1-2,i2,i3)))*h41(0)
      uy43r(i1,i2,i3)=(8.*(u(i1,i2+1,i3)-u(i1,i2-1,i3))-(u(i1,i2+2,i3)-
     & u(i1,i2-2,i3)))*h41(1)
      uz43r(i1,i2,i3)=(8.*(u(i1,i2,i3+1)-u(i1,i2,i3-1))-(u(i1,i2,i3+2)-
     & u(i1,i2,i3-2)))*h41(2)
      uxx43r(i1,i2,i3)=( -30.*u(i1,i2,i3)+16.*(u(i1+1,i2,i3)+u(i1-1,i2,
     & i3))-(u(i1+2,i2,i3)+u(i1-2,i2,i3)) )*h42(0)
      uyy43r(i1,i2,i3)=( -30.*u(i1,i2,i3)+16.*(u(i1,i2+1,i3)+u(i1,i2-1,
     & i3))-(u(i1,i2+2,i3)+u(i1,i2-2,i3)) )*h42(1)
      uzz43r(i1,i2,i3)=( -30.*u(i1,i2,i3)+16.*(u(i1,i2,i3+1)+u(i1,i2,
     & i3-1))-(u(i1,i2,i3+2)+u(i1,i2,i3-2)) )*h42(2)
      uxy43r(i1,i2,i3)=( (u(i1+2,i2+2,i3)-u(i1-2,i2+2,i3)- u(i1+2,i2-2,
     & i3)+u(i1-2,i2-2,i3)) +8.*(u(i1-1,i2+2,i3)-u(i1-1,i2-2,i3)-u(i1+
     & 1,i2+2,i3)+u(i1+1,i2-2,i3) +u(i1+2,i2-1,i3)-u(i1-2,i2-1,i3)-u(
     & i1+2,i2+1,i3)+u(i1-2,i2+1,i3))+64.*(u(i1+1,i2+1,i3)-u(i1-1,i2+
     & 1,i3)- u(i1+1,i2-1,i3)+u(i1-1,i2-1,i3)))*(h41(0)*h41(1))
      uxz43r(i1,i2,i3)=( (u(i1+2,i2,i3+2)-u(i1-2,i2,i3+2)-u(i1+2,i2,i3-
     & 2)+u(i1-2,i2,i3-2)) +8.*(u(i1-1,i2,i3+2)-u(i1-1,i2,i3-2)-u(i1+
     & 1,i2,i3+2)+u(i1+1,i2,i3-2) +u(i1+2,i2,i3-1)-u(i1-2,i2,i3-1)- u(
     & i1+2,i2,i3+1)+u(i1-2,i2,i3+1)) +64.*(u(i1+1,i2,i3+1)-u(i1-1,i2,
     & i3+1)-u(i1+1,i2,i3-1)+u(i1-1,i2,i3-1)) )*(h41(0)*h41(2))
      uyz43r(i1,i2,i3)=( (u(i1,i2+2,i3+2)-u(i1,i2-2,i3+2)-u(i1,i2+2,i3-
     & 2)+u(i1,i2-2,i3-2)) +8.*(u(i1,i2-1,i3+2)-u(i1,i2-1,i3-2)-u(i1,
     & i2+1,i3+2)+u(i1,i2+1,i3-2) +u(i1,i2+2,i3-1)-u(i1,i2-2,i3-1)-u(
     & i1,i2+2,i3+1)+u(i1,i2-2,i3+1)) +64.*(u(i1,i2+1,i3+1)-u(i1,i2-1,
     & i3+1)-u(i1,i2+1,i3-1)+u(i1,i2-1,i3-1)) )*(h41(1)*h41(2))
      ux41r(i1,i2,i3)= ux43r(i1,i2,i3)
      uy41r(i1,i2,i3)= uy43r(i1,i2,i3)
      uz41r(i1,i2,i3)= uz43r(i1,i2,i3)
      uxx41r(i1,i2,i3)= uxx43r(i1,i2,i3)
      uyy41r(i1,i2,i3)= uyy43r(i1,i2,i3)
      uzz41r(i1,i2,i3)= uzz43r(i1,i2,i3)
      uxy41r(i1,i2,i3)= uxy43r(i1,i2,i3)
      uxz41r(i1,i2,i3)= uxz43r(i1,i2,i3)
      uyz41r(i1,i2,i3)= uyz43r(i1,i2,i3)
      ulaplacian41r(i1,i2,i3)=uxx43r(i1,i2,i3)
      ux42r(i1,i2,i3)= ux43r(i1,i2,i3)
      uy42r(i1,i2,i3)= uy43r(i1,i2,i3)
      uz42r(i1,i2,i3)= uz43r(i1,i2,i3)
      uxx42r(i1,i2,i3)= uxx43r(i1,i2,i3)
      uyy42r(i1,i2,i3)= uyy43r(i1,i2,i3)
      uzz42r(i1,i2,i3)= uzz43r(i1,i2,i3)
      uxy42r(i1,i2,i3)= uxy43r(i1,i2,i3)
      uxz42r(i1,i2,i3)= uxz43r(i1,i2,i3)
      uyz42r(i1,i2,i3)= uyz43r(i1,i2,i3)
      ulaplacian42r(i1,i2,i3)=uxx43r(i1,i2,i3)+uyy43r(i1,i2,i3)
      ulaplacian43r(i1,i2,i3)=uxx43r(i1,i2,i3)+uyy43r(i1,i2,i3)+uzz43r(
     & i1,i2,i3)


      ! Here are some derivatives that haven't been defined yet: 
      urss2(i1,i2,i3)=(uss2(i1+1,i2,i3)-uss2(i1-1,i2,i3))*d12(0)
      urtt2(i1,i2,i3)=(utt2(i1+1,i2,i3)-utt2(i1-1,i2,i3))*d12(0)

      urrs2(i1,i2,i3)=(urr2(i1,i2+1,i3)-urr2(i1,i2-1,i3))*d12(1)
      ustt2(i1,i2,i3)=(utt2(i1,i2+1,i3)-utt2(i1,i2-1,i3))*d12(1)

      urrt2(i1,i2,i3)=(urr2(i1,i2,i3+1)-urr2(i1,i2,i3-1))*d12(2)
      usst2(i1,i2,i3)=(uss2(i1,i2,i3+1)-uss2(i1,i2,i3-1))*d12(2)


!....end statement function

!      write(*,9000) (((f(i1,i2,i3),i1=nd1a,nd1b),i2=nd2a,nd2b),i3=nd3a,nd3b)
! 9000 format(<nd1b-nd1a+1>(f4.1,1x))

      nd              =ipar(0)
      direction       =ipar(1)
      sparseStencil   =ipar(2)
      orderOfAccuracy =ipar(3)
      n1a             =ipar(4)
      n1b             =ipar(5)
      n1c             =ipar(6)
      n2a             =ipar(7)
      n2b             =ipar(8)
      n2c             =ipar(9)
      n3a             =ipar(10)
      n3b             =ipar(11)
      n3c             =ipar(12)
      bc(0,0)         =ipar(13)
      bc(1,0)         =ipar(14)
      bc(0,1)         =ipar(15)
      bc(1,1)         =ipar(16)
      bc(0,2)         =ipar(17)
      bc(1,2)         =ipar(18)
      bcOptionD       =ipar(19)  ! BC option for Dirichlet BC's
      bcOptionN       =ipar(20)  ! BC option for Neumann BC's
      orderOfExtrapD  =ipar(21)  ! for dirichlet
      orderOfExtrapN  =ipar(22)  ! for neumann
      gridType        =ipar(23)  ! **** added
      nn1a            =ipar(24)  ! these define the full bounds assuming no zebra solve,
      nn1b            =ipar(25)  ! end points are used to determine when one-sided differences of f and g are needed
      nn2a            =ipar(26)
      nn2b            =ipar(27)
      nn3a            =ipar(28)
      nn3b            =ipar(29)

      grid            =ipar(30)
      level           =ipar(31)
      equationToSolve =ipar(32)
      useBoundaryForcing=ipar(33)
      isNeumannBC(0)  =ipar(34)
      isNeumannBC(1)  =ipar(35)


      dx(0)           =rpar(0)
      dx(1)           =rpar(1)
      dx(2)           =rpar(2)
      dr(0)           =rpar(3) ! **** added
      dr(1)           =rpar(4)
      dr(2)           =rpar(5)

      ! Initialize a0 and derivatives (a0 is the coeff u in the Mixed BC) -- for now a0 is constant (a0 is set later)
       a0=0.
       a0r=0.
       a0s=0.
       a0t=0.
       a0rr=0.
       a0ss=0.
       a0tt=0.
       a0rs=0.
       a0rt=0.
       a0st=0.


      if( nd.eq.2 .and. orderOfAccuracy.eq.2 )then
       m11=1                 ! MCE(-1,-1, 0)
       m21=2                 ! MCE( 0,-1, 0)
       m31=3                 ! MCE(+1,-1, 0)
       m12=4                 ! MCE(-1, 0, 0)
       m22=5                 ! MCE( 0, 0, 0)
       m32=6                 ! MCE(+1, 0, 0)
       m13=7                 ! MCE(-1,+1, 0)
       m23=8                 ! MCE( 0,+1, 0)
       m33=9
      else if( nd.eq.2 .and. orderOfAccuracy.eq.4 )then
       m11=1
       m21=2
       m31=3
       m41=4
       m51=5
       m12=6
       m22=7
       m32=8
       m42=9
       m52=10
       m13=11
       m23=12
       m33=13
       m43=14
       m53=15
       m14=16
       m24=17
       m34=18
       m44=19
       m54=20
       m15=21
       m25=22
       m35=23
       m45=24
       m55=25

      else if( nd.eq.3 .and. orderOfAccuracy.eq.2 )then
       m111=1
       m211=2
       m311=3
       m121=4
       m221=5
       m321=6
       m131=7
       m231=8
       m331=9
       m112=10
       m212=11
       m312=12
       m122=13
       m222=14
       m322=15
       m132=16
       m232=17
       m332=18
       m113=19
       m213=20
       m313=21
       m123=22
       m223=23
       m323=24
       m133=25
       m233=26
       m333=27
      else if( nd.eq.3 .and. orderOfAccuracy.eq.4 )then
       m111=1
       m211=2
       m311=3
       m411=4
       m511=5
       m121=6
       m221=7
       m321=8
       m421=9
       m521=10
       m131=11
       m231=12
       m331=13
       m431=14
       m531=15
       m141=16
       m241=17
       m341=18
       m441=19
       m541=20
       m151=21
       m251=22
       m351=23
       m451=24
       m551=25

       m112=26
       m212=27
       m312=28
       m412=29
       m512=30
       m122=31
       m222=32
       m322=33
       m422=34
       m522=35
       m132=36
       m232=37
       m332=38
       m432=39
       m532=40
       m142=41
       m242=42
       m342=43
       m442=44
       m542=45
       m152=46
       m252=47
       m352=48
       m452=49
       m552=50

       m113=51
       m213=52
       m313=53
       m413=54
       m513=55
       m123=56
       m223=57
       m323=58
       m423=59
       m523=60
       m133=61
       m233=62
       m333=63
       m433=64
       m533=65
       m143=66
       m243=67
       m343=68
       m443=69
       m543=70
       m153=71
       m253=72
       m353=73
       m453=74
       m553=75

       m114=76
       m214=77
       m314=78
       m414=79
       m514=80
       m124=81
       m224=82
       m324=83
       m424=84
       m524=85
       m134=86
       m234=87
       m334=88
       m434=89
       m534=90
       m144=91
       m244=92
       m344=93
       m444=94
       m544=95
       m154=96
       m254=97
       m354=98
       m454=99
       m554=100

       m115=101
       m215=102
       m315=103
       m415=104
       m515=105
       m125=106
       m225=107
       m325=108
       m425=109
       m525=110
       m135=111
       m235=112
       m335=113
       m435=114
       m535=115
       m145=116
       m245=117
       m345=118
       m445=119
       m545=120
       m155=121
       m255=122
       m355=123
       m455=124
       m555=125
      else
        stop 5561
      end if

      axis=direction ! we only fill in BC's along the direction of the line solve
      is1=0
      is2=0
      is3=0
      do side=0,1
        if( axis.eq.0 )then
          is1=1-2*side
        else if( axis.eq.1 )then
          is2=1-2*side
        else
          is3=1-2*side
        end if
        if( bc(side,axis).eq.equation )then

         ! write(*,'("LineSmoothRHS: Neumann: level=",i2," side,axis=",2i2," bc=",i3," bcOptionN=",i2," sparseStencil=",i3," useBoundaryForcing=",i3)') level,side,axis,bc(side,axis),bcOptionN,sparseStencil,useBoundaryForcing

         ! --------------------------
         ! ---- Neumann or mixed ----
         ! --------------------------


         if( orderOfAccuracy.eq.2 )then
           ! --------- 2nd order ------------

           shift=1 ! shift to boundary (1 ghost)
            m1a=n1a
            m1b=n1b
            m2a=n2a
            m2b=n2b
            m3a=n3a
            m3b=n3b
            if( axis.eq.0 )then
             if( side.eq.0 )then
               m1a=n1a+shift
             else
               m1a=n1b-shift
             end if
             m1b=m1a
            else if( axis.eq.1 )then
             if( side.eq.0 )then
               m2a=n2a+shift
             else
               m2a=n2b-shift
             end if
             m2b=m2a
            else
             if( side.eq.0 )then
               m3a=n3a+shift
             else
               m3a=n3b-shift
             end if
             m3b=m3a
            end if
           m1c=n1c
           m2c=n2c
           m3c=n3c

           ! bcOptionN = 0 : extrapolate
           !           = 1 : Use equation 
           !           = 2 : even symmetry
           !           = 3 : use mixed BC to second order 

           if( bcOptionN.le.0 .or. bcOptionN.gt.3 )then
             write(*,'("lineSmoothRHS: ERROR: unexpected bcOptionN=",
     & i6)') bcOptionN
             stop 8822
           end if
           ! *wdh* 110220 if( bcOptionN.ne.1 .or. 
           if( bcOptionN.eq.2 .or. ( bcOptionN.eq.3 .and. 
     & gridType.eq.rectangular ) .or. ( (
     & sparseStencil.eq.constantCoefficients .or. 
     & sparseStencil.eq.sparseConstantCoefficients ) .and. 
     & gridType.eq.rectangular)  )then
             ! Neumann/mixed, 2nd-order, const. coeff and rectangular

             ! write(*,'("LineSmoothRHS: Mixed/Neumann-rect : level=",i2," side,axis=",2i2," bc=",i3," bcOptionN=",i2," sparseStencil=",i3," useBoundaryForcing=",i3)') level,side,axis,bc(side,axis),bcOptionN,sparseStencil,useBoundaryForcing


              if( useBoundaryForcing.eq.1 )then
                do i3=m3a,m3b,m3c
                j3=i3-is3
                do i2=m2a,m2b,m2c
                j2=i2-is2
                do i1=m1a,m1b,m1c
                j1=i1-is1
                if( mask(i1,i2,i3).gt.0 )then
                  r(j1,j2,j3)=f(j1,j2,j3)
                else
                  r(j1,j2,j3)=0.
                end if
                end do
                end do
                end do
              else
                do i3=m3a,m3b,m3c
                j3=i3-is3
                do i2=m2a,m2b,m2c
                j2=i2-is2
                do i1=m1a,m1b,m1c
                j1=i1-is1
                r(j1,j2,j3)=0.
                end do
                end do
                end do
              end if

           else if( bcOptionN.eq.3 )then
             ! True Neumann/mixed, 2nd-order
             if( gridType.eq.rectangular )then
               stop 4321
             end if

              a0=bcData(0,side,axis)
              a1=bcData(1,side,axis)
              ! write(*,'(" lineSmoothRHS: assign RHS for mixedSecondOrder, side,axis,grid=",3i3," a0,a1=",2f6.2)') side,axis,grid,a0,a1
              is=1-2*side
              axisp1 = mod(axis+1,nd)
              axisp2 = mod(axis+2,nd)
               do i3=m3a,m3b,m3c
               j3=i3-is3
               do i2=m2a,m2b,m2c
               j2=i2-is2
               do i1=m1a,m1b,m1c
               j1=i1-is1
                ! Boundary: (i1,i2,i3)
                ! Ghost:    (j1,j2,j3)
                if( mask(i1,i2,i3).gt.0 )then
                 ! compute ur and us to second order:
                 urv(0) = (u(i1+1,i2,i3)-u(i1-1,i2,i3))/(2.*dr(0))
                 urv(1) = (u(i1,i2+1,i3)-u(i1,i2-1,i3))/(2.*dr(1))
                 an1 = rsxy(i1,i2,i3,axis,0)
                 an2 = rsxy(i1,i2,i3,axis,1)
                 if( nd.eq.2 )then
                  aNormi = (-is)/sqrt(an1**2+an2**2)
                  an1=an1*aNormi
                  an2=an2*aNormi
                  t1=a1*( an1*rsxy(i1,i2,i3,axisp1,0)+an2*rsxy(i1,i2,
     & i3,axisp1,1) )
                  if( useBoundaryForcing.eq.1 )then
                    r(j1,j2,j3)=f(j1,j2,j3) - ( t1*urv(axisp1) )
                  else
                    r(j1,j2,j3)=            - ( t1*urv(axisp1) )
                  end if
                 else
                  ! compute ut to second order:
                  urv(2) = (u(i1,i2,i3+1)-u(i1,i2,i3-1))/(2.*dr(2))
                  an3 = rsxy(i1,i2,i3,axis,2)
                  aNormi = (-is)/sqrt(an1**2+an2**2+an3**2)
                  an1=an1*aNormi
                  an2=an2*aNormi
                  an3=an3*aNormi
                  t1=a1*( an1*rsxy(i1,i2,i3,axisp1,0)+an2*rsxy(i1,i2,
     & i3,axisp1,1)+an3*rsxy(i1,i2,i3,axisp1,2) )
                  t2=a1*( an1*rsxy(i1,i2,i3,axisp2,0)+an2*rsxy(i1,i2,
     & i3,axisp2,1)+an3*rsxy(i1,i2,i3,axisp2,2) )
                  if( useBoundaryForcing.eq.1 )then
                    r(j1,j2,j3)=f(j1,j2,j3) - ( t1*urv(axisp1) +t2*urv(
     & axisp2) )
                  else
                    r(j1,j2,j3)=            - ( t1*urv(axisp1) +t2*urv(
     & axisp2) )
                  end if
                 end if
                else
                 r(j1,j2,j3)=0.
                end if
               end do
               end do
               end do

           else
             ! Neumann/mixed, 2nd-order, BC is stored in the coeff array

             !  write(*,'("LineSmoothRHS: Mixed/Neumann-curv : level=",i2," side,axis=",2i2," bc=",i3," bcOptionN=",i2," sparseStencil=",i3," useBoundaryForcing=",i3)') level,side,axis,bc(side,axis),bcOptionN,sparseStencil,useBoundaryForcing

            if( axis.eq.0 .and. nd.eq.2 )then
              if( useBoundaryForcing.eq.1 )then
                do i3=m3a,m3b,m3c
                j3=i3-is3
                do i2=m2a,m2b,m2c
                j2=i2-is2
                do i1=m1a,m1b,m1c
                j1=i1-is1
                if( mask(i1,i2,i3).gt.0 )then
                 r(j1,j2,j3)=f(j1,j2,j3) - (c(m11,j1,j2,j3)*u(i1-1,i2-
     & 1,i3)+c(m21,j1,j2,j3)*u(i1,i2-1,i3)+c(m31,j1,j2,j3)*u(i1+1,i2-
     & 1,i3)+c(m13,j1,j2,j3)*u(i1-1,i2+1,i3)+c(m23,j1,j2,j3)*u(i1,i2+
     & 1,i3)+c(m33,j1,j2,j3)*u(i1+1,i2+1,i3))
                 ! write(*,'(" LS-NRHS: set j1,j2=",2i3," rhs=",e10.2," f=",e10.2)') j1,j2,r(j1,j2,j3),f(j1,j2,j3)
                 ! write(*,'(" c11,c12,c13=",3e10.2," c21,c22,c23=",3e10.2," c31,c32,c33=",3e10.2)') !     c(m11,j1,j2,j3),c(m12,j1,j2,j3),c(m13,j1,j2,j3),!     c(m21,j1,j2,j3),c(m22,j1,j2,j3),c(m23,j1,j2,j3),!     c(m31,j1,j2,j3),c(m32,j1,j2,j3),c(m33,j1,j2,j3)
                else
                 r(j1,j2,j3)=0.
                end if
                end do
                end do
                end do
              else
                do i3=m3a,m3b,m3c
                j3=i3-is3
                do i2=m2a,m2b,m2c
                j2=i2-is2
                do i1=m1a,m1b,m1c
                j1=i1-is1
                if( mask(i1,i2,i3).gt.0 )then
                 r(j1,j2,j3)=            - (c(m11,j1,j2,j3)*u(i1-1,i2-
     & 1,i3)+c(m21,j1,j2,j3)*u(i1,i2-1,i3)+c(m31,j1,j2,j3)*u(i1+1,i2-
     & 1,i3)+c(m13,j1,j2,j3)*u(i1-1,i2+1,i3)+c(m23,j1,j2,j3)*u(i1,i2+
     & 1,i3)+c(m33,j1,j2,j3)*u(i1+1,i2+1,i3))
                else
                 r(j1,j2,j3)=0.
                end if
                end do
                end do
                end do
              end if
            else if( axis.eq.1 .and. nd.eq.2 )then
              if( useBoundaryForcing.eq.1 )then
                do i3=m3a,m3b,m3c
                j3=i3-is3
                do i2=m2a,m2b,m2c
                j2=i2-is2
                do i1=m1a,m1b,m1c
                j1=i1-is1
                if( mask(i1,i2,i3).gt.0 )then
                 r(j1,j2,j3)=f(j1,j2,j3) - (c(m11,j1,j2,j3)*u(i1-1,i2-
     & 1,i3)+c(m31,j1,j2,j3)*u(i1+1,i2-1,i3)+c(m12,j1,j2,j3)*u(i1-1,
     & i2,i3)+c(m32,j1,j2,j3)*u(i1+1,i2,i3)+c(m13,j1,j2,j3)*u(i1-1,i2+
     & 1,i3)+c(m33,j1,j2,j3)*u(i1+1,i2+1,i3))
                 ! write(*,'(" LS-NRHS: set j1,j2=",2i3," rhs=",e10.2," f=",e10.2)') j1,j2,r(j1,j2,j3),f(j1,j2,j3)
                 ! write(*,'(" c11,c12,c13=",3e10.2," c21,c22,c23=",3e10.2," c31,c32,c33=",3e10.2)') !     c(m11,j1,j2,j3),c(m12,j1,j2,j3),c(m13,j1,j2,j3),!     c(m21,j1,j2,j3),c(m22,j1,j2,j3),c(m23,j1,j2,j3),!     c(m31,j1,j2,j3),c(m32,j1,j2,j3),c(m33,j1,j2,j3)
                else
                 r(j1,j2,j3)=0.
                end if
                end do
                end do
                end do
              else
                do i3=m3a,m3b,m3c
                j3=i3-is3
                do i2=m2a,m2b,m2c
                j2=i2-is2
                do i1=m1a,m1b,m1c
                j1=i1-is1
                if( mask(i1,i2,i3).gt.0 )then
                 r(j1,j2,j3)=            - (c(m11,j1,j2,j3)*u(i1-1,i2-
     & 1,i3)+c(m31,j1,j2,j3)*u(i1+1,i2-1,i3)+c(m12,j1,j2,j3)*u(i1-1,
     & i2,i3)+c(m32,j1,j2,j3)*u(i1+1,i2,i3)+c(m13,j1,j2,j3)*u(i1-1,i2+
     & 1,i3)+c(m33,j1,j2,j3)*u(i1+1,i2+1,i3))
                else
                 r(j1,j2,j3)=0.
                end if
                end do
                end do
                end do
              end if

            else if( axis.eq.0 .and. nd.eq.3 )then
              if( useBoundaryForcing.eq.1 )then
                do i3=m3a,m3b,m3c
                j3=i3-is3
                do i2=m2a,m2b,m2c
                j2=i2-is2
                do i1=m1a,m1b,m1c
                j1=i1-is1
                if( mask(i1,i2,i3).gt.0 )then
                 r(j1,j2,j3)=f(j1,j2,j3) - (c(m111,j1,j2,j3)*u(i1-1,i2-
     & 1,i3-1)+c(m211,j1,j2,j3)*u(i1,i2-1,i3-1)+c(m311,j1,j2,j3)*u(i1+
     & 1,i2-1,i3-1)+c(m121,j1,j2,j3)*u(i1-1,i2,i3-1)+c(m221,j1,j2,j3)*
     & u(i1,i2,i3-1)+c(m321,j1,j2,j3)*u(i1+1,i2,i3-1)+c(m131,j1,j2,j3)
     & *u(i1-1,i2+1,i3-1)+c(m231,j1,j2,j3)*u(i1,i2+1,i3-1)+c(m331,j1,
     & j2,j3)*u(i1+1,i2+1,i3-1)+c(m112,j1,j2,j3)*u(i1-1,i2-1,i3)+c(
     & m212,j1,j2,j3)*u(i1,i2-1,i3)+c(m312,j1,j2,j3)*u(i1+1,i2-1,i3)+
     & c(m132,j1,j2,j3)*u(i1-1,i2+1,i3)+c(m232,j1,j2,j3)*u(i1,i2+1,i3)
     & +c(m332,j1,j2,j3)*u(i1+1,i2+1,i3)+c(m113,j1,j2,j3)*u(i1-1,i2-1,
     & i3+1)+c(m213,j1,j2,j3)*u(i1,i2-1,i3+1)+c(m313,j1,j2,j3)*u(i1+1,
     & i2-1,i3+1)+c(m123,j1,j2,j3)*u(i1-1,i2,i3+1)+c(m223,j1,j2,j3)*u(
     & i1,i2,i3+1)+c(m323,j1,j2,j3)*u(i1+1,i2,i3+1)+c(m133,j1,j2,j3)*
     & u(i1-1,i2+1,i3+1)+c(m233,j1,j2,j3)*u(i1,i2+1,i3+1)+c(m333,j1,
     & j2,j3)*u(i1+1,i2+1,i3+1))
                 ! write(*,'(" LS-NRHS: set j1,j2=",2i3," rhs=",e10.2," f=",e10.2)') j1,j2,r(j1,j2,j3),f(j1,j2,j3)
                 ! write(*,'(" c11,c12,c13=",3e10.2," c21,c22,c23=",3e10.2," c31,c32,c33=",3e10.2)') !     c(m11,j1,j2,j3),c(m12,j1,j2,j3),c(m13,j1,j2,j3),!     c(m21,j1,j2,j3),c(m22,j1,j2,j3),c(m23,j1,j2,j3),!     c(m31,j1,j2,j3),c(m32,j1,j2,j3),c(m33,j1,j2,j3)
                else
                 r(j1,j2,j3)=0.
                end if
                end do
                end do
                end do
              else
                do i3=m3a,m3b,m3c
                j3=i3-is3
                do i2=m2a,m2b,m2c
                j2=i2-is2
                do i1=m1a,m1b,m1c
                j1=i1-is1
                if( mask(i1,i2,i3).gt.0 )then
                 r(j1,j2,j3)=            - (c(m111,j1,j2,j3)*u(i1-1,i2-
     & 1,i3-1)+c(m211,j1,j2,j3)*u(i1,i2-1,i3-1)+c(m311,j1,j2,j3)*u(i1+
     & 1,i2-1,i3-1)+c(m121,j1,j2,j3)*u(i1-1,i2,i3-1)+c(m221,j1,j2,j3)*
     & u(i1,i2,i3-1)+c(m321,j1,j2,j3)*u(i1+1,i2,i3-1)+c(m131,j1,j2,j3)
     & *u(i1-1,i2+1,i3-1)+c(m231,j1,j2,j3)*u(i1,i2+1,i3-1)+c(m331,j1,
     & j2,j3)*u(i1+1,i2+1,i3-1)+c(m112,j1,j2,j3)*u(i1-1,i2-1,i3)+c(
     & m212,j1,j2,j3)*u(i1,i2-1,i3)+c(m312,j1,j2,j3)*u(i1+1,i2-1,i3)+
     & c(m132,j1,j2,j3)*u(i1-1,i2+1,i3)+c(m232,j1,j2,j3)*u(i1,i2+1,i3)
     & +c(m332,j1,j2,j3)*u(i1+1,i2+1,i3)+c(m113,j1,j2,j3)*u(i1-1,i2-1,
     & i3+1)+c(m213,j1,j2,j3)*u(i1,i2-1,i3+1)+c(m313,j1,j2,j3)*u(i1+1,
     & i2-1,i3+1)+c(m123,j1,j2,j3)*u(i1-1,i2,i3+1)+c(m223,j1,j2,j3)*u(
     & i1,i2,i3+1)+c(m323,j1,j2,j3)*u(i1+1,i2,i3+1)+c(m133,j1,j2,j3)*
     & u(i1-1,i2+1,i3+1)+c(m233,j1,j2,j3)*u(i1,i2+1,i3+1)+c(m333,j1,
     & j2,j3)*u(i1+1,i2+1,i3+1))
                else
                 r(j1,j2,j3)=0.
                end if
                end do
                end do
                end do
              end if
            else if( axis.eq.1 .and. nd.eq.3 )then
              if( useBoundaryForcing.eq.1 )then
                do i3=m3a,m3b,m3c
                j3=i3-is3
                do i2=m2a,m2b,m2c
                j2=i2-is2
                do i1=m1a,m1b,m1c
                j1=i1-is1
                if( mask(i1,i2,i3).gt.0 )then
                 r(j1,j2,j3)=f(j1,j2,j3) - (c(m111,j1,j2,j3)*u(i1-1,i2-
     & 1,i3-1)+c(m211,j1,j2,j3)*u(i1,i2-1,i3-1)+c(m311,j1,j2,j3)*u(i1+
     & 1,i2-1,i3-1)+c(m121,j1,j2,j3)*u(i1-1,i2,i3-1)+c(m221,j1,j2,j3)*
     & u(i1,i2,i3-1)+c(m321,j1,j2,j3)*u(i1+1,i2,i3-1)+c(m131,j1,j2,j3)
     & *u(i1-1,i2+1,i3-1)+c(m231,j1,j2,j3)*u(i1,i2+1,i3-1)+c(m331,j1,
     & j2,j3)*u(i1+1,i2+1,i3-1)+c(m112,j1,j2,j3)*u(i1-1,i2-1,i3)+c(
     & m312,j1,j2,j3)*u(i1+1,i2-1,i3)+c(m122,j1,j2,j3)*u(i1-1,i2,i3)+
     & c(m322,j1,j2,j3)*u(i1+1,i2,i3)+c(m132,j1,j2,j3)*u(i1-1,i2+1,i3)
     & +c(m332,j1,j2,j3)*u(i1+1,i2+1,i3)+c(m113,j1,j2,j3)*u(i1-1,i2-1,
     & i3+1)+c(m213,j1,j2,j3)*u(i1,i2-1,i3+1)+c(m313,j1,j2,j3)*u(i1+1,
     & i2-1,i3+1)+c(m123,j1,j2,j3)*u(i1-1,i2,i3+1)+c(m223,j1,j2,j3)*u(
     & i1,i2,i3+1)+c(m323,j1,j2,j3)*u(i1+1,i2,i3+1)+c(m133,j1,j2,j3)*
     & u(i1-1,i2+1,i3+1)+c(m233,j1,j2,j3)*u(i1,i2+1,i3+1)+c(m333,j1,
     & j2,j3)*u(i1+1,i2+1,i3+1))
                 ! write(*,'(" LS-NRHS: set j1,j2=",2i3," rhs=",e10.2," f=",e10.2)') j1,j2,r(j1,j2,j3),f(j1,j2,j3)
                 ! write(*,'(" c11,c12,c13=",3e10.2," c21,c22,c23=",3e10.2," c31,c32,c33=",3e10.2)') !     c(m11,j1,j2,j3),c(m12,j1,j2,j3),c(m13,j1,j2,j3),!     c(m21,j1,j2,j3),c(m22,j1,j2,j3),c(m23,j1,j2,j3),!     c(m31,j1,j2,j3),c(m32,j1,j2,j3),c(m33,j1,j2,j3)
                else
                 r(j1,j2,j3)=0.
                end if
                end do
                end do
                end do
              else
                do i3=m3a,m3b,m3c
                j3=i3-is3
                do i2=m2a,m2b,m2c
                j2=i2-is2
                do i1=m1a,m1b,m1c
                j1=i1-is1
                if( mask(i1,i2,i3).gt.0 )then
                 r(j1,j2,j3)=            - (c(m111,j1,j2,j3)*u(i1-1,i2-
     & 1,i3-1)+c(m211,j1,j2,j3)*u(i1,i2-1,i3-1)+c(m311,j1,j2,j3)*u(i1+
     & 1,i2-1,i3-1)+c(m121,j1,j2,j3)*u(i1-1,i2,i3-1)+c(m221,j1,j2,j3)*
     & u(i1,i2,i3-1)+c(m321,j1,j2,j3)*u(i1+1,i2,i3-1)+c(m131,j1,j2,j3)
     & *u(i1-1,i2+1,i3-1)+c(m231,j1,j2,j3)*u(i1,i2+1,i3-1)+c(m331,j1,
     & j2,j3)*u(i1+1,i2+1,i3-1)+c(m112,j1,j2,j3)*u(i1-1,i2-1,i3)+c(
     & m312,j1,j2,j3)*u(i1+1,i2-1,i3)+c(m122,j1,j2,j3)*u(i1-1,i2,i3)+
     & c(m322,j1,j2,j3)*u(i1+1,i2,i3)+c(m132,j1,j2,j3)*u(i1-1,i2+1,i3)
     & +c(m332,j1,j2,j3)*u(i1+1,i2+1,i3)+c(m113,j1,j2,j3)*u(i1-1,i2-1,
     & i3+1)+c(m213,j1,j2,j3)*u(i1,i2-1,i3+1)+c(m313,j1,j2,j3)*u(i1+1,
     & i2-1,i3+1)+c(m123,j1,j2,j3)*u(i1-1,i2,i3+1)+c(m223,j1,j2,j3)*u(
     & i1,i2,i3+1)+c(m323,j1,j2,j3)*u(i1+1,i2,i3+1)+c(m133,j1,j2,j3)*
     & u(i1-1,i2+1,i3+1)+c(m233,j1,j2,j3)*u(i1,i2+1,i3+1)+c(m333,j1,
     & j2,j3)*u(i1+1,i2+1,i3+1))
                else
                 r(j1,j2,j3)=0.
                end if
                end do
                end do
                end do
              end if
            else if( axis.eq.2 .and. nd.eq.3 )then
              if( useBoundaryForcing.eq.1 )then
                do i3=m3a,m3b,m3c
                j3=i3-is3
                do i2=m2a,m2b,m2c
                j2=i2-is2
                do i1=m1a,m1b,m1c
                j1=i1-is1
                if( mask(i1,i2,i3).gt.0 )then
                 r(j1,j2,j3)=f(j1,j2,j3) - (c(m111,j1,j2,j3)*u(i1-1,i2-
     & 1,i3-1)+c(m211,j1,j2,j3)*u(i1,i2-1,i3-1)+c(m311,j1,j2,j3)*u(i1+
     & 1,i2-1,i3-1)+c(m121,j1,j2,j3)*u(i1-1,i2,i3-1)+c(m321,j1,j2,j3)*
     & u(i1+1,i2,i3-1)+c(m131,j1,j2,j3)*u(i1-1,i2+1,i3-1)+c(m231,j1,
     & j2,j3)*u(i1,i2+1,i3-1)+c(m331,j1,j2,j3)*u(i1+1,i2+1,i3-1)+c(
     & m112,j1,j2,j3)*u(i1-1,i2-1,i3)+c(m212,j1,j2,j3)*u(i1,i2-1,i3)+
     & c(m312,j1,j2,j3)*u(i1+1,i2-1,i3)+c(m122,j1,j2,j3)*u(i1-1,i2,i3)
     & +c(m322,j1,j2,j3)*u(i1+1,i2,i3)+c(m132,j1,j2,j3)*u(i1-1,i2+1,
     & i3)+c(m232,j1,j2,j3)*u(i1,i2+1,i3)+c(m332,j1,j2,j3)*u(i1+1,i2+
     & 1,i3)+c(m113,j1,j2,j3)*u(i1-1,i2-1,i3+1)+c(m213,j1,j2,j3)*u(i1,
     & i2-1,i3+1)+c(m313,j1,j2,j3)*u(i1+1,i2-1,i3+1)+c(m123,j1,j2,j3)*
     & u(i1-1,i2,i3+1)+c(m323,j1,j2,j3)*u(i1+1,i2,i3+1)+c(m133,j1,j2,
     & j3)*u(i1-1,i2+1,i3+1)+c(m233,j1,j2,j3)*u(i1,i2+1,i3+1)+c(m333,
     & j1,j2,j3)*u(i1+1,i2+1,i3+1))
                 ! write(*,'(" LS-NRHS: set j1,j2=",2i3," rhs=",e10.2," f=",e10.2)') j1,j2,r(j1,j2,j3),f(j1,j2,j3)
                 ! write(*,'(" c11,c12,c13=",3e10.2," c21,c22,c23=",3e10.2," c31,c32,c33=",3e10.2)') !     c(m11,j1,j2,j3),c(m12,j1,j2,j3),c(m13,j1,j2,j3),!     c(m21,j1,j2,j3),c(m22,j1,j2,j3),c(m23,j1,j2,j3),!     c(m31,j1,j2,j3),c(m32,j1,j2,j3),c(m33,j1,j2,j3)
                else
                 r(j1,j2,j3)=0.
                end if
                end do
                end do
                end do
              else
                do i3=m3a,m3b,m3c
                j3=i3-is3
                do i2=m2a,m2b,m2c
                j2=i2-is2
                do i1=m1a,m1b,m1c
                j1=i1-is1
                if( mask(i1,i2,i3).gt.0 )then
                 r(j1,j2,j3)=            - (c(m111,j1,j2,j3)*u(i1-1,i2-
     & 1,i3-1)+c(m211,j1,j2,j3)*u(i1,i2-1,i3-1)+c(m311,j1,j2,j3)*u(i1+
     & 1,i2-1,i3-1)+c(m121,j1,j2,j3)*u(i1-1,i2,i3-1)+c(m321,j1,j2,j3)*
     & u(i1+1,i2,i3-1)+c(m131,j1,j2,j3)*u(i1-1,i2+1,i3-1)+c(m231,j1,
     & j2,j3)*u(i1,i2+1,i3-1)+c(m331,j1,j2,j3)*u(i1+1,i2+1,i3-1)+c(
     & m112,j1,j2,j3)*u(i1-1,i2-1,i3)+c(m212,j1,j2,j3)*u(i1,i2-1,i3)+
     & c(m312,j1,j2,j3)*u(i1+1,i2-1,i3)+c(m122,j1,j2,j3)*u(i1-1,i2,i3)
     & +c(m322,j1,j2,j3)*u(i1+1,i2,i3)+c(m132,j1,j2,j3)*u(i1-1,i2+1,
     & i3)+c(m232,j1,j2,j3)*u(i1,i2+1,i3)+c(m332,j1,j2,j3)*u(i1+1,i2+
     & 1,i3)+c(m113,j1,j2,j3)*u(i1-1,i2-1,i3+1)+c(m213,j1,j2,j3)*u(i1,
     & i2-1,i3+1)+c(m313,j1,j2,j3)*u(i1+1,i2-1,i3+1)+c(m123,j1,j2,j3)*
     & u(i1-1,i2,i3+1)+c(m323,j1,j2,j3)*u(i1+1,i2,i3+1)+c(m133,j1,j2,
     & j3)*u(i1-1,i2+1,i3+1)+c(m233,j1,j2,j3)*u(i1,i2+1,i3+1)+c(m333,
     & j1,j2,j3)*u(i1+1,i2+1,i3+1))
                else
                 r(j1,j2,j3)=0.
                end if
                end do
                end do
                end do
              end if
            else
             stop 116
            end if

           end if

         else if( orderOfAccuracy.eq.4 )then
           ! --------- 4th order ------------

          shift=2 ! shift to boundary (there are 2 ghost)
           m1a=n1a
           m1b=n1b
           m2a=n2a
           m2b=n2b
           m3a=n3a
           m3b=n3b
           if( axis.eq.0 )then
            if( side.eq.0 )then
              m1a=n1a+shift
            else
              m1a=n1b-shift
            end if
            m1b=m1a
           else if( axis.eq.1 )then
            if( side.eq.0 )then
              m2a=n2a+shift
            else
              m2a=n2b-shift
            end if
            m2b=m2a
           else
            if( side.eq.0 )then
              m3a=n3a+shift
            else
              m3a=n3b-shift
            end if
            m3b=m3a
           end if
          m1c=n1c
          m2c=n2c
          m3c=n3c

          if( bcOptionN.eq.1 )then

           if( axis.eq.0 .and. nd.eq.2 )then
             a0=bcData(0,side,axis)
             a1=bcData(1,side,axis)
             if( a1.eq.0. )then
               write(*,*) 'lineSmoothRHS:ERROR: a1=0!'
               stop 2
             end if
             if( gridType.eq.rectangular )then
            ! write(*,*) 'LSRHSt:4th-order neumann+EQN2 (rect)'
            !   write(*,'(''LSRHS:4th neumannAndEqn (rect) nn2a,nn2b='',2i3,)') nn2a,nn2b
               drn=dx(axis)
               nsign = 2*side-1
               ! (i1,i2,i3) = boundary point
               ! (j1,j2,j3) = ghost point
               do i3=m3a,m3b,m3c
                j3=i3-is3
               do i2=m2a,m2b,m2c
                j2=i2-is2
               do i1=m1a,m1b,m1c
                j1=i1-is1
                if( mask(i1,i2,i3).gt.0 )then
                ! the rhs for the mixed BC is stored in the ghost point value of f
                 ! the rhs for the mixed BC is stored in the ghost point value of f
                ! Cartesian grids use dx: 
                   g = f(j1,j2,j3)
                   ff=f(i1,i2,i3)
                     ! Note "g" is located on the ghost point "j1" of f
                     ! 2nd-order one sided:
                     ! ffr=(-f(i1+2*is1,i2,i3)+4.*f(i1+is1,i2,i3)-3.*ff)/(2.*dx(0))  
                     ! 3rd-order one sided: 100510 -- added is1
                     ffr=is1*(-11.*ff+18.*f(i1+is1,i2,i3)-9.*f(i1+2*
     & is1,i2,i3)+2.*f(i1+3*is1,i2,i3))/(6.*dx(0))
                     ! 100610: Check the mask for computing valid tangential derivatives:
                     ! NOTE: the forcing f and g are only assumed to be given where mask>0
                     ! In order to compute tangential derivatives of the forcing we may need to fill in
                     ! neighbouring values of the forcing at interp and unused points
                     gv( 0, 0, 0)=f(j1,i2,i3)
                     i2m1 = i2-1
                     if( i2m1.lt.nn2a .or. mask(i1,i2m1,i3).le.0 )then
                       ! f(j1,i2m1,i3)= extrap3(f,j1,i2m1,i3, 0,1,0)
                       ! gv( 0,-1, 0)=extrap3(f,j1,i2m1,i3, 0,1,0)
                       ! extrapWithMask
                         if( mask(i1+  (0),i2m1+  (1),i3+  (0)).gt.0 
     & .and. mask(i1+2*(0),i2m1+2*(1),i3+2*(0)).gt.0 .and.mask(i1+3*(
     & 0),i2m1+3*(1),i3+3*(0)).gt.0 .and.mask(i1+4*(0),i2m1+4*(1),i3+
     & 4*(0)).gt.0 )then
                          gv(0,-1,0)=(4.*f(j1+(0),i2m1+(1),i3+(0))-6.*
     & f(j1+2*(0),i2m1+2*(1),i3+2*(0))+4.*f(j1+3*(0),i2m1+3*(1),i3+3*(
     & 0))-f(j1+4*(0),i2m1+4*(1),i3+4*(0)))
                         else if( mask(i1+  (0),i2m1+  (1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2m1+2*(1),i3+2*(0)).gt.0 .and.mask(
     & i1+3*(0),i2m1+3*(1),i3+3*(0)).gt.0 )then
                          gv(0,-1,0)=(3.*f(j1+(0),i2m1+(1),i3+(0))-3.*
     & f(j1+2*(0),i2m1+2*(1),i3+2*(0))+f(j1+3*(0),i2m1+3*(1),i3+3*(0))
     & )
                         else if( mask(i1+  (0),i2m1+  (1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2m1+2*(1),i3+2*(0)).gt.0 )then
                          gv(0,-1,0)=(2.*f(j1+(0),i2m1+(1),i3+(0))-f(
     & j1+2*(0),i2m1+2*(1),i3+2*(0)))
                         else
                          gv(0,-1,0)=(f(j1+(0),i2m1+(1),i3+(0)))
                         end if
                     else
                       gv( 0,-1, 0)=f(j1,i2m1,i3)
                     end if
                     i2p1 = i2+1
                     if( i2p1.gt.nn2b .or. mask(i1,i2p1,i3).le.0 )then
                       ! f(j1,i2p1,i3)= extrap3(f,j1,i2p1,i3, 0,-1,0)
                       ! gv( 0,+1, 0)=extrap3(f,j1,i2p1,i3, 0,-1,0)
                         if( mask(i1+  (0),i2p1+  (-1),i3+  (0)).gt.0 
     & .and. mask(i1+2*(0),i2p1+2*(-1),i3+2*(0)).gt.0 .and.mask(i1+3*(
     & 0),i2p1+3*(-1),i3+3*(0)).gt.0 .and.mask(i1+4*(0),i2p1+4*(-1),
     & i3+4*(0)).gt.0 )then
                          gv(0,+1,0)=(4.*f(j1+(0),i2p1+(-1),i3+(0))-6.*
     & f(j1+2*(0),i2p1+2*(-1),i3+2*(0))+4.*f(j1+3*(0),i2p1+3*(-1),i3+
     & 3*(0))-f(j1+4*(0),i2p1+4*(-1),i3+4*(0)))
                         else if( mask(i1+  (0),i2p1+  (-1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2p1+2*(-1),i3+2*(0)).gt.0 .and.mask(
     & i1+3*(0),i2p1+3*(-1),i3+3*(0)).gt.0 )then
                          gv(0,+1,0)=(3.*f(j1+(0),i2p1+(-1),i3+(0))-3.*
     & f(j1+2*(0),i2p1+2*(-1),i3+2*(0))+f(j1+3*(0),i2p1+3*(-1),i3+3*(
     & 0)))
                         else if( mask(i1+  (0),i2p1+  (-1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2p1+2*(-1),i3+2*(0)).gt.0 )then
                          gv(0,+1,0)=(2.*f(j1+(0),i2p1+(-1),i3+(0))-f(
     & j1+2*(0),i2p1+2*(-1),i3+2*(0)))
                         else
                          gv(0,+1,0)=(f(j1+(0),i2p1+(-1),i3+(0)))
                         end if
                     else
                       gv( 0,+1, 0)=f(j1,i2p1,i3)
                     end if
                     ! gss=FSS(j1,i2,i3)
                     gss = ((gv(0,+1,0)-2.*gv(0,0,0)+gv(0,-1,0))*h22(1)
     & )
            !   write(*,'(''LNSM : i1,i2,i3,g,ffr,gss,u,uss ='',3i3,5f11.6)') i1,i2,i3,g,ffr,gss,u(i1,i2,i3),(u(i1,i2+1,i3)-2.*u(i1,i2,i3)+u(i1,i2-1,i3))/dx(1)**2
            !  write(*,'('' i1,i2,i3,f,f,f='',3i3,4e11.2)') i1,i2,i3,f(i1,i2,i3),f(i1+2*is1,i2+2*is2,i3),f(i1+is1,i2+is2,i3)
                r(j1,j2,j3)=g
                  r(i1-2*is1,i2,i3)=(ffr-(gss- a0*ff )/(a1*nsign))*dx(
     & axis)**3
                else
                  r(j1,j2,j3)=0.
                  r(i1-2*is1,i2-2*is2,i3-2*is3)=0.
                end if
              end do
              end do
              end do
             else
               ! **** curvilinear case ****
               nsign = 2*side-1
               ! (i1,i2,i3) = boundary point
               ! (j1,j2,j3) = ghost point
               do i3=m3a,m3b,m3c
                j3=i3-is3
               do i2=m2a,m2b,m2c
                j2=i2-is2
               do i1=m1a,m1b,m1c
                  j1=i1-is1
                 if( mask(i1,i2,i3).gt.0 )then
                ! the rhs for the mixed BC is stored in the ghost point value of f
                 ! the rhs for the mixed BC is stored in the ghost point value of f
                ! Curvilinear grids use dr:
                   g = f(j1,j2,j3)
                   ff= f(i1,i2,i3)
                     ! 2nd-order one sided:
                     ! ffr=is1*(-f(i1+2*is1,i2,i3)+4.*f(i1+is1,i2,i3)-3.*ff)*d12(0)  
                     ! 3rd-order one sided:
                     ffr=is1*(-11.*ff+18.*f(i1+is1,i2,i3)-9.*f(i1+2*
     & is1,i2,i3)+2.*f(i1+3*is1,i2,i3))/(6.*dr(0))
                     ! NOTE: the forcing f and g are only assumed to be given where mask>0
                     ! In order to compute tangential derivatives of the forcing we may need to fill in
                     ! neighbouring values of the forcing at interp and unused points
                     fv( 0, 0, 0) = f(i1,i2,i3)
                     gv( 0, 0, 0) = f(j1,i2,i3)
                     i2m1 = i2-1
                     if( i2m1.lt.nn2a .or. mask(i1,i2m1,i3).le.0 )then
                      ! NOTE: We DO need to extrap f and g 
                      ! f(i1,i2m1,i3)= extrap3(f,i1,i2m1,i3, 0,1,0)
                      ! f(j1,i2m1,i3)= extrap3(f,j1,i2m1,i3, 0,1,0)
                      ! fv( 0,-1, 0) = extrap3(f,i1,i2m1,i3, 0,1,0)
                      ! gv( 0,-1, 0) = extrap3(f,j1,i2m1,i3, 0,1,0)
                        if( mask(i1+  (0),i2m1+  (1),i3+  (0)).gt.0 
     & .and. mask(i1+2*(0),i2m1+2*(1),i3+2*(0)).gt.0 .and.mask(i1+3*(
     & 0),i2m1+3*(1),i3+3*(0)).gt.0 .and.mask(i1+4*(0),i2m1+4*(1),i3+
     & 4*(0)).gt.0 )then
                         fv(0,-1,0)=(4.*f(i1+(0),i2m1+(1),i3+(0))-6.*f(
     & i1+2*(0),i2m1+2*(1),i3+2*(0))+4.*f(i1+3*(0),i2m1+3*(1),i3+3*(0)
     & )-f(i1+4*(0),i2m1+4*(1),i3+4*(0)))
                        else if( mask(i1+  (0),i2m1+  (1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2m1+2*(1),i3+2*(0)).gt.0 .and.mask(
     & i1+3*(0),i2m1+3*(1),i3+3*(0)).gt.0 )then
                         fv(0,-1,0)=(3.*f(i1+(0),i2m1+(1),i3+(0))-3.*f(
     & i1+2*(0),i2m1+2*(1),i3+2*(0))+f(i1+3*(0),i2m1+3*(1),i3+3*(0)))
                        else if( mask(i1+  (0),i2m1+  (1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2m1+2*(1),i3+2*(0)).gt.0 )then
                         fv(0,-1,0)=(2.*f(i1+(0),i2m1+(1),i3+(0))-f(i1+
     & 2*(0),i2m1+2*(1),i3+2*(0)))
                        else
                         fv(0,-1,0)=(f(i1+(0),i2m1+(1),i3+(0)))
                        end if
                        if( mask(i1+  (0),i2m1+  (1),i3+  (0)).gt.0 
     & .and. mask(i1+2*(0),i2m1+2*(1),i3+2*(0)).gt.0 .and.mask(i1+3*(
     & 0),i2m1+3*(1),i3+3*(0)).gt.0 .and.mask(i1+4*(0),i2m1+4*(1),i3+
     & 4*(0)).gt.0 )then
                         gv(0,-1,0)=(4.*f(j1+(0),i2m1+(1),i3+(0))-6.*f(
     & j1+2*(0),i2m1+2*(1),i3+2*(0))+4.*f(j1+3*(0),i2m1+3*(1),i3+3*(0)
     & )-f(j1+4*(0),i2m1+4*(1),i3+4*(0)))
                        else if( mask(i1+  (0),i2m1+  (1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2m1+2*(1),i3+2*(0)).gt.0 .and.mask(
     & i1+3*(0),i2m1+3*(1),i3+3*(0)).gt.0 )then
                         gv(0,-1,0)=(3.*f(j1+(0),i2m1+(1),i3+(0))-3.*f(
     & j1+2*(0),i2m1+2*(1),i3+2*(0))+f(j1+3*(0),i2m1+3*(1),i3+3*(0)))
                        else if( mask(i1+  (0),i2m1+  (1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2m1+2*(1),i3+2*(0)).gt.0 )then
                         gv(0,-1,0)=(2.*f(j1+(0),i2m1+(1),i3+(0))-f(j1+
     & 2*(0),i2m1+2*(1),i3+2*(0)))
                        else
                         gv(0,-1,0)=(f(j1+(0),i2m1+(1),i3+(0)))
                        end if
                     else
                      fv( 0,-1, 0) = f(i1,i2m1,i3)
                      gv( 0,-1, 0) = f(j1,i2m1,i3)
                     end if
                     i2p1 = i2+1
                     if( i2p1.gt.nn2b .or. mask(i1,i2p1,i3).le.0 )then
                      !  f(i1,i2p1,i3)= extrap3(f,i1,i2p1,i3, 0,-1,0)
                      !  f(j1,i2p1,i3)= extrap3(f,j1,i2p1,i3, 0,-1,0)
                      ! fv( 0,+1, 0) = extrap3(f,i1,i2p1,i3, 0,-1,0)
                      ! gv( 0,+1, 0) = extrap3(f,j1,i2p1,i3, 0,-1,0)
                        if( mask(i1+  (0),i2p1+  (-1),i3+  (0)).gt.0 
     & .and. mask(i1+2*(0),i2p1+2*(-1),i3+2*(0)).gt.0 .and.mask(i1+3*(
     & 0),i2p1+3*(-1),i3+3*(0)).gt.0 .and.mask(i1+4*(0),i2p1+4*(-1),
     & i3+4*(0)).gt.0 )then
                         fv(0,+1,0)=(4.*f(i1+(0),i2p1+(-1),i3+(0))-6.*
     & f(i1+2*(0),i2p1+2*(-1),i3+2*(0))+4.*f(i1+3*(0),i2p1+3*(-1),i3+
     & 3*(0))-f(i1+4*(0),i2p1+4*(-1),i3+4*(0)))
                        else if( mask(i1+  (0),i2p1+  (-1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2p1+2*(-1),i3+2*(0)).gt.0 .and.mask(
     & i1+3*(0),i2p1+3*(-1),i3+3*(0)).gt.0 )then
                         fv(0,+1,0)=(3.*f(i1+(0),i2p1+(-1),i3+(0))-3.*
     & f(i1+2*(0),i2p1+2*(-1),i3+2*(0))+f(i1+3*(0),i2p1+3*(-1),i3+3*(
     & 0)))
                        else if( mask(i1+  (0),i2p1+  (-1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2p1+2*(-1),i3+2*(0)).gt.0 )then
                         fv(0,+1,0)=(2.*f(i1+(0),i2p1+(-1),i3+(0))-f(
     & i1+2*(0),i2p1+2*(-1),i3+2*(0)))
                        else
                         fv(0,+1,0)=(f(i1+(0),i2p1+(-1),i3+(0)))
                        end if
                        if( mask(i1+  (0),i2p1+  (-1),i3+  (0)).gt.0 
     & .and. mask(i1+2*(0),i2p1+2*(-1),i3+2*(0)).gt.0 .and.mask(i1+3*(
     & 0),i2p1+3*(-1),i3+3*(0)).gt.0 .and.mask(i1+4*(0),i2p1+4*(-1),
     & i3+4*(0)).gt.0 )then
                         gv(0,+1,0)=(4.*f(j1+(0),i2p1+(-1),i3+(0))-6.*
     & f(j1+2*(0),i2p1+2*(-1),i3+2*(0))+4.*f(j1+3*(0),i2p1+3*(-1),i3+
     & 3*(0))-f(j1+4*(0),i2p1+4*(-1),i3+4*(0)))
                        else if( mask(i1+  (0),i2p1+  (-1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2p1+2*(-1),i3+2*(0)).gt.0 .and.mask(
     & i1+3*(0),i2p1+3*(-1),i3+3*(0)).gt.0 )then
                         gv(0,+1,0)=(3.*f(j1+(0),i2p1+(-1),i3+(0))-3.*
     & f(j1+2*(0),i2p1+2*(-1),i3+2*(0))+f(j1+3*(0),i2p1+3*(-1),i3+3*(
     & 0)))
                        else if( mask(i1+  (0),i2p1+  (-1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2p1+2*(-1),i3+2*(0)).gt.0 )then
                         gv(0,+1,0)=(2.*f(j1+(0),i2p1+(-1),i3+(0))-f(
     & j1+2*(0),i2p1+2*(-1),i3+2*(0)))
                        else
                         gv(0,+1,0)=(f(j1+(0),i2p1+(-1),i3+(0)))
                        end if
                     else
                      fv( 0,+1, 0) = f(i1,i2p1,i3)
                      gv( 0,+1, 0) = f(j1,i2p1,i3)
                     end if
                     ! ffs= FS(i1,i2,i3)
                     ! gs = FS(j1,i2,i3)
                     ! gss=FSS(j1,i2,i3)
                     ffs = ((fv(0,+1,0)-fv(0,-1,0))*d12(1))
                     gs  = ((gv(0,+1,0)-gv(0,-1,0))*d12(1))
                     gss = ((gv(0,+1,0)-2.*gv(0,0,0)+gv(0,-1,0))*d22(1)
     & )
                  ! ----- 2D ------
                  rxi=rx(i1,i2,i3)
                  ryi=ry(i1,i2,i3)
                  sxi=sx(i1,i2,i3)
                  syi=sy(i1,i2,i3)
                  rxr=rxr2(i1,i2,i3)
                  rxs=rxs2(i1,i2,i3)
                  ryr=ryr2(i1,i2,i3)
                  rys=rys2(i1,i2,i3)
                  sxr=sxr2(i1,i2,i3)
                  sxs=sxs2(i1,i2,i3)
                  syr=syr2(i1,i2,i3)
                  sys=sys2(i1,i2,i3)
                  rxx=rxx22(i1,i2,i3)
                  ryy=ryy22(i1,i2,i3)
                  rxrr=rxrr2(i1,i2,i3)
                  rxrs=rxrs2(i1,i2,i3)
                  rxss=rxss2(i1,i2,i3)
                  ryrr=ryrr2(i1,i2,i3)
                  ryrs=ryrs2(i1,i2,i3)
                  ryss=ryss2(i1,i2,i3)
                  sxx=sxx22(i1,i2,i3)
                  syy=syy22(i1,i2,i3)
                  sxrr=sxrr2(i1,i2,i3)
                  sxrs=sxrs2(i1,i2,i3)
                  sxss=sxss2(i1,i2,i3)
                  syrr=syrr2(i1,i2,i3)
                  syrs=syrs2(i1,i2,i3)
                  syss=syss2(i1,i2,i3)
                  rxxr=rxi*rxrr+rxr*rxr + sxi*rxrs + sxr*rxs
                  ryyr=ryi*ryrr+ryr*ryr + syi*ryrs + syr*rys
                  rxxs=rxi*rxrs+rxs*rxr + sxi*rxss + sxs*rxs
                  ryys=ryi*ryrs+rys*ryr + syi*ryss + sys*rys
                  sxxr=rxi*sxrr+rxr*sxr + sxi*sxrs + sxr*sxs
                  syyr=ryi*syrr+ryr*syr + syi*syrs + syr*sys
                  sxxs=rxi*sxrs+rxs*sxr + sxi*sxss + sxs*sxs
                  syys=ryi*syrs+rys*syr + syi*syss + sys*sys
                  alpha1=a1*nsign  ! nsign=2*side-1
                  alpha2=a1*nsign
                   rxNormI=1./sqrt(rxi**2+ryi**2)
                   rxNormIs=-(rxi*rxs+ryi*rys)*rxNormI**3
                   rxNormIss=-(rxi*rxss+ryi*ryss+rxs*rxs+rys*rys)*
     & rxNormI**3 -3.*(rxi*rxs+ryi*rys)*rxNormI**2*rxNormIs
                   n1=rxi*rxNormI
                   n1s=rxs*rxNormI + rxi*rxNormIs
                   n1ss=rxss*rxNormI + 2.*rxs*rxNormIs + rxi*rxNormIss
                   n2=ryi*rxNormI
                   n2s=rys*rxNormI + ryi*rxNormIs
                   n2ss=ryss*rxNormI + 2.*rys*rxNormIs + ryi*rxNormIss
                   an1=alpha1*(n1*rxi+n2*ryi)
                   an2=alpha2*(n1*sxi+n2*syi)
                   an1s=alpha1*(n1*rxs+n2*rys+n1s*rxi+n2s*ryi)
                   an1ss=alpha1*(n1*rxss+n2*ryss+2.*(n1s*rxs+n2s*rys)+
     & n1ss*rxi+n2ss*ryi)
                   an2s=alpha2*(n1*sxs+n2*sys + n1s*sxi+n2s*syi)
                   an2ss=alpha2*(n1*sxss+n2*syss + 2.*(n1s*sxs+n2s*sys)
     &  + n1ss*sxi+n2ss*syi)
                  c11=rxi**2+ryi**2
                  c11r=2.*(rxi*rxr+ryi*ryr)
                  c11s=2.*(rxi*rxs+ryi*rys)
                  c12=2.*(rxi*sxi+ryi*syi)
                  c12r=2.*(rxr*sxi+rxi*sxr + ryr*syi+ ryi*syr)
                  c12s=2.*(rxs*sxi+rxi*sxs + rys*syi+ ryi*sys)
                  c22=sxi**2+syi**2
                  c22r=2.*(sxi*sxr+syi*syr)
                  c22s=2.*(sxi*sxs+syi*sys)
                  c1=rxx+ryy
                  c1r=rxxr+ryyr
                  c1s=rxxs+ryys
                  c2=sxx+syy
                  c2r=sxxr+syyr
                  c2s=sxxs+syys
                  c0=0.
                  c0r=0.
                  c0s=0.
c Coefficients of u(i1-2,i2,i3) u(i1-1,i2,i3) u(i1,i2,i3) u(i1+1,i2,i3) u(i1+2,i2,i3)
c um2=-1/2/dr**3
c um1=1/dr**3+1/dr**2*br2
c u0 =-b0-2/dr**2*br2
c up1=1/dr**2*br2-1/dr**3
c up2=1/2/dr**3
                  b0=-(c12*c1*an1**2*an2*c0+c1s*an1*a0*c12**2*an2-c22s*
     & an1*c12**2*an1s*a0-c0s*an1**2*c12**2*an2+2*an2s*c12**3*an1s*a0+
     & c12**2*an1ss*a0*c22*an1-2*c12**2*an2s*c1*an1*a0-c0r*an1**3*c11*
     & c22+c0r*an1**2*c11*c12*an2+c1r*an1**2*c11*a0*c22-c22r*an1**2*
     & c11*c1*a0-c1r*an1*c11*a0*c12*an2-c12r*an1**2*c11*an2*c0+c12r*
     & an1*c11*an2*c1*a0-c2*an1**2*c11*an2*c0+c2*an1*c11*an2*c1*a0+
     & c22r*an1**3*c11*c0-c22**2*c11*an1ss*a0*an1+c22*c11*c1*an1*a0**
     & 2-c22*c11*c12*an1s*a0**2-2*c22*c11*an2s*c0*an1**2+2*c22**2*c11*
     & an1s**2*a0-c12*c1s*an1**2*a0*c22-c12*c22s*an1**3*c0-c12*c2*an1*
     & *3*c0-c12*c1**2*an1*an2*a0+c12*c2*an1**2*c1*a0+2*c12**2*an2s*
     & c0*an1**2-an1ss*a0*c12**3*an2-2*c12**2*an1s*an2*c0*an1+c12**3*
     & an1s*a0**2+2*c22*c11*an2s*c1*an1*a0-2*c22*c11*an2s*c12*an1s*a0+
     & c12*c12s*an1*an1s*a0*c22-c12*c12s*an1*an2*c1*a0+c12*c0s*an1**3*
     & c22+c12*c1*an1*an1s*a0*c22+c12**2*a0*c0*an1**2-2*c12**2*an1s**
     & 2*a0*c22-c12**2*c1*an1*a0**2+2*c12**2*an1s*an2*c1*a0+c22r*an1*
     & c11*c12*an1s*a0-c12r*an1*c11*an1s*a0*c22-c0*an1*c11*a0*c12*an2-
     & c2*an1*c11*an1s*a0*c22+c22*c11*an1ss*a0*c12*an2-2*c22*c11*an1s*
     & an2*c1*a0+2*c22*c11*an1s*an2*c0*an1+c12*c12s*an1**2*an2*c0+c12*
     & c22s*an1**2*c1*a0-c2*an1*c12**2*an1s*a0)/an1**2/(c12*an2-c22*
     & an1)/c11**2
                  b1=1/an1**2*(2*c12**2*an2s*c1*an1*an2+c12*c12s*an1**
     & 2*an2s*c22+c12*c12s*an1**2*a0*c22+c22r*an1**2*c11*c12*a0-c22r*
     & an1*c11*c12*an1s*an2+c22r*an1**2*c11*c1*an2+c1r*an1*c11*an2**2*
     & c12-c1r*an1**2*c11*an2*c22-c12*c12s*an1**2*an2*c2-c12*c12s*an1*
     & an1s*an2*c22-c2r*an1**2*c11*c12*an2+c12**2*a0*c1*an1*an2+3*c12*
     & *2*an1s*an2*c2*an1-2*c12**2*an1s*an2s*an1*c22+2*c12**3*an2s**2*
     & an1-c12r*an1*c11*c1*an2**2-c2*an1*c11*c1*an2**2+c0*an1*c11*an2*
     & *2*c12-c0*an1**2*c11*an2*c22+c12r*an1**2*c11*an2*c2-3*c22*c11*
     & an2s*c12*a0*an1+2*c22*c11*an2s*c12*an1s*an2+c2**2*an1**2*c11*
     & an2-c22*c11*c12*a0**2*an1+2*c22*c11*an1s*c1*an2**2-c22*c11*
     & an1ss*an2**2*c12-2*c22*c11*an2s*c1*an1*an2+c22*c11*an2ss*an1*
     & c12*an2+c22*c11*a0*c12*an1s*an2-c22*c11*an1s*an2*c2*an1+2*c22**
     & 2*c11*an1s*an2s*an1+2*c22**2*c11*an1s*a0*an1+c22**2*c11*an1ss*
     & an2*an1+3*an2s*c12**3*a0*an1-2*an2s*c12**3*an1s*an2-an2ss*an1*
     & c12**3*an2+2*c12**2*an1s**2*an2*c22-2*c12**2*an1s*c1*an2**2+
     & c12*c1**2*an1*an2**2-c12*c0*an1**3*c22+c12*c22s*an1**3*c2-2*
     & c12**2*an1s*a0*an1*c22-c12**2*an1ss*an2*c22*an1-a0*c12**3*an1s*
     & an2+c12**2*an2ss*an1**2*c22-2*c12**2*a0*c2*an1**2-3*c12**2*
     & an2s*c2*an1**2-2*c12*c1*an1**2*an2*c2+c12*c1*an1**2*an2s*c22+
     & c12*c1*an1**2*a0*c22-2*c22*c11*c12*an2s**2*an1+c22*c11*an2s*c2*
     & an1**2-c12*c22s*an1**2*c1*an2+c12*c1s*an1**2*an2*c22-c22*c11*
     & a0*c1*an1*an2-c12r*an1**2*c11*an2s*c22-c12r*an1**2*c11*a0*c22+
     & c12r*an1*c11*an1s*an2*c22+c22r*an1**2*c11*c12*an2s+c12**3*a0**
     & 2*an1-c12*c2s*an1**3*c22-c22**2*c11*an2ss*an1**2-2*c22**2*c11*
     & an1s**2*an2-c22r*an1**3*c11*c2+c2r*an1**3*c11*c22-c12*c1*an1*
     & an1s*an2*c22+c12*c12s*an1*c1*an2**2+c22s*an1*c12**2*an1s*an2-
     & c1s*an1*an2**2*c12**2+c2s*an1**2*c12**2*an2-c22s*an1**2*c12**2*
     & a0+c0*an1**2*c12**2*an2-c22s*an1**2*c12**2*an2s+c12*c2**2*an1**
     & 3+an1ss*an2**2*c12**3)/(c12*an2-c22*an1)/c11**2
                  br2=1/an1*(-c11s*an1*c12**2*an2+2*c12**2*an2s*c11*
     & an1+c12**2*a0*c11*an1+2*c12*c1*an1*an2*c11+c12*c12s*an1*an2*
     & c11-c12*c2*an1**2*c11-c12*c22s*an1**2*c11+c12*c11s*an1**2*c22-
     & 2*c22*c11**2*an2s*an1-c22*c11**2*a0*an1+2*c22*c11**2*an1s*an2-
     & c1*an1**2*c11*c22-c2*an1*c11**2*an2+c22r*an1**2*c11**2-c12r*
     & an1*c11**2*an2+c11r*an1*c11*c12*an2-c11r*an1**2*c11*c22-2*c12**
     & 2*an1s*an2*c11)/(c12*an2-c22*an1)/c11**2
                  b3=-(an2*c12**2-an2*c22*c11-c22*an1*c12)/an1/c11**2
                  bf=1/an1**2*(2*c12**2*an1s*an1*c22-c12*c1*an1**2*c22-
     & c12*c12s*an1**2*c22+2*c22*c11*an2s*c12*an1+c22*c11*a0*c12*an1-
     & 2*c22**2*c11*an1s*an1+c2*an1**2*c11*c22+c12r*an1**2*c11*c22-
     & c22r*an1**2*c11*c12-2*an2s*c12**3*an1-a0*c12**3*an1+c2*an1**2*
     & c12**2+c22s*an1**2*c12**2)/(c12*an2-c22*an1)/c11**2*gs+1/an1**
     & 2*(-c22*c11*an1*c12*an2+an1*c12**3*an2-c12**2*an1**2*c22+c22**
     & 2*c11*an1**2)/(c12*an2-c22*an1)/c11**2*gss+1/an1**2*(-2*c12**2*
     & an1s*an2*an1+c12*c1*an1**2*an2+c12*c12s*an1**2*an2+2*c22*c11*
     & an1s*an2*an1-c22*c11*a0*an1**2-2*c22*c11*an2s*an1**2-c2*an1**2*
     & c11*an2+c22r*an1**3*c11-c12r*an1**2*c11*an2+c12**2*a0*an1**2+2*
     & c12**2*an2s*an1**2-c12*c2*an1**3-c12*c22s*an1**3)/(c12*an2-c22*
     & an1)/c11**2*ff+1/an1**2*(-an1**2*c12**2*an2+c12*an1**3*c22)/(
     & c12*an2-c22*an1)/c11**2*ffs+1/an1**2*(-an1**3*c11*c22+an1**2*
     & c11*c12*an2)/(c12*an2-c22*an1)/c11**2*ffr+1/an1**2*(-2*c12**2*
     & an2s*c1*an1-c22s*an1*c12**2*an1s-c2*an1*c12**2*an1s+c1s*an1*
     & c12**2*an2-an1ss*c12**3*an2-2*c12**2*an1s**2*c22+c22r*an1*c11*
     & c12*an1s-c12r*an1*c11*an1s*c22+c12r*an1*c11*an2*c1-c22r*an1**2*
     & c11*c1-c0*an1*c11*c12*an2+2*an2s*c12**3*an1s-c2*an1*c11*an1s*
     & c22-c12*c1s*an1**2*c22+c12*c22s*an1**2*c1+c2*an1*c11*an2*c1+
     & c12**2*an1ss*c22*an1-c12**2*a0*c1*an1+c22*c11*an1ss*c12*an2-2*
     & c22*c11*an1s*an2*c1+c22*c11*a0*c1*an1-c22**2*c11*an1ss*an1+c0*
     & an1**2*c11*c22+c12*c12s*an1*an1s*c22-c12*c1**2*an1*an2-c12*
     & c12s*an1*an2*c1+c12*c2*an1**2*c1-2*c22*c11*an2s*c12*an1s+a0*
     & c12**3*an1s+c12*c1*an1*an1s*c22+2*c12**2*an1s*an2*c1+2*c22**2*
     & c11*an1s**2+2*c22*c11*an2s*c1*an1-c22*c11*a0*c12*an1s-c1r*an1*
     & c11*c12*an2+c1r*an1**2*c11*c22)/(c12*an2-c22*an1)/c11**2*g
                  us=us4(i1,i2,i3)
                  usss=usss2(i1,i2,i3)
            !    write(*,'(''LSmOpt: i1,i2,i3,g,gs,gss,ff,ffr,ffs,uss ='',3i3,7e9.2)') i1,i2,i3,g,gs,gss,ff,ffr,ffs,uss2(i1,i2,i3)
            !    write(*,'(''LSmOpt: an1,an2,c11,b0,b1,b2,b3,bf,b0+bf ='',9e10.2)') an1,an2,c11,b0,b1,b2,b3,bf,b0+bf
                  r(i1-is1,i2-is2,i3-is3)=g - an2*us
                  r(i1-2*is1,i2-2*is2,i3-2*is3)=b1*us+b3*usss+bf
                else
                  r(j1,j2,j3)=0.
                  r(i1-2*is1,i2-2*is2,i3-2*is3)=0.
                end if
              end do
              end do
              end do
             end if
           else if( axis.eq.1 .and. nd.eq.2 )then
             a0=bcData(0,side,axis)
             a1=bcData(1,side,axis)
             if( a1.eq.0. )then
               write(*,*) 'lineSmoothRHS:ERROR: a1=0!'
               stop 2
             end if
             if( gridType.eq.rectangular )then
            ! write(*,*) 'LSRHSt:4th-order neumann+EQN2 (rect)'
            !   write(*,'(''LSRHS:4th neumannAndEqn (rect) nn2a,nn2b='',2i3,)') nn2a,nn2b
               drn=dx(axis)
               nsign = 2*side-1
               ! (i1,i2,i3) = boundary point
               ! (j1,j2,j3) = ghost point
               do i3=m3a,m3b,m3c
                j3=i3-is3
               do i2=m2a,m2b,m2c
                j2=i2-is2
               do i1=m1a,m1b,m1c
                j1=i1-is1
                if( mask(i1,i2,i3).gt.0 )then
                ! the rhs for the mixed BC is stored in the ghost point value of f
                 ! the rhs for the mixed BC is stored in the ghost point value of f
                ! Cartesian grids use dx: 
                   g = f(j1,j2,j3)
                   ff=f(i1,i2,i3)
                     ! 2nd-order one sided:
                     ! ffs=(-f(i1,i2+2*is2,i3)+4.*f(i1,i2+is2,i3)-3.*ff)/(2.*dx(1)) 
                     ! 3rd-order one sided:
                     ffs=is2*(-11.*ff+18.*f(i1,i2+is2,i3)-9.*f(i1,i2+2*
     & is2,i3)+2.*f(i1,i2+3*is2,i3))/(6.*dx(1))
                     ! NOTE: the forcing f and g are only assumed to be given where mask>0
                     ! In order to compute tangential derivatives of the forcing we may need to fill in
                     ! neighbouring values of the forcing at interp and unused points
                     gv( 0, 0, 0)=f(i1,j2,i3)
                     i1m1 = i1-1
                     if( i1m1.lt.nn1a .or. mask(i1m1,i2,i3).le.0 )then
                      ! f(i1m1,j2,i3)= extrap3(f,i1m1,j2,i3, 1,0,0)
                      ! gv(-1, 0, 0) = extrap3(f,i1m1,j2,i3, 1,0,0)
                        if( mask(i1m1+  (1),i2+  (0),i3+  (0)).gt.0 
     & .and. mask(i1m1+2*(1),i2+2*(0),i3+2*(0)).gt.0 .and.mask(i1m1+3*
     & (1),i2+3*(0),i3+3*(0)).gt.0 .and.mask(i1m1+4*(1),i2+4*(0),i3+4*
     & (0)).gt.0 )then
                         gv(-1,0,0)=(4.*f(i1m1+(1),j2+(0),i3+(0))-6.*f(
     & i1m1+2*(1),j2+2*(0),i3+2*(0))+4.*f(i1m1+3*(1),j2+3*(0),i3+3*(0)
     & )-f(i1m1+4*(1),j2+4*(0),i3+4*(0)))
                        else if( mask(i1m1+  (1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1m1+2*(1),i2+2*(0),i3+2*(0)).gt.0 .and.mask(
     & i1m1+3*(1),i2+3*(0),i3+3*(0)).gt.0 )then
                         gv(-1,0,0)=(3.*f(i1m1+(1),j2+(0),i3+(0))-3.*f(
     & i1m1+2*(1),j2+2*(0),i3+2*(0))+f(i1m1+3*(1),j2+3*(0),i3+3*(0)))
                        else if( mask(i1m1+  (1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1m1+2*(1),i2+2*(0),i3+2*(0)).gt.0 )then
                         gv(-1,0,0)=(2.*f(i1m1+(1),j2+(0),i3+(0))-f(
     & i1m1+2*(1),j2+2*(0),i3+2*(0)))
                        else
                         gv(-1,0,0)=(f(i1m1+(1),j2+(0),i3+(0)))
                        end if
                     else
                       gv(-1, 0, 0) = f(i1m1,j2,i3)
                     end if
                     i1p1 = i1+1
                     if( i1p1.gt.nn1b .or. mask(i1p1,i2,i3).le.0 )then
                      ! f(i1p1,j2,i3)= extrap3(f,i1p1,j2,i3,-1,0,0)
                      ! gv(+1, 0, 0) = extrap3(f,i1p1,j2,i3,-1,0,0)
                        if( mask(i1p1+  (-1),i2+  (0),i3+  (0)).gt.0 
     & .and. mask(i1p1+2*(-1),i2+2*(0),i3+2*(0)).gt.0 .and.mask(i1p1+
     & 3*(-1),i2+3*(0),i3+3*(0)).gt.0 .and.mask(i1p1+4*(-1),i2+4*(0),
     & i3+4*(0)).gt.0 )then
                         gv(+1,0,0)=(4.*f(i1p1+(-1),j2+(0),i3+(0))-6.*
     & f(i1p1+2*(-1),j2+2*(0),i3+2*(0))+4.*f(i1p1+3*(-1),j2+3*(0),i3+
     & 3*(0))-f(i1p1+4*(-1),j2+4*(0),i3+4*(0)))
                        else if( mask(i1p1+  (-1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1p1+2*(-1),i2+2*(0),i3+2*(0)).gt.0 .and.mask(
     & i1p1+3*(-1),i2+3*(0),i3+3*(0)).gt.0 )then
                         gv(+1,0,0)=(3.*f(i1p1+(-1),j2+(0),i3+(0))-3.*
     & f(i1p1+2*(-1),j2+2*(0),i3+2*(0))+f(i1p1+3*(-1),j2+3*(0),i3+3*(
     & 0)))
                        else if( mask(i1p1+  (-1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1p1+2*(-1),i2+2*(0),i3+2*(0)).gt.0 )then
                         gv(+1,0,0)=(2.*f(i1p1+(-1),j2+(0),i3+(0))-f(
     & i1p1+2*(-1),j2+2*(0),i3+2*(0)))
                        else
                         gv(+1,0,0)=(f(i1p1+(-1),j2+(0),i3+(0)))
                        end if
                     else
                      gv(+1, 0, 0) = f(i1p1,j2,i3)
                     end if
                     ! grr=FRR(i1,j2,i3)
                     grr = ((gv(+1,0,0)-2.*gv(0,0,0)+gv(-1,0,0))*h22(0)
     & )
            !   write(*,'(''LNSM : i1,i2,i3,g,ffr,gss,u,uss ='',3i3,5f11.6)') i1,i2,i3,g,ffr,gss,u(i1,i2,i3),(u(i1,i2+1,i3)-2.*u(i1,i2,i3)+u(i1,i2-1,i3))/dx(1)**2
            !  write(*,'('' i1,i2,i3,f,f,f='',3i3,4e11.2)') i1,i2,i3,f(i1,i2,i3),f(i1+2*is1,i2+2*is2,i3),f(i1+is1,i2+is2,i3)
                r(j1,j2,j3)=g
                  r(i1,i2-2*is2,i3)=(ffs-(grr- a0*ff )/(a1*nsign))*dx(
     & axis)**3
                else
                  r(j1,j2,j3)=0.
                  r(i1-2*is1,i2-2*is2,i3-2*is3)=0.
                end if
              end do
              end do
              end do
             else
               ! **** curvilinear case ****
               nsign = 2*side-1
               ! (i1,i2,i3) = boundary point
               ! (j1,j2,j3) = ghost point
               do i3=m3a,m3b,m3c
                j3=i3-is3
               do i2=m2a,m2b,m2c
                j2=i2-is2
               do i1=m1a,m1b,m1c
                  j1=i1-is1
                 if( mask(i1,i2,i3).gt.0 )then
                ! the rhs for the mixed BC is stored in the ghost point value of f
                 ! the rhs for the mixed BC is stored in the ghost point value of f
                ! Curvilinear grids use dr:
                   g = f(j1,j2,j3)
                   ff= f(i1,i2,i3)
                     ! 2nd-order one sided:
                     ! is2*ffs=(-f(i1,i2+2*is2,i3)+4.*f(i1,i2+is2,i3)-3.*ff)*d12(1) 
                     ! 3rd-order one sided:
                     ffs=is2*(-11.*ff+18.*f(i1,i2+is2,i3)-9.*f(i1,i2+2*
     & is2,i3)+2.*f(i1,i2+3*is2,i3))/(6.*dr(1))
                     fv( 0, 0, 0) = f(i1,i2,i3)
                     gv( 0, 0, 0) = f(i1,j2,i3)
                     i1m1 = i1-1
                     if( i1m1.lt.nn1a .or. mask(i1m1,i2,i3).le.0 )then
                      ! f(i1m1,i2,i3)= extrap3(f,i1m1,i2,i3, 1,0,0)
                      ! f(i1m1,j2,i3)= extrap3(f,i1m1,j2,i3, 1,0,0)
                      ! fv(-1, 0, 0) = extrap3(f,i1m1,i2,i3, 1,0,0)
                      ! gv(-1, 0, 0) = extrap3(f,i1m1,j2,i3, 1,0,0)
                        if( mask(i1m1+  (1),i2+  (0),i3+  (0)).gt.0 
     & .and. mask(i1m1+2*(1),i2+2*(0),i3+2*(0)).gt.0 .and.mask(i1m1+3*
     & (1),i2+3*(0),i3+3*(0)).gt.0 .and.mask(i1m1+4*(1),i2+4*(0),i3+4*
     & (0)).gt.0 )then
                         fv(-1,0,0)=(4.*f(i1m1+(1),i2+(0),i3+(0))-6.*f(
     & i1m1+2*(1),i2+2*(0),i3+2*(0))+4.*f(i1m1+3*(1),i2+3*(0),i3+3*(0)
     & )-f(i1m1+4*(1),i2+4*(0),i3+4*(0)))
                        else if( mask(i1m1+  (1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1m1+2*(1),i2+2*(0),i3+2*(0)).gt.0 .and.mask(
     & i1m1+3*(1),i2+3*(0),i3+3*(0)).gt.0 )then
                         fv(-1,0,0)=(3.*f(i1m1+(1),i2+(0),i3+(0))-3.*f(
     & i1m1+2*(1),i2+2*(0),i3+2*(0))+f(i1m1+3*(1),i2+3*(0),i3+3*(0)))
                        else if( mask(i1m1+  (1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1m1+2*(1),i2+2*(0),i3+2*(0)).gt.0 )then
                         fv(-1,0,0)=(2.*f(i1m1+(1),i2+(0),i3+(0))-f(
     & i1m1+2*(1),i2+2*(0),i3+2*(0)))
                        else
                         fv(-1,0,0)=(f(i1m1+(1),i2+(0),i3+(0)))
                        end if
                        if( mask(i1m1+  (1),i2+  (0),i3+  (0)).gt.0 
     & .and. mask(i1m1+2*(1),i2+2*(0),i3+2*(0)).gt.0 .and.mask(i1m1+3*
     & (1),i2+3*(0),i3+3*(0)).gt.0 .and.mask(i1m1+4*(1),i2+4*(0),i3+4*
     & (0)).gt.0 )then
                         gv(-1,0,0)=(4.*f(i1m1+(1),j2+(0),i3+(0))-6.*f(
     & i1m1+2*(1),j2+2*(0),i3+2*(0))+4.*f(i1m1+3*(1),j2+3*(0),i3+3*(0)
     & )-f(i1m1+4*(1),j2+4*(0),i3+4*(0)))
                        else if( mask(i1m1+  (1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1m1+2*(1),i2+2*(0),i3+2*(0)).gt.0 .and.mask(
     & i1m1+3*(1),i2+3*(0),i3+3*(0)).gt.0 )then
                         gv(-1,0,0)=(3.*f(i1m1+(1),j2+(0),i3+(0))-3.*f(
     & i1m1+2*(1),j2+2*(0),i3+2*(0))+f(i1m1+3*(1),j2+3*(0),i3+3*(0)))
                        else if( mask(i1m1+  (1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1m1+2*(1),i2+2*(0),i3+2*(0)).gt.0 )then
                         gv(-1,0,0)=(2.*f(i1m1+(1),j2+(0),i3+(0))-f(
     & i1m1+2*(1),j2+2*(0),i3+2*(0)))
                        else
                         gv(-1,0,0)=(f(i1m1+(1),j2+(0),i3+(0)))
                        end if
                     else
                      fv(-1, 0, 0) = f(i1m1,i2,i3)
                      gv(-1, 0, 0) = f(i1m1,j2,i3)
                     end if
                     i1p1 = i1+1
                     if( i1p1.gt.nn1b .or. mask(i1p1,i2,i3).le.0 )then
                      ! f(i1p1,i2,i3)= extrap3(f,i1p1,i2,i3,-1,0,0)
                      ! f(i1p1,j2,i3)= extrap3(f,i1p1,j2,i3,-1,0,0)
                      ! fv(+1, 0, 0) = extrap3(f,i1p1,i2,i3,-1,0,0)
                      ! gv(+1, 0, 0) = extrap3(f,i1p1,j2,i3,-1,0,0)
                        if( mask(i1p1+  (-1),i2+  (0),i3+  (0)).gt.0 
     & .and. mask(i1p1+2*(-1),i2+2*(0),i3+2*(0)).gt.0 .and.mask(i1p1+
     & 3*(-1),i2+3*(0),i3+3*(0)).gt.0 .and.mask(i1p1+4*(-1),i2+4*(0),
     & i3+4*(0)).gt.0 )then
                         fv(+1,0,0)=(4.*f(i1p1+(-1),i2+(0),i3+(0))-6.*
     & f(i1p1+2*(-1),i2+2*(0),i3+2*(0))+4.*f(i1p1+3*(-1),i2+3*(0),i3+
     & 3*(0))-f(i1p1+4*(-1),i2+4*(0),i3+4*(0)))
                        else if( mask(i1p1+  (-1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1p1+2*(-1),i2+2*(0),i3+2*(0)).gt.0 .and.mask(
     & i1p1+3*(-1),i2+3*(0),i3+3*(0)).gt.0 )then
                         fv(+1,0,0)=(3.*f(i1p1+(-1),i2+(0),i3+(0))-3.*
     & f(i1p1+2*(-1),i2+2*(0),i3+2*(0))+f(i1p1+3*(-1),i2+3*(0),i3+3*(
     & 0)))
                        else if( mask(i1p1+  (-1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1p1+2*(-1),i2+2*(0),i3+2*(0)).gt.0 )then
                         fv(+1,0,0)=(2.*f(i1p1+(-1),i2+(0),i3+(0))-f(
     & i1p1+2*(-1),i2+2*(0),i3+2*(0)))
                        else
                         fv(+1,0,0)=(f(i1p1+(-1),i2+(0),i3+(0)))
                        end if
                        if( mask(i1p1+  (-1),i2+  (0),i3+  (0)).gt.0 
     & .and. mask(i1p1+2*(-1),i2+2*(0),i3+2*(0)).gt.0 .and.mask(i1p1+
     & 3*(-1),i2+3*(0),i3+3*(0)).gt.0 .and.mask(i1p1+4*(-1),i2+4*(0),
     & i3+4*(0)).gt.0 )then
                         gv(+1,0,0)=(4.*f(i1p1+(-1),j2+(0),i3+(0))-6.*
     & f(i1p1+2*(-1),j2+2*(0),i3+2*(0))+4.*f(i1p1+3*(-1),j2+3*(0),i3+
     & 3*(0))-f(i1p1+4*(-1),j2+4*(0),i3+4*(0)))
                        else if( mask(i1p1+  (-1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1p1+2*(-1),i2+2*(0),i3+2*(0)).gt.0 .and.mask(
     & i1p1+3*(-1),i2+3*(0),i3+3*(0)).gt.0 )then
                         gv(+1,0,0)=(3.*f(i1p1+(-1),j2+(0),i3+(0))-3.*
     & f(i1p1+2*(-1),j2+2*(0),i3+2*(0))+f(i1p1+3*(-1),j2+3*(0),i3+3*(
     & 0)))
                        else if( mask(i1p1+  (-1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1p1+2*(-1),i2+2*(0),i3+2*(0)).gt.0 )then
                         gv(+1,0,0)=(2.*f(i1p1+(-1),j2+(0),i3+(0))-f(
     & i1p1+2*(-1),j2+2*(0),i3+2*(0)))
                        else
                         gv(+1,0,0)=(f(i1p1+(-1),j2+(0),i3+(0)))
                        end if
                     else
                      fv(+1, 0, 0) = f(i1p1,i2,i3)
                      gv(+1, 0, 0) = f(i1p1,j2,i3)
                     end if
                     ! ffr= FR(i1,i2,i3)
                     ! gr = FR(i1,j2,i3)
                     ! grr=FRR(i1,j2,i3)
                     ffr = ((fv(+1,0,0)-fv(-1,0,0))*d12(0))
                     gr  = ((gv(+1,0,0)-gv(-1,0,0))*d12(0))
                     grr = ((gv(+1,0,0)-2.*gv(0,0,0)+gv(-1,0,0))*d22(0)
     & )
                  ! ----- 2D ------
                  rxi=rx(i1,i2,i3)
                  ryi=ry(i1,i2,i3)
                  sxi=sx(i1,i2,i3)
                  syi=sy(i1,i2,i3)
                  rxr=rxr2(i1,i2,i3)
                  rxs=rxs2(i1,i2,i3)
                  ryr=ryr2(i1,i2,i3)
                  rys=rys2(i1,i2,i3)
                  sxr=sxr2(i1,i2,i3)
                  sxs=sxs2(i1,i2,i3)
                  syr=syr2(i1,i2,i3)
                  sys=sys2(i1,i2,i3)
                  rxx=rxx22(i1,i2,i3)
                  ryy=ryy22(i1,i2,i3)
                  rxrr=rxrr2(i1,i2,i3)
                  rxrs=rxrs2(i1,i2,i3)
                  rxss=rxss2(i1,i2,i3)
                  ryrr=ryrr2(i1,i2,i3)
                  ryrs=ryrs2(i1,i2,i3)
                  ryss=ryss2(i1,i2,i3)
                  sxx=sxx22(i1,i2,i3)
                  syy=syy22(i1,i2,i3)
                  sxrr=sxrr2(i1,i2,i3)
                  sxrs=sxrs2(i1,i2,i3)
                  sxss=sxss2(i1,i2,i3)
                  syrr=syrr2(i1,i2,i3)
                  syrs=syrs2(i1,i2,i3)
                  syss=syss2(i1,i2,i3)
                  rxxr=rxi*rxrr+rxr*rxr + sxi*rxrs + sxr*rxs
                  ryyr=ryi*ryrr+ryr*ryr + syi*ryrs + syr*rys
                  rxxs=rxi*rxrs+rxs*rxr + sxi*rxss + sxs*rxs
                  ryys=ryi*ryrs+rys*ryr + syi*ryss + sys*rys
                  sxxr=rxi*sxrr+rxr*sxr + sxi*sxrs + sxr*sxs
                  syyr=ryi*syrr+ryr*syr + syi*syrs + syr*sys
                  sxxs=rxi*sxrs+rxs*sxr + sxi*sxss + sxs*sxs
                  syys=ryi*syrs+rys*syr + syi*syss + sys*sys
                  alpha1=a1*nsign  ! nsign=2*side-1
                  alpha2=a1*nsign
                   sxNormI=1./sqrt(sxi**2+syi**2)
                   sxNormIr=-(sxi*sxr+syi*syr)*sxNormI**3
                   sxNormIrr=-(sxi*sxrr+syi*syrr+sxr*sxr+syr*syr)*
     & sxNormI**3 -3.*(sxi*sxr+syi*syr)*sxNormI**2*sxNormIr
                   n1=sxi*sxNormI
                   n1r=sxr*sxNormI + sxi*sxNormIr
                   n1rr=sxrr*sxNormI + 2.*sxr*sxNormIr + sxi*sxNormIrr
                   n2=syi*sxNormI
                   n2r=syr*sxNormI + syi*sxNormIr
                   n2rr=syrr*sxNormI + 2.*syr*sxNormIr + syi*sxNormIrr
                   an1=alpha1*(n1*rxi+n2*ryi)
                   an2=alpha2*(n1*sxi+n2*syi)
                   an1r=alpha1*(n1*rxr+n1r*rxi + n2*ryr+n2r*ryi)
                   an1rr=alpha1*(n1*rxrr+n2*ryrr+ 2.*(n1r*rxr+n2r*ryr) 
     & + n1rr*rxi+n2rr*ryi)
                   an2r=alpha2*(n1*sxr+n1r*sxi + n2*syr+n2r*syi)
                   an2rr=alpha2*(n1*sxrr+n2*syrr+ 2.*(n1r*sxr+n2r*syr) 
     & + n1rr*sxi+n2rr*syi)
                  c11=rxi**2+ryi**2
                  c11r=2.*(rxi*rxr+ryi*ryr)
                  c11s=2.*(rxi*rxs+ryi*rys)
                  c12=2.*(rxi*sxi+ryi*syi)
                  c12r=2.*(rxr*sxi+rxi*sxr + ryr*syi+ ryi*syr)
                  c12s=2.*(rxs*sxi+rxi*sxs + rys*syi+ ryi*sys)
                  c22=sxi**2+syi**2
                  c22r=2.*(sxi*sxr+syi*syr)
                  c22s=2.*(sxi*sxs+syi*sys)
                  c1=rxx+ryy
                  c1r=rxxr+ryyr
                  c1s=rxxs+ryys
                  c2=sxx+syy
                  c2r=sxxr+syyr
                  c2s=sxxs+syys
                  c0=0.
                  c0r=0.
                  c0s=0.
c Coefficients of u(i1-2,i2,i3) u(i1-1,i2,i3) u(i1,i2,i3) u(i1+1,i2,i3) u(i1+2,i2,i3)
c um2=-1/2/dr**3
c um1=1/dr**3+1/dr**2*br2
c u0 =-b0-2/dr**2*br2
c up1=1/dr**2*br2-1/dr**3
c up2=1/2/dr**3
                  b0=-(c12*c2*an2**2*an1*c0+c2r*an2*a0*c12**2*an1-c11r*
     & an2*c12**2*an2r*a0-c0r*an2**2*c12**2*an1+2*an1r*c12**3*an2r*a0+
     & c12**2*an2rr*a0*c11*an2-2*c12**2*an1r*c2*an2*a0-c0s*an2**3*c22*
     & c11+c0s*an2**2*c22*c12*an1+c2s*an2**2*c22*a0*c11-c11s*an2**2*
     & c22*c2*a0-c2s*an2*c22*a0*c12*an1-c12s*an2**2*c22*an1*c0+c12s*
     & an2*c22*an1*c2*a0-c1*an2**2*c22*an1*c0+c1*an2*c22*an1*c2*a0+
     & c11s*an2**3*c22*c0-c11**2*c22*an2rr*a0*an2+c11*c22*c2*an2*a0**
     & 2-c11*c22*c12*an2r*a0**2-2*c11*c22*an1r*c0*an2**2+2*c11**2*c22*
     & an2r**2*a0-c12*c2r*an2**2*a0*c11-c12*c11r*an2**3*c0-c12*c1*an2*
     & *3*c0-c12*c2**2*an2*an1*a0+c12*c1*an2**2*c2*a0+2*c12**2*an1r*
     & c0*an2**2-an2rr*a0*c12**3*an1-2*c12**2*an2r*an1*c0*an2+c12**3*
     & an2r*a0**2+2*c11*c22*an1r*c2*an2*a0-2*c11*c22*an1r*c12*an2r*a0+
     & c12*c12r*an2*an2r*a0*c11-c12*c12r*an2*an1*c2*a0+c12*c0r*an2**3*
     & c11+c12*c2*an2*an2r*a0*c11+c12**2*a0*c0*an2**2-2*c12**2*an2r**
     & 2*a0*c11-c12**2*c2*an2*a0**2+2*c12**2*an2r*an1*c2*a0+c11s*an2*
     & c22*c12*an2r*a0-c12s*an2*c22*an2r*a0*c11-c0*an2*c22*a0*c12*an1-
     & c1*an2*c22*an2r*a0*c11+c11*c22*an2rr*a0*c12*an1-2*c11*c22*an2r*
     & an1*c2*a0+2*c11*c22*an2r*an1*c0*an2+c12*c12r*an2**2*an1*c0+c12*
     & c11r*an2**2*c2*a0-c1*an2*c12**2*an2r*a0)/an2**2/(c12*an1-c11*
     & an2)/c22**2
                  b1=1/an2**2*(2*c12**2*an1r*c2*an2*an1+c12*c12r*an2**
     & 2*an1r*c11+c12*c12r*an2**2*a0*c11+c11s*an2**2*c22*c12*a0-c11s*
     & an2*c22*c12*an2r*an1+c11s*an2**2*c22*c2*an1+c2s*an2*c22*an1**2*
     & c12-c2s*an2**2*c22*an1*c11-c12*c12r*an2**2*an1*c1-c12*c12r*an2*
     & an2r*an1*c11-c1s*an2**2*c22*c12*an1+c12**2*a0*c2*an2*an1+3*c12*
     & *2*an2r*an1*c1*an2-2*c12**2*an2r*an1r*an2*c11+2*c12**3*an1r**2*
     & an2-c12s*an2*c22*c2*an1**2-c1*an2*c22*c2*an1**2+c0*an2*c22*an1*
     & *2*c12-c0*an2**2*c22*an1*c11+c12s*an2**2*c22*an1*c1-3*c11*c22*
     & an1r*c12*a0*an2+2*c11*c22*an1r*c12*an2r*an1+c1**2*an2**2*c22*
     & an1-c11*c22*c12*a0**2*an2+2*c11*c22*an2r*c2*an1**2-c11*c22*
     & an2rr*an1**2*c12-2*c11*c22*an1r*c2*an2*an1+c11*c22*an1rr*an2*
     & c12*an1+c11*c22*a0*c12*an2r*an1-c11*c22*an2r*an1*c1*an2+2*c11**
     & 2*c22*an2r*an1r*an2+2*c11**2*c22*an2r*a0*an2+c11**2*c22*an2rr*
     & an1*an2+3*an1r*c12**3*a0*an2-2*an1r*c12**3*an2r*an1-an1rr*an2*
     & c12**3*an1+2*c12**2*an2r**2*an1*c11-2*c12**2*an2r*c2*an1**2+
     & c12*c2**2*an2*an1**2-c12*c0*an2**3*c11+c12*c11r*an2**3*c1-2*
     & c12**2*an2r*a0*an2*c11-c12**2*an2rr*an1*c11*an2-a0*c12**3*an2r*
     & an1+c12**2*an1rr*an2**2*c11-2*c12**2*a0*c1*an2**2-3*c12**2*
     & an1r*c1*an2**2-2*c12*c2*an2**2*an1*c1+c12*c2*an2**2*an1r*c11+
     & c12*c2*an2**2*a0*c11-2*c11*c22*c12*an1r**2*an2+c11*c22*an1r*c1*
     & an2**2-c12*c11r*an2**2*c2*an1+c12*c2r*an2**2*an1*c11-c11*c22*
     & a0*c2*an2*an1-c12s*an2**2*c22*an1r*c11-c12s*an2**2*c22*a0*c11+
     & c12s*an2*c22*an2r*an1*c11+c11s*an2**2*c22*c12*an1r+c12**3*a0**
     & 2*an2-c12*c1r*an2**3*c11-c11**2*c22*an1rr*an2**2-2*c11**2*c22*
     & an2r**2*an1-c11s*an2**3*c22*c1+c1s*an2**3*c22*c11-c12*c2*an2*
     & an2r*an1*c11+c12*c12r*an2*c2*an1**2+c11r*an2*c12**2*an2r*an1-
     & c2r*an2*an1**2*c12**2+c1r*an2**2*c12**2*an1-c11r*an2**2*c12**2*
     & a0+c0*an2**2*c12**2*an1-c11r*an2**2*c12**2*an1r+c12*c1**2*an2**
     & 3+an2rr*an1**2*c12**3)/(c12*an1-c11*an2)/c22**2
                  br2=1/an2*(-c22r*an2*c12**2*an1+2*c12**2*an1r*c22*
     & an2+c12**2*a0*c22*an2+2*c12*c2*an2*an1*c22+c12*c12r*an2*an1*
     & c22-c12*c1*an2**2*c22-c12*c11r*an2**2*c22+c12*c22r*an2**2*c11-
     & 2*c11*c22**2*an1r*an2-c11*c22**2*a0*an2+2*c11*c22**2*an2r*an1-
     & c2*an2**2*c22*c11-c1*an2*c22**2*an1+c11s*an2**2*c22**2-c12s*
     & an2*c22**2*an1+c22s*an2*c22*c12*an1-c22s*an2**2*c22*c11-2*c12**
     & 2*an2r*an1*c22)/(c12*an1-c11*an2)/c22**2
                  b3=-(an1*c12**2-an1*c11*c22-c11*an2*c12)/an2/c22**2
                  bf=1/an2**2*(2*c12**2*an2r*an2*c11-c12*c2*an2**2*c11-
     & c12*c12r*an2**2*c11+2*c11*c22*an1r*c12*an2+c11*c22*a0*c12*an2-
     & 2*c11**2*c22*an2r*an2+c1*an2**2*c22*c11+c12s*an2**2*c22*c11-
     & c11s*an2**2*c22*c12-2*an1r*c12**3*an2-a0*c12**3*an2+c1*an2**2*
     & c12**2+c11r*an2**2*c12**2)/(c12*an1-c11*an2)/c22**2*gr+1/an2**
     & 2*(-c11*c22*an2*c12*an1+an2*c12**3*an1-c12**2*an2**2*c11+c11**
     & 2*c22*an2**2)/(c12*an1-c11*an2)/c22**2*grr+1/an2**2*(-2*c12**2*
     & an2r*an1*an2+c12*c2*an2**2*an1+c12*c12r*an2**2*an1+2*c11*c22*
     & an2r*an1*an2-c11*c22*a0*an2**2-2*c11*c22*an1r*an2**2-c1*an2**2*
     & c22*an1+c11s*an2**3*c22-c12s*an2**2*c22*an1+c12**2*a0*an2**2+2*
     & c12**2*an1r*an2**2-c12*c1*an2**3-c12*c11r*an2**3)/(c12*an1-c11*
     & an2)/c22**2*ff+1/an2**2*(-an2**2*c12**2*an1+c12*an2**3*c11)/(
     & c12*an1-c11*an2)/c22**2*ffr+1/an2**2*(-an2**3*c22*c11+an2**2*
     & c22*c12*an1)/(c12*an1-c11*an2)/c22**2*ffs+1/an2**2*(-2*c12**2*
     & an1r*c2*an2-c11r*an2*c12**2*an2r-c1*an2*c12**2*an2r+c2r*an2*
     & c12**2*an1-an2rr*c12**3*an1-2*c12**2*an2r**2*c11+c11s*an2*c22*
     & c12*an2r-c12s*an2*c22*an2r*c11+c12s*an2*c22*an1*c2-c11s*an2**2*
     & c22*c2-c0*an2*c22*c12*an1+2*an1r*c12**3*an2r-c1*an2*c22*an2r*
     & c11-c12*c2r*an2**2*c11+c12*c11r*an2**2*c2+c1*an2*c22*an1*c2+
     & c12**2*an2rr*c11*an2-c12**2*a0*c2*an2+c11*c22*an2rr*c12*an1-2*
     & c11*c22*an2r*an1*c2+c11*c22*a0*c2*an2-c11**2*c22*an2rr*an2+c0*
     & an2**2*c22*c11+c12*c12r*an2*an2r*c11-c12*c2**2*an2*an1-c12*
     & c12r*an2*an1*c2+c12*c1*an2**2*c2-2*c11*c22*an1r*c12*an2r+a0*
     & c12**3*an2r+c12*c2*an2*an2r*c11+2*c12**2*an2r*an1*c2+2*c11**2*
     & c22*an2r**2+2*c11*c22*an1r*c2*an2-c11*c22*a0*c12*an2r-c2s*an2*
     & c22*c12*an1+c2s*an2**2*c22*c11)/(c12*an1-c11*an2)/c22**2*g
                  ur=ur4(i1,i2,i3)
                  urrr=urrr2(i1,i2,i3)
            !    write(*,'(''LSmOpt: i1,i2,i3,g,gs,gss,ff,ffr,ffs,uss ='',3i3,7e9.2)') i1,i2,i3,g,gs,gss,ff,ffr,ffs,uss2(i1,i2,i3)
            !    write(*,'(''LSmOpt: an1,an2,c11,b0,b1,b2,b3,bf,b0+bf ='',9e10.2)') an1,an2,c11,b0,b1,b2,b3,bf,b0+bf
                  ! write(*,'(''i='',i3,i3,'' us='',f6.2,'', approx='',f6.2)') i1,i2,us,us2(i1,i2+is2,i3)
                  ! write(*,'(''i='',i3,i3,'' urs='',f6.2,'', approx='',f6.2)') i1,i2,urs,urs2(i1,i2+is2,i3)
                  ! write(*,'(''i='',i3,i3,'' uss='',f6.2,'', approx='',f6.2)') i1,i2,uss,uss2(i1,i2+is2,i3)
                  ! write(*,'(''i='',i3,i3,'' usss='',f6.2,'', approx='',f6.2)') i1,i2,usss,usss2(i1,i2+is2,i3)
                  r(i1-is1,i2-is2,i3-is3)=g- an1*ur
                  r(i1-2*is1,i2-2*is2,i3-2*is3)=b1*ur+b3*urrr+bf
                else
                  r(j1,j2,j3)=0.
                  r(i1-2*is1,i2-2*is2,i3-2*is3)=0.
                end if
              end do
              end do
              end do
             end if
           else if( axis.eq.0 .and. nd.eq.3 )then
             a0=bcData(0,side,axis)
             a1=bcData(1,side,axis)
             if( a1.eq.0. )then
               write(*,*) 'lineSmoothRHS:ERROR: a1=0!'
               stop 2
             end if
             if( gridType.eq.rectangular )then
            ! write(*,*) 'LSRHSt:4th-order neumann+EQN2 (rect)'
            !   write(*,'(''LSRHS:4th neumannAndEqn (rect) nn2a,nn2b='',2i3,)') nn2a,nn2b
               drn=dx(axis)
               nsign = 2*side-1
               ! (i1,i2,i3) = boundary point
               ! (j1,j2,j3) = ghost point
               do i3=m3a,m3b,m3c
                j3=i3-is3
               do i2=m2a,m2b,m2c
                j2=i2-is2
               do i1=m1a,m1b,m1c
                j1=i1-is1
                if( mask(i1,i2,i3).gt.0 )then
                ! the rhs for the mixed BC is stored in the ghost point value of f
                 ! the rhs for the mixed BC is stored in the ghost point value of f
                ! Cartesian grids use dx: 
                   g = f(j1,j2,j3)
                   ff=f(i1,i2,i3)
                     ! Note "g" is located on the ghost point "j1" of f
                     ! 2nd-order one sided:
                     ! ffr=(-f(i1+2*is1,i2,i3)+4.*f(i1+is1,i2,i3)-3.*ff)/(2.*dx(0))  
                     ! 3rd-order one sided: 100510 -- added is1
                     ffr=is1*(-11.*ff+18.*f(i1+is1,i2,i3)-9.*f(i1+2*
     & is1,i2,i3)+2.*f(i1+3*is1,i2,i3))/(6.*dx(0))
                     ! 100610: Check the mask for computing valid tangential derivatives:
                     ! NOTE: the forcing f and g are only assumed to be given where mask>0
                     ! In order to compute tangential derivatives of the forcing we may need to fill in
                     ! neighbouring values of the forcing at interp and unused points
                     gv( 0, 0, 0)=f(j1,i2,i3)
                     i2m1 = i2-1
                     if( i2m1.lt.nn2a .or. mask(i1,i2m1,i3).le.0 )then
                       ! f(j1,i2m1,i3)= extrap3(f,j1,i2m1,i3, 0,1,0)
                       ! gv( 0,-1, 0)=extrap3(f,j1,i2m1,i3, 0,1,0)
                       ! extrapWithMask
                         if( mask(i1+  (0),i2m1+  (1),i3+  (0)).gt.0 
     & .and. mask(i1+2*(0),i2m1+2*(1),i3+2*(0)).gt.0 .and.mask(i1+3*(
     & 0),i2m1+3*(1),i3+3*(0)).gt.0 .and.mask(i1+4*(0),i2m1+4*(1),i3+
     & 4*(0)).gt.0 )then
                          gv(0,-1,0)=(4.*f(j1+(0),i2m1+(1),i3+(0))-6.*
     & f(j1+2*(0),i2m1+2*(1),i3+2*(0))+4.*f(j1+3*(0),i2m1+3*(1),i3+3*(
     & 0))-f(j1+4*(0),i2m1+4*(1),i3+4*(0)))
                         else if( mask(i1+  (0),i2m1+  (1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2m1+2*(1),i3+2*(0)).gt.0 .and.mask(
     & i1+3*(0),i2m1+3*(1),i3+3*(0)).gt.0 )then
                          gv(0,-1,0)=(3.*f(j1+(0),i2m1+(1),i3+(0))-3.*
     & f(j1+2*(0),i2m1+2*(1),i3+2*(0))+f(j1+3*(0),i2m1+3*(1),i3+3*(0))
     & )
                         else if( mask(i1+  (0),i2m1+  (1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2m1+2*(1),i3+2*(0)).gt.0 )then
                          gv(0,-1,0)=(2.*f(j1+(0),i2m1+(1),i3+(0))-f(
     & j1+2*(0),i2m1+2*(1),i3+2*(0)))
                         else
                          gv(0,-1,0)=(f(j1+(0),i2m1+(1),i3+(0)))
                         end if
                     else
                       gv( 0,-1, 0)=f(j1,i2m1,i3)
                     end if
                     i2p1 = i2+1
                     if( i2p1.gt.nn2b .or. mask(i1,i2p1,i3).le.0 )then
                       ! f(j1,i2p1,i3)= extrap3(f,j1,i2p1,i3, 0,-1,0)
                       ! gv( 0,+1, 0)=extrap3(f,j1,i2p1,i3, 0,-1,0)
                         if( mask(i1+  (0),i2p1+  (-1),i3+  (0)).gt.0 
     & .and. mask(i1+2*(0),i2p1+2*(-1),i3+2*(0)).gt.0 .and.mask(i1+3*(
     & 0),i2p1+3*(-1),i3+3*(0)).gt.0 .and.mask(i1+4*(0),i2p1+4*(-1),
     & i3+4*(0)).gt.0 )then
                          gv(0,+1,0)=(4.*f(j1+(0),i2p1+(-1),i3+(0))-6.*
     & f(j1+2*(0),i2p1+2*(-1),i3+2*(0))+4.*f(j1+3*(0),i2p1+3*(-1),i3+
     & 3*(0))-f(j1+4*(0),i2p1+4*(-1),i3+4*(0)))
                         else if( mask(i1+  (0),i2p1+  (-1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2p1+2*(-1),i3+2*(0)).gt.0 .and.mask(
     & i1+3*(0),i2p1+3*(-1),i3+3*(0)).gt.0 )then
                          gv(0,+1,0)=(3.*f(j1+(0),i2p1+(-1),i3+(0))-3.*
     & f(j1+2*(0),i2p1+2*(-1),i3+2*(0))+f(j1+3*(0),i2p1+3*(-1),i3+3*(
     & 0)))
                         else if( mask(i1+  (0),i2p1+  (-1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2p1+2*(-1),i3+2*(0)).gt.0 )then
                          gv(0,+1,0)=(2.*f(j1+(0),i2p1+(-1),i3+(0))-f(
     & j1+2*(0),i2p1+2*(-1),i3+2*(0)))
                         else
                          gv(0,+1,0)=(f(j1+(0),i2p1+(-1),i3+(0)))
                         end if
                     else
                       gv( 0,+1, 0)=f(j1,i2p1,i3)
                     end if
                     ! gss=FSS(j1,i2,i3)
                     gss = ((gv(0,+1,0)-2.*gv(0,0,0)+gv(0,-1,0))*h22(1)
     & )
                     i3m1 = i3-1
                     if( i3m1.lt.nn3a .or. mask(i1,i2,i3m1).le.0 )then
                       ! f(j1,i2,i3m1)= extrap3(f,j1,i2,i3m1, 0,0,1)
                       ! gv( 0, 0,-1) = extrap3(f,j1,i2,i3m1, 0,0,1)
                         if( mask(i1+  (0),i2+  (0),i3m1+  (1)).gt.0 
     & .and. mask(i1+2*(0),i2+2*(0),i3m1+2*(1)).gt.0 .and.mask(i1+3*(
     & 0),i2+3*(0),i3m1+3*(1)).gt.0 .and.mask(i1+4*(0),i2+4*(0),i3m1+
     & 4*(1)).gt.0 )then
                          gv(0,0,-1)=(4.*f(j1+(0),i2+(0),i3m1+(1))-6.*
     & f(j1+2*(0),i2+2*(0),i3m1+2*(1))+4.*f(j1+3*(0),i2+3*(0),i3m1+3*(
     & 1))-f(j1+4*(0),i2+4*(0),i3m1+4*(1)))
                         else if( mask(i1+  (0),i2+  (0),i3m1+  (1))
     & .gt.0 .and. mask(i1+2*(0),i2+2*(0),i3m1+2*(1)).gt.0 .and.mask(
     & i1+3*(0),i2+3*(0),i3m1+3*(1)).gt.0 )then
                          gv(0,0,-1)=(3.*f(j1+(0),i2+(0),i3m1+(1))-3.*
     & f(j1+2*(0),i2+2*(0),i3m1+2*(1))+f(j1+3*(0),i2+3*(0),i3m1+3*(1))
     & )
                         else if( mask(i1+  (0),i2+  (0),i3m1+  (1))
     & .gt.0 .and. mask(i1+2*(0),i2+2*(0),i3m1+2*(1)).gt.0 )then
                          gv(0,0,-1)=(2.*f(j1+(0),i2+(0),i3m1+(1))-f(
     & j1+2*(0),i2+2*(0),i3m1+2*(1)))
                         else
                          gv(0,0,-1)=(f(j1+(0),i2+(0),i3m1+(1)))
                         end if
                     else
                       gv( 0, 0,-1) = f(j1,i2,i3m1)
                     end if
                     i3p1 = i3+1
                     if( i3p1.gt.nn3b .or. mask(i1,i2,i3p1).le.0 )then
                      ! f(j1,i2,i3p1)= extrap3(f,j1,i2,i3p1, 0,0,-1)
                      ! gv( 0, 0,+1) = extrap3(f,j1,i2,i3p1, 0,0,-1)
                        if( mask(i1+  (0),i2+  (0),i3p1+  (-1)).gt.0 
     & .and. mask(i1+2*(0),i2+2*(0),i3p1+2*(-1)).gt.0 .and.mask(i1+3*(
     & 0),i2+3*(0),i3p1+3*(-1)).gt.0 .and.mask(i1+4*(0),i2+4*(0),i3p1+
     & 4*(-1)).gt.0 )then
                         gv(0,0,+1)=(4.*f(j1+(0),i2+(0),i3p1+(-1))-6.*
     & f(j1+2*(0),i2+2*(0),i3p1+2*(-1))+4.*f(j1+3*(0),i2+3*(0),i3p1+3*
     & (-1))-f(j1+4*(0),i2+4*(0),i3p1+4*(-1)))
                        else if( mask(i1+  (0),i2+  (0),i3p1+  (-1))
     & .gt.0 .and. mask(i1+2*(0),i2+2*(0),i3p1+2*(-1)).gt.0 .and.mask(
     & i1+3*(0),i2+3*(0),i3p1+3*(-1)).gt.0 )then
                         gv(0,0,+1)=(3.*f(j1+(0),i2+(0),i3p1+(-1))-3.*
     & f(j1+2*(0),i2+2*(0),i3p1+2*(-1))+f(j1+3*(0),i2+3*(0),i3p1+3*(-
     & 1)))
                        else if( mask(i1+  (0),i2+  (0),i3p1+  (-1))
     & .gt.0 .and. mask(i1+2*(0),i2+2*(0),i3p1+2*(-1)).gt.0 )then
                         gv(0,0,+1)=(2.*f(j1+(0),i2+(0),i3p1+(-1))-f(
     & j1+2*(0),i2+2*(0),i3p1+2*(-1)))
                        else
                         gv(0,0,+1)=(f(j1+(0),i2+(0),i3p1+(-1)))
                        end if
                     else
                      gv( 0, 0,+1) = f(j1,i2,i3p1)
                     end if
                     ! gtt=FTT(j1,i2,i3)
                     gtt = ((gv(0,0,+1)-2.*gv(0,0,0)+gv(0,0,-1))*h22(2)
     & )
            !   write(*,'(''LNSM : i1,i2,i3,g,ffr,gss,u,uss ='',3i3,5f11.6)') i1,i2,i3,g,ffr,gss,u(i1,i2,i3),(u(i1,i2+1,i3)-2.*u(i1,i2,i3)+u(i1,i2-1,i3))/dx(1)**2
            !  write(*,'('' i1,i2,i3,f,f,f='',3i3,4e11.2)') i1,i2,i3,f(i1,i2,i3),f(i1+2*is1,i2+2*is2,i3),f(i1+is1,i2+is2,i3)
                r(j1,j2,j3)=g
                  r(i1-2*is1,i2,i3)=(ffr-(gss+gtt- a0*ff )/(a1*nsign))*
     & dx(axis)**3
                else
                  r(j1,j2,j3)=0.
                  r(i1-2*is1,i2-2*is2,i3-2*is3)=0.
                end if
              end do
              end do
              end do
             else
               ! **** curvilinear case ****
               nsign = 2*side-1
               ! (i1,i2,i3) = boundary point
               ! (j1,j2,j3) = ghost point
               do i3=m3a,m3b,m3c
                j3=i3-is3
               do i2=m2a,m2b,m2c
                j2=i2-is2
               do i1=m1a,m1b,m1c
                  j1=i1-is1
                 if( mask(i1,i2,i3).gt.0 )then
                ! the rhs for the mixed BC is stored in the ghost point value of f
                 ! the rhs for the mixed BC is stored in the ghost point value of f
                ! Curvilinear grids use dr:
                   g = f(j1,j2,j3)
                   ff= f(i1,i2,i3)
                    ax1 = mod(axis+1,nd)
                    ax2 = mod(axis+2,nd)
                    mdim(0,0)=nn1a
                    mdim(1,0)=nn1b
                    mdim(0,1)=nn2a
                    mdim(1,1)=nn2b
                    mdim(0,2)=nn3a
                    mdim(1,2)=nn3b
                     ! 2nd-order one sided:
                     ! ffr=is1*(-f(i1+2*is1,i2,i3)+4.*f(i1+is1,i2,i3)-3.*ff)*d12(0)  
                     ! 3rd-order one sided:
                     ffr=is1*(-11.*ff+18.*f(i1+is1,i2,i3)-9.*f(i1+2*
     & is1,i2,i3)+2.*f(i1+3*is1,i2,i3))/(6.*dr(0))
                     ! NOTE: the forcing f and g are only assumed to be given where mask>0
                     ! In order to compute tangential derivatives of the forcing we may need to fill in
                     ! neighbouring values of the forcing at interp and unused points
                     fv( 0, 0, 0) = f(i1,i2,i3)
                     gv( 0, 0, 0) = f(j1,i2,i3)
                     i2m1 = i2-1
                     if( i2m1.lt.nn2a .or. mask(i1,i2m1,i3).le.0 )then
                      ! NOTE: We DO need to extrap f and g 
                      ! f(i1,i2m1,i3)= extrap3(f,i1,i2m1,i3, 0,1,0)
                      ! f(j1,i2m1,i3)= extrap3(f,j1,i2m1,i3, 0,1,0)
                      ! fv( 0,-1, 0) = extrap3(f,i1,i2m1,i3, 0,1,0)
                      ! gv( 0,-1, 0) = extrap3(f,j1,i2m1,i3, 0,1,0)
                        if( mask(i1+  (0),i2m1+  (1),i3+  (0)).gt.0 
     & .and. mask(i1+2*(0),i2m1+2*(1),i3+2*(0)).gt.0 .and.mask(i1+3*(
     & 0),i2m1+3*(1),i3+3*(0)).gt.0 .and.mask(i1+4*(0),i2m1+4*(1),i3+
     & 4*(0)).gt.0 )then
                         fv(0,-1,0)=(4.*f(i1+(0),i2m1+(1),i3+(0))-6.*f(
     & i1+2*(0),i2m1+2*(1),i3+2*(0))+4.*f(i1+3*(0),i2m1+3*(1),i3+3*(0)
     & )-f(i1+4*(0),i2m1+4*(1),i3+4*(0)))
                        else if( mask(i1+  (0),i2m1+  (1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2m1+2*(1),i3+2*(0)).gt.0 .and.mask(
     & i1+3*(0),i2m1+3*(1),i3+3*(0)).gt.0 )then
                         fv(0,-1,0)=(3.*f(i1+(0),i2m1+(1),i3+(0))-3.*f(
     & i1+2*(0),i2m1+2*(1),i3+2*(0))+f(i1+3*(0),i2m1+3*(1),i3+3*(0)))
                        else if( mask(i1+  (0),i2m1+  (1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2m1+2*(1),i3+2*(0)).gt.0 )then
                         fv(0,-1,0)=(2.*f(i1+(0),i2m1+(1),i3+(0))-f(i1+
     & 2*(0),i2m1+2*(1),i3+2*(0)))
                        else
                         fv(0,-1,0)=(f(i1+(0),i2m1+(1),i3+(0)))
                        end if
                        if( mask(i1+  (0),i2m1+  (1),i3+  (0)).gt.0 
     & .and. mask(i1+2*(0),i2m1+2*(1),i3+2*(0)).gt.0 .and.mask(i1+3*(
     & 0),i2m1+3*(1),i3+3*(0)).gt.0 .and.mask(i1+4*(0),i2m1+4*(1),i3+
     & 4*(0)).gt.0 )then
                         gv(0,-1,0)=(4.*f(j1+(0),i2m1+(1),i3+(0))-6.*f(
     & j1+2*(0),i2m1+2*(1),i3+2*(0))+4.*f(j1+3*(0),i2m1+3*(1),i3+3*(0)
     & )-f(j1+4*(0),i2m1+4*(1),i3+4*(0)))
                        else if( mask(i1+  (0),i2m1+  (1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2m1+2*(1),i3+2*(0)).gt.0 .and.mask(
     & i1+3*(0),i2m1+3*(1),i3+3*(0)).gt.0 )then
                         gv(0,-1,0)=(3.*f(j1+(0),i2m1+(1),i3+(0))-3.*f(
     & j1+2*(0),i2m1+2*(1),i3+2*(0))+f(j1+3*(0),i2m1+3*(1),i3+3*(0)))
                        else if( mask(i1+  (0),i2m1+  (1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2m1+2*(1),i3+2*(0)).gt.0 )then
                         gv(0,-1,0)=(2.*f(j1+(0),i2m1+(1),i3+(0))-f(j1+
     & 2*(0),i2m1+2*(1),i3+2*(0)))
                        else
                         gv(0,-1,0)=(f(j1+(0),i2m1+(1),i3+(0)))
                        end if
                     else
                      fv( 0,-1, 0) = f(i1,i2m1,i3)
                      gv( 0,-1, 0) = f(j1,i2m1,i3)
                     end if
                     i2p1 = i2+1
                     if( i2p1.gt.nn2b .or. mask(i1,i2p1,i3).le.0 )then
                      !  f(i1,i2p1,i3)= extrap3(f,i1,i2p1,i3, 0,-1,0)
                      !  f(j1,i2p1,i3)= extrap3(f,j1,i2p1,i3, 0,-1,0)
                      ! fv( 0,+1, 0) = extrap3(f,i1,i2p1,i3, 0,-1,0)
                      ! gv( 0,+1, 0) = extrap3(f,j1,i2p1,i3, 0,-1,0)
                        if( mask(i1+  (0),i2p1+  (-1),i3+  (0)).gt.0 
     & .and. mask(i1+2*(0),i2p1+2*(-1),i3+2*(0)).gt.0 .and.mask(i1+3*(
     & 0),i2p1+3*(-1),i3+3*(0)).gt.0 .and.mask(i1+4*(0),i2p1+4*(-1),
     & i3+4*(0)).gt.0 )then
                         fv(0,+1,0)=(4.*f(i1+(0),i2p1+(-1),i3+(0))-6.*
     & f(i1+2*(0),i2p1+2*(-1),i3+2*(0))+4.*f(i1+3*(0),i2p1+3*(-1),i3+
     & 3*(0))-f(i1+4*(0),i2p1+4*(-1),i3+4*(0)))
                        else if( mask(i1+  (0),i2p1+  (-1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2p1+2*(-1),i3+2*(0)).gt.0 .and.mask(
     & i1+3*(0),i2p1+3*(-1),i3+3*(0)).gt.0 )then
                         fv(0,+1,0)=(3.*f(i1+(0),i2p1+(-1),i3+(0))-3.*
     & f(i1+2*(0),i2p1+2*(-1),i3+2*(0))+f(i1+3*(0),i2p1+3*(-1),i3+3*(
     & 0)))
                        else if( mask(i1+  (0),i2p1+  (-1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2p1+2*(-1),i3+2*(0)).gt.0 )then
                         fv(0,+1,0)=(2.*f(i1+(0),i2p1+(-1),i3+(0))-f(
     & i1+2*(0),i2p1+2*(-1),i3+2*(0)))
                        else
                         fv(0,+1,0)=(f(i1+(0),i2p1+(-1),i3+(0)))
                        end if
                        if( mask(i1+  (0),i2p1+  (-1),i3+  (0)).gt.0 
     & .and. mask(i1+2*(0),i2p1+2*(-1),i3+2*(0)).gt.0 .and.mask(i1+3*(
     & 0),i2p1+3*(-1),i3+3*(0)).gt.0 .and.mask(i1+4*(0),i2p1+4*(-1),
     & i3+4*(0)).gt.0 )then
                         gv(0,+1,0)=(4.*f(j1+(0),i2p1+(-1),i3+(0))-6.*
     & f(j1+2*(0),i2p1+2*(-1),i3+2*(0))+4.*f(j1+3*(0),i2p1+3*(-1),i3+
     & 3*(0))-f(j1+4*(0),i2p1+4*(-1),i3+4*(0)))
                        else if( mask(i1+  (0),i2p1+  (-1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2p1+2*(-1),i3+2*(0)).gt.0 .and.mask(
     & i1+3*(0),i2p1+3*(-1),i3+3*(0)).gt.0 )then
                         gv(0,+1,0)=(3.*f(j1+(0),i2p1+(-1),i3+(0))-3.*
     & f(j1+2*(0),i2p1+2*(-1),i3+2*(0))+f(j1+3*(0),i2p1+3*(-1),i3+3*(
     & 0)))
                        else if( mask(i1+  (0),i2p1+  (-1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2p1+2*(-1),i3+2*(0)).gt.0 )then
                         gv(0,+1,0)=(2.*f(j1+(0),i2p1+(-1),i3+(0))-f(
     & j1+2*(0),i2p1+2*(-1),i3+2*(0)))
                        else
                         gv(0,+1,0)=(f(j1+(0),i2p1+(-1),i3+(0)))
                        end if
                     else
                      fv( 0,+1, 0) = f(i1,i2p1,i3)
                      gv( 0,+1, 0) = f(j1,i2p1,i3)
                     end if
                     ! ffs= FS(i1,i2,i3)
                     ! gs = FS(j1,i2,i3)
                     ! gss=FSS(j1,i2,i3)
                     ffs = ((fv(0,+1,0)-fv(0,-1,0))*d12(1))
                     gs  = ((gv(0,+1,0)-gv(0,-1,0))*d12(1))
                     gss = ((gv(0,+1,0)-2.*gv(0,0,0)+gv(0,-1,0))*d22(1)
     & )
                     i3m1 = i3-1
                     if( i3m1.lt.nn3a .or. mask(i1,i2,i3m1).le.0 )then
                      ! f(i1,i2,i3m1)= extrap3(f,i1,i2,i3m1, 0,0,1)
                      ! f(j1,i2,i3m1)= extrap3(f,j1,i2,i3m1, 0,0,1)
                      ! fv( 0, 0,-1) = extrap3(f,i1,i2,i3m1, 0,0,1)
                      ! gv( 0, 0,-1) = extrap3(f,j1,i2,i3m1, 0,0,1)
                        if( mask(i1+  (0),i2+  (0),i3m1+  (1)).gt.0 
     & .and. mask(i1+2*(0),i2+2*(0),i3m1+2*(1)).gt.0 .and.mask(i1+3*(
     & 0),i2+3*(0),i3m1+3*(1)).gt.0 .and.mask(i1+4*(0),i2+4*(0),i3m1+
     & 4*(1)).gt.0 )then
                         fv(0,0,-1)=(4.*f(i1+(0),i2+(0),i3m1+(1))-6.*f(
     & i1+2*(0),i2+2*(0),i3m1+2*(1))+4.*f(i1+3*(0),i2+3*(0),i3m1+3*(1)
     & )-f(i1+4*(0),i2+4*(0),i3m1+4*(1)))
                        else if( mask(i1+  (0),i2+  (0),i3m1+  (1))
     & .gt.0 .and. mask(i1+2*(0),i2+2*(0),i3m1+2*(1)).gt.0 .and.mask(
     & i1+3*(0),i2+3*(0),i3m1+3*(1)).gt.0 )then
                         fv(0,0,-1)=(3.*f(i1+(0),i2+(0),i3m1+(1))-3.*f(
     & i1+2*(0),i2+2*(0),i3m1+2*(1))+f(i1+3*(0),i2+3*(0),i3m1+3*(1)))
                        else if( mask(i1+  (0),i2+  (0),i3m1+  (1))
     & .gt.0 .and. mask(i1+2*(0),i2+2*(0),i3m1+2*(1)).gt.0 )then
                         fv(0,0,-1)=(2.*f(i1+(0),i2+(0),i3m1+(1))-f(i1+
     & 2*(0),i2+2*(0),i3m1+2*(1)))
                        else
                         fv(0,0,-1)=(f(i1+(0),i2+(0),i3m1+(1)))
                        end if
                        if( mask(i1+  (0),i2+  (0),i3m1+  (1)).gt.0 
     & .and. mask(i1+2*(0),i2+2*(0),i3m1+2*(1)).gt.0 .and.mask(i1+3*(
     & 0),i2+3*(0),i3m1+3*(1)).gt.0 .and.mask(i1+4*(0),i2+4*(0),i3m1+
     & 4*(1)).gt.0 )then
                         gv(0,0,-1)=(4.*f(j1+(0),i2+(0),i3m1+(1))-6.*f(
     & j1+2*(0),i2+2*(0),i3m1+2*(1))+4.*f(j1+3*(0),i2+3*(0),i3m1+3*(1)
     & )-f(j1+4*(0),i2+4*(0),i3m1+4*(1)))
                        else if( mask(i1+  (0),i2+  (0),i3m1+  (1))
     & .gt.0 .and. mask(i1+2*(0),i2+2*(0),i3m1+2*(1)).gt.0 .and.mask(
     & i1+3*(0),i2+3*(0),i3m1+3*(1)).gt.0 )then
                         gv(0,0,-1)=(3.*f(j1+(0),i2+(0),i3m1+(1))-3.*f(
     & j1+2*(0),i2+2*(0),i3m1+2*(1))+f(j1+3*(0),i2+3*(0),i3m1+3*(1)))
                        else if( mask(i1+  (0),i2+  (0),i3m1+  (1))
     & .gt.0 .and. mask(i1+2*(0),i2+2*(0),i3m1+2*(1)).gt.0 )then
                         gv(0,0,-1)=(2.*f(j1+(0),i2+(0),i3m1+(1))-f(j1+
     & 2*(0),i2+2*(0),i3m1+2*(1)))
                        else
                         gv(0,0,-1)=(f(j1+(0),i2+(0),i3m1+(1)))
                        end if
                     else
                      fv( 0, 0,-1) = f(i1,i2,i3m1)
                      gv( 0, 0,-1) = f(j1,i2,i3m1)
                     end if
                     i3p1 = i3+1
                     if( i3p1.gt.nn3b .or. mask(i1,i2,i3p1).le.0 )then
                      ! f(i1,i2,i3p1)= extrap3(f,i1,i2,i3p1, 0,0,-1)
                      ! f(j1,i2,i3p1)= extrap3(f,j1,i2,i3p1, 0,0,-1)
                      ! fv( 0, 0,+1) = extrap3(f,i1,i2,i3p1, 0,0,-1)
                      ! gv( 0, 0,+1) = extrap3(f,j1,i2,i3p1, 0,0,-1)
                        if( mask(i1+  (0),i2+  (0),i3p1+  (-1)).gt.0 
     & .and. mask(i1+2*(0),i2+2*(0),i3p1+2*(-1)).gt.0 .and.mask(i1+3*(
     & 0),i2+3*(0),i3p1+3*(-1)).gt.0 .and.mask(i1+4*(0),i2+4*(0),i3p1+
     & 4*(-1)).gt.0 )then
                         fv(0,0,+1)=(4.*f(i1+(0),i2+(0),i3p1+(-1))-6.*
     & f(i1+2*(0),i2+2*(0),i3p1+2*(-1))+4.*f(i1+3*(0),i2+3*(0),i3p1+3*
     & (-1))-f(i1+4*(0),i2+4*(0),i3p1+4*(-1)))
                        else if( mask(i1+  (0),i2+  (0),i3p1+  (-1))
     & .gt.0 .and. mask(i1+2*(0),i2+2*(0),i3p1+2*(-1)).gt.0 .and.mask(
     & i1+3*(0),i2+3*(0),i3p1+3*(-1)).gt.0 )then
                         fv(0,0,+1)=(3.*f(i1+(0),i2+(0),i3p1+(-1))-3.*
     & f(i1+2*(0),i2+2*(0),i3p1+2*(-1))+f(i1+3*(0),i2+3*(0),i3p1+3*(-
     & 1)))
                        else if( mask(i1+  (0),i2+  (0),i3p1+  (-1))
     & .gt.0 .and. mask(i1+2*(0),i2+2*(0),i3p1+2*(-1)).gt.0 )then
                         fv(0,0,+1)=(2.*f(i1+(0),i2+(0),i3p1+(-1))-f(
     & i1+2*(0),i2+2*(0),i3p1+2*(-1)))
                        else
                         fv(0,0,+1)=(f(i1+(0),i2+(0),i3p1+(-1)))
                        end if
                        if( mask(i1+  (0),i2+  (0),i3p1+  (-1)).gt.0 
     & .and. mask(i1+2*(0),i2+2*(0),i3p1+2*(-1)).gt.0 .and.mask(i1+3*(
     & 0),i2+3*(0),i3p1+3*(-1)).gt.0 .and.mask(i1+4*(0),i2+4*(0),i3p1+
     & 4*(-1)).gt.0 )then
                         gv(0,0,+1)=(4.*f(j1+(0),i2+(0),i3p1+(-1))-6.*
     & f(j1+2*(0),i2+2*(0),i3p1+2*(-1))+4.*f(j1+3*(0),i2+3*(0),i3p1+3*
     & (-1))-f(j1+4*(0),i2+4*(0),i3p1+4*(-1)))
                        else if( mask(i1+  (0),i2+  (0),i3p1+  (-1))
     & .gt.0 .and. mask(i1+2*(0),i2+2*(0),i3p1+2*(-1)).gt.0 .and.mask(
     & i1+3*(0),i2+3*(0),i3p1+3*(-1)).gt.0 )then
                         gv(0,0,+1)=(3.*f(j1+(0),i2+(0),i3p1+(-1))-3.*
     & f(j1+2*(0),i2+2*(0),i3p1+2*(-1))+f(j1+3*(0),i2+3*(0),i3p1+3*(-
     & 1)))
                        else if( mask(i1+  (0),i2+  (0),i3p1+  (-1))
     & .gt.0 .and. mask(i1+2*(0),i2+2*(0),i3p1+2*(-1)).gt.0 )then
                         gv(0,0,+1)=(2.*f(j1+(0),i2+(0),i3p1+(-1))-f(
     & j1+2*(0),i2+2*(0),i3p1+2*(-1)))
                        else
                         gv(0,0,+1)=(f(j1+(0),i2+(0),i3p1+(-1)))
                        end if
                     else
                      fv( 0, 0,+1) = f(i1,i2,i3p1)
                      gv( 0, 0,+1) = f(j1,i2,i3p1)
                     end if
                     ! fft= FT(i1,i2,i3)
                     ! gt = FT(j1,i2,i3)
                     ! gtt=FTT(j1,i2,i3)
                     fft = ((fv(0,0,+1)-fv(0,0,-1))*d12(2))
                     gt  = ((gv(0,0,+1)-gv(0,0,-1))*d12(2))
                     gtt = ((gv(0,0,+1)-2.*gv(0,0,0)+gv(0,0,-1))*d22(2)
     & )
                     ! compute the cross derivative: gst 
                     ! Near physical or interpolation boundaries we may need to use a one sided approximation
                     ! Evaluate g at neighbouring points so we can evaluate the cross derivative 
                      ! Add these checks -- comment out later
                      if( abs(j1-j1).gt.1 .or. abs(i2m1-i2).gt.1 .or. 
     & abs(i3m1-i3).gt.1 )then
                        stop 3338
                      end if
                      ! iv(0:2) = boundary point next to (j1,i2m1,i3m1)
                      iv(0)=i1
                      iv(1)=i2m1
                      iv(2)=i3m1
                      ! dv(0:2) : extrapolate in direction dv (if dv[a]=0 a=0,1,2 then there is no extrapolation)
                      dv(0)=0
                      dv(1)=0
                      dv(2)=0
                      if( iv(ax1).lt.mdim(0,ax1) )then
                       dv(ax1)=1
                      else if( iv(ax1).gt.mdim(1,ax1) )then
                       dv(ax1)=-1
                      end if
                      if( iv(ax2).lt.mdim(0,ax2) )then
                        dv(ax2)=1
                      else if( iv(ax2).gt.mdim(1,ax2) )then
                        dv(ax2)=-1
                      end if
                      if( mask(iv(0)+dv(0),iv(1)+dv(1),iv(2)+dv(2))
     & .le.0 )then
                        ! The neighbouring pt kv or the point we start the extrapolation from is not valid
                        ! Find a direction to extrapolate in: The target point must be valid so start the 
                        ! extrpolation in that direction.
                        dv(0)=j1-j1
                        dv(1)=i2-i2m1
                        dv(2)=i3-i3m1
                      end if
                      if( dv(0).eq.0 .and. dv(1).eq.0. .and. dv(2)
     & .eq.0 )then
                        ! We can use the value from the adjacent point:
                        gv(j1-j1,i2m1-i2,i3m1-i3)=f(j1,i2m1,i3m1)
                      else if( mask(iv(0)+  dv(0),iv(1)+  dv(1),iv(2)+ 
     &  dv(2)).gt.0 .and. mask(iv(0)+2*dv(0),iv(1)+2*dv(1),iv(2)+2*dv(
     & 2)).gt.0 .and. mask(iv(0)+3*dv(0),iv(1)+3*dv(1),iv(2)+3*dv(2))
     & .gt.0 .and. mask(iv(0)+4*dv(0),iv(1)+4*dv(1),iv(2)+4*dv(2))
     & .gt.0 )then
                        ! we can extrapolate with 4 points:
                        gv(j1-j1,i2m1-i2,i3m1-i3) = (4.*f(j1+(dv(0)),
     & i2m1+(dv(1)),i3m1+(dv(2)))-6.*f(j1+2*(dv(0)),i2m1+2*(dv(1)),
     & i3m1+2*(dv(2)))+4.*f(j1+3*(dv(0)),i2m1+3*(dv(1)),i3m1+3*(dv(2))
     & )-f(j1+4*(dv(0)),i2m1+4*(dv(1)),i3m1+4*(dv(2))))
                      else if( mask(iv(0)+  dv(0),iv(1)+  dv(1),iv(2)+ 
     &  dv(2)).gt.0 .and. mask(iv(0)+2*dv(0),iv(1)+2*dv(1),iv(2)+2*dv(
     & 2)).gt.0 .and. mask(iv(0)+3*dv(0),iv(1)+3*dv(1),iv(2)+3*dv(2))
     & .gt.0 )then
                        ! we can extrapolate with 3 points:
                        gv(j1-j1,i2m1-i2,i3m1-i3) = (3.*f(j1+(dv(0)),
     & i2m1+(dv(1)),i3m1+(dv(2)))-3.*f(j1+2*(dv(0)),i2m1+2*(dv(1)),
     & i3m1+2*(dv(2)))+f(j1+3*(dv(0)),i2m1+3*(dv(1)),i3m1+3*(dv(2))))
                      else if( mask(iv(0)+  dv(0),iv(1)+  dv(1),iv(2)+ 
     &  dv(2)).gt.0 .and. mask(iv(0)+2*dv(0),iv(1)+2*dv(1),iv(2)+2*dv(
     & 2)).gt.0 )then
                        ! we can extrapolate with 2 points: 
                        gv(j1-j1,i2m1-i2,i3m1-i3) = (2.*f(j1+(dv(0)),
     & i2m1+(dv(1)),i3m1+(dv(2)))-f(j1+2*(dv(0)),i2m1+2*(dv(1)),i3m1+
     & 2*(dv(2))))
                      else
                        ! as a backup just use the value from the target point
                        gv(j1-j1,i2m1-i2,i3m1-i3)=f(j1,i2,i3)
                      end if
                      ! Add these checks -- comment out later
                      if( abs(j1-j1).gt.1 .or. abs(i2p1-i2).gt.1 .or. 
     & abs(i3m1-i3).gt.1 )then
                        stop 3338
                      end if
                      ! iv(0:2) = boundary point next to (j1,i2p1,i3m1)
                      iv(0)=i1
                      iv(1)=i2p1
                      iv(2)=i3m1
                      ! dv(0:2) : extrapolate in direction dv (if dv[a]=0 a=0,1,2 then there is no extrapolation)
                      dv(0)=0
                      dv(1)=0
                      dv(2)=0
                      if( iv(ax1).lt.mdim(0,ax1) )then
                       dv(ax1)=1
                      else if( iv(ax1).gt.mdim(1,ax1) )then
                       dv(ax1)=-1
                      end if
                      if( iv(ax2).lt.mdim(0,ax2) )then
                        dv(ax2)=1
                      else if( iv(ax2).gt.mdim(1,ax2) )then
                        dv(ax2)=-1
                      end if
                      if( mask(iv(0)+dv(0),iv(1)+dv(1),iv(2)+dv(2))
     & .le.0 )then
                        ! The neighbouring pt kv or the point we start the extrapolation from is not valid
                        ! Find a direction to extrapolate in: The target point must be valid so start the 
                        ! extrpolation in that direction.
                        dv(0)=j1-j1
                        dv(1)=i2-i2p1
                        dv(2)=i3-i3m1
                      end if
                      if( dv(0).eq.0 .and. dv(1).eq.0. .and. dv(2)
     & .eq.0 )then
                        ! We can use the value from the adjacent point:
                        gv(j1-j1,i2p1-i2,i3m1-i3)=f(j1,i2p1,i3m1)
                      else if( mask(iv(0)+  dv(0),iv(1)+  dv(1),iv(2)+ 
     &  dv(2)).gt.0 .and. mask(iv(0)+2*dv(0),iv(1)+2*dv(1),iv(2)+2*dv(
     & 2)).gt.0 .and. mask(iv(0)+3*dv(0),iv(1)+3*dv(1),iv(2)+3*dv(2))
     & .gt.0 .and. mask(iv(0)+4*dv(0),iv(1)+4*dv(1),iv(2)+4*dv(2))
     & .gt.0 )then
                        ! we can extrapolate with 4 points:
                        gv(j1-j1,i2p1-i2,i3m1-i3) = (4.*f(j1+(dv(0)),
     & i2p1+(dv(1)),i3m1+(dv(2)))-6.*f(j1+2*(dv(0)),i2p1+2*(dv(1)),
     & i3m1+2*(dv(2)))+4.*f(j1+3*(dv(0)),i2p1+3*(dv(1)),i3m1+3*(dv(2))
     & )-f(j1+4*(dv(0)),i2p1+4*(dv(1)),i3m1+4*(dv(2))))
                      else if( mask(iv(0)+  dv(0),iv(1)+  dv(1),iv(2)+ 
     &  dv(2)).gt.0 .and. mask(iv(0)+2*dv(0),iv(1)+2*dv(1),iv(2)+2*dv(
     & 2)).gt.0 .and. mask(iv(0)+3*dv(0),iv(1)+3*dv(1),iv(2)+3*dv(2))
     & .gt.0 )then
                        ! we can extrapolate with 3 points:
                        gv(j1-j1,i2p1-i2,i3m1-i3) = (3.*f(j1+(dv(0)),
     & i2p1+(dv(1)),i3m1+(dv(2)))-3.*f(j1+2*(dv(0)),i2p1+2*(dv(1)),
     & i3m1+2*(dv(2)))+f(j1+3*(dv(0)),i2p1+3*(dv(1)),i3m1+3*(dv(2))))
                      else if( mask(iv(0)+  dv(0),iv(1)+  dv(1),iv(2)+ 
     &  dv(2)).gt.0 .and. mask(iv(0)+2*dv(0),iv(1)+2*dv(1),iv(2)+2*dv(
     & 2)).gt.0 )then
                        ! we can extrapolate with 2 points: 
                        gv(j1-j1,i2p1-i2,i3m1-i3) = (2.*f(j1+(dv(0)),
     & i2p1+(dv(1)),i3m1+(dv(2)))-f(j1+2*(dv(0)),i2p1+2*(dv(1)),i3m1+
     & 2*(dv(2))))
                      else
                        ! as a backup just use the value from the target point
                        gv(j1-j1,i2p1-i2,i3m1-i3)=f(j1,i2,i3)
                      end if
                      ! Add these checks -- comment out later
                      if( abs(j1-j1).gt.1 .or. abs(i2m1-i2).gt.1 .or. 
     & abs(i3p1-i3).gt.1 )then
                        stop 3338
                      end if
                      ! iv(0:2) = boundary point next to (j1,i2m1,i3p1)
                      iv(0)=i1
                      iv(1)=i2m1
                      iv(2)=i3p1
                      ! dv(0:2) : extrapolate in direction dv (if dv[a]=0 a=0,1,2 then there is no extrapolation)
                      dv(0)=0
                      dv(1)=0
                      dv(2)=0
                      if( iv(ax1).lt.mdim(0,ax1) )then
                       dv(ax1)=1
                      else if( iv(ax1).gt.mdim(1,ax1) )then
                       dv(ax1)=-1
                      end if
                      if( iv(ax2).lt.mdim(0,ax2) )then
                        dv(ax2)=1
                      else if( iv(ax2).gt.mdim(1,ax2) )then
                        dv(ax2)=-1
                      end if
                      if( mask(iv(0)+dv(0),iv(1)+dv(1),iv(2)+dv(2))
     & .le.0 )then
                        ! The neighbouring pt kv or the point we start the extrapolation from is not valid
                        ! Find a direction to extrapolate in: The target point must be valid so start the 
                        ! extrpolation in that direction.
                        dv(0)=j1-j1
                        dv(1)=i2-i2m1
                        dv(2)=i3-i3p1
                      end if
                      if( dv(0).eq.0 .and. dv(1).eq.0. .and. dv(2)
     & .eq.0 )then
                        ! We can use the value from the adjacent point:
                        gv(j1-j1,i2m1-i2,i3p1-i3)=f(j1,i2m1,i3p1)
                      else if( mask(iv(0)+  dv(0),iv(1)+  dv(1),iv(2)+ 
     &  dv(2)).gt.0 .and. mask(iv(0)+2*dv(0),iv(1)+2*dv(1),iv(2)+2*dv(
     & 2)).gt.0 .and. mask(iv(0)+3*dv(0),iv(1)+3*dv(1),iv(2)+3*dv(2))
     & .gt.0 .and. mask(iv(0)+4*dv(0),iv(1)+4*dv(1),iv(2)+4*dv(2))
     & .gt.0 )then
                        ! we can extrapolate with 4 points:
                        gv(j1-j1,i2m1-i2,i3p1-i3) = (4.*f(j1+(dv(0)),
     & i2m1+(dv(1)),i3p1+(dv(2)))-6.*f(j1+2*(dv(0)),i2m1+2*(dv(1)),
     & i3p1+2*(dv(2)))+4.*f(j1+3*(dv(0)),i2m1+3*(dv(1)),i3p1+3*(dv(2))
     & )-f(j1+4*(dv(0)),i2m1+4*(dv(1)),i3p1+4*(dv(2))))
                      else if( mask(iv(0)+  dv(0),iv(1)+  dv(1),iv(2)+ 
     &  dv(2)).gt.0 .and. mask(iv(0)+2*dv(0),iv(1)+2*dv(1),iv(2)+2*dv(
     & 2)).gt.0 .and. mask(iv(0)+3*dv(0),iv(1)+3*dv(1),iv(2)+3*dv(2))
     & .gt.0 )then
                        ! we can extrapolate with 3 points:
                        gv(j1-j1,i2m1-i2,i3p1-i3) = (3.*f(j1+(dv(0)),
     & i2m1+(dv(1)),i3p1+(dv(2)))-3.*f(j1+2*(dv(0)),i2m1+2*(dv(1)),
     & i3p1+2*(dv(2)))+f(j1+3*(dv(0)),i2m1+3*(dv(1)),i3p1+3*(dv(2))))
                      else if( mask(iv(0)+  dv(0),iv(1)+  dv(1),iv(2)+ 
     &  dv(2)).gt.0 .and. mask(iv(0)+2*dv(0),iv(1)+2*dv(1),iv(2)+2*dv(
     & 2)).gt.0 )then
                        ! we can extrapolate with 2 points: 
                        gv(j1-j1,i2m1-i2,i3p1-i3) = (2.*f(j1+(dv(0)),
     & i2m1+(dv(1)),i3p1+(dv(2)))-f(j1+2*(dv(0)),i2m1+2*(dv(1)),i3p1+
     & 2*(dv(2))))
                      else
                        ! as a backup just use the value from the target point
                        gv(j1-j1,i2m1-i2,i3p1-i3)=f(j1,i2,i3)
                      end if
                      ! Add these checks -- comment out later
                      if( abs(j1-j1).gt.1 .or. abs(i2p1-i2).gt.1 .or. 
     & abs(i3p1-i3).gt.1 )then
                        stop 3338
                      end if
                      ! iv(0:2) = boundary point next to (j1,i2p1,i3p1)
                      iv(0)=i1
                      iv(1)=i2p1
                      iv(2)=i3p1
                      ! dv(0:2) : extrapolate in direction dv (if dv[a]=0 a=0,1,2 then there is no extrapolation)
                      dv(0)=0
                      dv(1)=0
                      dv(2)=0
                      if( iv(ax1).lt.mdim(0,ax1) )then
                       dv(ax1)=1
                      else if( iv(ax1).gt.mdim(1,ax1) )then
                       dv(ax1)=-1
                      end if
                      if( iv(ax2).lt.mdim(0,ax2) )then
                        dv(ax2)=1
                      else if( iv(ax2).gt.mdim(1,ax2) )then
                        dv(ax2)=-1
                      end if
                      if( mask(iv(0)+dv(0),iv(1)+dv(1),iv(2)+dv(2))
     & .le.0 )then
                        ! The neighbouring pt kv or the point we start the extrapolation from is not valid
                        ! Find a direction to extrapolate in: The target point must be valid so start the 
                        ! extrpolation in that direction.
                        dv(0)=j1-j1
                        dv(1)=i2-i2p1
                        dv(2)=i3-i3p1
                      end if
                      if( dv(0).eq.0 .and. dv(1).eq.0. .and. dv(2)
     & .eq.0 )then
                        ! We can use the value from the adjacent point:
                        gv(j1-j1,i2p1-i2,i3p1-i3)=f(j1,i2p1,i3p1)
                      else if( mask(iv(0)+  dv(0),iv(1)+  dv(1),iv(2)+ 
     &  dv(2)).gt.0 .and. mask(iv(0)+2*dv(0),iv(1)+2*dv(1),iv(2)+2*dv(
     & 2)).gt.0 .and. mask(iv(0)+3*dv(0),iv(1)+3*dv(1),iv(2)+3*dv(2))
     & .gt.0 .and. mask(iv(0)+4*dv(0),iv(1)+4*dv(1),iv(2)+4*dv(2))
     & .gt.0 )then
                        ! we can extrapolate with 4 points:
                        gv(j1-j1,i2p1-i2,i3p1-i3) = (4.*f(j1+(dv(0)),
     & i2p1+(dv(1)),i3p1+(dv(2)))-6.*f(j1+2*(dv(0)),i2p1+2*(dv(1)),
     & i3p1+2*(dv(2)))+4.*f(j1+3*(dv(0)),i2p1+3*(dv(1)),i3p1+3*(dv(2))
     & )-f(j1+4*(dv(0)),i2p1+4*(dv(1)),i3p1+4*(dv(2))))
                      else if( mask(iv(0)+  dv(0),iv(1)+  dv(1),iv(2)+ 
     &  dv(2)).gt.0 .and. mask(iv(0)+2*dv(0),iv(1)+2*dv(1),iv(2)+2*dv(
     & 2)).gt.0 .and. mask(iv(0)+3*dv(0),iv(1)+3*dv(1),iv(2)+3*dv(2))
     & .gt.0 )then
                        ! we can extrapolate with 3 points:
                        gv(j1-j1,i2p1-i2,i3p1-i3) = (3.*f(j1+(dv(0)),
     & i2p1+(dv(1)),i3p1+(dv(2)))-3.*f(j1+2*(dv(0)),i2p1+2*(dv(1)),
     & i3p1+2*(dv(2)))+f(j1+3*(dv(0)),i2p1+3*(dv(1)),i3p1+3*(dv(2))))
                      else if( mask(iv(0)+  dv(0),iv(1)+  dv(1),iv(2)+ 
     &  dv(2)).gt.0 .and. mask(iv(0)+2*dv(0),iv(1)+2*dv(1),iv(2)+2*dv(
     & 2)).gt.0 )then
                        ! we can extrapolate with 2 points: 
                        gv(j1-j1,i2p1-i2,i3p1-i3) = (2.*f(j1+(dv(0)),
     & i2p1+(dv(1)),i3p1+(dv(2)))-f(j1+2*(dv(0)),i2p1+2*(dv(1)),i3p1+
     & 2*(dv(2))))
                      else
                        ! as a backup just use the value from the target point
                        gv(j1-j1,i2p1-i2,i3p1-i3)=f(j1,i2,i3)
                      end if
                     gst = (((gv(0,+1,+1)-gv(0,+1,-1))-(gv(0,-1,+1)-gv(
     & 0,-1,-1)))*d12(1)*d12(2))
                 ! ---- 3D ----
                ! We need 2 parameteric and 1 real derivative. Do this for now: 
                 ! this next call will define the jacobian and its derivatives (parameteric and spatial)
                 ajrx = rsxy(i1,i2,i3,0,0)
                 ajrxr = (rsxy(i1-2,i2,i3,0,0)-8.*rsxy(i1-1,i2,i3,0,0)+
     & 8.*rsxy(i1+1,i2,i3,0,0)-rsxy(i1+2,i2,i3,0,0))/(12.*dr(0))
                 ajrxs = (rsxy(i1,i2-2,i3,0,0)-8.*rsxy(i1,i2-1,i3,0,0)+
     & 8.*rsxy(i1,i2+1,i3,0,0)-rsxy(i1,i2+2,i3,0,0))/(12.*dr(1))
                 ajrxt = (rsxy(i1,i2,i3-2,0,0)-8.*rsxy(i1,i2,i3-1,0,0)+
     & 8.*rsxy(i1,i2,i3+1,0,0)-rsxy(i1,i2,i3+2,0,0))/(12.*dr(2))
                 ajrxrr = (-rsxy(i1-2,i2,i3,0,0)+16.*rsxy(i1-1,i2,i3,0,
     & 0)-30.*rsxy(i1,i2,i3,0,0)+16.*rsxy(i1+1,i2,i3,0,0)-rsxy(i1+2,
     & i2,i3,0,0))/(12.*dr(0)**2)
                 ajrxrs = ((rsxy(i1-2,i2-2,i3,0,0)-8.*rsxy(i1-2,i2-1,
     & i3,0,0)+8.*rsxy(i1-2,i2+1,i3,0,0)-rsxy(i1-2,i2+2,i3,0,0))/(12.*
     & dr(1))-8.*(rsxy(i1-1,i2-2,i3,0,0)-8.*rsxy(i1-1,i2-1,i3,0,0)+8.*
     & rsxy(i1-1,i2+1,i3,0,0)-rsxy(i1-1,i2+2,i3,0,0))/(12.*dr(1))+8.*(
     & rsxy(i1+1,i2-2,i3,0,0)-8.*rsxy(i1+1,i2-1,i3,0,0)+8.*rsxy(i1+1,
     & i2+1,i3,0,0)-rsxy(i1+1,i2+2,i3,0,0))/(12.*dr(1))-(rsxy(i1+2,i2-
     & 2,i3,0,0)-8.*rsxy(i1+2,i2-1,i3,0,0)+8.*rsxy(i1+2,i2+1,i3,0,0)-
     & rsxy(i1+2,i2+2,i3,0,0))/(12.*dr(1)))/(12.*dr(0))
                 ajrxss = (-rsxy(i1,i2-2,i3,0,0)+16.*rsxy(i1,i2-1,i3,0,
     & 0)-30.*rsxy(i1,i2,i3,0,0)+16.*rsxy(i1,i2+1,i3,0,0)-rsxy(i1,i2+
     & 2,i3,0,0))/(12.*dr(1)**2)
                 ajrxrt = ((rsxy(i1-2,i2,i3-2,0,0)-8.*rsxy(i1-2,i2,i3-
     & 1,0,0)+8.*rsxy(i1-2,i2,i3+1,0,0)-rsxy(i1-2,i2,i3+2,0,0))/(12.*
     & dr(2))-8.*(rsxy(i1-1,i2,i3-2,0,0)-8.*rsxy(i1-1,i2,i3-1,0,0)+8.*
     & rsxy(i1-1,i2,i3+1,0,0)-rsxy(i1-1,i2,i3+2,0,0))/(12.*dr(2))+8.*(
     & rsxy(i1+1,i2,i3-2,0,0)-8.*rsxy(i1+1,i2,i3-1,0,0)+8.*rsxy(i1+1,
     & i2,i3+1,0,0)-rsxy(i1+1,i2,i3+2,0,0))/(12.*dr(2))-(rsxy(i1+2,i2,
     & i3-2,0,0)-8.*rsxy(i1+2,i2,i3-1,0,0)+8.*rsxy(i1+2,i2,i3+1,0,0)-
     & rsxy(i1+2,i2,i3+2,0,0))/(12.*dr(2)))/(12.*dr(0))
                 ajrxst = ((rsxy(i1,i2-2,i3-2,0,0)-8.*rsxy(i1,i2-2,i3-
     & 1,0,0)+8.*rsxy(i1,i2-2,i3+1,0,0)-rsxy(i1,i2-2,i3+2,0,0))/(12.*
     & dr(2))-8.*(rsxy(i1,i2-1,i3-2,0,0)-8.*rsxy(i1,i2-1,i3-1,0,0)+8.*
     & rsxy(i1,i2-1,i3+1,0,0)-rsxy(i1,i2-1,i3+2,0,0))/(12.*dr(2))+8.*(
     & rsxy(i1,i2+1,i3-2,0,0)-8.*rsxy(i1,i2+1,i3-1,0,0)+8.*rsxy(i1,i2+
     & 1,i3+1,0,0)-rsxy(i1,i2+1,i3+2,0,0))/(12.*dr(2))-(rsxy(i1,i2+2,
     & i3-2,0,0)-8.*rsxy(i1,i2+2,i3-1,0,0)+8.*rsxy(i1,i2+2,i3+1,0,0)-
     & rsxy(i1,i2+2,i3+2,0,0))/(12.*dr(2)))/(12.*dr(1))
                 ajrxtt = (-rsxy(i1,i2,i3-2,0,0)+16.*rsxy(i1,i2,i3-1,0,
     & 0)-30.*rsxy(i1,i2,i3,0,0)+16.*rsxy(i1,i2,i3+1,0,0)-rsxy(i1,i2,
     & i3+2,0,0))/(12.*dr(2)**2)
                 ajsx = rsxy(i1,i2,i3,1,0)
                 ajsxr = (rsxy(i1-2,i2,i3,1,0)-8.*rsxy(i1-1,i2,i3,1,0)+
     & 8.*rsxy(i1+1,i2,i3,1,0)-rsxy(i1+2,i2,i3,1,0))/(12.*dr(0))
                 ajsxs = (rsxy(i1,i2-2,i3,1,0)-8.*rsxy(i1,i2-1,i3,1,0)+
     & 8.*rsxy(i1,i2+1,i3,1,0)-rsxy(i1,i2+2,i3,1,0))/(12.*dr(1))
                 ajsxt = (rsxy(i1,i2,i3-2,1,0)-8.*rsxy(i1,i2,i3-1,1,0)+
     & 8.*rsxy(i1,i2,i3+1,1,0)-rsxy(i1,i2,i3+2,1,0))/(12.*dr(2))
                 ajsxrr = (-rsxy(i1-2,i2,i3,1,0)+16.*rsxy(i1-1,i2,i3,1,
     & 0)-30.*rsxy(i1,i2,i3,1,0)+16.*rsxy(i1+1,i2,i3,1,0)-rsxy(i1+2,
     & i2,i3,1,0))/(12.*dr(0)**2)
                 ajsxrs = ((rsxy(i1-2,i2-2,i3,1,0)-8.*rsxy(i1-2,i2-1,
     & i3,1,0)+8.*rsxy(i1-2,i2+1,i3,1,0)-rsxy(i1-2,i2+2,i3,1,0))/(12.*
     & dr(1))-8.*(rsxy(i1-1,i2-2,i3,1,0)-8.*rsxy(i1-1,i2-1,i3,1,0)+8.*
     & rsxy(i1-1,i2+1,i3,1,0)-rsxy(i1-1,i2+2,i3,1,0))/(12.*dr(1))+8.*(
     & rsxy(i1+1,i2-2,i3,1,0)-8.*rsxy(i1+1,i2-1,i3,1,0)+8.*rsxy(i1+1,
     & i2+1,i3,1,0)-rsxy(i1+1,i2+2,i3,1,0))/(12.*dr(1))-(rsxy(i1+2,i2-
     & 2,i3,1,0)-8.*rsxy(i1+2,i2-1,i3,1,0)+8.*rsxy(i1+2,i2+1,i3,1,0)-
     & rsxy(i1+2,i2+2,i3,1,0))/(12.*dr(1)))/(12.*dr(0))
                 ajsxss = (-rsxy(i1,i2-2,i3,1,0)+16.*rsxy(i1,i2-1,i3,1,
     & 0)-30.*rsxy(i1,i2,i3,1,0)+16.*rsxy(i1,i2+1,i3,1,0)-rsxy(i1,i2+
     & 2,i3,1,0))/(12.*dr(1)**2)
                 ajsxrt = ((rsxy(i1-2,i2,i3-2,1,0)-8.*rsxy(i1-2,i2,i3-
     & 1,1,0)+8.*rsxy(i1-2,i2,i3+1,1,0)-rsxy(i1-2,i2,i3+2,1,0))/(12.*
     & dr(2))-8.*(rsxy(i1-1,i2,i3-2,1,0)-8.*rsxy(i1-1,i2,i3-1,1,0)+8.*
     & rsxy(i1-1,i2,i3+1,1,0)-rsxy(i1-1,i2,i3+2,1,0))/(12.*dr(2))+8.*(
     & rsxy(i1+1,i2,i3-2,1,0)-8.*rsxy(i1+1,i2,i3-1,1,0)+8.*rsxy(i1+1,
     & i2,i3+1,1,0)-rsxy(i1+1,i2,i3+2,1,0))/(12.*dr(2))-(rsxy(i1+2,i2,
     & i3-2,1,0)-8.*rsxy(i1+2,i2,i3-1,1,0)+8.*rsxy(i1+2,i2,i3+1,1,0)-
     & rsxy(i1+2,i2,i3+2,1,0))/(12.*dr(2)))/(12.*dr(0))
                 ajsxst = ((rsxy(i1,i2-2,i3-2,1,0)-8.*rsxy(i1,i2-2,i3-
     & 1,1,0)+8.*rsxy(i1,i2-2,i3+1,1,0)-rsxy(i1,i2-2,i3+2,1,0))/(12.*
     & dr(2))-8.*(rsxy(i1,i2-1,i3-2,1,0)-8.*rsxy(i1,i2-1,i3-1,1,0)+8.*
     & rsxy(i1,i2-1,i3+1,1,0)-rsxy(i1,i2-1,i3+2,1,0))/(12.*dr(2))+8.*(
     & rsxy(i1,i2+1,i3-2,1,0)-8.*rsxy(i1,i2+1,i3-1,1,0)+8.*rsxy(i1,i2+
     & 1,i3+1,1,0)-rsxy(i1,i2+1,i3+2,1,0))/(12.*dr(2))-(rsxy(i1,i2+2,
     & i3-2,1,0)-8.*rsxy(i1,i2+2,i3-1,1,0)+8.*rsxy(i1,i2+2,i3+1,1,0)-
     & rsxy(i1,i2+2,i3+2,1,0))/(12.*dr(2)))/(12.*dr(1))
                 ajsxtt = (-rsxy(i1,i2,i3-2,1,0)+16.*rsxy(i1,i2,i3-1,1,
     & 0)-30.*rsxy(i1,i2,i3,1,0)+16.*rsxy(i1,i2,i3+1,1,0)-rsxy(i1,i2,
     & i3+2,1,0))/(12.*dr(2)**2)
                 ajtx = rsxy(i1,i2,i3,2,0)
                 ajtxr = (rsxy(i1-2,i2,i3,2,0)-8.*rsxy(i1-1,i2,i3,2,0)+
     & 8.*rsxy(i1+1,i2,i3,2,0)-rsxy(i1+2,i2,i3,2,0))/(12.*dr(0))
                 ajtxs = (rsxy(i1,i2-2,i3,2,0)-8.*rsxy(i1,i2-1,i3,2,0)+
     & 8.*rsxy(i1,i2+1,i3,2,0)-rsxy(i1,i2+2,i3,2,0))/(12.*dr(1))
                 ajtxt = (rsxy(i1,i2,i3-2,2,0)-8.*rsxy(i1,i2,i3-1,2,0)+
     & 8.*rsxy(i1,i2,i3+1,2,0)-rsxy(i1,i2,i3+2,2,0))/(12.*dr(2))
                 ajtxrr = (-rsxy(i1-2,i2,i3,2,0)+16.*rsxy(i1-1,i2,i3,2,
     & 0)-30.*rsxy(i1,i2,i3,2,0)+16.*rsxy(i1+1,i2,i3,2,0)-rsxy(i1+2,
     & i2,i3,2,0))/(12.*dr(0)**2)
                 ajtxrs = ((rsxy(i1-2,i2-2,i3,2,0)-8.*rsxy(i1-2,i2-1,
     & i3,2,0)+8.*rsxy(i1-2,i2+1,i3,2,0)-rsxy(i1-2,i2+2,i3,2,0))/(12.*
     & dr(1))-8.*(rsxy(i1-1,i2-2,i3,2,0)-8.*rsxy(i1-1,i2-1,i3,2,0)+8.*
     & rsxy(i1-1,i2+1,i3,2,0)-rsxy(i1-1,i2+2,i3,2,0))/(12.*dr(1))+8.*(
     & rsxy(i1+1,i2-2,i3,2,0)-8.*rsxy(i1+1,i2-1,i3,2,0)+8.*rsxy(i1+1,
     & i2+1,i3,2,0)-rsxy(i1+1,i2+2,i3,2,0))/(12.*dr(1))-(rsxy(i1+2,i2-
     & 2,i3,2,0)-8.*rsxy(i1+2,i2-1,i3,2,0)+8.*rsxy(i1+2,i2+1,i3,2,0)-
     & rsxy(i1+2,i2+2,i3,2,0))/(12.*dr(1)))/(12.*dr(0))
                 ajtxss = (-rsxy(i1,i2-2,i3,2,0)+16.*rsxy(i1,i2-1,i3,2,
     & 0)-30.*rsxy(i1,i2,i3,2,0)+16.*rsxy(i1,i2+1,i3,2,0)-rsxy(i1,i2+
     & 2,i3,2,0))/(12.*dr(1)**2)
                 ajtxrt = ((rsxy(i1-2,i2,i3-2,2,0)-8.*rsxy(i1-2,i2,i3-
     & 1,2,0)+8.*rsxy(i1-2,i2,i3+1,2,0)-rsxy(i1-2,i2,i3+2,2,0))/(12.*
     & dr(2))-8.*(rsxy(i1-1,i2,i3-2,2,0)-8.*rsxy(i1-1,i2,i3-1,2,0)+8.*
     & rsxy(i1-1,i2,i3+1,2,0)-rsxy(i1-1,i2,i3+2,2,0))/(12.*dr(2))+8.*(
     & rsxy(i1+1,i2,i3-2,2,0)-8.*rsxy(i1+1,i2,i3-1,2,0)+8.*rsxy(i1+1,
     & i2,i3+1,2,0)-rsxy(i1+1,i2,i3+2,2,0))/(12.*dr(2))-(rsxy(i1+2,i2,
     & i3-2,2,0)-8.*rsxy(i1+2,i2,i3-1,2,0)+8.*rsxy(i1+2,i2,i3+1,2,0)-
     & rsxy(i1+2,i2,i3+2,2,0))/(12.*dr(2)))/(12.*dr(0))
                 ajtxst = ((rsxy(i1,i2-2,i3-2,2,0)-8.*rsxy(i1,i2-2,i3-
     & 1,2,0)+8.*rsxy(i1,i2-2,i3+1,2,0)-rsxy(i1,i2-2,i3+2,2,0))/(12.*
     & dr(2))-8.*(rsxy(i1,i2-1,i3-2,2,0)-8.*rsxy(i1,i2-1,i3-1,2,0)+8.*
     & rsxy(i1,i2-1,i3+1,2,0)-rsxy(i1,i2-1,i3+2,2,0))/(12.*dr(2))+8.*(
     & rsxy(i1,i2+1,i3-2,2,0)-8.*rsxy(i1,i2+1,i3-1,2,0)+8.*rsxy(i1,i2+
     & 1,i3+1,2,0)-rsxy(i1,i2+1,i3+2,2,0))/(12.*dr(2))-(rsxy(i1,i2+2,
     & i3-2,2,0)-8.*rsxy(i1,i2+2,i3-1,2,0)+8.*rsxy(i1,i2+2,i3+1,2,0)-
     & rsxy(i1,i2+2,i3+2,2,0))/(12.*dr(2)))/(12.*dr(1))
                 ajtxtt = (-rsxy(i1,i2,i3-2,2,0)+16.*rsxy(i1,i2,i3-1,2,
     & 0)-30.*rsxy(i1,i2,i3,2,0)+16.*rsxy(i1,i2,i3+1,2,0)-rsxy(i1,i2,
     & i3+2,2,0))/(12.*dr(2)**2)
                 ajry = rsxy(i1,i2,i3,0,1)
                 ajryr = (rsxy(i1-2,i2,i3,0,1)-8.*rsxy(i1-1,i2,i3,0,1)+
     & 8.*rsxy(i1+1,i2,i3,0,1)-rsxy(i1+2,i2,i3,0,1))/(12.*dr(0))
                 ajrys = (rsxy(i1,i2-2,i3,0,1)-8.*rsxy(i1,i2-1,i3,0,1)+
     & 8.*rsxy(i1,i2+1,i3,0,1)-rsxy(i1,i2+2,i3,0,1))/(12.*dr(1))
                 ajryt = (rsxy(i1,i2,i3-2,0,1)-8.*rsxy(i1,i2,i3-1,0,1)+
     & 8.*rsxy(i1,i2,i3+1,0,1)-rsxy(i1,i2,i3+2,0,1))/(12.*dr(2))
                 ajryrr = (-rsxy(i1-2,i2,i3,0,1)+16.*rsxy(i1-1,i2,i3,0,
     & 1)-30.*rsxy(i1,i2,i3,0,1)+16.*rsxy(i1+1,i2,i3,0,1)-rsxy(i1+2,
     & i2,i3,0,1))/(12.*dr(0)**2)
                 ajryrs = ((rsxy(i1-2,i2-2,i3,0,1)-8.*rsxy(i1-2,i2-1,
     & i3,0,1)+8.*rsxy(i1-2,i2+1,i3,0,1)-rsxy(i1-2,i2+2,i3,0,1))/(12.*
     & dr(1))-8.*(rsxy(i1-1,i2-2,i3,0,1)-8.*rsxy(i1-1,i2-1,i3,0,1)+8.*
     & rsxy(i1-1,i2+1,i3,0,1)-rsxy(i1-1,i2+2,i3,0,1))/(12.*dr(1))+8.*(
     & rsxy(i1+1,i2-2,i3,0,1)-8.*rsxy(i1+1,i2-1,i3,0,1)+8.*rsxy(i1+1,
     & i2+1,i3,0,1)-rsxy(i1+1,i2+2,i3,0,1))/(12.*dr(1))-(rsxy(i1+2,i2-
     & 2,i3,0,1)-8.*rsxy(i1+2,i2-1,i3,0,1)+8.*rsxy(i1+2,i2+1,i3,0,1)-
     & rsxy(i1+2,i2+2,i3,0,1))/(12.*dr(1)))/(12.*dr(0))
                 ajryss = (-rsxy(i1,i2-2,i3,0,1)+16.*rsxy(i1,i2-1,i3,0,
     & 1)-30.*rsxy(i1,i2,i3,0,1)+16.*rsxy(i1,i2+1,i3,0,1)-rsxy(i1,i2+
     & 2,i3,0,1))/(12.*dr(1)**2)
                 ajryrt = ((rsxy(i1-2,i2,i3-2,0,1)-8.*rsxy(i1-2,i2,i3-
     & 1,0,1)+8.*rsxy(i1-2,i2,i3+1,0,1)-rsxy(i1-2,i2,i3+2,0,1))/(12.*
     & dr(2))-8.*(rsxy(i1-1,i2,i3-2,0,1)-8.*rsxy(i1-1,i2,i3-1,0,1)+8.*
     & rsxy(i1-1,i2,i3+1,0,1)-rsxy(i1-1,i2,i3+2,0,1))/(12.*dr(2))+8.*(
     & rsxy(i1+1,i2,i3-2,0,1)-8.*rsxy(i1+1,i2,i3-1,0,1)+8.*rsxy(i1+1,
     & i2,i3+1,0,1)-rsxy(i1+1,i2,i3+2,0,1))/(12.*dr(2))-(rsxy(i1+2,i2,
     & i3-2,0,1)-8.*rsxy(i1+2,i2,i3-1,0,1)+8.*rsxy(i1+2,i2,i3+1,0,1)-
     & rsxy(i1+2,i2,i3+2,0,1))/(12.*dr(2)))/(12.*dr(0))
                 ajryst = ((rsxy(i1,i2-2,i3-2,0,1)-8.*rsxy(i1,i2-2,i3-
     & 1,0,1)+8.*rsxy(i1,i2-2,i3+1,0,1)-rsxy(i1,i2-2,i3+2,0,1))/(12.*
     & dr(2))-8.*(rsxy(i1,i2-1,i3-2,0,1)-8.*rsxy(i1,i2-1,i3-1,0,1)+8.*
     & rsxy(i1,i2-1,i3+1,0,1)-rsxy(i1,i2-1,i3+2,0,1))/(12.*dr(2))+8.*(
     & rsxy(i1,i2+1,i3-2,0,1)-8.*rsxy(i1,i2+1,i3-1,0,1)+8.*rsxy(i1,i2+
     & 1,i3+1,0,1)-rsxy(i1,i2+1,i3+2,0,1))/(12.*dr(2))-(rsxy(i1,i2+2,
     & i3-2,0,1)-8.*rsxy(i1,i2+2,i3-1,0,1)+8.*rsxy(i1,i2+2,i3+1,0,1)-
     & rsxy(i1,i2+2,i3+2,0,1))/(12.*dr(2)))/(12.*dr(1))
                 ajrytt = (-rsxy(i1,i2,i3-2,0,1)+16.*rsxy(i1,i2,i3-1,0,
     & 1)-30.*rsxy(i1,i2,i3,0,1)+16.*rsxy(i1,i2,i3+1,0,1)-rsxy(i1,i2,
     & i3+2,0,1))/(12.*dr(2)**2)
                 ajsy = rsxy(i1,i2,i3,1,1)
                 ajsyr = (rsxy(i1-2,i2,i3,1,1)-8.*rsxy(i1-1,i2,i3,1,1)+
     & 8.*rsxy(i1+1,i2,i3,1,1)-rsxy(i1+2,i2,i3,1,1))/(12.*dr(0))
                 ajsys = (rsxy(i1,i2-2,i3,1,1)-8.*rsxy(i1,i2-1,i3,1,1)+
     & 8.*rsxy(i1,i2+1,i3,1,1)-rsxy(i1,i2+2,i3,1,1))/(12.*dr(1))
                 ajsyt = (rsxy(i1,i2,i3-2,1,1)-8.*rsxy(i1,i2,i3-1,1,1)+
     & 8.*rsxy(i1,i2,i3+1,1,1)-rsxy(i1,i2,i3+2,1,1))/(12.*dr(2))
                 ajsyrr = (-rsxy(i1-2,i2,i3,1,1)+16.*rsxy(i1-1,i2,i3,1,
     & 1)-30.*rsxy(i1,i2,i3,1,1)+16.*rsxy(i1+1,i2,i3,1,1)-rsxy(i1+2,
     & i2,i3,1,1))/(12.*dr(0)**2)
                 ajsyrs = ((rsxy(i1-2,i2-2,i3,1,1)-8.*rsxy(i1-2,i2-1,
     & i3,1,1)+8.*rsxy(i1-2,i2+1,i3,1,1)-rsxy(i1-2,i2+2,i3,1,1))/(12.*
     & dr(1))-8.*(rsxy(i1-1,i2-2,i3,1,1)-8.*rsxy(i1-1,i2-1,i3,1,1)+8.*
     & rsxy(i1-1,i2+1,i3,1,1)-rsxy(i1-1,i2+2,i3,1,1))/(12.*dr(1))+8.*(
     & rsxy(i1+1,i2-2,i3,1,1)-8.*rsxy(i1+1,i2-1,i3,1,1)+8.*rsxy(i1+1,
     & i2+1,i3,1,1)-rsxy(i1+1,i2+2,i3,1,1))/(12.*dr(1))-(rsxy(i1+2,i2-
     & 2,i3,1,1)-8.*rsxy(i1+2,i2-1,i3,1,1)+8.*rsxy(i1+2,i2+1,i3,1,1)-
     & rsxy(i1+2,i2+2,i3,1,1))/(12.*dr(1)))/(12.*dr(0))
                 ajsyss = (-rsxy(i1,i2-2,i3,1,1)+16.*rsxy(i1,i2-1,i3,1,
     & 1)-30.*rsxy(i1,i2,i3,1,1)+16.*rsxy(i1,i2+1,i3,1,1)-rsxy(i1,i2+
     & 2,i3,1,1))/(12.*dr(1)**2)
                 ajsyrt = ((rsxy(i1-2,i2,i3-2,1,1)-8.*rsxy(i1-2,i2,i3-
     & 1,1,1)+8.*rsxy(i1-2,i2,i3+1,1,1)-rsxy(i1-2,i2,i3+2,1,1))/(12.*
     & dr(2))-8.*(rsxy(i1-1,i2,i3-2,1,1)-8.*rsxy(i1-1,i2,i3-1,1,1)+8.*
     & rsxy(i1-1,i2,i3+1,1,1)-rsxy(i1-1,i2,i3+2,1,1))/(12.*dr(2))+8.*(
     & rsxy(i1+1,i2,i3-2,1,1)-8.*rsxy(i1+1,i2,i3-1,1,1)+8.*rsxy(i1+1,
     & i2,i3+1,1,1)-rsxy(i1+1,i2,i3+2,1,1))/(12.*dr(2))-(rsxy(i1+2,i2,
     & i3-2,1,1)-8.*rsxy(i1+2,i2,i3-1,1,1)+8.*rsxy(i1+2,i2,i3+1,1,1)-
     & rsxy(i1+2,i2,i3+2,1,1))/(12.*dr(2)))/(12.*dr(0))
                 ajsyst = ((rsxy(i1,i2-2,i3-2,1,1)-8.*rsxy(i1,i2-2,i3-
     & 1,1,1)+8.*rsxy(i1,i2-2,i3+1,1,1)-rsxy(i1,i2-2,i3+2,1,1))/(12.*
     & dr(2))-8.*(rsxy(i1,i2-1,i3-2,1,1)-8.*rsxy(i1,i2-1,i3-1,1,1)+8.*
     & rsxy(i1,i2-1,i3+1,1,1)-rsxy(i1,i2-1,i3+2,1,1))/(12.*dr(2))+8.*(
     & rsxy(i1,i2+1,i3-2,1,1)-8.*rsxy(i1,i2+1,i3-1,1,1)+8.*rsxy(i1,i2+
     & 1,i3+1,1,1)-rsxy(i1,i2+1,i3+2,1,1))/(12.*dr(2))-(rsxy(i1,i2+2,
     & i3-2,1,1)-8.*rsxy(i1,i2+2,i3-1,1,1)+8.*rsxy(i1,i2+2,i3+1,1,1)-
     & rsxy(i1,i2+2,i3+2,1,1))/(12.*dr(2)))/(12.*dr(1))
                 ajsytt = (-rsxy(i1,i2,i3-2,1,1)+16.*rsxy(i1,i2,i3-1,1,
     & 1)-30.*rsxy(i1,i2,i3,1,1)+16.*rsxy(i1,i2,i3+1,1,1)-rsxy(i1,i2,
     & i3+2,1,1))/(12.*dr(2)**2)
                 ajty = rsxy(i1,i2,i3,2,1)
                 ajtyr = (rsxy(i1-2,i2,i3,2,1)-8.*rsxy(i1-1,i2,i3,2,1)+
     & 8.*rsxy(i1+1,i2,i3,2,1)-rsxy(i1+2,i2,i3,2,1))/(12.*dr(0))
                 ajtys = (rsxy(i1,i2-2,i3,2,1)-8.*rsxy(i1,i2-1,i3,2,1)+
     & 8.*rsxy(i1,i2+1,i3,2,1)-rsxy(i1,i2+2,i3,2,1))/(12.*dr(1))
                 ajtyt = (rsxy(i1,i2,i3-2,2,1)-8.*rsxy(i1,i2,i3-1,2,1)+
     & 8.*rsxy(i1,i2,i3+1,2,1)-rsxy(i1,i2,i3+2,2,1))/(12.*dr(2))
                 ajtyrr = (-rsxy(i1-2,i2,i3,2,1)+16.*rsxy(i1-1,i2,i3,2,
     & 1)-30.*rsxy(i1,i2,i3,2,1)+16.*rsxy(i1+1,i2,i3,2,1)-rsxy(i1+2,
     & i2,i3,2,1))/(12.*dr(0)**2)
                 ajtyrs = ((rsxy(i1-2,i2-2,i3,2,1)-8.*rsxy(i1-2,i2-1,
     & i3,2,1)+8.*rsxy(i1-2,i2+1,i3,2,1)-rsxy(i1-2,i2+2,i3,2,1))/(12.*
     & dr(1))-8.*(rsxy(i1-1,i2-2,i3,2,1)-8.*rsxy(i1-1,i2-1,i3,2,1)+8.*
     & rsxy(i1-1,i2+1,i3,2,1)-rsxy(i1-1,i2+2,i3,2,1))/(12.*dr(1))+8.*(
     & rsxy(i1+1,i2-2,i3,2,1)-8.*rsxy(i1+1,i2-1,i3,2,1)+8.*rsxy(i1+1,
     & i2+1,i3,2,1)-rsxy(i1+1,i2+2,i3,2,1))/(12.*dr(1))-(rsxy(i1+2,i2-
     & 2,i3,2,1)-8.*rsxy(i1+2,i2-1,i3,2,1)+8.*rsxy(i1+2,i2+1,i3,2,1)-
     & rsxy(i1+2,i2+2,i3,2,1))/(12.*dr(1)))/(12.*dr(0))
                 ajtyss = (-rsxy(i1,i2-2,i3,2,1)+16.*rsxy(i1,i2-1,i3,2,
     & 1)-30.*rsxy(i1,i2,i3,2,1)+16.*rsxy(i1,i2+1,i3,2,1)-rsxy(i1,i2+
     & 2,i3,2,1))/(12.*dr(1)**2)
                 ajtyrt = ((rsxy(i1-2,i2,i3-2,2,1)-8.*rsxy(i1-2,i2,i3-
     & 1,2,1)+8.*rsxy(i1-2,i2,i3+1,2,1)-rsxy(i1-2,i2,i3+2,2,1))/(12.*
     & dr(2))-8.*(rsxy(i1-1,i2,i3-2,2,1)-8.*rsxy(i1-1,i2,i3-1,2,1)+8.*
     & rsxy(i1-1,i2,i3+1,2,1)-rsxy(i1-1,i2,i3+2,2,1))/(12.*dr(2))+8.*(
     & rsxy(i1+1,i2,i3-2,2,1)-8.*rsxy(i1+1,i2,i3-1,2,1)+8.*rsxy(i1+1,
     & i2,i3+1,2,1)-rsxy(i1+1,i2,i3+2,2,1))/(12.*dr(2))-(rsxy(i1+2,i2,
     & i3-2,2,1)-8.*rsxy(i1+2,i2,i3-1,2,1)+8.*rsxy(i1+2,i2,i3+1,2,1)-
     & rsxy(i1+2,i2,i3+2,2,1))/(12.*dr(2)))/(12.*dr(0))
                 ajtyst = ((rsxy(i1,i2-2,i3-2,2,1)-8.*rsxy(i1,i2-2,i3-
     & 1,2,1)+8.*rsxy(i1,i2-2,i3+1,2,1)-rsxy(i1,i2-2,i3+2,2,1))/(12.*
     & dr(2))-8.*(rsxy(i1,i2-1,i3-2,2,1)-8.*rsxy(i1,i2-1,i3-1,2,1)+8.*
     & rsxy(i1,i2-1,i3+1,2,1)-rsxy(i1,i2-1,i3+2,2,1))/(12.*dr(2))+8.*(
     & rsxy(i1,i2+1,i3-2,2,1)-8.*rsxy(i1,i2+1,i3-1,2,1)+8.*rsxy(i1,i2+
     & 1,i3+1,2,1)-rsxy(i1,i2+1,i3+2,2,1))/(12.*dr(2))-(rsxy(i1,i2+2,
     & i3-2,2,1)-8.*rsxy(i1,i2+2,i3-1,2,1)+8.*rsxy(i1,i2+2,i3+1,2,1)-
     & rsxy(i1,i2+2,i3+2,2,1))/(12.*dr(2)))/(12.*dr(1))
                 ajtytt = (-rsxy(i1,i2,i3-2,2,1)+16.*rsxy(i1,i2,i3-1,2,
     & 1)-30.*rsxy(i1,i2,i3,2,1)+16.*rsxy(i1,i2,i3+1,2,1)-rsxy(i1,i2,
     & i3+2,2,1))/(12.*dr(2)**2)
                 ajrz = rsxy(i1,i2,i3,0,2)
                 ajrzr = (rsxy(i1-2,i2,i3,0,2)-8.*rsxy(i1-1,i2,i3,0,2)+
     & 8.*rsxy(i1+1,i2,i3,0,2)-rsxy(i1+2,i2,i3,0,2))/(12.*dr(0))
                 ajrzs = (rsxy(i1,i2-2,i3,0,2)-8.*rsxy(i1,i2-1,i3,0,2)+
     & 8.*rsxy(i1,i2+1,i3,0,2)-rsxy(i1,i2+2,i3,0,2))/(12.*dr(1))
                 ajrzt = (rsxy(i1,i2,i3-2,0,2)-8.*rsxy(i1,i2,i3-1,0,2)+
     & 8.*rsxy(i1,i2,i3+1,0,2)-rsxy(i1,i2,i3+2,0,2))/(12.*dr(2))
                 ajrzrr = (-rsxy(i1-2,i2,i3,0,2)+16.*rsxy(i1-1,i2,i3,0,
     & 2)-30.*rsxy(i1,i2,i3,0,2)+16.*rsxy(i1+1,i2,i3,0,2)-rsxy(i1+2,
     & i2,i3,0,2))/(12.*dr(0)**2)
                 ajrzrs = ((rsxy(i1-2,i2-2,i3,0,2)-8.*rsxy(i1-2,i2-1,
     & i3,0,2)+8.*rsxy(i1-2,i2+1,i3,0,2)-rsxy(i1-2,i2+2,i3,0,2))/(12.*
     & dr(1))-8.*(rsxy(i1-1,i2-2,i3,0,2)-8.*rsxy(i1-1,i2-1,i3,0,2)+8.*
     & rsxy(i1-1,i2+1,i3,0,2)-rsxy(i1-1,i2+2,i3,0,2))/(12.*dr(1))+8.*(
     & rsxy(i1+1,i2-2,i3,0,2)-8.*rsxy(i1+1,i2-1,i3,0,2)+8.*rsxy(i1+1,
     & i2+1,i3,0,2)-rsxy(i1+1,i2+2,i3,0,2))/(12.*dr(1))-(rsxy(i1+2,i2-
     & 2,i3,0,2)-8.*rsxy(i1+2,i2-1,i3,0,2)+8.*rsxy(i1+2,i2+1,i3,0,2)-
     & rsxy(i1+2,i2+2,i3,0,2))/(12.*dr(1)))/(12.*dr(0))
                 ajrzss = (-rsxy(i1,i2-2,i3,0,2)+16.*rsxy(i1,i2-1,i3,0,
     & 2)-30.*rsxy(i1,i2,i3,0,2)+16.*rsxy(i1,i2+1,i3,0,2)-rsxy(i1,i2+
     & 2,i3,0,2))/(12.*dr(1)**2)
                 ajrzrt = ((rsxy(i1-2,i2,i3-2,0,2)-8.*rsxy(i1-2,i2,i3-
     & 1,0,2)+8.*rsxy(i1-2,i2,i3+1,0,2)-rsxy(i1-2,i2,i3+2,0,2))/(12.*
     & dr(2))-8.*(rsxy(i1-1,i2,i3-2,0,2)-8.*rsxy(i1-1,i2,i3-1,0,2)+8.*
     & rsxy(i1-1,i2,i3+1,0,2)-rsxy(i1-1,i2,i3+2,0,2))/(12.*dr(2))+8.*(
     & rsxy(i1+1,i2,i3-2,0,2)-8.*rsxy(i1+1,i2,i3-1,0,2)+8.*rsxy(i1+1,
     & i2,i3+1,0,2)-rsxy(i1+1,i2,i3+2,0,2))/(12.*dr(2))-(rsxy(i1+2,i2,
     & i3-2,0,2)-8.*rsxy(i1+2,i2,i3-1,0,2)+8.*rsxy(i1+2,i2,i3+1,0,2)-
     & rsxy(i1+2,i2,i3+2,0,2))/(12.*dr(2)))/(12.*dr(0))
                 ajrzst = ((rsxy(i1,i2-2,i3-2,0,2)-8.*rsxy(i1,i2-2,i3-
     & 1,0,2)+8.*rsxy(i1,i2-2,i3+1,0,2)-rsxy(i1,i2-2,i3+2,0,2))/(12.*
     & dr(2))-8.*(rsxy(i1,i2-1,i3-2,0,2)-8.*rsxy(i1,i2-1,i3-1,0,2)+8.*
     & rsxy(i1,i2-1,i3+1,0,2)-rsxy(i1,i2-1,i3+2,0,2))/(12.*dr(2))+8.*(
     & rsxy(i1,i2+1,i3-2,0,2)-8.*rsxy(i1,i2+1,i3-1,0,2)+8.*rsxy(i1,i2+
     & 1,i3+1,0,2)-rsxy(i1,i2+1,i3+2,0,2))/(12.*dr(2))-(rsxy(i1,i2+2,
     & i3-2,0,2)-8.*rsxy(i1,i2+2,i3-1,0,2)+8.*rsxy(i1,i2+2,i3+1,0,2)-
     & rsxy(i1,i2+2,i3+2,0,2))/(12.*dr(2)))/(12.*dr(1))
                 ajrztt = (-rsxy(i1,i2,i3-2,0,2)+16.*rsxy(i1,i2,i3-1,0,
     & 2)-30.*rsxy(i1,i2,i3,0,2)+16.*rsxy(i1,i2,i3+1,0,2)-rsxy(i1,i2,
     & i3+2,0,2))/(12.*dr(2)**2)
                 ajsz = rsxy(i1,i2,i3,1,2)
                 ajszr = (rsxy(i1-2,i2,i3,1,2)-8.*rsxy(i1-1,i2,i3,1,2)+
     & 8.*rsxy(i1+1,i2,i3,1,2)-rsxy(i1+2,i2,i3,1,2))/(12.*dr(0))
                 ajszs = (rsxy(i1,i2-2,i3,1,2)-8.*rsxy(i1,i2-1,i3,1,2)+
     & 8.*rsxy(i1,i2+1,i3,1,2)-rsxy(i1,i2+2,i3,1,2))/(12.*dr(1))
                 ajszt = (rsxy(i1,i2,i3-2,1,2)-8.*rsxy(i1,i2,i3-1,1,2)+
     & 8.*rsxy(i1,i2,i3+1,1,2)-rsxy(i1,i2,i3+2,1,2))/(12.*dr(2))
                 ajszrr = (-rsxy(i1-2,i2,i3,1,2)+16.*rsxy(i1-1,i2,i3,1,
     & 2)-30.*rsxy(i1,i2,i3,1,2)+16.*rsxy(i1+1,i2,i3,1,2)-rsxy(i1+2,
     & i2,i3,1,2))/(12.*dr(0)**2)
                 ajszrs = ((rsxy(i1-2,i2-2,i3,1,2)-8.*rsxy(i1-2,i2-1,
     & i3,1,2)+8.*rsxy(i1-2,i2+1,i3,1,2)-rsxy(i1-2,i2+2,i3,1,2))/(12.*
     & dr(1))-8.*(rsxy(i1-1,i2-2,i3,1,2)-8.*rsxy(i1-1,i2-1,i3,1,2)+8.*
     & rsxy(i1-1,i2+1,i3,1,2)-rsxy(i1-1,i2+2,i3,1,2))/(12.*dr(1))+8.*(
     & rsxy(i1+1,i2-2,i3,1,2)-8.*rsxy(i1+1,i2-1,i3,1,2)+8.*rsxy(i1+1,
     & i2+1,i3,1,2)-rsxy(i1+1,i2+2,i3,1,2))/(12.*dr(1))-(rsxy(i1+2,i2-
     & 2,i3,1,2)-8.*rsxy(i1+2,i2-1,i3,1,2)+8.*rsxy(i1+2,i2+1,i3,1,2)-
     & rsxy(i1+2,i2+2,i3,1,2))/(12.*dr(1)))/(12.*dr(0))
                 ajszss = (-rsxy(i1,i2-2,i3,1,2)+16.*rsxy(i1,i2-1,i3,1,
     & 2)-30.*rsxy(i1,i2,i3,1,2)+16.*rsxy(i1,i2+1,i3,1,2)-rsxy(i1,i2+
     & 2,i3,1,2))/(12.*dr(1)**2)
                 ajszrt = ((rsxy(i1-2,i2,i3-2,1,2)-8.*rsxy(i1-2,i2,i3-
     & 1,1,2)+8.*rsxy(i1-2,i2,i3+1,1,2)-rsxy(i1-2,i2,i3+2,1,2))/(12.*
     & dr(2))-8.*(rsxy(i1-1,i2,i3-2,1,2)-8.*rsxy(i1-1,i2,i3-1,1,2)+8.*
     & rsxy(i1-1,i2,i3+1,1,2)-rsxy(i1-1,i2,i3+2,1,2))/(12.*dr(2))+8.*(
     & rsxy(i1+1,i2,i3-2,1,2)-8.*rsxy(i1+1,i2,i3-1,1,2)+8.*rsxy(i1+1,
     & i2,i3+1,1,2)-rsxy(i1+1,i2,i3+2,1,2))/(12.*dr(2))-(rsxy(i1+2,i2,
     & i3-2,1,2)-8.*rsxy(i1+2,i2,i3-1,1,2)+8.*rsxy(i1+2,i2,i3+1,1,2)-
     & rsxy(i1+2,i2,i3+2,1,2))/(12.*dr(2)))/(12.*dr(0))
                 ajszst = ((rsxy(i1,i2-2,i3-2,1,2)-8.*rsxy(i1,i2-2,i3-
     & 1,1,2)+8.*rsxy(i1,i2-2,i3+1,1,2)-rsxy(i1,i2-2,i3+2,1,2))/(12.*
     & dr(2))-8.*(rsxy(i1,i2-1,i3-2,1,2)-8.*rsxy(i1,i2-1,i3-1,1,2)+8.*
     & rsxy(i1,i2-1,i3+1,1,2)-rsxy(i1,i2-1,i3+2,1,2))/(12.*dr(2))+8.*(
     & rsxy(i1,i2+1,i3-2,1,2)-8.*rsxy(i1,i2+1,i3-1,1,2)+8.*rsxy(i1,i2+
     & 1,i3+1,1,2)-rsxy(i1,i2+1,i3+2,1,2))/(12.*dr(2))-(rsxy(i1,i2+2,
     & i3-2,1,2)-8.*rsxy(i1,i2+2,i3-1,1,2)+8.*rsxy(i1,i2+2,i3+1,1,2)-
     & rsxy(i1,i2+2,i3+2,1,2))/(12.*dr(2)))/(12.*dr(1))
                 ajsztt = (-rsxy(i1,i2,i3-2,1,2)+16.*rsxy(i1,i2,i3-1,1,
     & 2)-30.*rsxy(i1,i2,i3,1,2)+16.*rsxy(i1,i2,i3+1,1,2)-rsxy(i1,i2,
     & i3+2,1,2))/(12.*dr(2)**2)
                 ajtz = rsxy(i1,i2,i3,2,2)
                 ajtzr = (rsxy(i1-2,i2,i3,2,2)-8.*rsxy(i1-1,i2,i3,2,2)+
     & 8.*rsxy(i1+1,i2,i3,2,2)-rsxy(i1+2,i2,i3,2,2))/(12.*dr(0))
                 ajtzs = (rsxy(i1,i2-2,i3,2,2)-8.*rsxy(i1,i2-1,i3,2,2)+
     & 8.*rsxy(i1,i2+1,i3,2,2)-rsxy(i1,i2+2,i3,2,2))/(12.*dr(1))
                 ajtzt = (rsxy(i1,i2,i3-2,2,2)-8.*rsxy(i1,i2,i3-1,2,2)+
     & 8.*rsxy(i1,i2,i3+1,2,2)-rsxy(i1,i2,i3+2,2,2))/(12.*dr(2))
                 ajtzrr = (-rsxy(i1-2,i2,i3,2,2)+16.*rsxy(i1-1,i2,i3,2,
     & 2)-30.*rsxy(i1,i2,i3,2,2)+16.*rsxy(i1+1,i2,i3,2,2)-rsxy(i1+2,
     & i2,i3,2,2))/(12.*dr(0)**2)
                 ajtzrs = ((rsxy(i1-2,i2-2,i3,2,2)-8.*rsxy(i1-2,i2-1,
     & i3,2,2)+8.*rsxy(i1-2,i2+1,i3,2,2)-rsxy(i1-2,i2+2,i3,2,2))/(12.*
     & dr(1))-8.*(rsxy(i1-1,i2-2,i3,2,2)-8.*rsxy(i1-1,i2-1,i3,2,2)+8.*
     & rsxy(i1-1,i2+1,i3,2,2)-rsxy(i1-1,i2+2,i3,2,2))/(12.*dr(1))+8.*(
     & rsxy(i1+1,i2-2,i3,2,2)-8.*rsxy(i1+1,i2-1,i3,2,2)+8.*rsxy(i1+1,
     & i2+1,i3,2,2)-rsxy(i1+1,i2+2,i3,2,2))/(12.*dr(1))-(rsxy(i1+2,i2-
     & 2,i3,2,2)-8.*rsxy(i1+2,i2-1,i3,2,2)+8.*rsxy(i1+2,i2+1,i3,2,2)-
     & rsxy(i1+2,i2+2,i3,2,2))/(12.*dr(1)))/(12.*dr(0))
                 ajtzss = (-rsxy(i1,i2-2,i3,2,2)+16.*rsxy(i1,i2-1,i3,2,
     & 2)-30.*rsxy(i1,i2,i3,2,2)+16.*rsxy(i1,i2+1,i3,2,2)-rsxy(i1,i2+
     & 2,i3,2,2))/(12.*dr(1)**2)
                 ajtzrt = ((rsxy(i1-2,i2,i3-2,2,2)-8.*rsxy(i1-2,i2,i3-
     & 1,2,2)+8.*rsxy(i1-2,i2,i3+1,2,2)-rsxy(i1-2,i2,i3+2,2,2))/(12.*
     & dr(2))-8.*(rsxy(i1-1,i2,i3-2,2,2)-8.*rsxy(i1-1,i2,i3-1,2,2)+8.*
     & rsxy(i1-1,i2,i3+1,2,2)-rsxy(i1-1,i2,i3+2,2,2))/(12.*dr(2))+8.*(
     & rsxy(i1+1,i2,i3-2,2,2)-8.*rsxy(i1+1,i2,i3-1,2,2)+8.*rsxy(i1+1,
     & i2,i3+1,2,2)-rsxy(i1+1,i2,i3+2,2,2))/(12.*dr(2))-(rsxy(i1+2,i2,
     & i3-2,2,2)-8.*rsxy(i1+2,i2,i3-1,2,2)+8.*rsxy(i1+2,i2,i3+1,2,2)-
     & rsxy(i1+2,i2,i3+2,2,2))/(12.*dr(2)))/(12.*dr(0))
                 ajtzst = ((rsxy(i1,i2-2,i3-2,2,2)-8.*rsxy(i1,i2-2,i3-
     & 1,2,2)+8.*rsxy(i1,i2-2,i3+1,2,2)-rsxy(i1,i2-2,i3+2,2,2))/(12.*
     & dr(2))-8.*(rsxy(i1,i2-1,i3-2,2,2)-8.*rsxy(i1,i2-1,i3-1,2,2)+8.*
     & rsxy(i1,i2-1,i3+1,2,2)-rsxy(i1,i2-1,i3+2,2,2))/(12.*dr(2))+8.*(
     & rsxy(i1,i2+1,i3-2,2,2)-8.*rsxy(i1,i2+1,i3-1,2,2)+8.*rsxy(i1,i2+
     & 1,i3+1,2,2)-rsxy(i1,i2+1,i3+2,2,2))/(12.*dr(2))-(rsxy(i1,i2+2,
     & i3-2,2,2)-8.*rsxy(i1,i2+2,i3-1,2,2)+8.*rsxy(i1,i2+2,i3+1,2,2)-
     & rsxy(i1,i2+2,i3+2,2,2))/(12.*dr(2)))/(12.*dr(1))
                 ajtztt = (-rsxy(i1,i2,i3-2,2,2)+16.*rsxy(i1,i2,i3-1,2,
     & 2)-30.*rsxy(i1,i2,i3,2,2)+16.*rsxy(i1,i2,i3+1,2,2)-rsxy(i1,i2,
     & i3+2,2,2))/(12.*dr(2)**2)
                 ajrxx = ajrx*ajrxr+ajsx*ajrxs+ajtx*ajrxt
                 ajrxy = ajry*ajrxr+ajsy*ajrxs+ajty*ajrxt
                 ajrxz = ajrz*ajrxr+ajsz*ajrxs+ajtz*ajrxt
                 ajsxx = ajrx*ajsxr+ajsx*ajsxs+ajtx*ajsxt
                 ajsxy = ajry*ajsxr+ajsy*ajsxs+ajty*ajsxt
                 ajsxz = ajrz*ajsxr+ajsz*ajsxs+ajtz*ajsxt
                 ajtxx = ajrx*ajtxr+ajsx*ajtxs+ajtx*ajtxt
                 ajtxy = ajry*ajtxr+ajsy*ajtxs+ajty*ajtxt
                 ajtxz = ajrz*ajtxr+ajsz*ajtxs+ajtz*ajtxt
                 ajryx = ajrx*ajryr+ajsx*ajrys+ajtx*ajryt
                 ajryy = ajry*ajryr+ajsy*ajrys+ajty*ajryt
                 ajryz = ajrz*ajryr+ajsz*ajrys+ajtz*ajryt
                 ajsyx = ajrx*ajsyr+ajsx*ajsys+ajtx*ajsyt
                 ajsyy = ajry*ajsyr+ajsy*ajsys+ajty*ajsyt
                 ajsyz = ajrz*ajsyr+ajsz*ajsys+ajtz*ajsyt
                 ajtyx = ajrx*ajtyr+ajsx*ajtys+ajtx*ajtyt
                 ajtyy = ajry*ajtyr+ajsy*ajtys+ajty*ajtyt
                 ajtyz = ajrz*ajtyr+ajsz*ajtys+ajtz*ajtyt
                 ajrzx = ajrx*ajrzr+ajsx*ajrzs+ajtx*ajrzt
                 ajrzy = ajry*ajrzr+ajsy*ajrzs+ajty*ajrzt
                 ajrzz = ajrz*ajrzr+ajsz*ajrzs+ajtz*ajrzt
                 ajszx = ajrx*ajszr+ajsx*ajszs+ajtx*ajszt
                 ajszy = ajry*ajszr+ajsy*ajszs+ajty*ajszt
                 ajszz = ajrz*ajszr+ajsz*ajszs+ajtz*ajszt
                 ajtzx = ajrx*ajtzr+ajsx*ajtzs+ajtx*ajtzt
                 ajtzy = ajry*ajtzr+ajsy*ajtzs+ajty*ajtzt
                 ajtzz = ajrz*ajtzr+ajsz*ajtzs+ajtz*ajtzt
                 t1 = ajrx**2
                 t6 = ajsx**2
                 t14 = ajtx**2
                 ajrxxx = t1*ajrxrr+2*ajrx*ajsx*ajrxrs+t6*ajrxss+2*
     & ajrx*ajtx*ajrxrt+2*ajsx*ajtx*ajrxst+t14*ajrxtt+ajrxx*ajrxr+
     & ajsxx*ajrxs+ajtxx*ajrxt
                 ajrxxy = ajry*ajrx*ajrxrr+(ajsy*ajrx+ajry*ajsx)*
     & ajrxrs+ajsy*ajsx*ajrxss+(ajry*ajtx+ajty*ajrx)*ajrxrt+(ajty*
     & ajsx+ajsy*ajtx)*ajrxst+ajty*ajtx*ajrxtt+ajrxy*ajrxr+ajsxy*
     & ajrxs+ajtxy*ajrxt
                 t1 = ajry**2
                 t6 = ajsy**2
                 t14 = ajty**2
                 ajrxyy = t1*ajrxrr+2*ajry*ajsy*ajrxrs+t6*ajrxss+2*
     & ajry*ajty*ajrxrt+2*ajsy*ajty*ajrxst+t14*ajrxtt+ajryy*ajrxr+
     & ajsyy*ajrxs+ajtyy*ajrxt
                 ajrxxz = ajrz*ajrx*ajrxrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajrxrs+ajsz*ajsx*ajrxss+(ajrz*ajtx+ajtz*ajrx)*ajrxrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajrxst+ajtz*ajtx*ajrxtt+ajrxz*ajrxr+ajsxz*
     & ajrxs+ajtxz*ajrxt
                 ajrxyz = ajrz*ajry*ajrxrr+(ajsz*ajry+ajrz*ajsy)*
     & ajrxrs+ajsz*ajsy*ajrxss+(ajrz*ajty+ajtz*ajry)*ajrxrt+(ajtz*
     & ajsy+ajsz*ajty)*ajrxst+ajtz*ajty*ajrxtt+ajryz*ajrxr+ajsyz*
     & ajrxs+ajtyz*ajrxt
                 t1 = ajrz**2
                 t6 = ajsz**2
                 t14 = ajtz**2
                 ajrxzz = t1*ajrxrr+2*ajrz*ajsz*ajrxrs+t6*ajrxss+2*
     & ajrz*ajtz*ajrxrt+2*ajsz*ajtz*ajrxst+t14*ajrxtt+ajrzz*ajrxr+
     & ajszz*ajrxs+ajtzz*ajrxt
                 t1 = ajrx**2
                 t6 = ajsx**2
                 t14 = ajtx**2
                 ajsxxx = t1*ajsxrr+2*ajrx*ajsx*ajsxrs+t6*ajsxss+2*
     & ajrx*ajtx*ajsxrt+2*ajsx*ajtx*ajsxst+t14*ajsxtt+ajrxx*ajsxr+
     & ajsxx*ajsxs+ajtxx*ajsxt
                 ajsxxy = ajry*ajrx*ajsxrr+(ajsy*ajrx+ajry*ajsx)*
     & ajsxrs+ajsy*ajsx*ajsxss+(ajry*ajtx+ajty*ajrx)*ajsxrt+(ajty*
     & ajsx+ajsy*ajtx)*ajsxst+ajty*ajtx*ajsxtt+ajrxy*ajsxr+ajsxy*
     & ajsxs+ajtxy*ajsxt
                 t1 = ajry**2
                 t6 = ajsy**2
                 t14 = ajty**2
                 ajsxyy = t1*ajsxrr+2*ajry*ajsy*ajsxrs+t6*ajsxss+2*
     & ajry*ajty*ajsxrt+2*ajsy*ajty*ajsxst+t14*ajsxtt+ajryy*ajsxr+
     & ajsyy*ajsxs+ajtyy*ajsxt
                 ajsxxz = ajrz*ajrx*ajsxrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajsxrs+ajsz*ajsx*ajsxss+(ajrz*ajtx+ajtz*ajrx)*ajsxrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajsxst+ajtz*ajtx*ajsxtt+ajrxz*ajsxr+ajsxz*
     & ajsxs+ajtxz*ajsxt
                 ajsxyz = ajrz*ajry*ajsxrr+(ajsz*ajry+ajrz*ajsy)*
     & ajsxrs+ajsz*ajsy*ajsxss+(ajrz*ajty+ajtz*ajry)*ajsxrt+(ajtz*
     & ajsy+ajsz*ajty)*ajsxst+ajtz*ajty*ajsxtt+ajryz*ajsxr+ajsyz*
     & ajsxs+ajtyz*ajsxt
                 t1 = ajrz**2
                 t6 = ajsz**2
                 t14 = ajtz**2
                 ajsxzz = t1*ajsxrr+2*ajrz*ajsz*ajsxrs+t6*ajsxss+2*
     & ajrz*ajtz*ajsxrt+2*ajsz*ajtz*ajsxst+t14*ajsxtt+ajrzz*ajsxr+
     & ajszz*ajsxs+ajtzz*ajsxt
                 t1 = ajrx**2
                 t6 = ajsx**2
                 t14 = ajtx**2
                 ajtxxx = t1*ajtxrr+2*ajrx*ajsx*ajtxrs+t6*ajtxss+2*
     & ajrx*ajtx*ajtxrt+2*ajsx*ajtx*ajtxst+t14*ajtxtt+ajrxx*ajtxr+
     & ajsxx*ajtxs+ajtxx*ajtxt
                 ajtxxy = ajry*ajrx*ajtxrr+(ajsy*ajrx+ajry*ajsx)*
     & ajtxrs+ajsy*ajsx*ajtxss+(ajry*ajtx+ajty*ajrx)*ajtxrt+(ajty*
     & ajsx+ajsy*ajtx)*ajtxst+ajty*ajtx*ajtxtt+ajrxy*ajtxr+ajsxy*
     & ajtxs+ajtxy*ajtxt
                 t1 = ajry**2
                 t6 = ajsy**2
                 t14 = ajty**2
                 ajtxyy = t1*ajtxrr+2*ajry*ajsy*ajtxrs+t6*ajtxss+2*
     & ajry*ajty*ajtxrt+2*ajsy*ajty*ajtxst+t14*ajtxtt+ajryy*ajtxr+
     & ajsyy*ajtxs+ajtyy*ajtxt
                 ajtxxz = ajrz*ajrx*ajtxrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajtxrs+ajsz*ajsx*ajtxss+(ajrz*ajtx+ajtz*ajrx)*ajtxrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajtxst+ajtz*ajtx*ajtxtt+ajrxz*ajtxr+ajsxz*
     & ajtxs+ajtxz*ajtxt
                 ajtxyz = ajrz*ajry*ajtxrr+(ajsz*ajry+ajrz*ajsy)*
     & ajtxrs+ajsz*ajsy*ajtxss+(ajrz*ajty+ajtz*ajry)*ajtxrt+(ajtz*
     & ajsy+ajsz*ajty)*ajtxst+ajtz*ajty*ajtxtt+ajryz*ajtxr+ajsyz*
     & ajtxs+ajtyz*ajtxt
                 t1 = ajrz**2
                 t6 = ajsz**2
                 t14 = ajtz**2
                 ajtxzz = t1*ajtxrr+2*ajrz*ajsz*ajtxrs+t6*ajtxss+2*
     & ajrz*ajtz*ajtxrt+2*ajsz*ajtz*ajtxst+t14*ajtxtt+ajrzz*ajtxr+
     & ajszz*ajtxs+ajtzz*ajtxt
                 t1 = ajrx**2
                 t6 = ajsx**2
                 t14 = ajtx**2
                 ajryxx = t1*ajryrr+2*ajrx*ajsx*ajryrs+t6*ajryss+2*
     & ajrx*ajtx*ajryrt+2*ajsx*ajtx*ajryst+t14*ajrytt+ajrxx*ajryr+
     & ajsxx*ajrys+ajtxx*ajryt
                 ajryxy = ajry*ajrx*ajryrr+(ajsy*ajrx+ajry*ajsx)*
     & ajryrs+ajsy*ajsx*ajryss+(ajry*ajtx+ajty*ajrx)*ajryrt+(ajty*
     & ajsx+ajsy*ajtx)*ajryst+ajty*ajtx*ajrytt+ajrxy*ajryr+ajsxy*
     & ajrys+ajtxy*ajryt
                 t1 = ajry**2
                 t6 = ajsy**2
                 t14 = ajty**2
                 ajryyy = t1*ajryrr+2*ajry*ajsy*ajryrs+t6*ajryss+2*
     & ajry*ajty*ajryrt+2*ajsy*ajty*ajryst+t14*ajrytt+ajryy*ajryr+
     & ajsyy*ajrys+ajtyy*ajryt
                 ajryxz = ajrz*ajrx*ajryrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajryrs+ajsz*ajsx*ajryss+(ajrz*ajtx+ajtz*ajrx)*ajryrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajryst+ajtz*ajtx*ajrytt+ajrxz*ajryr+ajsxz*
     & ajrys+ajtxz*ajryt
                 ajryyz = ajrz*ajry*ajryrr+(ajsz*ajry+ajrz*ajsy)*
     & ajryrs+ajsz*ajsy*ajryss+(ajrz*ajty+ajtz*ajry)*ajryrt+(ajtz*
     & ajsy+ajsz*ajty)*ajryst+ajtz*ajty*ajrytt+ajryz*ajryr+ajsyz*
     & ajrys+ajtyz*ajryt
                 t1 = ajrz**2
                 t6 = ajsz**2
                 t14 = ajtz**2
                 ajryzz = t1*ajryrr+2*ajrz*ajsz*ajryrs+t6*ajryss+2*
     & ajrz*ajtz*ajryrt+2*ajsz*ajtz*ajryst+t14*ajrytt+ajrzz*ajryr+
     & ajszz*ajrys+ajtzz*ajryt
                 t1 = ajrx**2
                 t6 = ajsx**2
                 t14 = ajtx**2
                 ajsyxx = t1*ajsyrr+2*ajrx*ajsx*ajsyrs+t6*ajsyss+2*
     & ajrx*ajtx*ajsyrt+2*ajsx*ajtx*ajsyst+t14*ajsytt+ajrxx*ajsyr+
     & ajsxx*ajsys+ajtxx*ajsyt
                 ajsyxy = ajry*ajrx*ajsyrr+(ajsy*ajrx+ajry*ajsx)*
     & ajsyrs+ajsy*ajsx*ajsyss+(ajry*ajtx+ajty*ajrx)*ajsyrt+(ajty*
     & ajsx+ajsy*ajtx)*ajsyst+ajty*ajtx*ajsytt+ajrxy*ajsyr+ajsxy*
     & ajsys+ajtxy*ajsyt
                 t1 = ajry**2
                 t6 = ajsy**2
                 t14 = ajty**2
                 ajsyyy = t1*ajsyrr+2*ajry*ajsy*ajsyrs+t6*ajsyss+2*
     & ajry*ajty*ajsyrt+2*ajsy*ajty*ajsyst+t14*ajsytt+ajryy*ajsyr+
     & ajsyy*ajsys+ajtyy*ajsyt
                 ajsyxz = ajrz*ajrx*ajsyrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajsyrs+ajsz*ajsx*ajsyss+(ajrz*ajtx+ajtz*ajrx)*ajsyrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajsyst+ajtz*ajtx*ajsytt+ajrxz*ajsyr+ajsxz*
     & ajsys+ajtxz*ajsyt
                 ajsyyz = ajrz*ajry*ajsyrr+(ajsz*ajry+ajrz*ajsy)*
     & ajsyrs+ajsz*ajsy*ajsyss+(ajrz*ajty+ajtz*ajry)*ajsyrt+(ajtz*
     & ajsy+ajsz*ajty)*ajsyst+ajtz*ajty*ajsytt+ajryz*ajsyr+ajsyz*
     & ajsys+ajtyz*ajsyt
                 t1 = ajrz**2
                 t6 = ajsz**2
                 t14 = ajtz**2
                 ajsyzz = t1*ajsyrr+2*ajrz*ajsz*ajsyrs+t6*ajsyss+2*
     & ajrz*ajtz*ajsyrt+2*ajsz*ajtz*ajsyst+t14*ajsytt+ajrzz*ajsyr+
     & ajszz*ajsys+ajtzz*ajsyt
                 t1 = ajrx**2
                 t6 = ajsx**2
                 t14 = ajtx**2
                 ajtyxx = t1*ajtyrr+2*ajrx*ajsx*ajtyrs+t6*ajtyss+2*
     & ajrx*ajtx*ajtyrt+2*ajsx*ajtx*ajtyst+t14*ajtytt+ajrxx*ajtyr+
     & ajsxx*ajtys+ajtxx*ajtyt
                 ajtyxy = ajry*ajrx*ajtyrr+(ajsy*ajrx+ajry*ajsx)*
     & ajtyrs+ajsy*ajsx*ajtyss+(ajry*ajtx+ajty*ajrx)*ajtyrt+(ajty*
     & ajsx+ajsy*ajtx)*ajtyst+ajty*ajtx*ajtytt+ajrxy*ajtyr+ajsxy*
     & ajtys+ajtxy*ajtyt
                 t1 = ajry**2
                 t6 = ajsy**2
                 t14 = ajty**2
                 ajtyyy = t1*ajtyrr+2*ajry*ajsy*ajtyrs+t6*ajtyss+2*
     & ajry*ajty*ajtyrt+2*ajsy*ajty*ajtyst+t14*ajtytt+ajryy*ajtyr+
     & ajsyy*ajtys+ajtyy*ajtyt
                 ajtyxz = ajrz*ajrx*ajtyrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajtyrs+ajsz*ajsx*ajtyss+(ajrz*ajtx+ajtz*ajrx)*ajtyrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajtyst+ajtz*ajtx*ajtytt+ajrxz*ajtyr+ajsxz*
     & ajtys+ajtxz*ajtyt
                 ajtyyz = ajrz*ajry*ajtyrr+(ajsz*ajry+ajrz*ajsy)*
     & ajtyrs+ajsz*ajsy*ajtyss+(ajrz*ajty+ajtz*ajry)*ajtyrt+(ajtz*
     & ajsy+ajsz*ajty)*ajtyst+ajtz*ajty*ajtytt+ajryz*ajtyr+ajsyz*
     & ajtys+ajtyz*ajtyt
                 t1 = ajrz**2
                 t6 = ajsz**2
                 t14 = ajtz**2
                 ajtyzz = t1*ajtyrr+2*ajrz*ajsz*ajtyrs+t6*ajtyss+2*
     & ajrz*ajtz*ajtyrt+2*ajsz*ajtz*ajtyst+t14*ajtytt+ajrzz*ajtyr+
     & ajszz*ajtys+ajtzz*ajtyt
                 t1 = ajrx**2
                 t6 = ajsx**2
                 t14 = ajtx**2
                 ajrzxx = t1*ajrzrr+2*ajrx*ajsx*ajrzrs+t6*ajrzss+2*
     & ajrx*ajtx*ajrzrt+2*ajsx*ajtx*ajrzst+t14*ajrztt+ajrxx*ajrzr+
     & ajsxx*ajrzs+ajtxx*ajrzt
                 ajrzxy = ajry*ajrx*ajrzrr+(ajsy*ajrx+ajry*ajsx)*
     & ajrzrs+ajsy*ajsx*ajrzss+(ajry*ajtx+ajty*ajrx)*ajrzrt+(ajty*
     & ajsx+ajsy*ajtx)*ajrzst+ajty*ajtx*ajrztt+ajrxy*ajrzr+ajsxy*
     & ajrzs+ajtxy*ajrzt
                 t1 = ajry**2
                 t6 = ajsy**2
                 t14 = ajty**2
                 ajrzyy = t1*ajrzrr+2*ajry*ajsy*ajrzrs+t6*ajrzss+2*
     & ajry*ajty*ajrzrt+2*ajsy*ajty*ajrzst+t14*ajrztt+ajryy*ajrzr+
     & ajsyy*ajrzs+ajtyy*ajrzt
                 ajrzxz = ajrz*ajrx*ajrzrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajrzrs+ajsz*ajsx*ajrzss+(ajrz*ajtx+ajtz*ajrx)*ajrzrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajrzst+ajtz*ajtx*ajrztt+ajrxz*ajrzr+ajsxz*
     & ajrzs+ajtxz*ajrzt
                 ajrzyz = ajrz*ajry*ajrzrr+(ajsz*ajry+ajrz*ajsy)*
     & ajrzrs+ajsz*ajsy*ajrzss+(ajrz*ajty+ajtz*ajry)*ajrzrt+(ajtz*
     & ajsy+ajsz*ajty)*ajrzst+ajtz*ajty*ajrztt+ajryz*ajrzr+ajsyz*
     & ajrzs+ajtyz*ajrzt
                 t1 = ajrz**2
                 t6 = ajsz**2
                 t14 = ajtz**2
                 ajrzzz = t1*ajrzrr+2*ajrz*ajsz*ajrzrs+t6*ajrzss+2*
     & ajrz*ajtz*ajrzrt+2*ajsz*ajtz*ajrzst+t14*ajrztt+ajrzz*ajrzr+
     & ajszz*ajrzs+ajtzz*ajrzt
                 t1 = ajrx**2
                 t6 = ajsx**2
                 t14 = ajtx**2
                 ajszxx = t1*ajszrr+2*ajrx*ajsx*ajszrs+t6*ajszss+2*
     & ajrx*ajtx*ajszrt+2*ajsx*ajtx*ajszst+t14*ajsztt+ajrxx*ajszr+
     & ajsxx*ajszs+ajtxx*ajszt
                 ajszxy = ajry*ajrx*ajszrr+(ajsy*ajrx+ajry*ajsx)*
     & ajszrs+ajsy*ajsx*ajszss+(ajry*ajtx+ajty*ajrx)*ajszrt+(ajty*
     & ajsx+ajsy*ajtx)*ajszst+ajty*ajtx*ajsztt+ajrxy*ajszr+ajsxy*
     & ajszs+ajtxy*ajszt
                 t1 = ajry**2
                 t6 = ajsy**2
                 t14 = ajty**2
                 ajszyy = t1*ajszrr+2*ajry*ajsy*ajszrs+t6*ajszss+2*
     & ajry*ajty*ajszrt+2*ajsy*ajty*ajszst+t14*ajsztt+ajryy*ajszr+
     & ajsyy*ajszs+ajtyy*ajszt
                 ajszxz = ajrz*ajrx*ajszrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajszrs+ajsz*ajsx*ajszss+(ajrz*ajtx+ajtz*ajrx)*ajszrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajszst+ajtz*ajtx*ajsztt+ajrxz*ajszr+ajsxz*
     & ajszs+ajtxz*ajszt
                 ajszyz = ajrz*ajry*ajszrr+(ajsz*ajry+ajrz*ajsy)*
     & ajszrs+ajsz*ajsy*ajszss+(ajrz*ajty+ajtz*ajry)*ajszrt+(ajtz*
     & ajsy+ajsz*ajty)*ajszst+ajtz*ajty*ajsztt+ajryz*ajszr+ajsyz*
     & ajszs+ajtyz*ajszt
                 t1 = ajrz**2
                 t6 = ajsz**2
                 t14 = ajtz**2
                 ajszzz = t1*ajszrr+2*ajrz*ajsz*ajszrs+t6*ajszss+2*
     & ajrz*ajtz*ajszrt+2*ajsz*ajtz*ajszst+t14*ajsztt+ajrzz*ajszr+
     & ajszz*ajszs+ajtzz*ajszt
                 t1 = ajrx**2
                 t6 = ajsx**2
                 t14 = ajtx**2
                 ajtzxx = t1*ajtzrr+2*ajrx*ajsx*ajtzrs+t6*ajtzss+2*
     & ajrx*ajtx*ajtzrt+2*ajsx*ajtx*ajtzst+t14*ajtztt+ajrxx*ajtzr+
     & ajsxx*ajtzs+ajtxx*ajtzt
                 ajtzxy = ajry*ajrx*ajtzrr+(ajsy*ajrx+ajry*ajsx)*
     & ajtzrs+ajsy*ajsx*ajtzss+(ajry*ajtx+ajty*ajrx)*ajtzrt+(ajty*
     & ajsx+ajsy*ajtx)*ajtzst+ajty*ajtx*ajtztt+ajrxy*ajtzr+ajsxy*
     & ajtzs+ajtxy*ajtzt
                 t1 = ajry**2
                 t6 = ajsy**2
                 t14 = ajty**2
                 ajtzyy = t1*ajtzrr+2*ajry*ajsy*ajtzrs+t6*ajtzss+2*
     & ajry*ajty*ajtzrt+2*ajsy*ajty*ajtzst+t14*ajtztt+ajryy*ajtzr+
     & ajsyy*ajtzs+ajtyy*ajtzt
                 ajtzxz = ajrz*ajrx*ajtzrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajtzrs+ajsz*ajsx*ajtzss+(ajrz*ajtx+ajtz*ajrx)*ajtzrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajtzst+ajtz*ajtx*ajtztt+ajrxz*ajtzr+ajsxz*
     & ajtzs+ajtxz*ajtzt
                 ajtzyz = ajrz*ajry*ajtzrr+(ajsz*ajry+ajrz*ajsy)*
     & ajtzrs+ajsz*ajsy*ajtzss+(ajrz*ajty+ajtz*ajry)*ajtzrt+(ajtz*
     & ajsy+ajsz*ajty)*ajtzst+ajtz*ajty*ajtztt+ajryz*ajtzr+ajsyz*
     & ajtzs+ajtyz*ajtzt
                 t1 = ajrz**2
                 t6 = ajsz**2
                 t14 = ajtz**2
                 ajtzzz = t1*ajtzrr+2*ajrz*ajsz*ajtzrs+t6*ajtzss+2*
     & ajrz*ajtz*ajtzrt+2*ajsz*ajtz*ajtzst+t14*ajtztt+ajrzz*ajtzr+
     & ajszz*ajtzs+ajtzz*ajtzt
                 ! define these derivatives of the mapping (which are not normally computed by the standard macros):
                ajrxxr=ajrx*ajrxrr + ajsx*ajrxrs + ajtx*ajrxrt + ajrxr*
     & ajrxr +ajsxr*ajrxs + ajtxr*ajrxt
                ajrxxs=ajrx*ajrxrs + ajsx*ajrxss + ajtx*ajrxst + ajrxs*
     & ajrxr +ajsxs*ajrxs + ajtxs*ajrxt
                ajrxxt=ajrx*ajrxrt + ajsx*ajrxst + ajtx*ajrxtt + ajrxt*
     & ajrxr +ajsxt*ajrxs + ajtxt*ajrxt
                ajrxyr=ajry*ajrxrr + ajsy*ajrxrs + ajty*ajrxrt + ajryr*
     & ajrxr +ajsyr*ajrxs + ajtyr*ajrxt
                ajrxys=ajry*ajrxrs + ajsy*ajrxss + ajty*ajrxst + ajrys*
     & ajrxr +ajsys*ajrxs + ajtys*ajrxt
                ajrxyt=ajry*ajrxrt + ajsy*ajrxst + ajty*ajrxtt + ajryt*
     & ajrxr +ajsyt*ajrxs + ajtyt*ajrxt
                ajrxzr=ajrz*ajrxrr + ajsz*ajrxrs + ajtz*ajrxrt + ajrzr*
     & ajrxr +ajszr*ajrxs + ajtzr*ajrxt
                ajrxzs=ajrz*ajrxrs + ajsz*ajrxss + ajtz*ajrxst + ajrzs*
     & ajrxr +ajszs*ajrxs + ajtzs*ajrxt
                ajrxzt=ajrz*ajrxrt + ajsz*ajrxst + ajtz*ajrxtt + ajrzt*
     & ajrxr +ajszt*ajrxs + ajtzt*ajrxt
                ajryxr=ajrx*ajryrr + ajsx*ajryrs + ajtx*ajryrt + ajrxr*
     & ajryr +ajsxr*ajrys + ajtxr*ajryt
                ajryxs=ajrx*ajryrs + ajsx*ajryss + ajtx*ajryst + ajrxs*
     & ajryr +ajsxs*ajrys + ajtxs*ajryt
                ajryxt=ajrx*ajryrt + ajsx*ajryst + ajtx*ajrytt + ajrxt*
     & ajryr +ajsxt*ajrys + ajtxt*ajryt
                ajryyr=ajry*ajryrr + ajsy*ajryrs + ajty*ajryrt + ajryr*
     & ajryr +ajsyr*ajrys + ajtyr*ajryt
                ajryys=ajry*ajryrs + ajsy*ajryss + ajty*ajryst + ajrys*
     & ajryr +ajsys*ajrys + ajtys*ajryt
                ajryyt=ajry*ajryrt + ajsy*ajryst + ajty*ajrytt + ajryt*
     & ajryr +ajsyt*ajrys + ajtyt*ajryt
                ajryzr=ajrz*ajryrr + ajsz*ajryrs + ajtz*ajryrt + ajrzr*
     & ajryr +ajszr*ajrys + ajtzr*ajryt
                ajryzs=ajrz*ajryrs + ajsz*ajryss + ajtz*ajryst + ajrzs*
     & ajryr +ajszs*ajrys + ajtzs*ajryt
                ajryzt=ajrz*ajryrt + ajsz*ajryst + ajtz*ajrytt + ajrzt*
     & ajryr +ajszt*ajrys + ajtzt*ajryt
                ajrzxr=ajrx*ajrzrr + ajsx*ajrzrs + ajtx*ajrzrt + ajrxr*
     & ajrzr +ajsxr*ajrzs + ajtxr*ajrzt
                ajrzxs=ajrx*ajrzrs + ajsx*ajrzss + ajtx*ajrzst + ajrxs*
     & ajrzr +ajsxs*ajrzs + ajtxs*ajrzt
                ajrzxt=ajrx*ajrzrt + ajsx*ajrzst + ajtx*ajrztt + ajrxt*
     & ajrzr +ajsxt*ajrzs + ajtxt*ajrzt
                ajrzyr=ajry*ajrzrr + ajsy*ajrzrs + ajty*ajrzrt + ajryr*
     & ajrzr +ajsyr*ajrzs + ajtyr*ajrzt
                ajrzys=ajry*ajrzrs + ajsy*ajrzss + ajty*ajrzst + ajrys*
     & ajrzr +ajsys*ajrzs + ajtys*ajrzt
                ajrzyt=ajry*ajrzrt + ajsy*ajrzst + ajty*ajrztt + ajryt*
     & ajrzr +ajsyt*ajrzs + ajtyt*ajrzt
                ajrzzr=ajrz*ajrzrr + ajsz*ajrzrs + ajtz*ajrzrt + ajrzr*
     & ajrzr +ajszr*ajrzs + ajtzr*ajrzt
                ajrzzs=ajrz*ajrzrs + ajsz*ajrzss + ajtz*ajrzst + ajrzs*
     & ajrzr +ajszs*ajrzs + ajtzs*ajrzt
                ajrzzt=ajrz*ajrzrt + ajsz*ajrzst + ajtz*ajrztt + ajrzt*
     & ajrzr +ajszt*ajrzs + ajtzt*ajrzt
                ajsxxr=ajrx*ajsxrr + ajsx*ajsxrs + ajtx*ajsxrt + ajrxr*
     & ajsxr +ajsxr*ajsxs + ajtxr*ajsxt
                ajsxxs=ajrx*ajsxrs + ajsx*ajsxss + ajtx*ajsxst + ajrxs*
     & ajsxr +ajsxs*ajsxs + ajtxs*ajsxt
                ajsxxt=ajrx*ajsxrt + ajsx*ajsxst + ajtx*ajsxtt + ajrxt*
     & ajsxr +ajsxt*ajsxs + ajtxt*ajsxt
                ajsxyr=ajry*ajsxrr + ajsy*ajsxrs + ajty*ajsxrt + ajryr*
     & ajsxr +ajsyr*ajsxs + ajtyr*ajsxt
                ajsxys=ajry*ajsxrs + ajsy*ajsxss + ajty*ajsxst + ajrys*
     & ajsxr +ajsys*ajsxs + ajtys*ajsxt
                ajsxyt=ajry*ajsxrt + ajsy*ajsxst + ajty*ajsxtt + ajryt*
     & ajsxr +ajsyt*ajsxs + ajtyt*ajsxt
                ajsxzr=ajrz*ajsxrr + ajsz*ajsxrs + ajtz*ajsxrt + ajrzr*
     & ajsxr +ajszr*ajsxs + ajtzr*ajsxt
                ajsxzs=ajrz*ajsxrs + ajsz*ajsxss + ajtz*ajsxst + ajrzs*
     & ajsxr +ajszs*ajsxs + ajtzs*ajsxt
                ajsxzt=ajrz*ajsxrt + ajsz*ajsxst + ajtz*ajsxtt + ajrzt*
     & ajsxr +ajszt*ajsxs + ajtzt*ajsxt
                ajsyxr=ajrx*ajsyrr + ajsx*ajsyrs + ajtx*ajsyrt + ajrxr*
     & ajsyr +ajsxr*ajsys + ajtxr*ajsyt
                ajsyxs=ajrx*ajsyrs + ajsx*ajsyss + ajtx*ajsyst + ajrxs*
     & ajsyr +ajsxs*ajsys + ajtxs*ajsyt
                ajsyxt=ajrx*ajsyrt + ajsx*ajsyst + ajtx*ajsytt + ajrxt*
     & ajsyr +ajsxt*ajsys + ajtxt*ajsyt
                ajsyyr=ajry*ajsyrr + ajsy*ajsyrs + ajty*ajsyrt + ajryr*
     & ajsyr +ajsyr*ajsys + ajtyr*ajsyt
                ajsyys=ajry*ajsyrs + ajsy*ajsyss + ajty*ajsyst + ajrys*
     & ajsyr +ajsys*ajsys + ajtys*ajsyt
                ajsyyt=ajry*ajsyrt + ajsy*ajsyst + ajty*ajsytt + ajryt*
     & ajsyr +ajsyt*ajsys + ajtyt*ajsyt
                ajsyzr=ajrz*ajsyrr + ajsz*ajsyrs + ajtz*ajsyrt + ajrzr*
     & ajsyr +ajszr*ajsys + ajtzr*ajsyt
                ajsyzs=ajrz*ajsyrs + ajsz*ajsyss + ajtz*ajsyst + ajrzs*
     & ajsyr +ajszs*ajsys + ajtzs*ajsyt
                ajsyzt=ajrz*ajsyrt + ajsz*ajsyst + ajtz*ajsytt + ajrzt*
     & ajsyr +ajszt*ajsys + ajtzt*ajsyt
                ajszxr=ajrx*ajszrr + ajsx*ajszrs + ajtx*ajszrt + ajrxr*
     & ajszr +ajsxr*ajszs + ajtxr*ajszt
                ajszxs=ajrx*ajszrs + ajsx*ajszss + ajtx*ajszst + ajrxs*
     & ajszr +ajsxs*ajszs + ajtxs*ajszt
                ajszxt=ajrx*ajszrt + ajsx*ajszst + ajtx*ajsztt + ajrxt*
     & ajszr +ajsxt*ajszs + ajtxt*ajszt
                ajszyr=ajry*ajszrr + ajsy*ajszrs + ajty*ajszrt + ajryr*
     & ajszr +ajsyr*ajszs + ajtyr*ajszt
                ajszys=ajry*ajszrs + ajsy*ajszss + ajty*ajszst + ajrys*
     & ajszr +ajsys*ajszs + ajtys*ajszt
                ajszyt=ajry*ajszrt + ajsy*ajszst + ajty*ajsztt + ajryt*
     & ajszr +ajsyt*ajszs + ajtyt*ajszt
                ajszzr=ajrz*ajszrr + ajsz*ajszrs + ajtz*ajszrt + ajrzr*
     & ajszr +ajszr*ajszs + ajtzr*ajszt
                ajszzs=ajrz*ajszrs + ajsz*ajszss + ajtz*ajszst + ajrzs*
     & ajszr +ajszs*ajszs + ajtzs*ajszt
                ajszzt=ajrz*ajszrt + ajsz*ajszst + ajtz*ajsztt + ajrzt*
     & ajszr +ajszt*ajszs + ajtzt*ajszt
                ajtxxr=ajrx*ajtxrr + ajsx*ajtxrs + ajtx*ajtxrt + ajrxr*
     & ajtxr +ajsxr*ajtxs + ajtxr*ajtxt
                ajtxxs=ajrx*ajtxrs + ajsx*ajtxss + ajtx*ajtxst + ajrxs*
     & ajtxr +ajsxs*ajtxs + ajtxs*ajtxt
                ajtxxt=ajrx*ajtxrt + ajsx*ajtxst + ajtx*ajtxtt + ajrxt*
     & ajtxr +ajsxt*ajtxs + ajtxt*ajtxt
                ajtxyr=ajry*ajtxrr + ajsy*ajtxrs + ajty*ajtxrt + ajryr*
     & ajtxr +ajsyr*ajtxs + ajtyr*ajtxt
                ajtxys=ajry*ajtxrs + ajsy*ajtxss + ajty*ajtxst + ajrys*
     & ajtxr +ajsys*ajtxs + ajtys*ajtxt
                ajtxyt=ajry*ajtxrt + ajsy*ajtxst + ajty*ajtxtt + ajryt*
     & ajtxr +ajsyt*ajtxs + ajtyt*ajtxt
                ajtxzr=ajrz*ajtxrr + ajsz*ajtxrs + ajtz*ajtxrt + ajrzr*
     & ajtxr +ajszr*ajtxs + ajtzr*ajtxt
                ajtxzs=ajrz*ajtxrs + ajsz*ajtxss + ajtz*ajtxst + ajrzs*
     & ajtxr +ajszs*ajtxs + ajtzs*ajtxt
                ajtxzt=ajrz*ajtxrt + ajsz*ajtxst + ajtz*ajtxtt + ajrzt*
     & ajtxr +ajszt*ajtxs + ajtzt*ajtxt
                ajtyxr=ajrx*ajtyrr + ajsx*ajtyrs + ajtx*ajtyrt + ajrxr*
     & ajtyr +ajsxr*ajtys + ajtxr*ajtyt
                ajtyxs=ajrx*ajtyrs + ajsx*ajtyss + ajtx*ajtyst + ajrxs*
     & ajtyr +ajsxs*ajtys + ajtxs*ajtyt
                ajtyxt=ajrx*ajtyrt + ajsx*ajtyst + ajtx*ajtytt + ajrxt*
     & ajtyr +ajsxt*ajtys + ajtxt*ajtyt
                ajtyyr=ajry*ajtyrr + ajsy*ajtyrs + ajty*ajtyrt + ajryr*
     & ajtyr +ajsyr*ajtys + ajtyr*ajtyt
                ajtyys=ajry*ajtyrs + ajsy*ajtyss + ajty*ajtyst + ajrys*
     & ajtyr +ajsys*ajtys + ajtys*ajtyt
                ajtyyt=ajry*ajtyrt + ajsy*ajtyst + ajty*ajtytt + ajryt*
     & ajtyr +ajsyt*ajtys + ajtyt*ajtyt
                ajtyzr=ajrz*ajtyrr + ajsz*ajtyrs + ajtz*ajtyrt + ajrzr*
     & ajtyr +ajszr*ajtys + ajtzr*ajtyt
                ajtyzs=ajrz*ajtyrs + ajsz*ajtyss + ajtz*ajtyst + ajrzs*
     & ajtyr +ajszs*ajtys + ajtzs*ajtyt
                ajtyzt=ajrz*ajtyrt + ajsz*ajtyst + ajtz*ajtytt + ajrzt*
     & ajtyr +ajszt*ajtys + ajtzt*ajtyt
                ajtzxr=ajrx*ajtzrr + ajsx*ajtzrs + ajtx*ajtzrt + ajrxr*
     & ajtzr +ajsxr*ajtzs + ajtxr*ajtzt
                ajtzxs=ajrx*ajtzrs + ajsx*ajtzss + ajtx*ajtzst + ajrxs*
     & ajtzr +ajsxs*ajtzs + ajtxs*ajtzt
                ajtzxt=ajrx*ajtzrt + ajsx*ajtzst + ajtx*ajtztt + ajrxt*
     & ajtzr +ajsxt*ajtzs + ajtxt*ajtzt
                ajtzyr=ajry*ajtzrr + ajsy*ajtzrs + ajty*ajtzrt + ajryr*
     & ajtzr +ajsyr*ajtzs + ajtyr*ajtzt
                ajtzys=ajry*ajtzrs + ajsy*ajtzss + ajty*ajtzst + ajrys*
     & ajtzr +ajsys*ajtzs + ajtys*ajtzt
                ajtzyt=ajry*ajtzrt + ajsy*ajtzst + ajty*ajtztt + ajryt*
     & ajtzr +ajsyt*ajtzs + ajtyt*ajtzt
                ajtzzr=ajrz*ajtzrr + ajsz*ajtzrs + ajtz*ajtzrt + ajrzr*
     & ajtzr +ajszr*ajtzs + ajtzr*ajtzt
                ajtzzs=ajrz*ajtzrs + ajsz*ajtzss + ajtz*ajtzst + ajrzs*
     & ajtzr +ajszs*ajtzs + ajtzs*ajtzt
                ajtzzt=ajrz*ajtzrt + ajsz*ajtzst + ajtz*ajtztt + ajrzt*
     & ajtzr +ajszt*ajtzs + ajtzt*ajtzt
                ! ***************************************************************
                ! PDE: cxx*uxx + cyy*uyy + czz*uzz + cxy*uxy + cxz*uxz + cyz*uyz + cx*ux + cy*uy + cz*uz + c0 *u = f 
                ! PDE: cRR*urr + cSS*uss + cTT*utt + cRS*urs + cRT*urt + cST*ust  + ccR*ur + ccS*us + ccT*ut + c0 *u = f 
                ! =============== Start: Laplace operator: ==================== 
                 cxx=1.
                 cyy=1.
                 czz=1.
                 cxy=0.
                 cxz=0.
                 cyz=0.
                 cx=0.
                 cy=0.
                 cz=0.
                 c0=0.
                 cRR=cxx*ajrx**2+cyy*ajry**2+czz*ajrz**2 +cxy*ajrx*
     & ajry+cxz*ajrx*ajrz+cyz*ajry*ajrz
                 cSS=cxx*ajsx**2+cyy*ajsy**2+czz*ajsz**2 +cxy*ajsx*
     & ajsy+cxz*ajsx*ajsz+cyz*ajsy*ajsz
                 cTT=cxx*ajtx**2+cyy*ajty**2+czz*ajtz**2 +cxy*ajtx*
     & ajty+cxz*ajtx*ajtz+cyz*ajty*ajtz
                 cRS=2.*(cxx*ajrx*ajsx+cyy*ajry*ajsy+czz*ajrz*ajsz) +
     & cxy*(ajrx*ajsy+ajry*ajsx)+cxz*(ajrx*ajsz+ajrz*ajsx)+cyz*(ajry*
     & ajsz+ajrz*ajsy)
                 cRT=2.*(cxx*ajrx*ajtx+cyy*ajry*ajty+czz*ajrz*ajtz) +
     & cxy*(ajrx*ajty+ajry*ajtx)+cxz*(ajrx*ajtz+ajrz*ajtx)+cyz*(ajry*
     & ajtz+ajrz*ajty)
                 cST=2.*(cxx*ajsx*ajtx+cyy*ajsy*ajty+czz*ajsz*ajtz) +
     & cxy*(ajsx*ajty+ajsy*ajtx)+cxz*(ajsx*ajtz+ajsz*ajtx)+cyz*(ajsy*
     & ajtz+ajsz*ajty)
                 ccR=cxx*ajrxx+cyy*ajryy+czz*ajrzz +cxy*ajrxy+cxz*
     & ajrxz+cyz*ajryz + cx*ajrx+cy*ajry+cz*ajrz
                 ccS=cxx*ajsxx+cyy*ajsyy+czz*ajszz +cxy*ajsxy+cxz*
     & ajsxz+cyz*ajsyz + cx*ajsx+cy*ajsy+cz*ajsz
                 ccT=cxx*ajtxx+cyy*ajtyy+czz*ajtzz +cxy*ajtxy+cxz*
     & ajtxz+cyz*ajtyz + cx*ajtx+cy*ajty+cz*ajtz
                ! m=1...
                 cRRr=2.*(ajrx*ajrxr+ajry*ajryr+ajrz*ajrzr)
                 cRSr=2.*(ajrxr*ajsx+ajrx*ajsxr + ajryr*ajsy+ ajry*
     & ajsyr + ajrzr*ajsz+ ajrz*ajszr)
                 cRTr=2.*(ajrxr*ajtx+ajrx*ajtxr + ajryr*ajty+ ajry*
     & ajtyr + ajrzr*ajtz+ ajrz*ajtzr)
                 ccRr=ajrxxr+ajryyr+ajrzzr
                 cRRs=2.*(ajrx*ajrxs+ajry*ajrys+ajrz*ajrzs)
                 cRSs=2.*(ajrxs*ajsx+ajrx*ajsxs + ajrys*ajsy+ ajry*
     & ajsys + ajrzs*ajsz+ ajrz*ajszs)
                 cRTs=2.*(ajrxs*ajtx+ajrx*ajtxs + ajrys*ajty+ ajry*
     & ajtys + ajrzs*ajtz+ ajrz*ajtzs)
                 ccRs=ajrxxs+ajryys+ajrzzs
                 cRRt=2.*(ajrx*ajrxt+ajry*ajryt+ajrz*ajrzt)
                 cRSt=2.*(ajrxt*ajsx+ajrx*ajsxt + ajryt*ajsy+ ajry*
     & ajsyt + ajrzt*ajsz+ ajrz*ajszt)
                 cRTt=2.*(ajrxt*ajtx+ajrx*ajtxt + ajryt*ajty+ ajry*
     & ajtyt + ajrzt*ajtz+ ajrz*ajtzt)
                 ccRt=ajrxxt+ajryyt+ajrzzt
                ! m=2...
                 cSSr=2.*(ajsx*ajsxr+ajsy*ajsyr+ajsz*ajszr)
                 cSTr=2.*(ajsxr*ajtx+ajsx*ajtxr + ajsyr*ajty+ ajsy*
     & ajtyr + ajszr*ajtz+ ajsz*ajtzr)
                 ccSr=ajsxxr+ajsyyr+ajszzr
                 cSSs=2.*(ajsx*ajsxs+ajsy*ajsys+ajsz*ajszs)
                 cSTs=2.*(ajsxs*ajtx+ajsx*ajtxs + ajsys*ajty+ ajsy*
     & ajtys + ajszs*ajtz+ ajsz*ajtzs)
                 ccSs=ajsxxs+ajsyys+ajszzs
                 cSSt=2.*(ajsx*ajsxt+ajsy*ajsyt+ajsz*ajszt)
                 cSTt=2.*(ajsxt*ajtx+ajsx*ajtxt + ajsyt*ajty+ ajsy*
     & ajtyt + ajszt*ajtz+ ajsz*ajtzt)
                 ccSt=ajsxxt+ajsyyt+ajszzt
                ! m=3...
                 cTTr=2.*(ajtx*ajtxr+ajty*ajtyr+ajtz*ajtzr)
                 ccTr=ajtxxr+ajtyyr+ajtzzr
                 cTTs=2.*(ajtx*ajtxs+ajty*ajtys+ajtz*ajtzs)
                 ccTs=ajtxxs+ajtyys+ajtzzs
                 cTTt=2.*(ajtx*ajtxt+ajty*ajtyt+ajtz*ajtzt)
                 ccTt=ajtxxt+ajtyyt+ajtzzt
                 c0r=0.
                 c0s=0.
                 c0t=0.
                ! =============== End: Laplace operator: ==================== 
                ! ---------------- Start: Boundary condition: --------------- 
                ! BC: a1*u.n + a0*u = g 
                ! nsign=2*side-1
                ! a1=1.
                ! a0=0.
                 ! ---------------- Start r direction ---------------
                 ! Outward normal : (n1,n2,n3) 
                 ani=nsign/sqrt(ajrx**2+ajry**2+ajrz**2)
                 n1=ajrx*ani
                 n2=ajry*ani
                 n3=ajrz*ani
                 ! BC : anR*ur + anS*us + anT*ut + a0*u 
                 anR=a1*(n1*ajrx+n2*ajry+n3*ajrz)
                 anS=a1*(n1*ajsx+n2*ajsy+n3*ajsz)
                 anT=a1*(n1*ajtx+n2*ajty+n3*ajtz)
                ! >>>>>>>
                 anis=-(ajrx*ajrxs+ajry*ajrys+ajrz*ajrzs)*ani**3
                 aniss=-(ajrx*ajrxss+ajry*ajryss+ajrz*ajrzss+ajrxs*
     & ajrxs+ajrys*ajrys+ajrzs*ajrzs)*ani**3 -3.*(ajrx*ajrxs+ajry*
     & ajrys+ajrz*ajrzs)*ani**2*anis
                 n1s=ajrxs*ani + ajrx*anis
                 n1ss=ajrxss*ani + 2.*ajrxs*anis + ajrx*aniss
                 n2s=ajrys*ani + ajry*anis
                 n2ss=ajryss*ani + 2.*ajrys*anis + ajry*aniss
                 n3s=ajrzs*ani + ajrz*anis
                 n3ss=ajrzss*ani + 2.*ajrzs*anis + ajrz*aniss
                 anRs =a1*(n1*ajrxs+n2*ajrys+n3*ajrzs+n1s*ajrx+n2s*
     & ajry+n3s*ajrz)
                 anRss=a1*(n1*ajrxss+n2*ajryss+n3*ajrzss+2.*(n1s*ajrxs+
     & n2s*ajrys+n3s*ajrzs)+n1ss*ajrx+n2ss*ajry+n3ss*ajrz)
                 anSs =a1*(n1*ajsxs+n2*ajsys+n3*ajszs+n1s*ajsx+n2s*
     & ajsy+n3s*ajsz)
                 anSss=a1*(n1*ajsxss+n2*ajsyss+n3*ajszss+2.*(n1s*ajsxs+
     & n2s*ajsys+n3s*ajszs)+n1ss*ajsx+n2ss*ajsy+n3ss*ajsz)
                 anTs =a1*(n1*ajtxs+n2*ajtys+n3*ajtzs+n1s*ajtx+n2s*
     & ajty+n3s*ajtz)
                 anTss=a1*(n1*ajtxss+n2*ajtyss+n3*ajtzss+2.*(n1s*ajtxs+
     & n2s*ajtys+n3s*ajtzs)+n1ss*ajtx+n2ss*ajty+n3ss*ajtz)
                ! <<<<<<<
                ! >>>>>>>
                 anit=-(ajrx*ajrxt+ajry*ajryt+ajrz*ajrzt)*ani**3
                 anitt=-(ajrx*ajrxtt+ajry*ajrytt+ajrz*ajrztt+ajrxt*
     & ajrxt+ajryt*ajryt+ajrzt*ajrzt)*ani**3 -3.*(ajrx*ajrxt+ajry*
     & ajryt+ajrz*ajrzt)*ani**2*anit
                 anist=-(ajrx*ajrxst+ajry*ajryst+ajrz*ajrzst+ajrxs*
     & ajrxt+ajrys*ajryt+ajrzs*ajrzt)*ani**3 -3.*(ajrx*ajrxs+ajry*
     & ajrys+ajrz*ajrzs)*ani**2*anit
                 n1t=ajrxt*ani + ajrx*anit
                 n1tt=ajrxtt*ani + 2.*ajrxt*anit + ajrx*anitt
                 n1st=ajrxst*ani + ajrxt*anis + ajrxs*anit + ajrx*anist
                 n2t=ajryt*ani + ajry*anit
                 n2tt=ajrytt*ani + 2.*ajryt*anit + ajry*anitt
                 n2st=ajryst*ani + ajryt*anis + ajrys*anit + ajry*anist
                 n3t=ajrzt*ani + ajrz*anit
                 n3tt=ajrztt*ani + 2.*ajrzt*anit + ajrz*anitt
                 n3st=ajrzst*ani + ajrzt*anis + ajrzs*anit + ajrz*anist
                 anRt =a1*(n1*ajrxt+n2*ajryt+n3*ajrzt+n1t*ajrx+n2t*
     & ajry+n3t*ajrz)
                 anRtt=a1*(n1*ajrxtt+n2*ajrytt+n3*ajrztt+2.*(n1t*ajrxt+
     & n2t*ajryt+n3t*ajrzt)+n1tt*ajrx+n2tt*ajry+n3tt*ajrz)
                 anRst=a1*(n1*ajrxst+n2*ajryst+n3*ajrzst +n1s*ajrxt+
     & n2s*ajryt+n3s*ajrzt +n1t*ajrxs+n2t*ajrys+n3t*ajrzs +n1st*ajrx+
     & n2st*ajry+n3st*ajrz)
                 anSt =a1*(n1*ajsxt+n2*ajsyt+n3*ajszt+n1t*ajsx+n2t*
     & ajsy+n3t*ajsz)
                 anStt=a1*(n1*ajsxtt+n2*ajsytt+n3*ajsztt+2.*(n1t*ajsxt+
     & n2t*ajsyt+n3t*ajszt)+n1tt*ajsx+n2tt*ajsy+n3tt*ajsz)
                 anSst=a1*(n1*ajsxst+n2*ajsyst+n3*ajszst +n1s*ajsxt+
     & n2s*ajsyt+n3s*ajszt +n1t*ajsxs+n2t*ajsys+n3t*ajszs +n1st*ajsx+
     & n2st*ajsy+n3st*ajsz)
                 anTt =a1*(n1*ajtxt+n2*ajtyt+n3*ajtzt+n1t*ajtx+n2t*
     & ajty+n3t*ajtz)
                 anTtt=a1*(n1*ajtxtt+n2*ajtytt+n3*ajtztt+2.*(n1t*ajtxt+
     & n2t*ajtyt+n3t*ajtzt)+n1tt*ajtx+n2tt*ajty+n3tt*ajtz)
                 anTst=a1*(n1*ajtxst+n2*ajtyst+n3*ajtzst +n1s*ajtxt+
     & n2s*ajtyt+n3s*ajtzt +n1t*ajtxs+n2t*ajtys+n3t*ajtzs +n1st*ajtx+
     & n2st*ajty+n3st*ajtz)
                ! <<<<<<<
                 ! Here are the expressions for the normal derivatives
                bsss= -(cSS*cRR**2*anS*anR**2-cRS**2*cRR*anS*anR**2+
     & cRS*cSS*anR**3*cRR)/anR**3/cRR**3
                bss = -(cRRr*anR**3*cRR*cSS+cRS*ccS*anR**3*cRR+cRS*
     & cSSs*anR**3*cRR-cRS*cRRs*anR**3*cSS-2*cRS**2*cRR*anSs*anR**2-
     & cRS**2*cRR*a0*anR**2+cRRs*anR**2*cRS**2*anS+2*cSS*cRR**2*anSs*
     & anR**2+cSS*cRR**2*a0*anR**2+cRT*cSSt*anR**3*cRR-cRT*cRRt*anR**
     & 3*cSS+cST*cRR**2*anSt*anR**2+ccR*anR**3*cRR*cSS+ccS*anR**2*cRR*
     & *2*anS+cRSr*anR**2*cRR**2*anS-cSSr*anR**3*cRR**2-cRRr*anR**2*
     & cRR*cRS*anS+2*cRS**2*cRR*anRs*anS*anR-2*cRS*cRT*cRR*anSt*anR**
     & 2+2*cRS*cRT*cRR*anRt*anS*anR-2*cRS*ccR*anR**2*cRR*anS-cRS*cRSs*
     & anR**2*cRR*anS-2*cSS*cRR**2*anRs*anS*anR-cRT*cRSt*anR**2*cRR*
     & anS+cRT*cRRt*anR**2*cRS*anS-cST*cRR**2*anRt*anS*anR)/anR**
     & 3/cRR**3
                bs  = -(-2*cRT**2*cRR*anRt**2*anS+cRRt*anR**2*cRT**2*
     & anSt+cST*cRR**2*anSst*anR**2+cST*cRR**2*a0t*anR**2+cTT*cRR**2*
     & anStt*anR**2+2*cTT*cRR**2*anRt**2*anS-ccR**2*anR**2*cRR*anS+
     & ccR*anR**3*cRR*ccS-ccSr*anR**3*cRR**2-cRT*cRRt*anR**3*ccS+cRRr*
     & anR**3*cRR*ccS-cRS*cRRs*anR**3*ccS+cRS*c0*anR**3*cRR+cRS*ccSs*
     & anR**3*cRR-cRS**2*cRR*anSss*anR**2-2*cRS**2*cRR*a0s*anR**2-2*
     & cRS**2*cRR*anRs**2*anS+cRRs*anR**2*cRS**2*anSs+cRRs*anR**2*cRS*
     & *2*a0+cSS*cRR**2*anSss*anR**2+2*cSS*cRR**2*a0s*anR**2+2*cSS*
     & cRR**2*anRs**2*anS+cRT*ccSt*anR**3*cRR-cRT**2*cRR*anStt*anR**2-
     & cRRr*anR**2*cRR*cRS*a0-cRRr*anR**2*cRR*cRS*anSs-cRRr*anR**2*
     & cRR*cRT*anSt+cRRr*anR*cRR*cRT*anRt*anS+cRRr*anR*cRR*cRS*anRs*
     & anS-cRRr*anR**2*cRR*ccR*anS+2*cRS**2*cRR*anRs*anSs*anR+2*cRS**
     & 2*cRR*anRs*a0*anR+cRS**2*cRR*anRss*anR*anS+2*cRS*cRT*cRR*anRs*
     & anSt*anR-2*cRS*cRT*cRR*anSst*anR**2-2*cRS*cRT*cRR*a0t*anR**2-4*
     & cRS*cRT*cRR*anRs*anRt*anS+2*cRS*cRT*cRR*anRt*anSs*anR+2*cRS*
     & cRT*cRR*anRt*a0*anR+2*cRS*cRT*cRR*anRst*anR*anS-2*cRS*ccR*anR**
     & 2*cRR*anSs-2*cRS*ccR*anR**2*cRR*a0+2*cRS*ccR*anR*cRR*anRs*anS-
     & cRS*cRSs*anR**2*cRR*anSs-cRS*cRSs*anR**2*cRR*a0+cRS*cRSs*anR*
     & cRR*anRs*anS-cRS*cRTs*anR**2*cRR*anSt+cRS*cRTs*anR*cRR*anRt*
     & anS-cRS*ccRs*anR**2*cRR*anS-cRRs*anR*cRS**2*anRs*anS+cRS*cRRs*
     & anR**2*cRT*anSt+2*cRT**2*cRR*anRt*anSt*anR+cRT**2*cRR*anRtt*
     & anR*anS-2*cRT*ccR*anR**2*cRR*anSt+2*cRT*ccR*anR*cRR*anRt*anS-
     & cRT*cRSt*anR**2*cRR*anSs-cRT*cRSt*anR**2*cRR*a0+cRT*cRSt*anR*
     & cRR*anRs*anS-cRT*cRTt*anR**2*cRR*anSt+cRT*cRTt*anR*cRR*anRt*
     & anS-cRT*ccRt*anR**2*cRR*anS+cRT*cRRt*anR**2*cRS*anSs-cRS*cRRs*
     & anR*cRT*anRt*anS+cRS*cRRs*anR**2*ccR*anS-2*cSS*cRR**2*anRs*
     & anSs*anR-2*cSS*cRR**2*anRs*a0*anR-cSS*cRR**2*anRss*anR*anS-
     & cRRt*anR*cRT**2*anRt*anS+cRT*cRRt*anR**2*ccR*anS-cST*cRR**2*
     & anRs*anSt*anR+2*cST*cRR**2*anRs*anRt*anS-cST*cRR**2*anRt*anSs*
     & anR-cST*cRR**2*anRt*a0*anR-cST*cRR**2*anRst*anR*anS-2*cTT*cRR**
     & 2*anRt*anSt*anR-cTT*cRR**2*anRtt*anR*anS+ccS*anR**2*cRR**2*
     & anSs+ccS*anR**2*cRR**2*a0+ccT*anR**2*cRR**2*anSt+c0*anR**2*cRR*
     & *2*anS+cRSr*anR**2*cRR**2*anSs+cRSr*anR**2*cRR**2*a0+cRTr*anR**
     & 2*cRR**2*anSt+ccRr*anR**2*cRR**2*anS+cRT*cRRt*anR**2*cRS*a0-
     & cRT*cRRt*anR*cRS*anRs*anS-ccS*anR*cRR**2*anRs*anS-ccT*anR*cRR**
     & 2*anRt*anS-cRSr*anR*cRR**2*anRs*anS-cRTr*anR*cRR**2*anRt*anS)
     & /anR**3/cRR**3
                bttt= -(cRT*cTT*anR**3*cRR+cTT*cRR**2*anT*anR**2-cRT**
     & 2*cRR*anT*anR**2)/anR**3/cRR**3
                btt = -(-cTTr*anR**3*cRR**2+cRRr*anR**3*cRR*cTT-cRS*
     & cRRs*anR**3*cTT+cRS*cTTs*anR**3*cRR+cRT*cTTt*anR**3*cRR+cRT*
     & ccT*anR**3*cRR-cRT*cRRt*anR**3*cTT-2*cRT**2*cRR*anTt*anR**2-
     & cRT**2*cRR*a0*anR**2+cRRt*anR**2*cRT**2*anT+cST*cRR**2*anTs*
     & anR**2+2*cTT*cRR**2*anTt*anR**2+cTT*cRR**2*a0*anR**2+ccR*anR**
     & 3*cRR*cTT+ccT*anR**2*cRR**2*anT+cRTr*anR**2*cRR**2*anT-cRRr*
     & anR**2*cRR*cRT*anT-2*cRS*cRT*cRR*anTs*anR**2+2*cRS*cRT*cRR*
     & anRs*anT*anR-cRS*cRTs*anR**2*cRR*anT+cRS*cRRs*anR**2*cRT*anT+2*
     & cRT**2*cRR*anRt*anT*anR-2*cRT*ccR*anR**2*cRR*anT-cRT*cRTt*anR**
     & 2*cRR*anT-cST*cRR**2*anRs*anT*anR-2*cTT*cRR**2*anRt*anT*anR)
     & /anR**3/cRR**3
                bt  = -(c0*anR**2*cRR**2*anT-ccTr*anR**3*cRR**2+cRSr*
     & anR**2*cRR**2*anTs+cRTr*anR**2*cRR**2*anTt+cRRr*anR**3*cRR*ccT-
     & cRS*cRRs*anR**3*ccT+cRS*ccTs*anR**3*cRR-cRS**2*cRR*anTss*anR**
     & 2-2*cRS**2*cRR*anRs**2*anT+cRRs*anR**2*cRS**2*anTs+cSS*cRR**2*
     & anTss*anR**2+2*cSS*cRR**2*anRs**2*anT+cRT*ccTt*anR**3*cRR+cRT*
     & c0*anR**3*cRR-cRT*cRRt*anR**3*ccT-cRT**2*cRR*anTtt*anR**2-2*
     & cRT**2*cRR*a0t*anR**2-2*cRT**2*cRR*anRt**2*anT+cRRt*anR**2*cRT*
     & *2*anTt+cRRt*anR**2*cRT**2*a0+cST*cRR**2*anTst*anR**2+cST*cRR**
     & 2*a0s*anR**2+cTT*cRR**2*anTtt*anR**2+2*cTT*cRR**2*a0t*anR**2+2*
     & cTT*cRR**2*anRt**2*anT-ccR**2*anR**2*cRR*anT+ccR*anR**3*cRR*
     & ccT+ccS*anR**2*cRR**2*anTs+ccT*anR**2*cRR**2*anTt+ccT*anR**2*
     & cRR**2*a0-cRRr*anR**2*cRR*cRS*anTs+cRRr*anR*cRR*cRS*anRs*anT+
     & cRRr*anR*cRR*cRT*anRt*anT-cRRr*anR**2*cRR*cRT*anTt-cRRr*anR**2*
     & cRR*cRT*a0+2*cRS**2*cRR*anRs*anTs*anR+2*cRS*cRT*cRR*anRs*anTt*
     & anR-cRRr*anR**2*cRR*ccR*anT+cRS**2*cRR*anRss*anR*anT-2*cRS*cRT*
     & cRR*anTst*anR**2-2*cRS*cRT*cRR*a0s*anR**2+2*cRS*cRT*cRR*anRs*
     & a0*anR-4*cRS*cRT*cRR*anRs*anRt*anT-2*cRS*ccR*anR**2*cRR*anTs+2*
     & cRS*cRT*cRR*anRt*anTs*anR+2*cRS*cRT*cRR*anRst*anR*anT+2*cRS*
     & ccR*anR*cRR*anRs*anT-cRS*cRSs*anR**2*cRR*anTs+cRS*cRSs*anR*cRR*
     & anRs*anT-cRS*cRTs*anR**2*cRR*anTt-cRS*cRTs*anR**2*cRR*a0+cRS*
     & cRTs*anR*cRR*anRt*anT-cRS*ccRs*anR**2*cRR*anT-cRRs*anR*cRS**2*
     & anRs*anT+cRS*cRRs*anR**2*cRT*anTt+cRS*cRRs*anR**2*cRT*a0-cRS*
     & cRRs*anR*cRT*anRt*anT+cRS*cRRs*anR**2*ccR*anT-2*cSS*cRR**2*
     & anRs*anTs*anR-cSS*cRR**2*anRss*anR*anT+2*cRT**2*cRR*anRt*anTt*
     & anR+2*cRT**2*cRR*anRt*a0*anR+cRT**2*cRR*anRtt*anR*anT+2*cRT*
     & ccR*anR*cRR*anRt*anT-cRT*cRSt*anR**2*cRR*anTs+cRT*cRSt*anR*cRR*
     & anRs*anT-cRT*cRTt*anR**2*cRR*anTt-cRT*cRTt*anR**2*cRR*a0+cRT*
     & cRTt*anR*cRR*anRt*anT-cRT*ccRt*anR**2*cRR*anT+cRT*cRRt*anR**2*
     & cRS*anTs-cRT*cRRt*anR*cRS*anRs*anT-cRRt*anR*cRT**2*anRt*anT+
     & cRT*cRRt*anR**2*ccR*anT-cST*cRR**2*anRs*anTt*anR-cST*cRR**2*
     & anRs*a0*anR+2*cST*cRR**2*anRs*anRt*anT-cST*cRR**2*anRt*anTs*
     & anR-cST*cRR**2*anRst*anR*anT-2*cTT*cRR**2*anRt*anTt*anR-2*cTT*
     & cRR**2*anRt*a0*anR-2*cRT*ccR*anR**2*cRR*anTt-2*cRT*ccR*anR**2*
     & cRR*a0-ccT*anR*cRR**2*anRt*anT-cRSr*anR*cRR**2*anRs*anT+cRTr*
     & anR**2*cRR**2*a0+ccRr*anR**2*cRR**2*anT-cTT*cRR**2*anRtt*anR*
     & anT-ccS*anR*cRR**2*anRs*anT-cRTr*anR*cRR**2*anRt*anT)/anR**
     & 3/cRR**3
                brs = 0
                brt = 0
                bst = -(cRRr*anR**3*cRR*cST+cRS*ccT*anR**3*cRR+cRS*
     & cSTs*anR**3*cRR-cRS*cRRs*anR**3*cST-2*cRS**2*cRR*anTs*anR**2+
     & cRRs*anR**2*cRS**2*anT+2*cSS*cRR**2*anTs*anR**2+cRT*cSTt*anR**
     & 3*cRR+cRT*ccS*anR**3*cRR-cRT*cRRt*anR**3*cST-2*cRT**2*cRR*anSt*
     & anR**2+cRRt*anR**2*cRT**2*anS+cST*cRR**2*anSs*anR**2+cST*cRR**
     & 2*anTt*anR**2+cST*cRR**2*a0*anR**2+2*cTT*cRR**2*anSt*anR**2+
     & ccR*anR**3*cRR*cST+ccS*anR**2*cRR**2*anT+ccT*anR**2*cRR**2*anS+
     & cRSr*anR**2*cRR**2*anT+cRTr*anR**2*cRR**2*anS-cSTr*anR**3*cRR**
     & 2-cRRr*anR**2*cRR*cRS*anT-cRRr*anR**2*cRR*cRT*anS+2*cRS**2*cRR*
     & anRs*anT*anR+2*cRS*cRT*cRR*anRs*anS*anR-2*cRS*cRT*cRR*anSs*anR*
     & *2-2*cRS*cRT*cRR*anTt*anR**2-2*cRS*cRT*cRR*a0*anR**2+2*cRS*cRT*
     & cRR*anRt*anT*anR-2*cRS*ccR*anR**2*cRR*anT-cRS*cRSs*anR**2*cRR*
     & anT-cRS*cRTs*anR**2*cRR*anS+cRS*cRRs*anR**2*cRT*anS-2*cSS*cRR**
     & 2*anRs*anT*anR-2*cRT*ccR*anR**2*cRR*anS-cRT*cRSt*anR**2*cRR*
     & anT-cRT*cRTt*anR**2*cRR*anS+cRT*cRRt*anR**2*cRS*anT+2*cRT**2*
     & cRR*anRt*anS*anR-cST*cRR**2*anRt*anT*anR-2*cTT*cRR**2*anRt*anS*
     & anR-cST*cRR**2*anRs*anS*anR)/anR**3/cRR**3
                brss= 0
                brst= 0
                brtt= 0
                bsst= -(cRS*cST*anR**3*cRR-cRS**2*cRR*anT*anR**2-2*cRS*
     & cRT*cRR*anS*anR**2+cSS*cRR**2*anT*anR**2+cRT*cSS*anR**3*cRR+
     & cST*cRR**2*anS*anR**2)/anR**3/cRR**3
                bstt= -(cRS*cTT*anR**3*cRR-2*cRS*cRT*cRR*anT*anR**2+
     & cRT*cST*anR**3*cRR-cRT**2*cRR*anS*anR**2+cST*cRR**2*anT*anR**2+
     & cTT*cRR**2*anS*anR**2)/anR**3/cRR**3
                bf  = -(ffr*anR**3*cRR**2+cRRr*anR**2*cRR*cRS*gs-cRRr*
     & anR*cRR*cRS*anRs*g+cRRr*anR**2*cRR*cRT*gt-cRRr*anR*cRR*cRT*
     & anRt*g+cRRr*anR**2*cRR*ccR*g-cRRr*anR**3*cRR*ff-cRRs*anR**2*
     & cRS**2*gs+cRS**2*cRR*gss*anR**2+2*cRS**2*cRR*anRs**2*g-cRS*ffs*
     & anR**3*cRR+cRS*cRRs*anR**3*ff-cSS*cRR**2*gss*anR**2-2*cSS*cRR**
     & 2*anRs**2*g+2*cRT**2*cRR*anRt**2*g-cRT*fft*anR**3*cRR+cRT**2*
     & cRR*gtt*anR**2-cRRt*anR**2*cRT**2*gt+cRT*cRRt*anR**3*ff-cST*
     & cRR**2*gst*anR**2-2*cTT*cRR**2*anRt**2*g-cTT*cRR**2*gtt*anR**2+
     & ccR**2*anR**2*cRR*g-ccR*anR**3*cRR*ff-ccS*anR**2*cRR**2*gs-ccT*
     & anR**2*cRR**2*gt-c0*anR**2*cRR**2*g-cRSr*anR**2*cRR**2*gs-cRTr*
     & anR**2*cRR**2*gt-ccRr*anR**2*cRR**2*g-cRS*cRRs*anR**2*ccR*g-
     & cRS*cRRs*anR**2*cRT*gt+2*cRS*cRT*cRR*gst*anR**2+2*cRS*ccR*anR**
     & 2*cRR*gs+cRS*cRSs*anR**2*cRR*gs+cRS*cRTs*anR**2*cRR*gt+cRS*
     & ccRs*anR**2*cRR*g-2*cRS**2*cRR*anRs*gs*anR-cRS**2*cRR*anRss*
     & anR*g-2*cRS*cRT*cRR*anRs*gt*anR+4*cRS*cRT*cRR*anRs*anRt*g-2*
     & cRS*cRT*cRR*anRt*gs*anR-2*cRS*cRT*cRR*anRst*anR*g-2*cRS*ccR*
     & anR*cRR*anRs*g-cRS*cRSs*anR*cRR*anRs*g-cRS*cRTs*anR*cRR*anRt*g+
     & cRRs*anR*cRS**2*anRs*g+cRS*cRRs*anR*cRT*anRt*g+2*cSS*cRR**2*
     & anRs*gs*anR+cSS*cRR**2*anRss*anR*g+2*cRT*ccR*anR**2*cRR*gt+cRT*
     & cRSt*anR**2*cRR*gs+cRT*cRTt*anR**2*cRR*gt+cRT*ccRt*anR**2*cRR*
     & g-cRT*cRRt*anR**2*cRS*gs-cRT*cRRt*anR**2*ccR*g-2*cRT**2*cRR*
     & anRt*gt*anR-cRT**2*cRR*anRtt*anR*g-2*cRT*ccR*anR*cRR*anRt*g-
     & cRT*cRSt*anR*cRR*anRs*g-cRT*cRTt*anR*cRR*anRt*g+cRT*cRRt*anR*
     & cRS*anRs*g+cRRt*anR*cRT**2*anRt*g+cST*cRR**2*anRs*gt*anR-2*cST*
     & cRR**2*anRs*anRt*g+cST*cRR**2*anRt*gs*anR+cST*cRR**2*anRst*anR*
     & g+2*cTT*cRR**2*anRt*gt*anR+cTT*cRR**2*anRtt*anR*g+ccS*anR*cRR**
     & 2*anRs*g+ccT*anR*cRR**2*anRt*g+cRSr*anR*cRR**2*anRs*g+cRTr*anR*
     & cRR**2*anRt*g)/anR**3/cRR**3
                 ! ---------------- Start s direction ---------------
                 ! ---------------- Start t direction ---------------
                  us=us4(i1,i2,i3)
                  uss=uss4(i1,i2,i3)
                  usss=usss2(i1,i2,i3)
                  ut=ut4(i1,i2,i3)
                  utt=utt4(i1,i2,i3)
                  uttt=uttt2(i1,i2,i3)
                  ust=ust4(i1,i2,i3)
                  usst=usst2(i1,i2,i3)
                  ustt=ustt2(i1,i2,i3)
            ! bf  = -(-cRT**2*anRtt*anR*g-2*cRS**2*anRs*gs*anR-cRS**2*anRss*anR*g+cRS*cRTs*anR**2*gt+cRS*ccRs*anR**2*g+cRS*ccR*anR**2*gs+cRS*cRSs*anR**2*gs+2*cRS*cRT*gst*anR**2-cSS*cRR*gss*anR**2-2*cSS*cRR*anRs**2*g+ffr*anR**3*cRR+cRS**2*gss*anR**2+2*cRS**2*anRs**2*g-cRS*ffs*anR**3-2*cRS*cRT*anRs*gt*anR+4*cRS*cRT*anRs*anRt*g-2*cRS*cRT*anRt*gs*anR-2*cRS*cRT*anRst*anR*g-cRS*ccR*anR*anRs*g-cRS*cRSs*anR*anRs*g-cRS*cRTs*anR*anRt*g+2*cSS*cRR*anRs*gs*anR-cRT*fft*anR**3+2*cRT**2*anRt**2*g+cRT**2*gtt*anR**2+cSS*cRR*anRss*anR*g-2*cRT**2*anRt*gt*anR+cRT*ccR*anR**2*gt+cRT*cRSt*anR**2*gs+cRT*cRTt*anR**2*gt+cRT*ccRt*anR**2*g-cST*cRR*gst*anR**2-2*cTT*cRR*anRt**2*g-cTT*cRR*gtt*anR**2-ccS*anR**2*cRR*gs-ccT*anR**2*cRR*gt-c0*anR**2*cRR*g-cRSr*anR**2*cRR*gs-cRTr*anR**2*cRR*gt-ccRr*anR**2*cRR*g-cRT*ccR*anR*anRt*g-cRT*cRSt*anR*anRs*g-cRT*cRTt*anR*anRt*g+cST*cRR*anRs*gt*anR-2*cST*cRR*anRs*anRt*g+cST*cRR*anRt*gs*anR+cST*cRR*anRst*anR*g+cTT*cRR*anRtt*anR*g+2*cTT*cRR*anRt*gt*anR+ccS*anR*cRR*anRs*g+ccT*anR*cRR*anRt*g+cRSr*anR*cRR*anRs*g+cRTr*anR*cRR*anRt*g)/anR**3/cRR**2
               ! write(*,'("LS-NE4:RHS: i1,i2=",2i3,",  -- Values:")') i1,i2
               ! write(*,'("  g,gs,gt,gss,gtt,ff,ffs,fft=",12e10.2)') g,gs,gt,gss,gtt,ff,ffs,fft
               ! write(*,'("  bf,us,ut,uss,utt,ust,usss,uttt,usst,ustt=",12e10.2)') bf,us,ut,uss,utt,ust,usss,uttt,usst,ustt
               ! write(*,'("  bs,bss,bsss, bt,btt,bttt, bst,bsst,bstt,bf=",10e10.2)') bs,bss,bsss, bt,btt,bttt, bst,bsst,bstt,bf
                  r(i1-is1,i2-is2,i3-is3)=g - anS*us -anT*ut
                  r(i1-2*is1,i2-2*is2,i3-2*is3)=-( bs*us +bss*uss +
     & bsss*usss +bt*ut +btt*utt + bttt*uttt + bst*ust + bsst*usst + 
     & bstt*ustt +bf )
               ! write(*,'("  r(-1),r(-2)=",10e10.2)') r(i1-is1,i2-is2,i3-is3),r(i1-2*is1,i2-2*is2,i3-2*is3)
                  ! TEMP
                  ! r(i1-is1,i2-is2,i3-is3)=0. 
                  ! r(i1-2*is1,i2-2*is2,i3-2*is3)=0.
                else
                  r(j1,j2,j3)=0.
                  r(i1-2*is1,i2-2*is2,i3-2*is3)=0.
                end if
              end do
              end do
              end do
             end if
           else if( axis.eq.1 .and. nd.eq.3 )then
             a0=bcData(0,side,axis)
             a1=bcData(1,side,axis)
             if( a1.eq.0. )then
               write(*,*) 'lineSmoothRHS:ERROR: a1=0!'
               stop 2
             end if
             if( gridType.eq.rectangular )then
            ! write(*,*) 'LSRHSt:4th-order neumann+EQN2 (rect)'
            !   write(*,'(''LSRHS:4th neumannAndEqn (rect) nn2a,nn2b='',2i3,)') nn2a,nn2b
               drn=dx(axis)
               nsign = 2*side-1
               ! (i1,i2,i3) = boundary point
               ! (j1,j2,j3) = ghost point
               do i3=m3a,m3b,m3c
                j3=i3-is3
               do i2=m2a,m2b,m2c
                j2=i2-is2
               do i1=m1a,m1b,m1c
                j1=i1-is1
                if( mask(i1,i2,i3).gt.0 )then
                ! the rhs for the mixed BC is stored in the ghost point value of f
                 ! the rhs for the mixed BC is stored in the ghost point value of f
                ! Cartesian grids use dx: 
                   g = f(j1,j2,j3)
                   ff=f(i1,i2,i3)
                     ! 2nd-order one sided:
                     ! ffs=(-f(i1,i2+2*is2,i3)+4.*f(i1,i2+is2,i3)-3.*ff)/(2.*dx(1)) 
                     ! 3rd-order one sided:
                     ffs=is2*(-11.*ff+18.*f(i1,i2+is2,i3)-9.*f(i1,i2+2*
     & is2,i3)+2.*f(i1,i2+3*is2,i3))/(6.*dx(1))
                     ! NOTE: the forcing f and g are only assumed to be given where mask>0
                     ! In order to compute tangential derivatives of the forcing we may need to fill in
                     ! neighbouring values of the forcing at interp and unused points
                     gv( 0, 0, 0)=f(i1,j2,i3)
                     i1m1 = i1-1
                     if( i1m1.lt.nn1a .or. mask(i1m1,i2,i3).le.0 )then
                      ! f(i1m1,j2,i3)= extrap3(f,i1m1,j2,i3, 1,0,0)
                      ! gv(-1, 0, 0) = extrap3(f,i1m1,j2,i3, 1,0,0)
                        if( mask(i1m1+  (1),i2+  (0),i3+  (0)).gt.0 
     & .and. mask(i1m1+2*(1),i2+2*(0),i3+2*(0)).gt.0 .and.mask(i1m1+3*
     & (1),i2+3*(0),i3+3*(0)).gt.0 .and.mask(i1m1+4*(1),i2+4*(0),i3+4*
     & (0)).gt.0 )then
                         gv(-1,0,0)=(4.*f(i1m1+(1),j2+(0),i3+(0))-6.*f(
     & i1m1+2*(1),j2+2*(0),i3+2*(0))+4.*f(i1m1+3*(1),j2+3*(0),i3+3*(0)
     & )-f(i1m1+4*(1),j2+4*(0),i3+4*(0)))
                        else if( mask(i1m1+  (1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1m1+2*(1),i2+2*(0),i3+2*(0)).gt.0 .and.mask(
     & i1m1+3*(1),i2+3*(0),i3+3*(0)).gt.0 )then
                         gv(-1,0,0)=(3.*f(i1m1+(1),j2+(0),i3+(0))-3.*f(
     & i1m1+2*(1),j2+2*(0),i3+2*(0))+f(i1m1+3*(1),j2+3*(0),i3+3*(0)))
                        else if( mask(i1m1+  (1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1m1+2*(1),i2+2*(0),i3+2*(0)).gt.0 )then
                         gv(-1,0,0)=(2.*f(i1m1+(1),j2+(0),i3+(0))-f(
     & i1m1+2*(1),j2+2*(0),i3+2*(0)))
                        else
                         gv(-1,0,0)=(f(i1m1+(1),j2+(0),i3+(0)))
                        end if
                     else
                       gv(-1, 0, 0) = f(i1m1,j2,i3)
                     end if
                     i1p1 = i1+1
                     if( i1p1.gt.nn1b .or. mask(i1p1,i2,i3).le.0 )then
                      ! f(i1p1,j2,i3)= extrap3(f,i1p1,j2,i3,-1,0,0)
                      ! gv(+1, 0, 0) = extrap3(f,i1p1,j2,i3,-1,0,0)
                        if( mask(i1p1+  (-1),i2+  (0),i3+  (0)).gt.0 
     & .and. mask(i1p1+2*(-1),i2+2*(0),i3+2*(0)).gt.0 .and.mask(i1p1+
     & 3*(-1),i2+3*(0),i3+3*(0)).gt.0 .and.mask(i1p1+4*(-1),i2+4*(0),
     & i3+4*(0)).gt.0 )then
                         gv(+1,0,0)=(4.*f(i1p1+(-1),j2+(0),i3+(0))-6.*
     & f(i1p1+2*(-1),j2+2*(0),i3+2*(0))+4.*f(i1p1+3*(-1),j2+3*(0),i3+
     & 3*(0))-f(i1p1+4*(-1),j2+4*(0),i3+4*(0)))
                        else if( mask(i1p1+  (-1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1p1+2*(-1),i2+2*(0),i3+2*(0)).gt.0 .and.mask(
     & i1p1+3*(-1),i2+3*(0),i3+3*(0)).gt.0 )then
                         gv(+1,0,0)=(3.*f(i1p1+(-1),j2+(0),i3+(0))-3.*
     & f(i1p1+2*(-1),j2+2*(0),i3+2*(0))+f(i1p1+3*(-1),j2+3*(0),i3+3*(
     & 0)))
                        else if( mask(i1p1+  (-1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1p1+2*(-1),i2+2*(0),i3+2*(0)).gt.0 )then
                         gv(+1,0,0)=(2.*f(i1p1+(-1),j2+(0),i3+(0))-f(
     & i1p1+2*(-1),j2+2*(0),i3+2*(0)))
                        else
                         gv(+1,0,0)=(f(i1p1+(-1),j2+(0),i3+(0)))
                        end if
                     else
                      gv(+1, 0, 0) = f(i1p1,j2,i3)
                     end if
                     ! grr=FRR(i1,j2,i3)
                     grr = ((gv(+1,0,0)-2.*gv(0,0,0)+gv(-1,0,0))*h22(0)
     & )
                     i3m1 = i3-1
                     if( i3m1.lt.nn3a .or. mask(i1,i2,i3m1).le.0 )then
                      ! f(i1,j2,i3m1)= extrap3(f,i1,j2,i3m1, 0,0,1)
                      ! gv( 0, 0,-1) = extrap3(f,i1,j2,i3m1, 0,0,1)
                        if( mask(i1+  (0),i2+  (0),i3m1+  (1)).gt.0 
     & .and. mask(i1+2*(0),i2+2*(0),i3m1+2*(1)).gt.0 .and.mask(i1+3*(
     & 0),i2+3*(0),i3m1+3*(1)).gt.0 .and.mask(i1+4*(0),i2+4*(0),i3m1+
     & 4*(1)).gt.0 )then
                         gv(0,0,-1)=(4.*f(i1+(0),j2+(0),i3m1+(1))-6.*f(
     & i1+2*(0),j2+2*(0),i3m1+2*(1))+4.*f(i1+3*(0),j2+3*(0),i3m1+3*(1)
     & )-f(i1+4*(0),j2+4*(0),i3m1+4*(1)))
                        else if( mask(i1+  (0),i2+  (0),i3m1+  (1))
     & .gt.0 .and. mask(i1+2*(0),i2+2*(0),i3m1+2*(1)).gt.0 .and.mask(
     & i1+3*(0),i2+3*(0),i3m1+3*(1)).gt.0 )then
                         gv(0,0,-1)=(3.*f(i1+(0),j2+(0),i3m1+(1))-3.*f(
     & i1+2*(0),j2+2*(0),i3m1+2*(1))+f(i1+3*(0),j2+3*(0),i3m1+3*(1)))
                        else if( mask(i1+  (0),i2+  (0),i3m1+  (1))
     & .gt.0 .and. mask(i1+2*(0),i2+2*(0),i3m1+2*(1)).gt.0 )then
                         gv(0,0,-1)=(2.*f(i1+(0),j2+(0),i3m1+(1))-f(i1+
     & 2*(0),j2+2*(0),i3m1+2*(1)))
                        else
                         gv(0,0,-1)=(f(i1+(0),j2+(0),i3m1+(1)))
                        end if
                     else
                      gv( 0, 0,-1) = f(i1,j2,i3m1)
                     end if
                     i3p1 = i3+1
                     if( i3p1.gt.nn3b .or. mask(i1,i2,i3p1).le.0 )then
                      ! f(i1,j2,i3p1)= extrap3(f,i1,j2,i3p1, 0,0,-1)
                      ! gv( 0, 0,+1) = extrap3(f,i1,j2,i3p1, 0,0,-1)
                        if( mask(i1+  (0),i2+  (0),i3p1+  (-1)).gt.0 
     & .and. mask(i1+2*(0),i2+2*(0),i3p1+2*(-1)).gt.0 .and.mask(i1+3*(
     & 0),i2+3*(0),i3p1+3*(-1)).gt.0 .and.mask(i1+4*(0),i2+4*(0),i3p1+
     & 4*(-1)).gt.0 )then
                         gv(0,0,+1)=(4.*f(i1+(0),j2+(0),i3p1+(-1))-6.*
     & f(i1+2*(0),j2+2*(0),i3p1+2*(-1))+4.*f(i1+3*(0),j2+3*(0),i3p1+3*
     & (-1))-f(i1+4*(0),j2+4*(0),i3p1+4*(-1)))
                        else if( mask(i1+  (0),i2+  (0),i3p1+  (-1))
     & .gt.0 .and. mask(i1+2*(0),i2+2*(0),i3p1+2*(-1)).gt.0 .and.mask(
     & i1+3*(0),i2+3*(0),i3p1+3*(-1)).gt.0 )then
                         gv(0,0,+1)=(3.*f(i1+(0),j2+(0),i3p1+(-1))-3.*
     & f(i1+2*(0),j2+2*(0),i3p1+2*(-1))+f(i1+3*(0),j2+3*(0),i3p1+3*(-
     & 1)))
                        else if( mask(i1+  (0),i2+  (0),i3p1+  (-1))
     & .gt.0 .and. mask(i1+2*(0),i2+2*(0),i3p1+2*(-1)).gt.0 )then
                         gv(0,0,+1)=(2.*f(i1+(0),j2+(0),i3p1+(-1))-f(
     & i1+2*(0),j2+2*(0),i3p1+2*(-1)))
                        else
                         gv(0,0,+1)=(f(i1+(0),j2+(0),i3p1+(-1)))
                        end if
                     else
                      gv( 0, 0,+1) = f(i1,j2,i3p1)
                     end if
                     ! gtt=FTT(i1,j2,i3)
                     gtt = ((gv(0,0,+1)-2.*gv(0,0,0)+gv(0,0,-1))*h22(2)
     & )
            !   write(*,'(''LNSM : i1,i2,i3,g,ffr,gss,u,uss ='',3i3,5f11.6)') i1,i2,i3,g,ffr,gss,u(i1,i2,i3),(u(i1,i2+1,i3)-2.*u(i1,i2,i3)+u(i1,i2-1,i3))/dx(1)**2
            !  write(*,'('' i1,i2,i3,f,f,f='',3i3,4e11.2)') i1,i2,i3,f(i1,i2,i3),f(i1+2*is1,i2+2*is2,i3),f(i1+is1,i2+is2,i3)
                r(j1,j2,j3)=g
                  r(i1,i2-2*is2,i3)=(ffs-(grr+gtt- a0*ff )/(a1*nsign))*
     & dx(axis)**3
                else
                  r(j1,j2,j3)=0.
                  r(i1-2*is1,i2-2*is2,i3-2*is3)=0.
                end if
              end do
              end do
              end do
             else
               ! **** curvilinear case ****
               nsign = 2*side-1
               ! (i1,i2,i3) = boundary point
               ! (j1,j2,j3) = ghost point
               do i3=m3a,m3b,m3c
                j3=i3-is3
               do i2=m2a,m2b,m2c
                j2=i2-is2
               do i1=m1a,m1b,m1c
                  j1=i1-is1
                 if( mask(i1,i2,i3).gt.0 )then
                ! the rhs for the mixed BC is stored in the ghost point value of f
                 ! the rhs for the mixed BC is stored in the ghost point value of f
                ! Curvilinear grids use dr:
                   g = f(j1,j2,j3)
                   ff= f(i1,i2,i3)
                    ax1 = mod(axis+1,nd)
                    ax2 = mod(axis+2,nd)
                    mdim(0,0)=nn1a
                    mdim(1,0)=nn1b
                    mdim(0,1)=nn2a
                    mdim(1,1)=nn2b
                    mdim(0,2)=nn3a
                    mdim(1,2)=nn3b
                     ! 2nd-order one sided:
                     ! is2*ffs=(-f(i1,i2+2*is2,i3)+4.*f(i1,i2+is2,i3)-3.*ff)*d12(1) 
                     ! 3rd-order one sided:
                     ffs=is2*(-11.*ff+18.*f(i1,i2+is2,i3)-9.*f(i1,i2+2*
     & is2,i3)+2.*f(i1,i2+3*is2,i3))/(6.*dr(1))
                     fv( 0, 0, 0) = f(i1,i2,i3)
                     gv( 0, 0, 0) = f(i1,j2,i3)
                     i1m1 = i1-1
                     if( i1m1.lt.nn1a .or. mask(i1m1,i2,i3).le.0 )then
                      ! f(i1m1,i2,i3)= extrap3(f,i1m1,i2,i3, 1,0,0)
                      ! f(i1m1,j2,i3)= extrap3(f,i1m1,j2,i3, 1,0,0)
                      ! fv(-1, 0, 0) = extrap3(f,i1m1,i2,i3, 1,0,0)
                      ! gv(-1, 0, 0) = extrap3(f,i1m1,j2,i3, 1,0,0)
                        if( mask(i1m1+  (1),i2+  (0),i3+  (0)).gt.0 
     & .and. mask(i1m1+2*(1),i2+2*(0),i3+2*(0)).gt.0 .and.mask(i1m1+3*
     & (1),i2+3*(0),i3+3*(0)).gt.0 .and.mask(i1m1+4*(1),i2+4*(0),i3+4*
     & (0)).gt.0 )then
                         fv(-1,0,0)=(4.*f(i1m1+(1),i2+(0),i3+(0))-6.*f(
     & i1m1+2*(1),i2+2*(0),i3+2*(0))+4.*f(i1m1+3*(1),i2+3*(0),i3+3*(0)
     & )-f(i1m1+4*(1),i2+4*(0),i3+4*(0)))
                        else if( mask(i1m1+  (1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1m1+2*(1),i2+2*(0),i3+2*(0)).gt.0 .and.mask(
     & i1m1+3*(1),i2+3*(0),i3+3*(0)).gt.0 )then
                         fv(-1,0,0)=(3.*f(i1m1+(1),i2+(0),i3+(0))-3.*f(
     & i1m1+2*(1),i2+2*(0),i3+2*(0))+f(i1m1+3*(1),i2+3*(0),i3+3*(0)))
                        else if( mask(i1m1+  (1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1m1+2*(1),i2+2*(0),i3+2*(0)).gt.0 )then
                         fv(-1,0,0)=(2.*f(i1m1+(1),i2+(0),i3+(0))-f(
     & i1m1+2*(1),i2+2*(0),i3+2*(0)))
                        else
                         fv(-1,0,0)=(f(i1m1+(1),i2+(0),i3+(0)))
                        end if
                        if( mask(i1m1+  (1),i2+  (0),i3+  (0)).gt.0 
     & .and. mask(i1m1+2*(1),i2+2*(0),i3+2*(0)).gt.0 .and.mask(i1m1+3*
     & (1),i2+3*(0),i3+3*(0)).gt.0 .and.mask(i1m1+4*(1),i2+4*(0),i3+4*
     & (0)).gt.0 )then
                         gv(-1,0,0)=(4.*f(i1m1+(1),j2+(0),i3+(0))-6.*f(
     & i1m1+2*(1),j2+2*(0),i3+2*(0))+4.*f(i1m1+3*(1),j2+3*(0),i3+3*(0)
     & )-f(i1m1+4*(1),j2+4*(0),i3+4*(0)))
                        else if( mask(i1m1+  (1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1m1+2*(1),i2+2*(0),i3+2*(0)).gt.0 .and.mask(
     & i1m1+3*(1),i2+3*(0),i3+3*(0)).gt.0 )then
                         gv(-1,0,0)=(3.*f(i1m1+(1),j2+(0),i3+(0))-3.*f(
     & i1m1+2*(1),j2+2*(0),i3+2*(0))+f(i1m1+3*(1),j2+3*(0),i3+3*(0)))
                        else if( mask(i1m1+  (1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1m1+2*(1),i2+2*(0),i3+2*(0)).gt.0 )then
                         gv(-1,0,0)=(2.*f(i1m1+(1),j2+(0),i3+(0))-f(
     & i1m1+2*(1),j2+2*(0),i3+2*(0)))
                        else
                         gv(-1,0,0)=(f(i1m1+(1),j2+(0),i3+(0)))
                        end if
                     else
                      fv(-1, 0, 0) = f(i1m1,i2,i3)
                      gv(-1, 0, 0) = f(i1m1,j2,i3)
                     end if
                     i1p1 = i1+1
                     if( i1p1.gt.nn1b .or. mask(i1p1,i2,i3).le.0 )then
                      ! f(i1p1,i2,i3)= extrap3(f,i1p1,i2,i3,-1,0,0)
                      ! f(i1p1,j2,i3)= extrap3(f,i1p1,j2,i3,-1,0,0)
                      ! fv(+1, 0, 0) = extrap3(f,i1p1,i2,i3,-1,0,0)
                      ! gv(+1, 0, 0) = extrap3(f,i1p1,j2,i3,-1,0,0)
                        if( mask(i1p1+  (-1),i2+  (0),i3+  (0)).gt.0 
     & .and. mask(i1p1+2*(-1),i2+2*(0),i3+2*(0)).gt.0 .and.mask(i1p1+
     & 3*(-1),i2+3*(0),i3+3*(0)).gt.0 .and.mask(i1p1+4*(-1),i2+4*(0),
     & i3+4*(0)).gt.0 )then
                         fv(+1,0,0)=(4.*f(i1p1+(-1),i2+(0),i3+(0))-6.*
     & f(i1p1+2*(-1),i2+2*(0),i3+2*(0))+4.*f(i1p1+3*(-1),i2+3*(0),i3+
     & 3*(0))-f(i1p1+4*(-1),i2+4*(0),i3+4*(0)))
                        else if( mask(i1p1+  (-1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1p1+2*(-1),i2+2*(0),i3+2*(0)).gt.0 .and.mask(
     & i1p1+3*(-1),i2+3*(0),i3+3*(0)).gt.0 )then
                         fv(+1,0,0)=(3.*f(i1p1+(-1),i2+(0),i3+(0))-3.*
     & f(i1p1+2*(-1),i2+2*(0),i3+2*(0))+f(i1p1+3*(-1),i2+3*(0),i3+3*(
     & 0)))
                        else if( mask(i1p1+  (-1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1p1+2*(-1),i2+2*(0),i3+2*(0)).gt.0 )then
                         fv(+1,0,0)=(2.*f(i1p1+(-1),i2+(0),i3+(0))-f(
     & i1p1+2*(-1),i2+2*(0),i3+2*(0)))
                        else
                         fv(+1,0,0)=(f(i1p1+(-1),i2+(0),i3+(0)))
                        end if
                        if( mask(i1p1+  (-1),i2+  (0),i3+  (0)).gt.0 
     & .and. mask(i1p1+2*(-1),i2+2*(0),i3+2*(0)).gt.0 .and.mask(i1p1+
     & 3*(-1),i2+3*(0),i3+3*(0)).gt.0 .and.mask(i1p1+4*(-1),i2+4*(0),
     & i3+4*(0)).gt.0 )then
                         gv(+1,0,0)=(4.*f(i1p1+(-1),j2+(0),i3+(0))-6.*
     & f(i1p1+2*(-1),j2+2*(0),i3+2*(0))+4.*f(i1p1+3*(-1),j2+3*(0),i3+
     & 3*(0))-f(i1p1+4*(-1),j2+4*(0),i3+4*(0)))
                        else if( mask(i1p1+  (-1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1p1+2*(-1),i2+2*(0),i3+2*(0)).gt.0 .and.mask(
     & i1p1+3*(-1),i2+3*(0),i3+3*(0)).gt.0 )then
                         gv(+1,0,0)=(3.*f(i1p1+(-1),j2+(0),i3+(0))-3.*
     & f(i1p1+2*(-1),j2+2*(0),i3+2*(0))+f(i1p1+3*(-1),j2+3*(0),i3+3*(
     & 0)))
                        else if( mask(i1p1+  (-1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1p1+2*(-1),i2+2*(0),i3+2*(0)).gt.0 )then
                         gv(+1,0,0)=(2.*f(i1p1+(-1),j2+(0),i3+(0))-f(
     & i1p1+2*(-1),j2+2*(0),i3+2*(0)))
                        else
                         gv(+1,0,0)=(f(i1p1+(-1),j2+(0),i3+(0)))
                        end if
                     else
                      fv(+1, 0, 0) = f(i1p1,i2,i3)
                      gv(+1, 0, 0) = f(i1p1,j2,i3)
                     end if
                     ! ffr= FR(i1,i2,i3)
                     ! gr = FR(i1,j2,i3)
                     ! grr=FRR(i1,j2,i3)
                     ffr = ((fv(+1,0,0)-fv(-1,0,0))*d12(0))
                     gr  = ((gv(+1,0,0)-gv(-1,0,0))*d12(0))
                     grr = ((gv(+1,0,0)-2.*gv(0,0,0)+gv(-1,0,0))*d22(0)
     & )
                     i3m1 = i3-1
                     if( i3m1.lt.nn3a .or. mask(i1,i2,i3m1).le.0 )then
                      ! f(i1,i2,i3m1)= extrap3(f,i1,i2,i3m1, 0,0, 1)
                      ! f(i1,j2,i3m1)= extrap3(f,i1,j2,i3m1, 0,0, 1)
                      ! fv( 0, 0,-1) = extrap3(f,i1,i2,i3m1, 0,0, 1)
                      ! gv( 0, 0,-1) = extrap3(f,i1,j2,i3m1, 0,0, 1)
                        if( mask(i1+  (0),i2+  (0),i3m1+  (1)).gt.0 
     & .and. mask(i1+2*(0),i2+2*(0),i3m1+2*(1)).gt.0 .and.mask(i1+3*(
     & 0),i2+3*(0),i3m1+3*(1)).gt.0 .and.mask(i1+4*(0),i2+4*(0),i3m1+
     & 4*(1)).gt.0 )then
                         fv(0,0,-1)=(4.*f(i1+(0),i2+(0),i3m1+(1))-6.*f(
     & i1+2*(0),i2+2*(0),i3m1+2*(1))+4.*f(i1+3*(0),i2+3*(0),i3m1+3*(1)
     & )-f(i1+4*(0),i2+4*(0),i3m1+4*(1)))
                        else if( mask(i1+  (0),i2+  (0),i3m1+  (1))
     & .gt.0 .and. mask(i1+2*(0),i2+2*(0),i3m1+2*(1)).gt.0 .and.mask(
     & i1+3*(0),i2+3*(0),i3m1+3*(1)).gt.0 )then
                         fv(0,0,-1)=(3.*f(i1+(0),i2+(0),i3m1+(1))-3.*f(
     & i1+2*(0),i2+2*(0),i3m1+2*(1))+f(i1+3*(0),i2+3*(0),i3m1+3*(1)))
                        else if( mask(i1+  (0),i2+  (0),i3m1+  (1))
     & .gt.0 .and. mask(i1+2*(0),i2+2*(0),i3m1+2*(1)).gt.0 )then
                         fv(0,0,-1)=(2.*f(i1+(0),i2+(0),i3m1+(1))-f(i1+
     & 2*(0),i2+2*(0),i3m1+2*(1)))
                        else
                         fv(0,0,-1)=(f(i1+(0),i2+(0),i3m1+(1)))
                        end if
                        if( mask(i1+  (0),i2+  (0),i3m1+  (1)).gt.0 
     & .and. mask(i1+2*(0),i2+2*(0),i3m1+2*(1)).gt.0 .and.mask(i1+3*(
     & 0),i2+3*(0),i3m1+3*(1)).gt.0 .and.mask(i1+4*(0),i2+4*(0),i3m1+
     & 4*(1)).gt.0 )then
                         gv(0,0,-1)=(4.*f(i1+(0),j2+(0),i3m1+(1))-6.*f(
     & i1+2*(0),j2+2*(0),i3m1+2*(1))+4.*f(i1+3*(0),j2+3*(0),i3m1+3*(1)
     & )-f(i1+4*(0),j2+4*(0),i3m1+4*(1)))
                        else if( mask(i1+  (0),i2+  (0),i3m1+  (1))
     & .gt.0 .and. mask(i1+2*(0),i2+2*(0),i3m1+2*(1)).gt.0 .and.mask(
     & i1+3*(0),i2+3*(0),i3m1+3*(1)).gt.0 )then
                         gv(0,0,-1)=(3.*f(i1+(0),j2+(0),i3m1+(1))-3.*f(
     & i1+2*(0),j2+2*(0),i3m1+2*(1))+f(i1+3*(0),j2+3*(0),i3m1+3*(1)))
                        else if( mask(i1+  (0),i2+  (0),i3m1+  (1))
     & .gt.0 .and. mask(i1+2*(0),i2+2*(0),i3m1+2*(1)).gt.0 )then
                         gv(0,0,-1)=(2.*f(i1+(0),j2+(0),i3m1+(1))-f(i1+
     & 2*(0),j2+2*(0),i3m1+2*(1)))
                        else
                         gv(0,0,-1)=(f(i1+(0),j2+(0),i3m1+(1)))
                        end if
                     else
                      fv( 0, 0,-1) = f(i1,i2,i3m1)
                      gv( 0, 0,-1) = f(i1,j2,i3m1)
                     end if
                     i3p1 = i3+1
                     if( i3p1.gt.nn3b .or. mask(i1,i2,i3p1).le.0 )then
                      ! f(i1,i2,i3p1)= extrap3(f,i1,i2,i3p1, 0,0,-1)
                      ! f(i1,j2,i3p1)= extrap3(f,i1,j2,i3p1, 0,0,-1)
                      ! fv( 0, 0,+1) = extrap3(f,i1,i2,i3p1, 0,0,-1) 
                      ! gv( 0, 0,+1) = extrap3(f,i1,j2,i3p1, 0,0,-1) 
                        if( mask(i1+  (0),i2+  (0),i3p1+  (-1)).gt.0 
     & .and. mask(i1+2*(0),i2+2*(0),i3p1+2*(-1)).gt.0 .and.mask(i1+3*(
     & 0),i2+3*(0),i3p1+3*(-1)).gt.0 .and.mask(i1+4*(0),i2+4*(0),i3p1+
     & 4*(-1)).gt.0 )then
                         fv(0,0,+1)=(4.*f(i1+(0),i2+(0),i3p1+(-1))-6.*
     & f(i1+2*(0),i2+2*(0),i3p1+2*(-1))+4.*f(i1+3*(0),i2+3*(0),i3p1+3*
     & (-1))-f(i1+4*(0),i2+4*(0),i3p1+4*(-1)))
                        else if( mask(i1+  (0),i2+  (0),i3p1+  (-1))
     & .gt.0 .and. mask(i1+2*(0),i2+2*(0),i3p1+2*(-1)).gt.0 .and.mask(
     & i1+3*(0),i2+3*(0),i3p1+3*(-1)).gt.0 )then
                         fv(0,0,+1)=(3.*f(i1+(0),i2+(0),i3p1+(-1))-3.*
     & f(i1+2*(0),i2+2*(0),i3p1+2*(-1))+f(i1+3*(0),i2+3*(0),i3p1+3*(-
     & 1)))
                        else if( mask(i1+  (0),i2+  (0),i3p1+  (-1))
     & .gt.0 .and. mask(i1+2*(0),i2+2*(0),i3p1+2*(-1)).gt.0 )then
                         fv(0,0,+1)=(2.*f(i1+(0),i2+(0),i3p1+(-1))-f(
     & i1+2*(0),i2+2*(0),i3p1+2*(-1)))
                        else
                         fv(0,0,+1)=(f(i1+(0),i2+(0),i3p1+(-1)))
                        end if
                        if( mask(i1+  (0),i2+  (0),i3p1+  (-1)).gt.0 
     & .and. mask(i1+2*(0),i2+2*(0),i3p1+2*(-1)).gt.0 .and.mask(i1+3*(
     & 0),i2+3*(0),i3p1+3*(-1)).gt.0 .and.mask(i1+4*(0),i2+4*(0),i3p1+
     & 4*(-1)).gt.0 )then
                         gv(0,0,+1)=(4.*f(i1+(0),j2+(0),i3p1+(-1))-6.*
     & f(i1+2*(0),j2+2*(0),i3p1+2*(-1))+4.*f(i1+3*(0),j2+3*(0),i3p1+3*
     & (-1))-f(i1+4*(0),j2+4*(0),i3p1+4*(-1)))
                        else if( mask(i1+  (0),i2+  (0),i3p1+  (-1))
     & .gt.0 .and. mask(i1+2*(0),i2+2*(0),i3p1+2*(-1)).gt.0 .and.mask(
     & i1+3*(0),i2+3*(0),i3p1+3*(-1)).gt.0 )then
                         gv(0,0,+1)=(3.*f(i1+(0),j2+(0),i3p1+(-1))-3.*
     & f(i1+2*(0),j2+2*(0),i3p1+2*(-1))+f(i1+3*(0),j2+3*(0),i3p1+3*(-
     & 1)))
                        else if( mask(i1+  (0),i2+  (0),i3p1+  (-1))
     & .gt.0 .and. mask(i1+2*(0),i2+2*(0),i3p1+2*(-1)).gt.0 )then
                         gv(0,0,+1)=(2.*f(i1+(0),j2+(0),i3p1+(-1))-f(
     & i1+2*(0),j2+2*(0),i3p1+2*(-1)))
                        else
                         gv(0,0,+1)=(f(i1+(0),j2+(0),i3p1+(-1)))
                        end if
                     else
                      fv( 0, 0,+1) = f(i1,i2,i3p1)
                      gv( 0, 0,+1) = f(i1,j2,i3p1)
                     end if
                     ! fft= FT(i1,i2,i3)
                     ! gt = FT(i1,j2,i3)
                     ! gtt=FTT(i1,j2,i3)
                     fft = ((fv(0,0,+1)-fv(0,0,-1))*d12(2))
                     gt  = ((gv(0,0,+1)-gv(0,0,-1))*d12(2))
                     gtt = ((gv(0,0,+1)-2.*gv(0,0,0)+gv(0,0,-1))*d22(2)
     & )
                     ! Evaluate g at neighbouring points so we can evaluate the cross derivative 
                      ! Add these checks -- comment out later
                      if( abs(i1m1-i1).gt.1 .or. abs(j2-j2).gt.1 .or. 
     & abs(i3m1-i3).gt.1 )then
                        stop 3338
                      end if
                      ! iv(0:2) = boundary point next to (i1m1,j2,i3m1)
                      iv(0)=i1m1
                      iv(1)=i2
                      iv(2)=i3m1
                      ! dv(0:2) : extrapolate in direction dv (if dv[a]=0 a=0,1,2 then there is no extrapolation)
                      dv(0)=0
                      dv(1)=0
                      dv(2)=0
                      if( iv(ax1).lt.mdim(0,ax1) )then
                       dv(ax1)=1
                      else if( iv(ax1).gt.mdim(1,ax1) )then
                       dv(ax1)=-1
                      end if
                      if( iv(ax2).lt.mdim(0,ax2) )then
                        dv(ax2)=1
                      else if( iv(ax2).gt.mdim(1,ax2) )then
                        dv(ax2)=-1
                      end if
                      if( mask(iv(0)+dv(0),iv(1)+dv(1),iv(2)+dv(2))
     & .le.0 )then
                        ! The neighbouring pt kv or the point we start the extrapolation from is not valid
                        ! Find a direction to extrapolate in: The target point must be valid so start the 
                        ! extrpolation in that direction.
                        dv(0)=i1-i1m1
                        dv(1)=j2-j2
                        dv(2)=i3-i3m1
                      end if
                      if( dv(0).eq.0 .and. dv(1).eq.0. .and. dv(2)
     & .eq.0 )then
                        ! We can use the value from the adjacent point:
                        gv(i1m1-i1,j2-j2,i3m1-i3)=f(i1m1,j2,i3m1)
                      else if( mask(iv(0)+  dv(0),iv(1)+  dv(1),iv(2)+ 
     &  dv(2)).gt.0 .and. mask(iv(0)+2*dv(0),iv(1)+2*dv(1),iv(2)+2*dv(
     & 2)).gt.0 .and. mask(iv(0)+3*dv(0),iv(1)+3*dv(1),iv(2)+3*dv(2))
     & .gt.0 .and. mask(iv(0)+4*dv(0),iv(1)+4*dv(1),iv(2)+4*dv(2))
     & .gt.0 )then
                        ! we can extrapolate with 4 points:
                        gv(i1m1-i1,j2-j2,i3m1-i3) = (4.*f(i1m1+(dv(0)),
     & j2+(dv(1)),i3m1+(dv(2)))-6.*f(i1m1+2*(dv(0)),j2+2*(dv(1)),i3m1+
     & 2*(dv(2)))+4.*f(i1m1+3*(dv(0)),j2+3*(dv(1)),i3m1+3*(dv(2)))-f(
     & i1m1+4*(dv(0)),j2+4*(dv(1)),i3m1+4*(dv(2))))
                      else if( mask(iv(0)+  dv(0),iv(1)+  dv(1),iv(2)+ 
     &  dv(2)).gt.0 .and. mask(iv(0)+2*dv(0),iv(1)+2*dv(1),iv(2)+2*dv(
     & 2)).gt.0 .and. mask(iv(0)+3*dv(0),iv(1)+3*dv(1),iv(2)+3*dv(2))
     & .gt.0 )then
                        ! we can extrapolate with 3 points:
                        gv(i1m1-i1,j2-j2,i3m1-i3) = (3.*f(i1m1+(dv(0)),
     & j2+(dv(1)),i3m1+(dv(2)))-3.*f(i1m1+2*(dv(0)),j2+2*(dv(1)),i3m1+
     & 2*(dv(2)))+f(i1m1+3*(dv(0)),j2+3*(dv(1)),i3m1+3*(dv(2))))
                      else if( mask(iv(0)+  dv(0),iv(1)+  dv(1),iv(2)+ 
     &  dv(2)).gt.0 .and. mask(iv(0)+2*dv(0),iv(1)+2*dv(1),iv(2)+2*dv(
     & 2)).gt.0 )then
                        ! we can extrapolate with 2 points: 
                        gv(i1m1-i1,j2-j2,i3m1-i3) = (2.*f(i1m1+(dv(0)),
     & j2+(dv(1)),i3m1+(dv(2)))-f(i1m1+2*(dv(0)),j2+2*(dv(1)),i3m1+2*(
     & dv(2))))
                      else
                        ! as a backup just use the value from the target point
                        gv(i1m1-i1,j2-j2,i3m1-i3)=f(i1,j2,i3)
                      end if
                      ! Add these checks -- comment out later
                      if( abs(i1p1-i1).gt.1 .or. abs(j2-j2).gt.1 .or. 
     & abs(i3m1-i3).gt.1 )then
                        stop 3338
                      end if
                      ! iv(0:2) = boundary point next to (i1p1,j2,i3m1)
                      iv(0)=i1p1
                      iv(1)=i2
                      iv(2)=i3m1
                      ! dv(0:2) : extrapolate in direction dv (if dv[a]=0 a=0,1,2 then there is no extrapolation)
                      dv(0)=0
                      dv(1)=0
                      dv(2)=0
                      if( iv(ax1).lt.mdim(0,ax1) )then
                       dv(ax1)=1
                      else if( iv(ax1).gt.mdim(1,ax1) )then
                       dv(ax1)=-1
                      end if
                      if( iv(ax2).lt.mdim(0,ax2) )then
                        dv(ax2)=1
                      else if( iv(ax2).gt.mdim(1,ax2) )then
                        dv(ax2)=-1
                      end if
                      if( mask(iv(0)+dv(0),iv(1)+dv(1),iv(2)+dv(2))
     & .le.0 )then
                        ! The neighbouring pt kv or the point we start the extrapolation from is not valid
                        ! Find a direction to extrapolate in: The target point must be valid so start the 
                        ! extrpolation in that direction.
                        dv(0)=i1-i1p1
                        dv(1)=j2-j2
                        dv(2)=i3-i3m1
                      end if
                      if( dv(0).eq.0 .and. dv(1).eq.0. .and. dv(2)
     & .eq.0 )then
                        ! We can use the value from the adjacent point:
                        gv(i1p1-i1,j2-j2,i3m1-i3)=f(i1p1,j2,i3m1)
                      else if( mask(iv(0)+  dv(0),iv(1)+  dv(1),iv(2)+ 
     &  dv(2)).gt.0 .and. mask(iv(0)+2*dv(0),iv(1)+2*dv(1),iv(2)+2*dv(
     & 2)).gt.0 .and. mask(iv(0)+3*dv(0),iv(1)+3*dv(1),iv(2)+3*dv(2))
     & .gt.0 .and. mask(iv(0)+4*dv(0),iv(1)+4*dv(1),iv(2)+4*dv(2))
     & .gt.0 )then
                        ! we can extrapolate with 4 points:
                        gv(i1p1-i1,j2-j2,i3m1-i3) = (4.*f(i1p1+(dv(0)),
     & j2+(dv(1)),i3m1+(dv(2)))-6.*f(i1p1+2*(dv(0)),j2+2*(dv(1)),i3m1+
     & 2*(dv(2)))+4.*f(i1p1+3*(dv(0)),j2+3*(dv(1)),i3m1+3*(dv(2)))-f(
     & i1p1+4*(dv(0)),j2+4*(dv(1)),i3m1+4*(dv(2))))
                      else if( mask(iv(0)+  dv(0),iv(1)+  dv(1),iv(2)+ 
     &  dv(2)).gt.0 .and. mask(iv(0)+2*dv(0),iv(1)+2*dv(1),iv(2)+2*dv(
     & 2)).gt.0 .and. mask(iv(0)+3*dv(0),iv(1)+3*dv(1),iv(2)+3*dv(2))
     & .gt.0 )then
                        ! we can extrapolate with 3 points:
                        gv(i1p1-i1,j2-j2,i3m1-i3) = (3.*f(i1p1+(dv(0)),
     & j2+(dv(1)),i3m1+(dv(2)))-3.*f(i1p1+2*(dv(0)),j2+2*(dv(1)),i3m1+
     & 2*(dv(2)))+f(i1p1+3*(dv(0)),j2+3*(dv(1)),i3m1+3*(dv(2))))
                      else if( mask(iv(0)+  dv(0),iv(1)+  dv(1),iv(2)+ 
     &  dv(2)).gt.0 .and. mask(iv(0)+2*dv(0),iv(1)+2*dv(1),iv(2)+2*dv(
     & 2)).gt.0 )then
                        ! we can extrapolate with 2 points: 
                        gv(i1p1-i1,j2-j2,i3m1-i3) = (2.*f(i1p1+(dv(0)),
     & j2+(dv(1)),i3m1+(dv(2)))-f(i1p1+2*(dv(0)),j2+2*(dv(1)),i3m1+2*(
     & dv(2))))
                      else
                        ! as a backup just use the value from the target point
                        gv(i1p1-i1,j2-j2,i3m1-i3)=f(i1,j2,i3)
                      end if
                      ! Add these checks -- comment out later
                      if( abs(i1m1-i1).gt.1 .or. abs(j2-j2).gt.1 .or. 
     & abs(i3p1-i3).gt.1 )then
                        stop 3338
                      end if
                      ! iv(0:2) = boundary point next to (i1m1,j2,i3p1)
                      iv(0)=i1m1
                      iv(1)=i2
                      iv(2)=i3p1
                      ! dv(0:2) : extrapolate in direction dv (if dv[a]=0 a=0,1,2 then there is no extrapolation)
                      dv(0)=0
                      dv(1)=0
                      dv(2)=0
                      if( iv(ax1).lt.mdim(0,ax1) )then
                       dv(ax1)=1
                      else if( iv(ax1).gt.mdim(1,ax1) )then
                       dv(ax1)=-1
                      end if
                      if( iv(ax2).lt.mdim(0,ax2) )then
                        dv(ax2)=1
                      else if( iv(ax2).gt.mdim(1,ax2) )then
                        dv(ax2)=-1
                      end if
                      if( mask(iv(0)+dv(0),iv(1)+dv(1),iv(2)+dv(2))
     & .le.0 )then
                        ! The neighbouring pt kv or the point we start the extrapolation from is not valid
                        ! Find a direction to extrapolate in: The target point must be valid so start the 
                        ! extrpolation in that direction.
                        dv(0)=i1-i1m1
                        dv(1)=j2-j2
                        dv(2)=i3-i3p1
                      end if
                      if( dv(0).eq.0 .and. dv(1).eq.0. .and. dv(2)
     & .eq.0 )then
                        ! We can use the value from the adjacent point:
                        gv(i1m1-i1,j2-j2,i3p1-i3)=f(i1m1,j2,i3p1)
                      else if( mask(iv(0)+  dv(0),iv(1)+  dv(1),iv(2)+ 
     &  dv(2)).gt.0 .and. mask(iv(0)+2*dv(0),iv(1)+2*dv(1),iv(2)+2*dv(
     & 2)).gt.0 .and. mask(iv(0)+3*dv(0),iv(1)+3*dv(1),iv(2)+3*dv(2))
     & .gt.0 .and. mask(iv(0)+4*dv(0),iv(1)+4*dv(1),iv(2)+4*dv(2))
     & .gt.0 )then
                        ! we can extrapolate with 4 points:
                        gv(i1m1-i1,j2-j2,i3p1-i3) = (4.*f(i1m1+(dv(0)),
     & j2+(dv(1)),i3p1+(dv(2)))-6.*f(i1m1+2*(dv(0)),j2+2*(dv(1)),i3p1+
     & 2*(dv(2)))+4.*f(i1m1+3*(dv(0)),j2+3*(dv(1)),i3p1+3*(dv(2)))-f(
     & i1m1+4*(dv(0)),j2+4*(dv(1)),i3p1+4*(dv(2))))
                      else if( mask(iv(0)+  dv(0),iv(1)+  dv(1),iv(2)+ 
     &  dv(2)).gt.0 .and. mask(iv(0)+2*dv(0),iv(1)+2*dv(1),iv(2)+2*dv(
     & 2)).gt.0 .and. mask(iv(0)+3*dv(0),iv(1)+3*dv(1),iv(2)+3*dv(2))
     & .gt.0 )then
                        ! we can extrapolate with 3 points:
                        gv(i1m1-i1,j2-j2,i3p1-i3) = (3.*f(i1m1+(dv(0)),
     & j2+(dv(1)),i3p1+(dv(2)))-3.*f(i1m1+2*(dv(0)),j2+2*(dv(1)),i3p1+
     & 2*(dv(2)))+f(i1m1+3*(dv(0)),j2+3*(dv(1)),i3p1+3*(dv(2))))
                      else if( mask(iv(0)+  dv(0),iv(1)+  dv(1),iv(2)+ 
     &  dv(2)).gt.0 .and. mask(iv(0)+2*dv(0),iv(1)+2*dv(1),iv(2)+2*dv(
     & 2)).gt.0 )then
                        ! we can extrapolate with 2 points: 
                        gv(i1m1-i1,j2-j2,i3p1-i3) = (2.*f(i1m1+(dv(0)),
     & j2+(dv(1)),i3p1+(dv(2)))-f(i1m1+2*(dv(0)),j2+2*(dv(1)),i3p1+2*(
     & dv(2))))
                      else
                        ! as a backup just use the value from the target point
                        gv(i1m1-i1,j2-j2,i3p1-i3)=f(i1,j2,i3)
                      end if
                      ! Add these checks -- comment out later
                      if( abs(i1p1-i1).gt.1 .or. abs(j2-j2).gt.1 .or. 
     & abs(i3p1-i3).gt.1 )then
                        stop 3338
                      end if
                      ! iv(0:2) = boundary point next to (i1p1,j2,i3p1)
                      iv(0)=i1p1
                      iv(1)=i2
                      iv(2)=i3p1
                      ! dv(0:2) : extrapolate in direction dv (if dv[a]=0 a=0,1,2 then there is no extrapolation)
                      dv(0)=0
                      dv(1)=0
                      dv(2)=0
                      if( iv(ax1).lt.mdim(0,ax1) )then
                       dv(ax1)=1
                      else if( iv(ax1).gt.mdim(1,ax1) )then
                       dv(ax1)=-1
                      end if
                      if( iv(ax2).lt.mdim(0,ax2) )then
                        dv(ax2)=1
                      else if( iv(ax2).gt.mdim(1,ax2) )then
                        dv(ax2)=-1
                      end if
                      if( mask(iv(0)+dv(0),iv(1)+dv(1),iv(2)+dv(2))
     & .le.0 )then
                        ! The neighbouring pt kv or the point we start the extrapolation from is not valid
                        ! Find a direction to extrapolate in: The target point must be valid so start the 
                        ! extrpolation in that direction.
                        dv(0)=i1-i1p1
                        dv(1)=j2-j2
                        dv(2)=i3-i3p1
                      end if
                      if( dv(0).eq.0 .and. dv(1).eq.0. .and. dv(2)
     & .eq.0 )then
                        ! We can use the value from the adjacent point:
                        gv(i1p1-i1,j2-j2,i3p1-i3)=f(i1p1,j2,i3p1)
                      else if( mask(iv(0)+  dv(0),iv(1)+  dv(1),iv(2)+ 
     &  dv(2)).gt.0 .and. mask(iv(0)+2*dv(0),iv(1)+2*dv(1),iv(2)+2*dv(
     & 2)).gt.0 .and. mask(iv(0)+3*dv(0),iv(1)+3*dv(1),iv(2)+3*dv(2))
     & .gt.0 .and. mask(iv(0)+4*dv(0),iv(1)+4*dv(1),iv(2)+4*dv(2))
     & .gt.0 )then
                        ! we can extrapolate with 4 points:
                        gv(i1p1-i1,j2-j2,i3p1-i3) = (4.*f(i1p1+(dv(0)),
     & j2+(dv(1)),i3p1+(dv(2)))-6.*f(i1p1+2*(dv(0)),j2+2*(dv(1)),i3p1+
     & 2*(dv(2)))+4.*f(i1p1+3*(dv(0)),j2+3*(dv(1)),i3p1+3*(dv(2)))-f(
     & i1p1+4*(dv(0)),j2+4*(dv(1)),i3p1+4*(dv(2))))
                      else if( mask(iv(0)+  dv(0),iv(1)+  dv(1),iv(2)+ 
     &  dv(2)).gt.0 .and. mask(iv(0)+2*dv(0),iv(1)+2*dv(1),iv(2)+2*dv(
     & 2)).gt.0 .and. mask(iv(0)+3*dv(0),iv(1)+3*dv(1),iv(2)+3*dv(2))
     & .gt.0 )then
                        ! we can extrapolate with 3 points:
                        gv(i1p1-i1,j2-j2,i3p1-i3) = (3.*f(i1p1+(dv(0)),
     & j2+(dv(1)),i3p1+(dv(2)))-3.*f(i1p1+2*(dv(0)),j2+2*(dv(1)),i3p1+
     & 2*(dv(2)))+f(i1p1+3*(dv(0)),j2+3*(dv(1)),i3p1+3*(dv(2))))
                      else if( mask(iv(0)+  dv(0),iv(1)+  dv(1),iv(2)+ 
     &  dv(2)).gt.0 .and. mask(iv(0)+2*dv(0),iv(1)+2*dv(1),iv(2)+2*dv(
     & 2)).gt.0 )then
                        ! we can extrapolate with 2 points: 
                        gv(i1p1-i1,j2-j2,i3p1-i3) = (2.*f(i1p1+(dv(0)),
     & j2+(dv(1)),i3p1+(dv(2)))-f(i1p1+2*(dv(0)),j2+2*(dv(1)),i3p1+2*(
     & dv(2))))
                      else
                        ! as a backup just use the value from the target point
                        gv(i1p1-i1,j2-j2,i3p1-i3)=f(i1,j2,i3)
                      end if
                     grt = (((gv(+1,0,+1)-gv(+1,0,-1))-(gv(-1,0,+1)-gv(
     & -1,0,-1)))*d12(0)*d12(2))
                 ! ---- 3D ----
                ! We need 2 parameteric and 1 real derivative. Do this for now: 
                 ! this next call will define the jacobian and its derivatives (parameteric and spatial)
                 ajrx = rsxy(i1,i2,i3,0,0)
                 ajrxr = (rsxy(i1-2,i2,i3,0,0)-8.*rsxy(i1-1,i2,i3,0,0)+
     & 8.*rsxy(i1+1,i2,i3,0,0)-rsxy(i1+2,i2,i3,0,0))/(12.*dr(0))
                 ajrxs = (rsxy(i1,i2-2,i3,0,0)-8.*rsxy(i1,i2-1,i3,0,0)+
     & 8.*rsxy(i1,i2+1,i3,0,0)-rsxy(i1,i2+2,i3,0,0))/(12.*dr(1))
                 ajrxt = (rsxy(i1,i2,i3-2,0,0)-8.*rsxy(i1,i2,i3-1,0,0)+
     & 8.*rsxy(i1,i2,i3+1,0,0)-rsxy(i1,i2,i3+2,0,0))/(12.*dr(2))
                 ajrxrr = (-rsxy(i1-2,i2,i3,0,0)+16.*rsxy(i1-1,i2,i3,0,
     & 0)-30.*rsxy(i1,i2,i3,0,0)+16.*rsxy(i1+1,i2,i3,0,0)-rsxy(i1+2,
     & i2,i3,0,0))/(12.*dr(0)**2)
                 ajrxrs = ((rsxy(i1-2,i2-2,i3,0,0)-8.*rsxy(i1-2,i2-1,
     & i3,0,0)+8.*rsxy(i1-2,i2+1,i3,0,0)-rsxy(i1-2,i2+2,i3,0,0))/(12.*
     & dr(1))-8.*(rsxy(i1-1,i2-2,i3,0,0)-8.*rsxy(i1-1,i2-1,i3,0,0)+8.*
     & rsxy(i1-1,i2+1,i3,0,0)-rsxy(i1-1,i2+2,i3,0,0))/(12.*dr(1))+8.*(
     & rsxy(i1+1,i2-2,i3,0,0)-8.*rsxy(i1+1,i2-1,i3,0,0)+8.*rsxy(i1+1,
     & i2+1,i3,0,0)-rsxy(i1+1,i2+2,i3,0,0))/(12.*dr(1))-(rsxy(i1+2,i2-
     & 2,i3,0,0)-8.*rsxy(i1+2,i2-1,i3,0,0)+8.*rsxy(i1+2,i2+1,i3,0,0)-
     & rsxy(i1+2,i2+2,i3,0,0))/(12.*dr(1)))/(12.*dr(0))
                 ajrxss = (-rsxy(i1,i2-2,i3,0,0)+16.*rsxy(i1,i2-1,i3,0,
     & 0)-30.*rsxy(i1,i2,i3,0,0)+16.*rsxy(i1,i2+1,i3,0,0)-rsxy(i1,i2+
     & 2,i3,0,0))/(12.*dr(1)**2)
                 ajrxrt = ((rsxy(i1-2,i2,i3-2,0,0)-8.*rsxy(i1-2,i2,i3-
     & 1,0,0)+8.*rsxy(i1-2,i2,i3+1,0,0)-rsxy(i1-2,i2,i3+2,0,0))/(12.*
     & dr(2))-8.*(rsxy(i1-1,i2,i3-2,0,0)-8.*rsxy(i1-1,i2,i3-1,0,0)+8.*
     & rsxy(i1-1,i2,i3+1,0,0)-rsxy(i1-1,i2,i3+2,0,0))/(12.*dr(2))+8.*(
     & rsxy(i1+1,i2,i3-2,0,0)-8.*rsxy(i1+1,i2,i3-1,0,0)+8.*rsxy(i1+1,
     & i2,i3+1,0,0)-rsxy(i1+1,i2,i3+2,0,0))/(12.*dr(2))-(rsxy(i1+2,i2,
     & i3-2,0,0)-8.*rsxy(i1+2,i2,i3-1,0,0)+8.*rsxy(i1+2,i2,i3+1,0,0)-
     & rsxy(i1+2,i2,i3+2,0,0))/(12.*dr(2)))/(12.*dr(0))
                 ajrxst = ((rsxy(i1,i2-2,i3-2,0,0)-8.*rsxy(i1,i2-2,i3-
     & 1,0,0)+8.*rsxy(i1,i2-2,i3+1,0,0)-rsxy(i1,i2-2,i3+2,0,0))/(12.*
     & dr(2))-8.*(rsxy(i1,i2-1,i3-2,0,0)-8.*rsxy(i1,i2-1,i3-1,0,0)+8.*
     & rsxy(i1,i2-1,i3+1,0,0)-rsxy(i1,i2-1,i3+2,0,0))/(12.*dr(2))+8.*(
     & rsxy(i1,i2+1,i3-2,0,0)-8.*rsxy(i1,i2+1,i3-1,0,0)+8.*rsxy(i1,i2+
     & 1,i3+1,0,0)-rsxy(i1,i2+1,i3+2,0,0))/(12.*dr(2))-(rsxy(i1,i2+2,
     & i3-2,0,0)-8.*rsxy(i1,i2+2,i3-1,0,0)+8.*rsxy(i1,i2+2,i3+1,0,0)-
     & rsxy(i1,i2+2,i3+2,0,0))/(12.*dr(2)))/(12.*dr(1))
                 ajrxtt = (-rsxy(i1,i2,i3-2,0,0)+16.*rsxy(i1,i2,i3-1,0,
     & 0)-30.*rsxy(i1,i2,i3,0,0)+16.*rsxy(i1,i2,i3+1,0,0)-rsxy(i1,i2,
     & i3+2,0,0))/(12.*dr(2)**2)
                 ajsx = rsxy(i1,i2,i3,1,0)
                 ajsxr = (rsxy(i1-2,i2,i3,1,0)-8.*rsxy(i1-1,i2,i3,1,0)+
     & 8.*rsxy(i1+1,i2,i3,1,0)-rsxy(i1+2,i2,i3,1,0))/(12.*dr(0))
                 ajsxs = (rsxy(i1,i2-2,i3,1,0)-8.*rsxy(i1,i2-1,i3,1,0)+
     & 8.*rsxy(i1,i2+1,i3,1,0)-rsxy(i1,i2+2,i3,1,0))/(12.*dr(1))
                 ajsxt = (rsxy(i1,i2,i3-2,1,0)-8.*rsxy(i1,i2,i3-1,1,0)+
     & 8.*rsxy(i1,i2,i3+1,1,0)-rsxy(i1,i2,i3+2,1,0))/(12.*dr(2))
                 ajsxrr = (-rsxy(i1-2,i2,i3,1,0)+16.*rsxy(i1-1,i2,i3,1,
     & 0)-30.*rsxy(i1,i2,i3,1,0)+16.*rsxy(i1+1,i2,i3,1,0)-rsxy(i1+2,
     & i2,i3,1,0))/(12.*dr(0)**2)
                 ajsxrs = ((rsxy(i1-2,i2-2,i3,1,0)-8.*rsxy(i1-2,i2-1,
     & i3,1,0)+8.*rsxy(i1-2,i2+1,i3,1,0)-rsxy(i1-2,i2+2,i3,1,0))/(12.*
     & dr(1))-8.*(rsxy(i1-1,i2-2,i3,1,0)-8.*rsxy(i1-1,i2-1,i3,1,0)+8.*
     & rsxy(i1-1,i2+1,i3,1,0)-rsxy(i1-1,i2+2,i3,1,0))/(12.*dr(1))+8.*(
     & rsxy(i1+1,i2-2,i3,1,0)-8.*rsxy(i1+1,i2-1,i3,1,0)+8.*rsxy(i1+1,
     & i2+1,i3,1,0)-rsxy(i1+1,i2+2,i3,1,0))/(12.*dr(1))-(rsxy(i1+2,i2-
     & 2,i3,1,0)-8.*rsxy(i1+2,i2-1,i3,1,0)+8.*rsxy(i1+2,i2+1,i3,1,0)-
     & rsxy(i1+2,i2+2,i3,1,0))/(12.*dr(1)))/(12.*dr(0))
                 ajsxss = (-rsxy(i1,i2-2,i3,1,0)+16.*rsxy(i1,i2-1,i3,1,
     & 0)-30.*rsxy(i1,i2,i3,1,0)+16.*rsxy(i1,i2+1,i3,1,0)-rsxy(i1,i2+
     & 2,i3,1,0))/(12.*dr(1)**2)
                 ajsxrt = ((rsxy(i1-2,i2,i3-2,1,0)-8.*rsxy(i1-2,i2,i3-
     & 1,1,0)+8.*rsxy(i1-2,i2,i3+1,1,0)-rsxy(i1-2,i2,i3+2,1,0))/(12.*
     & dr(2))-8.*(rsxy(i1-1,i2,i3-2,1,0)-8.*rsxy(i1-1,i2,i3-1,1,0)+8.*
     & rsxy(i1-1,i2,i3+1,1,0)-rsxy(i1-1,i2,i3+2,1,0))/(12.*dr(2))+8.*(
     & rsxy(i1+1,i2,i3-2,1,0)-8.*rsxy(i1+1,i2,i3-1,1,0)+8.*rsxy(i1+1,
     & i2,i3+1,1,0)-rsxy(i1+1,i2,i3+2,1,0))/(12.*dr(2))-(rsxy(i1+2,i2,
     & i3-2,1,0)-8.*rsxy(i1+2,i2,i3-1,1,0)+8.*rsxy(i1+2,i2,i3+1,1,0)-
     & rsxy(i1+2,i2,i3+2,1,0))/(12.*dr(2)))/(12.*dr(0))
                 ajsxst = ((rsxy(i1,i2-2,i3-2,1,0)-8.*rsxy(i1,i2-2,i3-
     & 1,1,0)+8.*rsxy(i1,i2-2,i3+1,1,0)-rsxy(i1,i2-2,i3+2,1,0))/(12.*
     & dr(2))-8.*(rsxy(i1,i2-1,i3-2,1,0)-8.*rsxy(i1,i2-1,i3-1,1,0)+8.*
     & rsxy(i1,i2-1,i3+1,1,0)-rsxy(i1,i2-1,i3+2,1,0))/(12.*dr(2))+8.*(
     & rsxy(i1,i2+1,i3-2,1,0)-8.*rsxy(i1,i2+1,i3-1,1,0)+8.*rsxy(i1,i2+
     & 1,i3+1,1,0)-rsxy(i1,i2+1,i3+2,1,0))/(12.*dr(2))-(rsxy(i1,i2+2,
     & i3-2,1,0)-8.*rsxy(i1,i2+2,i3-1,1,0)+8.*rsxy(i1,i2+2,i3+1,1,0)-
     & rsxy(i1,i2+2,i3+2,1,0))/(12.*dr(2)))/(12.*dr(1))
                 ajsxtt = (-rsxy(i1,i2,i3-2,1,0)+16.*rsxy(i1,i2,i3-1,1,
     & 0)-30.*rsxy(i1,i2,i3,1,0)+16.*rsxy(i1,i2,i3+1,1,0)-rsxy(i1,i2,
     & i3+2,1,0))/(12.*dr(2)**2)
                 ajtx = rsxy(i1,i2,i3,2,0)
                 ajtxr = (rsxy(i1-2,i2,i3,2,0)-8.*rsxy(i1-1,i2,i3,2,0)+
     & 8.*rsxy(i1+1,i2,i3,2,0)-rsxy(i1+2,i2,i3,2,0))/(12.*dr(0))
                 ajtxs = (rsxy(i1,i2-2,i3,2,0)-8.*rsxy(i1,i2-1,i3,2,0)+
     & 8.*rsxy(i1,i2+1,i3,2,0)-rsxy(i1,i2+2,i3,2,0))/(12.*dr(1))
                 ajtxt = (rsxy(i1,i2,i3-2,2,0)-8.*rsxy(i1,i2,i3-1,2,0)+
     & 8.*rsxy(i1,i2,i3+1,2,0)-rsxy(i1,i2,i3+2,2,0))/(12.*dr(2))
                 ajtxrr = (-rsxy(i1-2,i2,i3,2,0)+16.*rsxy(i1-1,i2,i3,2,
     & 0)-30.*rsxy(i1,i2,i3,2,0)+16.*rsxy(i1+1,i2,i3,2,0)-rsxy(i1+2,
     & i2,i3,2,0))/(12.*dr(0)**2)
                 ajtxrs = ((rsxy(i1-2,i2-2,i3,2,0)-8.*rsxy(i1-2,i2-1,
     & i3,2,0)+8.*rsxy(i1-2,i2+1,i3,2,0)-rsxy(i1-2,i2+2,i3,2,0))/(12.*
     & dr(1))-8.*(rsxy(i1-1,i2-2,i3,2,0)-8.*rsxy(i1-1,i2-1,i3,2,0)+8.*
     & rsxy(i1-1,i2+1,i3,2,0)-rsxy(i1-1,i2+2,i3,2,0))/(12.*dr(1))+8.*(
     & rsxy(i1+1,i2-2,i3,2,0)-8.*rsxy(i1+1,i2-1,i3,2,0)+8.*rsxy(i1+1,
     & i2+1,i3,2,0)-rsxy(i1+1,i2+2,i3,2,0))/(12.*dr(1))-(rsxy(i1+2,i2-
     & 2,i3,2,0)-8.*rsxy(i1+2,i2-1,i3,2,0)+8.*rsxy(i1+2,i2+1,i3,2,0)-
     & rsxy(i1+2,i2+2,i3,2,0))/(12.*dr(1)))/(12.*dr(0))
                 ajtxss = (-rsxy(i1,i2-2,i3,2,0)+16.*rsxy(i1,i2-1,i3,2,
     & 0)-30.*rsxy(i1,i2,i3,2,0)+16.*rsxy(i1,i2+1,i3,2,0)-rsxy(i1,i2+
     & 2,i3,2,0))/(12.*dr(1)**2)
                 ajtxrt = ((rsxy(i1-2,i2,i3-2,2,0)-8.*rsxy(i1-2,i2,i3-
     & 1,2,0)+8.*rsxy(i1-2,i2,i3+1,2,0)-rsxy(i1-2,i2,i3+2,2,0))/(12.*
     & dr(2))-8.*(rsxy(i1-1,i2,i3-2,2,0)-8.*rsxy(i1-1,i2,i3-1,2,0)+8.*
     & rsxy(i1-1,i2,i3+1,2,0)-rsxy(i1-1,i2,i3+2,2,0))/(12.*dr(2))+8.*(
     & rsxy(i1+1,i2,i3-2,2,0)-8.*rsxy(i1+1,i2,i3-1,2,0)+8.*rsxy(i1+1,
     & i2,i3+1,2,0)-rsxy(i1+1,i2,i3+2,2,0))/(12.*dr(2))-(rsxy(i1+2,i2,
     & i3-2,2,0)-8.*rsxy(i1+2,i2,i3-1,2,0)+8.*rsxy(i1+2,i2,i3+1,2,0)-
     & rsxy(i1+2,i2,i3+2,2,0))/(12.*dr(2)))/(12.*dr(0))
                 ajtxst = ((rsxy(i1,i2-2,i3-2,2,0)-8.*rsxy(i1,i2-2,i3-
     & 1,2,0)+8.*rsxy(i1,i2-2,i3+1,2,0)-rsxy(i1,i2-2,i3+2,2,0))/(12.*
     & dr(2))-8.*(rsxy(i1,i2-1,i3-2,2,0)-8.*rsxy(i1,i2-1,i3-1,2,0)+8.*
     & rsxy(i1,i2-1,i3+1,2,0)-rsxy(i1,i2-1,i3+2,2,0))/(12.*dr(2))+8.*(
     & rsxy(i1,i2+1,i3-2,2,0)-8.*rsxy(i1,i2+1,i3-1,2,0)+8.*rsxy(i1,i2+
     & 1,i3+1,2,0)-rsxy(i1,i2+1,i3+2,2,0))/(12.*dr(2))-(rsxy(i1,i2+2,
     & i3-2,2,0)-8.*rsxy(i1,i2+2,i3-1,2,0)+8.*rsxy(i1,i2+2,i3+1,2,0)-
     & rsxy(i1,i2+2,i3+2,2,0))/(12.*dr(2)))/(12.*dr(1))
                 ajtxtt = (-rsxy(i1,i2,i3-2,2,0)+16.*rsxy(i1,i2,i3-1,2,
     & 0)-30.*rsxy(i1,i2,i3,2,0)+16.*rsxy(i1,i2,i3+1,2,0)-rsxy(i1,i2,
     & i3+2,2,0))/(12.*dr(2)**2)
                 ajry = rsxy(i1,i2,i3,0,1)
                 ajryr = (rsxy(i1-2,i2,i3,0,1)-8.*rsxy(i1-1,i2,i3,0,1)+
     & 8.*rsxy(i1+1,i2,i3,0,1)-rsxy(i1+2,i2,i3,0,1))/(12.*dr(0))
                 ajrys = (rsxy(i1,i2-2,i3,0,1)-8.*rsxy(i1,i2-1,i3,0,1)+
     & 8.*rsxy(i1,i2+1,i3,0,1)-rsxy(i1,i2+2,i3,0,1))/(12.*dr(1))
                 ajryt = (rsxy(i1,i2,i3-2,0,1)-8.*rsxy(i1,i2,i3-1,0,1)+
     & 8.*rsxy(i1,i2,i3+1,0,1)-rsxy(i1,i2,i3+2,0,1))/(12.*dr(2))
                 ajryrr = (-rsxy(i1-2,i2,i3,0,1)+16.*rsxy(i1-1,i2,i3,0,
     & 1)-30.*rsxy(i1,i2,i3,0,1)+16.*rsxy(i1+1,i2,i3,0,1)-rsxy(i1+2,
     & i2,i3,0,1))/(12.*dr(0)**2)
                 ajryrs = ((rsxy(i1-2,i2-2,i3,0,1)-8.*rsxy(i1-2,i2-1,
     & i3,0,1)+8.*rsxy(i1-2,i2+1,i3,0,1)-rsxy(i1-2,i2+2,i3,0,1))/(12.*
     & dr(1))-8.*(rsxy(i1-1,i2-2,i3,0,1)-8.*rsxy(i1-1,i2-1,i3,0,1)+8.*
     & rsxy(i1-1,i2+1,i3,0,1)-rsxy(i1-1,i2+2,i3,0,1))/(12.*dr(1))+8.*(
     & rsxy(i1+1,i2-2,i3,0,1)-8.*rsxy(i1+1,i2-1,i3,0,1)+8.*rsxy(i1+1,
     & i2+1,i3,0,1)-rsxy(i1+1,i2+2,i3,0,1))/(12.*dr(1))-(rsxy(i1+2,i2-
     & 2,i3,0,1)-8.*rsxy(i1+2,i2-1,i3,0,1)+8.*rsxy(i1+2,i2+1,i3,0,1)-
     & rsxy(i1+2,i2+2,i3,0,1))/(12.*dr(1)))/(12.*dr(0))
                 ajryss = (-rsxy(i1,i2-2,i3,0,1)+16.*rsxy(i1,i2-1,i3,0,
     & 1)-30.*rsxy(i1,i2,i3,0,1)+16.*rsxy(i1,i2+1,i3,0,1)-rsxy(i1,i2+
     & 2,i3,0,1))/(12.*dr(1)**2)
                 ajryrt = ((rsxy(i1-2,i2,i3-2,0,1)-8.*rsxy(i1-2,i2,i3-
     & 1,0,1)+8.*rsxy(i1-2,i2,i3+1,0,1)-rsxy(i1-2,i2,i3+2,0,1))/(12.*
     & dr(2))-8.*(rsxy(i1-1,i2,i3-2,0,1)-8.*rsxy(i1-1,i2,i3-1,0,1)+8.*
     & rsxy(i1-1,i2,i3+1,0,1)-rsxy(i1-1,i2,i3+2,0,1))/(12.*dr(2))+8.*(
     & rsxy(i1+1,i2,i3-2,0,1)-8.*rsxy(i1+1,i2,i3-1,0,1)+8.*rsxy(i1+1,
     & i2,i3+1,0,1)-rsxy(i1+1,i2,i3+2,0,1))/(12.*dr(2))-(rsxy(i1+2,i2,
     & i3-2,0,1)-8.*rsxy(i1+2,i2,i3-1,0,1)+8.*rsxy(i1+2,i2,i3+1,0,1)-
     & rsxy(i1+2,i2,i3+2,0,1))/(12.*dr(2)))/(12.*dr(0))
                 ajryst = ((rsxy(i1,i2-2,i3-2,0,1)-8.*rsxy(i1,i2-2,i3-
     & 1,0,1)+8.*rsxy(i1,i2-2,i3+1,0,1)-rsxy(i1,i2-2,i3+2,0,1))/(12.*
     & dr(2))-8.*(rsxy(i1,i2-1,i3-2,0,1)-8.*rsxy(i1,i2-1,i3-1,0,1)+8.*
     & rsxy(i1,i2-1,i3+1,0,1)-rsxy(i1,i2-1,i3+2,0,1))/(12.*dr(2))+8.*(
     & rsxy(i1,i2+1,i3-2,0,1)-8.*rsxy(i1,i2+1,i3-1,0,1)+8.*rsxy(i1,i2+
     & 1,i3+1,0,1)-rsxy(i1,i2+1,i3+2,0,1))/(12.*dr(2))-(rsxy(i1,i2+2,
     & i3-2,0,1)-8.*rsxy(i1,i2+2,i3-1,0,1)+8.*rsxy(i1,i2+2,i3+1,0,1)-
     & rsxy(i1,i2+2,i3+2,0,1))/(12.*dr(2)))/(12.*dr(1))
                 ajrytt = (-rsxy(i1,i2,i3-2,0,1)+16.*rsxy(i1,i2,i3-1,0,
     & 1)-30.*rsxy(i1,i2,i3,0,1)+16.*rsxy(i1,i2,i3+1,0,1)-rsxy(i1,i2,
     & i3+2,0,1))/(12.*dr(2)**2)
                 ajsy = rsxy(i1,i2,i3,1,1)
                 ajsyr = (rsxy(i1-2,i2,i3,1,1)-8.*rsxy(i1-1,i2,i3,1,1)+
     & 8.*rsxy(i1+1,i2,i3,1,1)-rsxy(i1+2,i2,i3,1,1))/(12.*dr(0))
                 ajsys = (rsxy(i1,i2-2,i3,1,1)-8.*rsxy(i1,i2-1,i3,1,1)+
     & 8.*rsxy(i1,i2+1,i3,1,1)-rsxy(i1,i2+2,i3,1,1))/(12.*dr(1))
                 ajsyt = (rsxy(i1,i2,i3-2,1,1)-8.*rsxy(i1,i2,i3-1,1,1)+
     & 8.*rsxy(i1,i2,i3+1,1,1)-rsxy(i1,i2,i3+2,1,1))/(12.*dr(2))
                 ajsyrr = (-rsxy(i1-2,i2,i3,1,1)+16.*rsxy(i1-1,i2,i3,1,
     & 1)-30.*rsxy(i1,i2,i3,1,1)+16.*rsxy(i1+1,i2,i3,1,1)-rsxy(i1+2,
     & i2,i3,1,1))/(12.*dr(0)**2)
                 ajsyrs = ((rsxy(i1-2,i2-2,i3,1,1)-8.*rsxy(i1-2,i2-1,
     & i3,1,1)+8.*rsxy(i1-2,i2+1,i3,1,1)-rsxy(i1-2,i2+2,i3,1,1))/(12.*
     & dr(1))-8.*(rsxy(i1-1,i2-2,i3,1,1)-8.*rsxy(i1-1,i2-1,i3,1,1)+8.*
     & rsxy(i1-1,i2+1,i3,1,1)-rsxy(i1-1,i2+2,i3,1,1))/(12.*dr(1))+8.*(
     & rsxy(i1+1,i2-2,i3,1,1)-8.*rsxy(i1+1,i2-1,i3,1,1)+8.*rsxy(i1+1,
     & i2+1,i3,1,1)-rsxy(i1+1,i2+2,i3,1,1))/(12.*dr(1))-(rsxy(i1+2,i2-
     & 2,i3,1,1)-8.*rsxy(i1+2,i2-1,i3,1,1)+8.*rsxy(i1+2,i2+1,i3,1,1)-
     & rsxy(i1+2,i2+2,i3,1,1))/(12.*dr(1)))/(12.*dr(0))
                 ajsyss = (-rsxy(i1,i2-2,i3,1,1)+16.*rsxy(i1,i2-1,i3,1,
     & 1)-30.*rsxy(i1,i2,i3,1,1)+16.*rsxy(i1,i2+1,i3,1,1)-rsxy(i1,i2+
     & 2,i3,1,1))/(12.*dr(1)**2)
                 ajsyrt = ((rsxy(i1-2,i2,i3-2,1,1)-8.*rsxy(i1-2,i2,i3-
     & 1,1,1)+8.*rsxy(i1-2,i2,i3+1,1,1)-rsxy(i1-2,i2,i3+2,1,1))/(12.*
     & dr(2))-8.*(rsxy(i1-1,i2,i3-2,1,1)-8.*rsxy(i1-1,i2,i3-1,1,1)+8.*
     & rsxy(i1-1,i2,i3+1,1,1)-rsxy(i1-1,i2,i3+2,1,1))/(12.*dr(2))+8.*(
     & rsxy(i1+1,i2,i3-2,1,1)-8.*rsxy(i1+1,i2,i3-1,1,1)+8.*rsxy(i1+1,
     & i2,i3+1,1,1)-rsxy(i1+1,i2,i3+2,1,1))/(12.*dr(2))-(rsxy(i1+2,i2,
     & i3-2,1,1)-8.*rsxy(i1+2,i2,i3-1,1,1)+8.*rsxy(i1+2,i2,i3+1,1,1)-
     & rsxy(i1+2,i2,i3+2,1,1))/(12.*dr(2)))/(12.*dr(0))
                 ajsyst = ((rsxy(i1,i2-2,i3-2,1,1)-8.*rsxy(i1,i2-2,i3-
     & 1,1,1)+8.*rsxy(i1,i2-2,i3+1,1,1)-rsxy(i1,i2-2,i3+2,1,1))/(12.*
     & dr(2))-8.*(rsxy(i1,i2-1,i3-2,1,1)-8.*rsxy(i1,i2-1,i3-1,1,1)+8.*
     & rsxy(i1,i2-1,i3+1,1,1)-rsxy(i1,i2-1,i3+2,1,1))/(12.*dr(2))+8.*(
     & rsxy(i1,i2+1,i3-2,1,1)-8.*rsxy(i1,i2+1,i3-1,1,1)+8.*rsxy(i1,i2+
     & 1,i3+1,1,1)-rsxy(i1,i2+1,i3+2,1,1))/(12.*dr(2))-(rsxy(i1,i2+2,
     & i3-2,1,1)-8.*rsxy(i1,i2+2,i3-1,1,1)+8.*rsxy(i1,i2+2,i3+1,1,1)-
     & rsxy(i1,i2+2,i3+2,1,1))/(12.*dr(2)))/(12.*dr(1))
                 ajsytt = (-rsxy(i1,i2,i3-2,1,1)+16.*rsxy(i1,i2,i3-1,1,
     & 1)-30.*rsxy(i1,i2,i3,1,1)+16.*rsxy(i1,i2,i3+1,1,1)-rsxy(i1,i2,
     & i3+2,1,1))/(12.*dr(2)**2)
                 ajty = rsxy(i1,i2,i3,2,1)
                 ajtyr = (rsxy(i1-2,i2,i3,2,1)-8.*rsxy(i1-1,i2,i3,2,1)+
     & 8.*rsxy(i1+1,i2,i3,2,1)-rsxy(i1+2,i2,i3,2,1))/(12.*dr(0))
                 ajtys = (rsxy(i1,i2-2,i3,2,1)-8.*rsxy(i1,i2-1,i3,2,1)+
     & 8.*rsxy(i1,i2+1,i3,2,1)-rsxy(i1,i2+2,i3,2,1))/(12.*dr(1))
                 ajtyt = (rsxy(i1,i2,i3-2,2,1)-8.*rsxy(i1,i2,i3-1,2,1)+
     & 8.*rsxy(i1,i2,i3+1,2,1)-rsxy(i1,i2,i3+2,2,1))/(12.*dr(2))
                 ajtyrr = (-rsxy(i1-2,i2,i3,2,1)+16.*rsxy(i1-1,i2,i3,2,
     & 1)-30.*rsxy(i1,i2,i3,2,1)+16.*rsxy(i1+1,i2,i3,2,1)-rsxy(i1+2,
     & i2,i3,2,1))/(12.*dr(0)**2)
                 ajtyrs = ((rsxy(i1-2,i2-2,i3,2,1)-8.*rsxy(i1-2,i2-1,
     & i3,2,1)+8.*rsxy(i1-2,i2+1,i3,2,1)-rsxy(i1-2,i2+2,i3,2,1))/(12.*
     & dr(1))-8.*(rsxy(i1-1,i2-2,i3,2,1)-8.*rsxy(i1-1,i2-1,i3,2,1)+8.*
     & rsxy(i1-1,i2+1,i3,2,1)-rsxy(i1-1,i2+2,i3,2,1))/(12.*dr(1))+8.*(
     & rsxy(i1+1,i2-2,i3,2,1)-8.*rsxy(i1+1,i2-1,i3,2,1)+8.*rsxy(i1+1,
     & i2+1,i3,2,1)-rsxy(i1+1,i2+2,i3,2,1))/(12.*dr(1))-(rsxy(i1+2,i2-
     & 2,i3,2,1)-8.*rsxy(i1+2,i2-1,i3,2,1)+8.*rsxy(i1+2,i2+1,i3,2,1)-
     & rsxy(i1+2,i2+2,i3,2,1))/(12.*dr(1)))/(12.*dr(0))
                 ajtyss = (-rsxy(i1,i2-2,i3,2,1)+16.*rsxy(i1,i2-1,i3,2,
     & 1)-30.*rsxy(i1,i2,i3,2,1)+16.*rsxy(i1,i2+1,i3,2,1)-rsxy(i1,i2+
     & 2,i3,2,1))/(12.*dr(1)**2)
                 ajtyrt = ((rsxy(i1-2,i2,i3-2,2,1)-8.*rsxy(i1-2,i2,i3-
     & 1,2,1)+8.*rsxy(i1-2,i2,i3+1,2,1)-rsxy(i1-2,i2,i3+2,2,1))/(12.*
     & dr(2))-8.*(rsxy(i1-1,i2,i3-2,2,1)-8.*rsxy(i1-1,i2,i3-1,2,1)+8.*
     & rsxy(i1-1,i2,i3+1,2,1)-rsxy(i1-1,i2,i3+2,2,1))/(12.*dr(2))+8.*(
     & rsxy(i1+1,i2,i3-2,2,1)-8.*rsxy(i1+1,i2,i3-1,2,1)+8.*rsxy(i1+1,
     & i2,i3+1,2,1)-rsxy(i1+1,i2,i3+2,2,1))/(12.*dr(2))-(rsxy(i1+2,i2,
     & i3-2,2,1)-8.*rsxy(i1+2,i2,i3-1,2,1)+8.*rsxy(i1+2,i2,i3+1,2,1)-
     & rsxy(i1+2,i2,i3+2,2,1))/(12.*dr(2)))/(12.*dr(0))
                 ajtyst = ((rsxy(i1,i2-2,i3-2,2,1)-8.*rsxy(i1,i2-2,i3-
     & 1,2,1)+8.*rsxy(i1,i2-2,i3+1,2,1)-rsxy(i1,i2-2,i3+2,2,1))/(12.*
     & dr(2))-8.*(rsxy(i1,i2-1,i3-2,2,1)-8.*rsxy(i1,i2-1,i3-1,2,1)+8.*
     & rsxy(i1,i2-1,i3+1,2,1)-rsxy(i1,i2-1,i3+2,2,1))/(12.*dr(2))+8.*(
     & rsxy(i1,i2+1,i3-2,2,1)-8.*rsxy(i1,i2+1,i3-1,2,1)+8.*rsxy(i1,i2+
     & 1,i3+1,2,1)-rsxy(i1,i2+1,i3+2,2,1))/(12.*dr(2))-(rsxy(i1,i2+2,
     & i3-2,2,1)-8.*rsxy(i1,i2+2,i3-1,2,1)+8.*rsxy(i1,i2+2,i3+1,2,1)-
     & rsxy(i1,i2+2,i3+2,2,1))/(12.*dr(2)))/(12.*dr(1))
                 ajtytt = (-rsxy(i1,i2,i3-2,2,1)+16.*rsxy(i1,i2,i3-1,2,
     & 1)-30.*rsxy(i1,i2,i3,2,1)+16.*rsxy(i1,i2,i3+1,2,1)-rsxy(i1,i2,
     & i3+2,2,1))/(12.*dr(2)**2)
                 ajrz = rsxy(i1,i2,i3,0,2)
                 ajrzr = (rsxy(i1-2,i2,i3,0,2)-8.*rsxy(i1-1,i2,i3,0,2)+
     & 8.*rsxy(i1+1,i2,i3,0,2)-rsxy(i1+2,i2,i3,0,2))/(12.*dr(0))
                 ajrzs = (rsxy(i1,i2-2,i3,0,2)-8.*rsxy(i1,i2-1,i3,0,2)+
     & 8.*rsxy(i1,i2+1,i3,0,2)-rsxy(i1,i2+2,i3,0,2))/(12.*dr(1))
                 ajrzt = (rsxy(i1,i2,i3-2,0,2)-8.*rsxy(i1,i2,i3-1,0,2)+
     & 8.*rsxy(i1,i2,i3+1,0,2)-rsxy(i1,i2,i3+2,0,2))/(12.*dr(2))
                 ajrzrr = (-rsxy(i1-2,i2,i3,0,2)+16.*rsxy(i1-1,i2,i3,0,
     & 2)-30.*rsxy(i1,i2,i3,0,2)+16.*rsxy(i1+1,i2,i3,0,2)-rsxy(i1+2,
     & i2,i3,0,2))/(12.*dr(0)**2)
                 ajrzrs = ((rsxy(i1-2,i2-2,i3,0,2)-8.*rsxy(i1-2,i2-1,
     & i3,0,2)+8.*rsxy(i1-2,i2+1,i3,0,2)-rsxy(i1-2,i2+2,i3,0,2))/(12.*
     & dr(1))-8.*(rsxy(i1-1,i2-2,i3,0,2)-8.*rsxy(i1-1,i2-1,i3,0,2)+8.*
     & rsxy(i1-1,i2+1,i3,0,2)-rsxy(i1-1,i2+2,i3,0,2))/(12.*dr(1))+8.*(
     & rsxy(i1+1,i2-2,i3,0,2)-8.*rsxy(i1+1,i2-1,i3,0,2)+8.*rsxy(i1+1,
     & i2+1,i3,0,2)-rsxy(i1+1,i2+2,i3,0,2))/(12.*dr(1))-(rsxy(i1+2,i2-
     & 2,i3,0,2)-8.*rsxy(i1+2,i2-1,i3,0,2)+8.*rsxy(i1+2,i2+1,i3,0,2)-
     & rsxy(i1+2,i2+2,i3,0,2))/(12.*dr(1)))/(12.*dr(0))
                 ajrzss = (-rsxy(i1,i2-2,i3,0,2)+16.*rsxy(i1,i2-1,i3,0,
     & 2)-30.*rsxy(i1,i2,i3,0,2)+16.*rsxy(i1,i2+1,i3,0,2)-rsxy(i1,i2+
     & 2,i3,0,2))/(12.*dr(1)**2)
                 ajrzrt = ((rsxy(i1-2,i2,i3-2,0,2)-8.*rsxy(i1-2,i2,i3-
     & 1,0,2)+8.*rsxy(i1-2,i2,i3+1,0,2)-rsxy(i1-2,i2,i3+2,0,2))/(12.*
     & dr(2))-8.*(rsxy(i1-1,i2,i3-2,0,2)-8.*rsxy(i1-1,i2,i3-1,0,2)+8.*
     & rsxy(i1-1,i2,i3+1,0,2)-rsxy(i1-1,i2,i3+2,0,2))/(12.*dr(2))+8.*(
     & rsxy(i1+1,i2,i3-2,0,2)-8.*rsxy(i1+1,i2,i3-1,0,2)+8.*rsxy(i1+1,
     & i2,i3+1,0,2)-rsxy(i1+1,i2,i3+2,0,2))/(12.*dr(2))-(rsxy(i1+2,i2,
     & i3-2,0,2)-8.*rsxy(i1+2,i2,i3-1,0,2)+8.*rsxy(i1+2,i2,i3+1,0,2)-
     & rsxy(i1+2,i2,i3+2,0,2))/(12.*dr(2)))/(12.*dr(0))
                 ajrzst = ((rsxy(i1,i2-2,i3-2,0,2)-8.*rsxy(i1,i2-2,i3-
     & 1,0,2)+8.*rsxy(i1,i2-2,i3+1,0,2)-rsxy(i1,i2-2,i3+2,0,2))/(12.*
     & dr(2))-8.*(rsxy(i1,i2-1,i3-2,0,2)-8.*rsxy(i1,i2-1,i3-1,0,2)+8.*
     & rsxy(i1,i2-1,i3+1,0,2)-rsxy(i1,i2-1,i3+2,0,2))/(12.*dr(2))+8.*(
     & rsxy(i1,i2+1,i3-2,0,2)-8.*rsxy(i1,i2+1,i3-1,0,2)+8.*rsxy(i1,i2+
     & 1,i3+1,0,2)-rsxy(i1,i2+1,i3+2,0,2))/(12.*dr(2))-(rsxy(i1,i2+2,
     & i3-2,0,2)-8.*rsxy(i1,i2+2,i3-1,0,2)+8.*rsxy(i1,i2+2,i3+1,0,2)-
     & rsxy(i1,i2+2,i3+2,0,2))/(12.*dr(2)))/(12.*dr(1))
                 ajrztt = (-rsxy(i1,i2,i3-2,0,2)+16.*rsxy(i1,i2,i3-1,0,
     & 2)-30.*rsxy(i1,i2,i3,0,2)+16.*rsxy(i1,i2,i3+1,0,2)-rsxy(i1,i2,
     & i3+2,0,2))/(12.*dr(2)**2)
                 ajsz = rsxy(i1,i2,i3,1,2)
                 ajszr = (rsxy(i1-2,i2,i3,1,2)-8.*rsxy(i1-1,i2,i3,1,2)+
     & 8.*rsxy(i1+1,i2,i3,1,2)-rsxy(i1+2,i2,i3,1,2))/(12.*dr(0))
                 ajszs = (rsxy(i1,i2-2,i3,1,2)-8.*rsxy(i1,i2-1,i3,1,2)+
     & 8.*rsxy(i1,i2+1,i3,1,2)-rsxy(i1,i2+2,i3,1,2))/(12.*dr(1))
                 ajszt = (rsxy(i1,i2,i3-2,1,2)-8.*rsxy(i1,i2,i3-1,1,2)+
     & 8.*rsxy(i1,i2,i3+1,1,2)-rsxy(i1,i2,i3+2,1,2))/(12.*dr(2))
                 ajszrr = (-rsxy(i1-2,i2,i3,1,2)+16.*rsxy(i1-1,i2,i3,1,
     & 2)-30.*rsxy(i1,i2,i3,1,2)+16.*rsxy(i1+1,i2,i3,1,2)-rsxy(i1+2,
     & i2,i3,1,2))/(12.*dr(0)**2)
                 ajszrs = ((rsxy(i1-2,i2-2,i3,1,2)-8.*rsxy(i1-2,i2-1,
     & i3,1,2)+8.*rsxy(i1-2,i2+1,i3,1,2)-rsxy(i1-2,i2+2,i3,1,2))/(12.*
     & dr(1))-8.*(rsxy(i1-1,i2-2,i3,1,2)-8.*rsxy(i1-1,i2-1,i3,1,2)+8.*
     & rsxy(i1-1,i2+1,i3,1,2)-rsxy(i1-1,i2+2,i3,1,2))/(12.*dr(1))+8.*(
     & rsxy(i1+1,i2-2,i3,1,2)-8.*rsxy(i1+1,i2-1,i3,1,2)+8.*rsxy(i1+1,
     & i2+1,i3,1,2)-rsxy(i1+1,i2+2,i3,1,2))/(12.*dr(1))-(rsxy(i1+2,i2-
     & 2,i3,1,2)-8.*rsxy(i1+2,i2-1,i3,1,2)+8.*rsxy(i1+2,i2+1,i3,1,2)-
     & rsxy(i1+2,i2+2,i3,1,2))/(12.*dr(1)))/(12.*dr(0))
                 ajszss = (-rsxy(i1,i2-2,i3,1,2)+16.*rsxy(i1,i2-1,i3,1,
     & 2)-30.*rsxy(i1,i2,i3,1,2)+16.*rsxy(i1,i2+1,i3,1,2)-rsxy(i1,i2+
     & 2,i3,1,2))/(12.*dr(1)**2)
                 ajszrt = ((rsxy(i1-2,i2,i3-2,1,2)-8.*rsxy(i1-2,i2,i3-
     & 1,1,2)+8.*rsxy(i1-2,i2,i3+1,1,2)-rsxy(i1-2,i2,i3+2,1,2))/(12.*
     & dr(2))-8.*(rsxy(i1-1,i2,i3-2,1,2)-8.*rsxy(i1-1,i2,i3-1,1,2)+8.*
     & rsxy(i1-1,i2,i3+1,1,2)-rsxy(i1-1,i2,i3+2,1,2))/(12.*dr(2))+8.*(
     & rsxy(i1+1,i2,i3-2,1,2)-8.*rsxy(i1+1,i2,i3-1,1,2)+8.*rsxy(i1+1,
     & i2,i3+1,1,2)-rsxy(i1+1,i2,i3+2,1,2))/(12.*dr(2))-(rsxy(i1+2,i2,
     & i3-2,1,2)-8.*rsxy(i1+2,i2,i3-1,1,2)+8.*rsxy(i1+2,i2,i3+1,1,2)-
     & rsxy(i1+2,i2,i3+2,1,2))/(12.*dr(2)))/(12.*dr(0))
                 ajszst = ((rsxy(i1,i2-2,i3-2,1,2)-8.*rsxy(i1,i2-2,i3-
     & 1,1,2)+8.*rsxy(i1,i2-2,i3+1,1,2)-rsxy(i1,i2-2,i3+2,1,2))/(12.*
     & dr(2))-8.*(rsxy(i1,i2-1,i3-2,1,2)-8.*rsxy(i1,i2-1,i3-1,1,2)+8.*
     & rsxy(i1,i2-1,i3+1,1,2)-rsxy(i1,i2-1,i3+2,1,2))/(12.*dr(2))+8.*(
     & rsxy(i1,i2+1,i3-2,1,2)-8.*rsxy(i1,i2+1,i3-1,1,2)+8.*rsxy(i1,i2+
     & 1,i3+1,1,2)-rsxy(i1,i2+1,i3+2,1,2))/(12.*dr(2))-(rsxy(i1,i2+2,
     & i3-2,1,2)-8.*rsxy(i1,i2+2,i3-1,1,2)+8.*rsxy(i1,i2+2,i3+1,1,2)-
     & rsxy(i1,i2+2,i3+2,1,2))/(12.*dr(2)))/(12.*dr(1))
                 ajsztt = (-rsxy(i1,i2,i3-2,1,2)+16.*rsxy(i1,i2,i3-1,1,
     & 2)-30.*rsxy(i1,i2,i3,1,2)+16.*rsxy(i1,i2,i3+1,1,2)-rsxy(i1,i2,
     & i3+2,1,2))/(12.*dr(2)**2)
                 ajtz = rsxy(i1,i2,i3,2,2)
                 ajtzr = (rsxy(i1-2,i2,i3,2,2)-8.*rsxy(i1-1,i2,i3,2,2)+
     & 8.*rsxy(i1+1,i2,i3,2,2)-rsxy(i1+2,i2,i3,2,2))/(12.*dr(0))
                 ajtzs = (rsxy(i1,i2-2,i3,2,2)-8.*rsxy(i1,i2-1,i3,2,2)+
     & 8.*rsxy(i1,i2+1,i3,2,2)-rsxy(i1,i2+2,i3,2,2))/(12.*dr(1))
                 ajtzt = (rsxy(i1,i2,i3-2,2,2)-8.*rsxy(i1,i2,i3-1,2,2)+
     & 8.*rsxy(i1,i2,i3+1,2,2)-rsxy(i1,i2,i3+2,2,2))/(12.*dr(2))
                 ajtzrr = (-rsxy(i1-2,i2,i3,2,2)+16.*rsxy(i1-1,i2,i3,2,
     & 2)-30.*rsxy(i1,i2,i3,2,2)+16.*rsxy(i1+1,i2,i3,2,2)-rsxy(i1+2,
     & i2,i3,2,2))/(12.*dr(0)**2)
                 ajtzrs = ((rsxy(i1-2,i2-2,i3,2,2)-8.*rsxy(i1-2,i2-1,
     & i3,2,2)+8.*rsxy(i1-2,i2+1,i3,2,2)-rsxy(i1-2,i2+2,i3,2,2))/(12.*
     & dr(1))-8.*(rsxy(i1-1,i2-2,i3,2,2)-8.*rsxy(i1-1,i2-1,i3,2,2)+8.*
     & rsxy(i1-1,i2+1,i3,2,2)-rsxy(i1-1,i2+2,i3,2,2))/(12.*dr(1))+8.*(
     & rsxy(i1+1,i2-2,i3,2,2)-8.*rsxy(i1+1,i2-1,i3,2,2)+8.*rsxy(i1+1,
     & i2+1,i3,2,2)-rsxy(i1+1,i2+2,i3,2,2))/(12.*dr(1))-(rsxy(i1+2,i2-
     & 2,i3,2,2)-8.*rsxy(i1+2,i2-1,i3,2,2)+8.*rsxy(i1+2,i2+1,i3,2,2)-
     & rsxy(i1+2,i2+2,i3,2,2))/(12.*dr(1)))/(12.*dr(0))
                 ajtzss = (-rsxy(i1,i2-2,i3,2,2)+16.*rsxy(i1,i2-1,i3,2,
     & 2)-30.*rsxy(i1,i2,i3,2,2)+16.*rsxy(i1,i2+1,i3,2,2)-rsxy(i1,i2+
     & 2,i3,2,2))/(12.*dr(1)**2)
                 ajtzrt = ((rsxy(i1-2,i2,i3-2,2,2)-8.*rsxy(i1-2,i2,i3-
     & 1,2,2)+8.*rsxy(i1-2,i2,i3+1,2,2)-rsxy(i1-2,i2,i3+2,2,2))/(12.*
     & dr(2))-8.*(rsxy(i1-1,i2,i3-2,2,2)-8.*rsxy(i1-1,i2,i3-1,2,2)+8.*
     & rsxy(i1-1,i2,i3+1,2,2)-rsxy(i1-1,i2,i3+2,2,2))/(12.*dr(2))+8.*(
     & rsxy(i1+1,i2,i3-2,2,2)-8.*rsxy(i1+1,i2,i3-1,2,2)+8.*rsxy(i1+1,
     & i2,i3+1,2,2)-rsxy(i1+1,i2,i3+2,2,2))/(12.*dr(2))-(rsxy(i1+2,i2,
     & i3-2,2,2)-8.*rsxy(i1+2,i2,i3-1,2,2)+8.*rsxy(i1+2,i2,i3+1,2,2)-
     & rsxy(i1+2,i2,i3+2,2,2))/(12.*dr(2)))/(12.*dr(0))
                 ajtzst = ((rsxy(i1,i2-2,i3-2,2,2)-8.*rsxy(i1,i2-2,i3-
     & 1,2,2)+8.*rsxy(i1,i2-2,i3+1,2,2)-rsxy(i1,i2-2,i3+2,2,2))/(12.*
     & dr(2))-8.*(rsxy(i1,i2-1,i3-2,2,2)-8.*rsxy(i1,i2-1,i3-1,2,2)+8.*
     & rsxy(i1,i2-1,i3+1,2,2)-rsxy(i1,i2-1,i3+2,2,2))/(12.*dr(2))+8.*(
     & rsxy(i1,i2+1,i3-2,2,2)-8.*rsxy(i1,i2+1,i3-1,2,2)+8.*rsxy(i1,i2+
     & 1,i3+1,2,2)-rsxy(i1,i2+1,i3+2,2,2))/(12.*dr(2))-(rsxy(i1,i2+2,
     & i3-2,2,2)-8.*rsxy(i1,i2+2,i3-1,2,2)+8.*rsxy(i1,i2+2,i3+1,2,2)-
     & rsxy(i1,i2+2,i3+2,2,2))/(12.*dr(2)))/(12.*dr(1))
                 ajtztt = (-rsxy(i1,i2,i3-2,2,2)+16.*rsxy(i1,i2,i3-1,2,
     & 2)-30.*rsxy(i1,i2,i3,2,2)+16.*rsxy(i1,i2,i3+1,2,2)-rsxy(i1,i2,
     & i3+2,2,2))/(12.*dr(2)**2)
                 ajrxx = ajrx*ajrxr+ajsx*ajrxs+ajtx*ajrxt
                 ajrxy = ajry*ajrxr+ajsy*ajrxs+ajty*ajrxt
                 ajrxz = ajrz*ajrxr+ajsz*ajrxs+ajtz*ajrxt
                 ajsxx = ajrx*ajsxr+ajsx*ajsxs+ajtx*ajsxt
                 ajsxy = ajry*ajsxr+ajsy*ajsxs+ajty*ajsxt
                 ajsxz = ajrz*ajsxr+ajsz*ajsxs+ajtz*ajsxt
                 ajtxx = ajrx*ajtxr+ajsx*ajtxs+ajtx*ajtxt
                 ajtxy = ajry*ajtxr+ajsy*ajtxs+ajty*ajtxt
                 ajtxz = ajrz*ajtxr+ajsz*ajtxs+ajtz*ajtxt
                 ajryx = ajrx*ajryr+ajsx*ajrys+ajtx*ajryt
                 ajryy = ajry*ajryr+ajsy*ajrys+ajty*ajryt
                 ajryz = ajrz*ajryr+ajsz*ajrys+ajtz*ajryt
                 ajsyx = ajrx*ajsyr+ajsx*ajsys+ajtx*ajsyt
                 ajsyy = ajry*ajsyr+ajsy*ajsys+ajty*ajsyt
                 ajsyz = ajrz*ajsyr+ajsz*ajsys+ajtz*ajsyt
                 ajtyx = ajrx*ajtyr+ajsx*ajtys+ajtx*ajtyt
                 ajtyy = ajry*ajtyr+ajsy*ajtys+ajty*ajtyt
                 ajtyz = ajrz*ajtyr+ajsz*ajtys+ajtz*ajtyt
                 ajrzx = ajrx*ajrzr+ajsx*ajrzs+ajtx*ajrzt
                 ajrzy = ajry*ajrzr+ajsy*ajrzs+ajty*ajrzt
                 ajrzz = ajrz*ajrzr+ajsz*ajrzs+ajtz*ajrzt
                 ajszx = ajrx*ajszr+ajsx*ajszs+ajtx*ajszt
                 ajszy = ajry*ajszr+ajsy*ajszs+ajty*ajszt
                 ajszz = ajrz*ajszr+ajsz*ajszs+ajtz*ajszt
                 ajtzx = ajrx*ajtzr+ajsx*ajtzs+ajtx*ajtzt
                 ajtzy = ajry*ajtzr+ajsy*ajtzs+ajty*ajtzt
                 ajtzz = ajrz*ajtzr+ajsz*ajtzs+ajtz*ajtzt
                 t1 = ajrx**2
                 t6 = ajsx**2
                 t14 = ajtx**2
                 ajrxxx = t1*ajrxrr+2*ajrx*ajsx*ajrxrs+t6*ajrxss+2*
     & ajrx*ajtx*ajrxrt+2*ajsx*ajtx*ajrxst+t14*ajrxtt+ajrxx*ajrxr+
     & ajsxx*ajrxs+ajtxx*ajrxt
                 ajrxxy = ajry*ajrx*ajrxrr+(ajsy*ajrx+ajry*ajsx)*
     & ajrxrs+ajsy*ajsx*ajrxss+(ajry*ajtx+ajty*ajrx)*ajrxrt+(ajty*
     & ajsx+ajsy*ajtx)*ajrxst+ajty*ajtx*ajrxtt+ajrxy*ajrxr+ajsxy*
     & ajrxs+ajtxy*ajrxt
                 t1 = ajry**2
                 t6 = ajsy**2
                 t14 = ajty**2
                 ajrxyy = t1*ajrxrr+2*ajry*ajsy*ajrxrs+t6*ajrxss+2*
     & ajry*ajty*ajrxrt+2*ajsy*ajty*ajrxst+t14*ajrxtt+ajryy*ajrxr+
     & ajsyy*ajrxs+ajtyy*ajrxt
                 ajrxxz = ajrz*ajrx*ajrxrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajrxrs+ajsz*ajsx*ajrxss+(ajrz*ajtx+ajtz*ajrx)*ajrxrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajrxst+ajtz*ajtx*ajrxtt+ajrxz*ajrxr+ajsxz*
     & ajrxs+ajtxz*ajrxt
                 ajrxyz = ajrz*ajry*ajrxrr+(ajsz*ajry+ajrz*ajsy)*
     & ajrxrs+ajsz*ajsy*ajrxss+(ajrz*ajty+ajtz*ajry)*ajrxrt+(ajtz*
     & ajsy+ajsz*ajty)*ajrxst+ajtz*ajty*ajrxtt+ajryz*ajrxr+ajsyz*
     & ajrxs+ajtyz*ajrxt
                 t1 = ajrz**2
                 t6 = ajsz**2
                 t14 = ajtz**2
                 ajrxzz = t1*ajrxrr+2*ajrz*ajsz*ajrxrs+t6*ajrxss+2*
     & ajrz*ajtz*ajrxrt+2*ajsz*ajtz*ajrxst+t14*ajrxtt+ajrzz*ajrxr+
     & ajszz*ajrxs+ajtzz*ajrxt
                 t1 = ajrx**2
                 t6 = ajsx**2
                 t14 = ajtx**2
                 ajsxxx = t1*ajsxrr+2*ajrx*ajsx*ajsxrs+t6*ajsxss+2*
     & ajrx*ajtx*ajsxrt+2*ajsx*ajtx*ajsxst+t14*ajsxtt+ajrxx*ajsxr+
     & ajsxx*ajsxs+ajtxx*ajsxt
                 ajsxxy = ajry*ajrx*ajsxrr+(ajsy*ajrx+ajry*ajsx)*
     & ajsxrs+ajsy*ajsx*ajsxss+(ajry*ajtx+ajty*ajrx)*ajsxrt+(ajty*
     & ajsx+ajsy*ajtx)*ajsxst+ajty*ajtx*ajsxtt+ajrxy*ajsxr+ajsxy*
     & ajsxs+ajtxy*ajsxt
                 t1 = ajry**2
                 t6 = ajsy**2
                 t14 = ajty**2
                 ajsxyy = t1*ajsxrr+2*ajry*ajsy*ajsxrs+t6*ajsxss+2*
     & ajry*ajty*ajsxrt+2*ajsy*ajty*ajsxst+t14*ajsxtt+ajryy*ajsxr+
     & ajsyy*ajsxs+ajtyy*ajsxt
                 ajsxxz = ajrz*ajrx*ajsxrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajsxrs+ajsz*ajsx*ajsxss+(ajrz*ajtx+ajtz*ajrx)*ajsxrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajsxst+ajtz*ajtx*ajsxtt+ajrxz*ajsxr+ajsxz*
     & ajsxs+ajtxz*ajsxt
                 ajsxyz = ajrz*ajry*ajsxrr+(ajsz*ajry+ajrz*ajsy)*
     & ajsxrs+ajsz*ajsy*ajsxss+(ajrz*ajty+ajtz*ajry)*ajsxrt+(ajtz*
     & ajsy+ajsz*ajty)*ajsxst+ajtz*ajty*ajsxtt+ajryz*ajsxr+ajsyz*
     & ajsxs+ajtyz*ajsxt
                 t1 = ajrz**2
                 t6 = ajsz**2
                 t14 = ajtz**2
                 ajsxzz = t1*ajsxrr+2*ajrz*ajsz*ajsxrs+t6*ajsxss+2*
     & ajrz*ajtz*ajsxrt+2*ajsz*ajtz*ajsxst+t14*ajsxtt+ajrzz*ajsxr+
     & ajszz*ajsxs+ajtzz*ajsxt
                 t1 = ajrx**2
                 t6 = ajsx**2
                 t14 = ajtx**2
                 ajtxxx = t1*ajtxrr+2*ajrx*ajsx*ajtxrs+t6*ajtxss+2*
     & ajrx*ajtx*ajtxrt+2*ajsx*ajtx*ajtxst+t14*ajtxtt+ajrxx*ajtxr+
     & ajsxx*ajtxs+ajtxx*ajtxt
                 ajtxxy = ajry*ajrx*ajtxrr+(ajsy*ajrx+ajry*ajsx)*
     & ajtxrs+ajsy*ajsx*ajtxss+(ajry*ajtx+ajty*ajrx)*ajtxrt+(ajty*
     & ajsx+ajsy*ajtx)*ajtxst+ajty*ajtx*ajtxtt+ajrxy*ajtxr+ajsxy*
     & ajtxs+ajtxy*ajtxt
                 t1 = ajry**2
                 t6 = ajsy**2
                 t14 = ajty**2
                 ajtxyy = t1*ajtxrr+2*ajry*ajsy*ajtxrs+t6*ajtxss+2*
     & ajry*ajty*ajtxrt+2*ajsy*ajty*ajtxst+t14*ajtxtt+ajryy*ajtxr+
     & ajsyy*ajtxs+ajtyy*ajtxt
                 ajtxxz = ajrz*ajrx*ajtxrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajtxrs+ajsz*ajsx*ajtxss+(ajrz*ajtx+ajtz*ajrx)*ajtxrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajtxst+ajtz*ajtx*ajtxtt+ajrxz*ajtxr+ajsxz*
     & ajtxs+ajtxz*ajtxt
                 ajtxyz = ajrz*ajry*ajtxrr+(ajsz*ajry+ajrz*ajsy)*
     & ajtxrs+ajsz*ajsy*ajtxss+(ajrz*ajty+ajtz*ajry)*ajtxrt+(ajtz*
     & ajsy+ajsz*ajty)*ajtxst+ajtz*ajty*ajtxtt+ajryz*ajtxr+ajsyz*
     & ajtxs+ajtyz*ajtxt
                 t1 = ajrz**2
                 t6 = ajsz**2
                 t14 = ajtz**2
                 ajtxzz = t1*ajtxrr+2*ajrz*ajsz*ajtxrs+t6*ajtxss+2*
     & ajrz*ajtz*ajtxrt+2*ajsz*ajtz*ajtxst+t14*ajtxtt+ajrzz*ajtxr+
     & ajszz*ajtxs+ajtzz*ajtxt
                 t1 = ajrx**2
                 t6 = ajsx**2
                 t14 = ajtx**2
                 ajryxx = t1*ajryrr+2*ajrx*ajsx*ajryrs+t6*ajryss+2*
     & ajrx*ajtx*ajryrt+2*ajsx*ajtx*ajryst+t14*ajrytt+ajrxx*ajryr+
     & ajsxx*ajrys+ajtxx*ajryt
                 ajryxy = ajry*ajrx*ajryrr+(ajsy*ajrx+ajry*ajsx)*
     & ajryrs+ajsy*ajsx*ajryss+(ajry*ajtx+ajty*ajrx)*ajryrt+(ajty*
     & ajsx+ajsy*ajtx)*ajryst+ajty*ajtx*ajrytt+ajrxy*ajryr+ajsxy*
     & ajrys+ajtxy*ajryt
                 t1 = ajry**2
                 t6 = ajsy**2
                 t14 = ajty**2
                 ajryyy = t1*ajryrr+2*ajry*ajsy*ajryrs+t6*ajryss+2*
     & ajry*ajty*ajryrt+2*ajsy*ajty*ajryst+t14*ajrytt+ajryy*ajryr+
     & ajsyy*ajrys+ajtyy*ajryt
                 ajryxz = ajrz*ajrx*ajryrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajryrs+ajsz*ajsx*ajryss+(ajrz*ajtx+ajtz*ajrx)*ajryrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajryst+ajtz*ajtx*ajrytt+ajrxz*ajryr+ajsxz*
     & ajrys+ajtxz*ajryt
                 ajryyz = ajrz*ajry*ajryrr+(ajsz*ajry+ajrz*ajsy)*
     & ajryrs+ajsz*ajsy*ajryss+(ajrz*ajty+ajtz*ajry)*ajryrt+(ajtz*
     & ajsy+ajsz*ajty)*ajryst+ajtz*ajty*ajrytt+ajryz*ajryr+ajsyz*
     & ajrys+ajtyz*ajryt
                 t1 = ajrz**2
                 t6 = ajsz**2
                 t14 = ajtz**2
                 ajryzz = t1*ajryrr+2*ajrz*ajsz*ajryrs+t6*ajryss+2*
     & ajrz*ajtz*ajryrt+2*ajsz*ajtz*ajryst+t14*ajrytt+ajrzz*ajryr+
     & ajszz*ajrys+ajtzz*ajryt
                 t1 = ajrx**2
                 t6 = ajsx**2
                 t14 = ajtx**2
                 ajsyxx = t1*ajsyrr+2*ajrx*ajsx*ajsyrs+t6*ajsyss+2*
     & ajrx*ajtx*ajsyrt+2*ajsx*ajtx*ajsyst+t14*ajsytt+ajrxx*ajsyr+
     & ajsxx*ajsys+ajtxx*ajsyt
                 ajsyxy = ajry*ajrx*ajsyrr+(ajsy*ajrx+ajry*ajsx)*
     & ajsyrs+ajsy*ajsx*ajsyss+(ajry*ajtx+ajty*ajrx)*ajsyrt+(ajty*
     & ajsx+ajsy*ajtx)*ajsyst+ajty*ajtx*ajsytt+ajrxy*ajsyr+ajsxy*
     & ajsys+ajtxy*ajsyt
                 t1 = ajry**2
                 t6 = ajsy**2
                 t14 = ajty**2
                 ajsyyy = t1*ajsyrr+2*ajry*ajsy*ajsyrs+t6*ajsyss+2*
     & ajry*ajty*ajsyrt+2*ajsy*ajty*ajsyst+t14*ajsytt+ajryy*ajsyr+
     & ajsyy*ajsys+ajtyy*ajsyt
                 ajsyxz = ajrz*ajrx*ajsyrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajsyrs+ajsz*ajsx*ajsyss+(ajrz*ajtx+ajtz*ajrx)*ajsyrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajsyst+ajtz*ajtx*ajsytt+ajrxz*ajsyr+ajsxz*
     & ajsys+ajtxz*ajsyt
                 ajsyyz = ajrz*ajry*ajsyrr+(ajsz*ajry+ajrz*ajsy)*
     & ajsyrs+ajsz*ajsy*ajsyss+(ajrz*ajty+ajtz*ajry)*ajsyrt+(ajtz*
     & ajsy+ajsz*ajty)*ajsyst+ajtz*ajty*ajsytt+ajryz*ajsyr+ajsyz*
     & ajsys+ajtyz*ajsyt
                 t1 = ajrz**2
                 t6 = ajsz**2
                 t14 = ajtz**2
                 ajsyzz = t1*ajsyrr+2*ajrz*ajsz*ajsyrs+t6*ajsyss+2*
     & ajrz*ajtz*ajsyrt+2*ajsz*ajtz*ajsyst+t14*ajsytt+ajrzz*ajsyr+
     & ajszz*ajsys+ajtzz*ajsyt
                 t1 = ajrx**2
                 t6 = ajsx**2
                 t14 = ajtx**2
                 ajtyxx = t1*ajtyrr+2*ajrx*ajsx*ajtyrs+t6*ajtyss+2*
     & ajrx*ajtx*ajtyrt+2*ajsx*ajtx*ajtyst+t14*ajtytt+ajrxx*ajtyr+
     & ajsxx*ajtys+ajtxx*ajtyt
                 ajtyxy = ajry*ajrx*ajtyrr+(ajsy*ajrx+ajry*ajsx)*
     & ajtyrs+ajsy*ajsx*ajtyss+(ajry*ajtx+ajty*ajrx)*ajtyrt+(ajty*
     & ajsx+ajsy*ajtx)*ajtyst+ajty*ajtx*ajtytt+ajrxy*ajtyr+ajsxy*
     & ajtys+ajtxy*ajtyt
                 t1 = ajry**2
                 t6 = ajsy**2
                 t14 = ajty**2
                 ajtyyy = t1*ajtyrr+2*ajry*ajsy*ajtyrs+t6*ajtyss+2*
     & ajry*ajty*ajtyrt+2*ajsy*ajty*ajtyst+t14*ajtytt+ajryy*ajtyr+
     & ajsyy*ajtys+ajtyy*ajtyt
                 ajtyxz = ajrz*ajrx*ajtyrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajtyrs+ajsz*ajsx*ajtyss+(ajrz*ajtx+ajtz*ajrx)*ajtyrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajtyst+ajtz*ajtx*ajtytt+ajrxz*ajtyr+ajsxz*
     & ajtys+ajtxz*ajtyt
                 ajtyyz = ajrz*ajry*ajtyrr+(ajsz*ajry+ajrz*ajsy)*
     & ajtyrs+ajsz*ajsy*ajtyss+(ajrz*ajty+ajtz*ajry)*ajtyrt+(ajtz*
     & ajsy+ajsz*ajty)*ajtyst+ajtz*ajty*ajtytt+ajryz*ajtyr+ajsyz*
     & ajtys+ajtyz*ajtyt
                 t1 = ajrz**2
                 t6 = ajsz**2
                 t14 = ajtz**2
                 ajtyzz = t1*ajtyrr+2*ajrz*ajsz*ajtyrs+t6*ajtyss+2*
     & ajrz*ajtz*ajtyrt+2*ajsz*ajtz*ajtyst+t14*ajtytt+ajrzz*ajtyr+
     & ajszz*ajtys+ajtzz*ajtyt
                 t1 = ajrx**2
                 t6 = ajsx**2
                 t14 = ajtx**2
                 ajrzxx = t1*ajrzrr+2*ajrx*ajsx*ajrzrs+t6*ajrzss+2*
     & ajrx*ajtx*ajrzrt+2*ajsx*ajtx*ajrzst+t14*ajrztt+ajrxx*ajrzr+
     & ajsxx*ajrzs+ajtxx*ajrzt
                 ajrzxy = ajry*ajrx*ajrzrr+(ajsy*ajrx+ajry*ajsx)*
     & ajrzrs+ajsy*ajsx*ajrzss+(ajry*ajtx+ajty*ajrx)*ajrzrt+(ajty*
     & ajsx+ajsy*ajtx)*ajrzst+ajty*ajtx*ajrztt+ajrxy*ajrzr+ajsxy*
     & ajrzs+ajtxy*ajrzt
                 t1 = ajry**2
                 t6 = ajsy**2
                 t14 = ajty**2
                 ajrzyy = t1*ajrzrr+2*ajry*ajsy*ajrzrs+t6*ajrzss+2*
     & ajry*ajty*ajrzrt+2*ajsy*ajty*ajrzst+t14*ajrztt+ajryy*ajrzr+
     & ajsyy*ajrzs+ajtyy*ajrzt
                 ajrzxz = ajrz*ajrx*ajrzrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajrzrs+ajsz*ajsx*ajrzss+(ajrz*ajtx+ajtz*ajrx)*ajrzrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajrzst+ajtz*ajtx*ajrztt+ajrxz*ajrzr+ajsxz*
     & ajrzs+ajtxz*ajrzt
                 ajrzyz = ajrz*ajry*ajrzrr+(ajsz*ajry+ajrz*ajsy)*
     & ajrzrs+ajsz*ajsy*ajrzss+(ajrz*ajty+ajtz*ajry)*ajrzrt+(ajtz*
     & ajsy+ajsz*ajty)*ajrzst+ajtz*ajty*ajrztt+ajryz*ajrzr+ajsyz*
     & ajrzs+ajtyz*ajrzt
                 t1 = ajrz**2
                 t6 = ajsz**2
                 t14 = ajtz**2
                 ajrzzz = t1*ajrzrr+2*ajrz*ajsz*ajrzrs+t6*ajrzss+2*
     & ajrz*ajtz*ajrzrt+2*ajsz*ajtz*ajrzst+t14*ajrztt+ajrzz*ajrzr+
     & ajszz*ajrzs+ajtzz*ajrzt
                 t1 = ajrx**2
                 t6 = ajsx**2
                 t14 = ajtx**2
                 ajszxx = t1*ajszrr+2*ajrx*ajsx*ajszrs+t6*ajszss+2*
     & ajrx*ajtx*ajszrt+2*ajsx*ajtx*ajszst+t14*ajsztt+ajrxx*ajszr+
     & ajsxx*ajszs+ajtxx*ajszt
                 ajszxy = ajry*ajrx*ajszrr+(ajsy*ajrx+ajry*ajsx)*
     & ajszrs+ajsy*ajsx*ajszss+(ajry*ajtx+ajty*ajrx)*ajszrt+(ajty*
     & ajsx+ajsy*ajtx)*ajszst+ajty*ajtx*ajsztt+ajrxy*ajszr+ajsxy*
     & ajszs+ajtxy*ajszt
                 t1 = ajry**2
                 t6 = ajsy**2
                 t14 = ajty**2
                 ajszyy = t1*ajszrr+2*ajry*ajsy*ajszrs+t6*ajszss+2*
     & ajry*ajty*ajszrt+2*ajsy*ajty*ajszst+t14*ajsztt+ajryy*ajszr+
     & ajsyy*ajszs+ajtyy*ajszt
                 ajszxz = ajrz*ajrx*ajszrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajszrs+ajsz*ajsx*ajszss+(ajrz*ajtx+ajtz*ajrx)*ajszrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajszst+ajtz*ajtx*ajsztt+ajrxz*ajszr+ajsxz*
     & ajszs+ajtxz*ajszt
                 ajszyz = ajrz*ajry*ajszrr+(ajsz*ajry+ajrz*ajsy)*
     & ajszrs+ajsz*ajsy*ajszss+(ajrz*ajty+ajtz*ajry)*ajszrt+(ajtz*
     & ajsy+ajsz*ajty)*ajszst+ajtz*ajty*ajsztt+ajryz*ajszr+ajsyz*
     & ajszs+ajtyz*ajszt
                 t1 = ajrz**2
                 t6 = ajsz**2
                 t14 = ajtz**2
                 ajszzz = t1*ajszrr+2*ajrz*ajsz*ajszrs+t6*ajszss+2*
     & ajrz*ajtz*ajszrt+2*ajsz*ajtz*ajszst+t14*ajsztt+ajrzz*ajszr+
     & ajszz*ajszs+ajtzz*ajszt
                 t1 = ajrx**2
                 t6 = ajsx**2
                 t14 = ajtx**2
                 ajtzxx = t1*ajtzrr+2*ajrx*ajsx*ajtzrs+t6*ajtzss+2*
     & ajrx*ajtx*ajtzrt+2*ajsx*ajtx*ajtzst+t14*ajtztt+ajrxx*ajtzr+
     & ajsxx*ajtzs+ajtxx*ajtzt
                 ajtzxy = ajry*ajrx*ajtzrr+(ajsy*ajrx+ajry*ajsx)*
     & ajtzrs+ajsy*ajsx*ajtzss+(ajry*ajtx+ajty*ajrx)*ajtzrt+(ajty*
     & ajsx+ajsy*ajtx)*ajtzst+ajty*ajtx*ajtztt+ajrxy*ajtzr+ajsxy*
     & ajtzs+ajtxy*ajtzt
                 t1 = ajry**2
                 t6 = ajsy**2
                 t14 = ajty**2
                 ajtzyy = t1*ajtzrr+2*ajry*ajsy*ajtzrs+t6*ajtzss+2*
     & ajry*ajty*ajtzrt+2*ajsy*ajty*ajtzst+t14*ajtztt+ajryy*ajtzr+
     & ajsyy*ajtzs+ajtyy*ajtzt
                 ajtzxz = ajrz*ajrx*ajtzrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajtzrs+ajsz*ajsx*ajtzss+(ajrz*ajtx+ajtz*ajrx)*ajtzrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajtzst+ajtz*ajtx*ajtztt+ajrxz*ajtzr+ajsxz*
     & ajtzs+ajtxz*ajtzt
                 ajtzyz = ajrz*ajry*ajtzrr+(ajsz*ajry+ajrz*ajsy)*
     & ajtzrs+ajsz*ajsy*ajtzss+(ajrz*ajty+ajtz*ajry)*ajtzrt+(ajtz*
     & ajsy+ajsz*ajty)*ajtzst+ajtz*ajty*ajtztt+ajryz*ajtzr+ajsyz*
     & ajtzs+ajtyz*ajtzt
                 t1 = ajrz**2
                 t6 = ajsz**2
                 t14 = ajtz**2
                 ajtzzz = t1*ajtzrr+2*ajrz*ajsz*ajtzrs+t6*ajtzss+2*
     & ajrz*ajtz*ajtzrt+2*ajsz*ajtz*ajtzst+t14*ajtztt+ajrzz*ajtzr+
     & ajszz*ajtzs+ajtzz*ajtzt
                 ! define these derivatives of the mapping (which are not normally computed by the standard macros):
                ajrxxr=ajrx*ajrxrr + ajsx*ajrxrs + ajtx*ajrxrt + ajrxr*
     & ajrxr +ajsxr*ajrxs + ajtxr*ajrxt
                ajrxxs=ajrx*ajrxrs + ajsx*ajrxss + ajtx*ajrxst + ajrxs*
     & ajrxr +ajsxs*ajrxs + ajtxs*ajrxt
                ajrxxt=ajrx*ajrxrt + ajsx*ajrxst + ajtx*ajrxtt + ajrxt*
     & ajrxr +ajsxt*ajrxs + ajtxt*ajrxt
                ajrxyr=ajry*ajrxrr + ajsy*ajrxrs + ajty*ajrxrt + ajryr*
     & ajrxr +ajsyr*ajrxs + ajtyr*ajrxt
                ajrxys=ajry*ajrxrs + ajsy*ajrxss + ajty*ajrxst + ajrys*
     & ajrxr +ajsys*ajrxs + ajtys*ajrxt
                ajrxyt=ajry*ajrxrt + ajsy*ajrxst + ajty*ajrxtt + ajryt*
     & ajrxr +ajsyt*ajrxs + ajtyt*ajrxt
                ajrxzr=ajrz*ajrxrr + ajsz*ajrxrs + ajtz*ajrxrt + ajrzr*
     & ajrxr +ajszr*ajrxs + ajtzr*ajrxt
                ajrxzs=ajrz*ajrxrs + ajsz*ajrxss + ajtz*ajrxst + ajrzs*
     & ajrxr +ajszs*ajrxs + ajtzs*ajrxt
                ajrxzt=ajrz*ajrxrt + ajsz*ajrxst + ajtz*ajrxtt + ajrzt*
     & ajrxr +ajszt*ajrxs + ajtzt*ajrxt
                ajryxr=ajrx*ajryrr + ajsx*ajryrs + ajtx*ajryrt + ajrxr*
     & ajryr +ajsxr*ajrys + ajtxr*ajryt
                ajryxs=ajrx*ajryrs + ajsx*ajryss + ajtx*ajryst + ajrxs*
     & ajryr +ajsxs*ajrys + ajtxs*ajryt
                ajryxt=ajrx*ajryrt + ajsx*ajryst + ajtx*ajrytt + ajrxt*
     & ajryr +ajsxt*ajrys + ajtxt*ajryt
                ajryyr=ajry*ajryrr + ajsy*ajryrs + ajty*ajryrt + ajryr*
     & ajryr +ajsyr*ajrys + ajtyr*ajryt
                ajryys=ajry*ajryrs + ajsy*ajryss + ajty*ajryst + ajrys*
     & ajryr +ajsys*ajrys + ajtys*ajryt
                ajryyt=ajry*ajryrt + ajsy*ajryst + ajty*ajrytt + ajryt*
     & ajryr +ajsyt*ajrys + ajtyt*ajryt
                ajryzr=ajrz*ajryrr + ajsz*ajryrs + ajtz*ajryrt + ajrzr*
     & ajryr +ajszr*ajrys + ajtzr*ajryt
                ajryzs=ajrz*ajryrs + ajsz*ajryss + ajtz*ajryst + ajrzs*
     & ajryr +ajszs*ajrys + ajtzs*ajryt
                ajryzt=ajrz*ajryrt + ajsz*ajryst + ajtz*ajrytt + ajrzt*
     & ajryr +ajszt*ajrys + ajtzt*ajryt
                ajrzxr=ajrx*ajrzrr + ajsx*ajrzrs + ajtx*ajrzrt + ajrxr*
     & ajrzr +ajsxr*ajrzs + ajtxr*ajrzt
                ajrzxs=ajrx*ajrzrs + ajsx*ajrzss + ajtx*ajrzst + ajrxs*
     & ajrzr +ajsxs*ajrzs + ajtxs*ajrzt
                ajrzxt=ajrx*ajrzrt + ajsx*ajrzst + ajtx*ajrztt + ajrxt*
     & ajrzr +ajsxt*ajrzs + ajtxt*ajrzt
                ajrzyr=ajry*ajrzrr + ajsy*ajrzrs + ajty*ajrzrt + ajryr*
     & ajrzr +ajsyr*ajrzs + ajtyr*ajrzt
                ajrzys=ajry*ajrzrs + ajsy*ajrzss + ajty*ajrzst + ajrys*
     & ajrzr +ajsys*ajrzs + ajtys*ajrzt
                ajrzyt=ajry*ajrzrt + ajsy*ajrzst + ajty*ajrztt + ajryt*
     & ajrzr +ajsyt*ajrzs + ajtyt*ajrzt
                ajrzzr=ajrz*ajrzrr + ajsz*ajrzrs + ajtz*ajrzrt + ajrzr*
     & ajrzr +ajszr*ajrzs + ajtzr*ajrzt
                ajrzzs=ajrz*ajrzrs + ajsz*ajrzss + ajtz*ajrzst + ajrzs*
     & ajrzr +ajszs*ajrzs + ajtzs*ajrzt
                ajrzzt=ajrz*ajrzrt + ajsz*ajrzst + ajtz*ajrztt + ajrzt*
     & ajrzr +ajszt*ajrzs + ajtzt*ajrzt
                ajsxxr=ajrx*ajsxrr + ajsx*ajsxrs + ajtx*ajsxrt + ajrxr*
     & ajsxr +ajsxr*ajsxs + ajtxr*ajsxt
                ajsxxs=ajrx*ajsxrs + ajsx*ajsxss + ajtx*ajsxst + ajrxs*
     & ajsxr +ajsxs*ajsxs + ajtxs*ajsxt
                ajsxxt=ajrx*ajsxrt + ajsx*ajsxst + ajtx*ajsxtt + ajrxt*
     & ajsxr +ajsxt*ajsxs + ajtxt*ajsxt
                ajsxyr=ajry*ajsxrr + ajsy*ajsxrs + ajty*ajsxrt + ajryr*
     & ajsxr +ajsyr*ajsxs + ajtyr*ajsxt
                ajsxys=ajry*ajsxrs + ajsy*ajsxss + ajty*ajsxst + ajrys*
     & ajsxr +ajsys*ajsxs + ajtys*ajsxt
                ajsxyt=ajry*ajsxrt + ajsy*ajsxst + ajty*ajsxtt + ajryt*
     & ajsxr +ajsyt*ajsxs + ajtyt*ajsxt
                ajsxzr=ajrz*ajsxrr + ajsz*ajsxrs + ajtz*ajsxrt + ajrzr*
     & ajsxr +ajszr*ajsxs + ajtzr*ajsxt
                ajsxzs=ajrz*ajsxrs + ajsz*ajsxss + ajtz*ajsxst + ajrzs*
     & ajsxr +ajszs*ajsxs + ajtzs*ajsxt
                ajsxzt=ajrz*ajsxrt + ajsz*ajsxst + ajtz*ajsxtt + ajrzt*
     & ajsxr +ajszt*ajsxs + ajtzt*ajsxt
                ajsyxr=ajrx*ajsyrr + ajsx*ajsyrs + ajtx*ajsyrt + ajrxr*
     & ajsyr +ajsxr*ajsys + ajtxr*ajsyt
                ajsyxs=ajrx*ajsyrs + ajsx*ajsyss + ajtx*ajsyst + ajrxs*
     & ajsyr +ajsxs*ajsys + ajtxs*ajsyt
                ajsyxt=ajrx*ajsyrt + ajsx*ajsyst + ajtx*ajsytt + ajrxt*
     & ajsyr +ajsxt*ajsys + ajtxt*ajsyt
                ajsyyr=ajry*ajsyrr + ajsy*ajsyrs + ajty*ajsyrt + ajryr*
     & ajsyr +ajsyr*ajsys + ajtyr*ajsyt
                ajsyys=ajry*ajsyrs + ajsy*ajsyss + ajty*ajsyst + ajrys*
     & ajsyr +ajsys*ajsys + ajtys*ajsyt
                ajsyyt=ajry*ajsyrt + ajsy*ajsyst + ajty*ajsytt + ajryt*
     & ajsyr +ajsyt*ajsys + ajtyt*ajsyt
                ajsyzr=ajrz*ajsyrr + ajsz*ajsyrs + ajtz*ajsyrt + ajrzr*
     & ajsyr +ajszr*ajsys + ajtzr*ajsyt
                ajsyzs=ajrz*ajsyrs + ajsz*ajsyss + ajtz*ajsyst + ajrzs*
     & ajsyr +ajszs*ajsys + ajtzs*ajsyt
                ajsyzt=ajrz*ajsyrt + ajsz*ajsyst + ajtz*ajsytt + ajrzt*
     & ajsyr +ajszt*ajsys + ajtzt*ajsyt
                ajszxr=ajrx*ajszrr + ajsx*ajszrs + ajtx*ajszrt + ajrxr*
     & ajszr +ajsxr*ajszs + ajtxr*ajszt
                ajszxs=ajrx*ajszrs + ajsx*ajszss + ajtx*ajszst + ajrxs*
     & ajszr +ajsxs*ajszs + ajtxs*ajszt
                ajszxt=ajrx*ajszrt + ajsx*ajszst + ajtx*ajsztt + ajrxt*
     & ajszr +ajsxt*ajszs + ajtxt*ajszt
                ajszyr=ajry*ajszrr + ajsy*ajszrs + ajty*ajszrt + ajryr*
     & ajszr +ajsyr*ajszs + ajtyr*ajszt
                ajszys=ajry*ajszrs + ajsy*ajszss + ajty*ajszst + ajrys*
     & ajszr +ajsys*ajszs + ajtys*ajszt
                ajszyt=ajry*ajszrt + ajsy*ajszst + ajty*ajsztt + ajryt*
     & ajszr +ajsyt*ajszs + ajtyt*ajszt
                ajszzr=ajrz*ajszrr + ajsz*ajszrs + ajtz*ajszrt + ajrzr*
     & ajszr +ajszr*ajszs + ajtzr*ajszt
                ajszzs=ajrz*ajszrs + ajsz*ajszss + ajtz*ajszst + ajrzs*
     & ajszr +ajszs*ajszs + ajtzs*ajszt
                ajszzt=ajrz*ajszrt + ajsz*ajszst + ajtz*ajsztt + ajrzt*
     & ajszr +ajszt*ajszs + ajtzt*ajszt
                ajtxxr=ajrx*ajtxrr + ajsx*ajtxrs + ajtx*ajtxrt + ajrxr*
     & ajtxr +ajsxr*ajtxs + ajtxr*ajtxt
                ajtxxs=ajrx*ajtxrs + ajsx*ajtxss + ajtx*ajtxst + ajrxs*
     & ajtxr +ajsxs*ajtxs + ajtxs*ajtxt
                ajtxxt=ajrx*ajtxrt + ajsx*ajtxst + ajtx*ajtxtt + ajrxt*
     & ajtxr +ajsxt*ajtxs + ajtxt*ajtxt
                ajtxyr=ajry*ajtxrr + ajsy*ajtxrs + ajty*ajtxrt + ajryr*
     & ajtxr +ajsyr*ajtxs + ajtyr*ajtxt
                ajtxys=ajry*ajtxrs + ajsy*ajtxss + ajty*ajtxst + ajrys*
     & ajtxr +ajsys*ajtxs + ajtys*ajtxt
                ajtxyt=ajry*ajtxrt + ajsy*ajtxst + ajty*ajtxtt + ajryt*
     & ajtxr +ajsyt*ajtxs + ajtyt*ajtxt
                ajtxzr=ajrz*ajtxrr + ajsz*ajtxrs + ajtz*ajtxrt + ajrzr*
     & ajtxr +ajszr*ajtxs + ajtzr*ajtxt
                ajtxzs=ajrz*ajtxrs + ajsz*ajtxss + ajtz*ajtxst + ajrzs*
     & ajtxr +ajszs*ajtxs + ajtzs*ajtxt
                ajtxzt=ajrz*ajtxrt + ajsz*ajtxst + ajtz*ajtxtt + ajrzt*
     & ajtxr +ajszt*ajtxs + ajtzt*ajtxt
                ajtyxr=ajrx*ajtyrr + ajsx*ajtyrs + ajtx*ajtyrt + ajrxr*
     & ajtyr +ajsxr*ajtys + ajtxr*ajtyt
                ajtyxs=ajrx*ajtyrs + ajsx*ajtyss + ajtx*ajtyst + ajrxs*
     & ajtyr +ajsxs*ajtys + ajtxs*ajtyt
                ajtyxt=ajrx*ajtyrt + ajsx*ajtyst + ajtx*ajtytt + ajrxt*
     & ajtyr +ajsxt*ajtys + ajtxt*ajtyt
                ajtyyr=ajry*ajtyrr + ajsy*ajtyrs + ajty*ajtyrt + ajryr*
     & ajtyr +ajsyr*ajtys + ajtyr*ajtyt
                ajtyys=ajry*ajtyrs + ajsy*ajtyss + ajty*ajtyst + ajrys*
     & ajtyr +ajsys*ajtys + ajtys*ajtyt
                ajtyyt=ajry*ajtyrt + ajsy*ajtyst + ajty*ajtytt + ajryt*
     & ajtyr +ajsyt*ajtys + ajtyt*ajtyt
                ajtyzr=ajrz*ajtyrr + ajsz*ajtyrs + ajtz*ajtyrt + ajrzr*
     & ajtyr +ajszr*ajtys + ajtzr*ajtyt
                ajtyzs=ajrz*ajtyrs + ajsz*ajtyss + ajtz*ajtyst + ajrzs*
     & ajtyr +ajszs*ajtys + ajtzs*ajtyt
                ajtyzt=ajrz*ajtyrt + ajsz*ajtyst + ajtz*ajtytt + ajrzt*
     & ajtyr +ajszt*ajtys + ajtzt*ajtyt
                ajtzxr=ajrx*ajtzrr + ajsx*ajtzrs + ajtx*ajtzrt + ajrxr*
     & ajtzr +ajsxr*ajtzs + ajtxr*ajtzt
                ajtzxs=ajrx*ajtzrs + ajsx*ajtzss + ajtx*ajtzst + ajrxs*
     & ajtzr +ajsxs*ajtzs + ajtxs*ajtzt
                ajtzxt=ajrx*ajtzrt + ajsx*ajtzst + ajtx*ajtztt + ajrxt*
     & ajtzr +ajsxt*ajtzs + ajtxt*ajtzt
                ajtzyr=ajry*ajtzrr + ajsy*ajtzrs + ajty*ajtzrt + ajryr*
     & ajtzr +ajsyr*ajtzs + ajtyr*ajtzt
                ajtzys=ajry*ajtzrs + ajsy*ajtzss + ajty*ajtzst + ajrys*
     & ajtzr +ajsys*ajtzs + ajtys*ajtzt
                ajtzyt=ajry*ajtzrt + ajsy*ajtzst + ajty*ajtztt + ajryt*
     & ajtzr +ajsyt*ajtzs + ajtyt*ajtzt
                ajtzzr=ajrz*ajtzrr + ajsz*ajtzrs + ajtz*ajtzrt + ajrzr*
     & ajtzr +ajszr*ajtzs + ajtzr*ajtzt
                ajtzzs=ajrz*ajtzrs + ajsz*ajtzss + ajtz*ajtzst + ajrzs*
     & ajtzr +ajszs*ajtzs + ajtzs*ajtzt
                ajtzzt=ajrz*ajtzrt + ajsz*ajtzst + ajtz*ajtztt + ajrzt*
     & ajtzr +ajszt*ajtzs + ajtzt*ajtzt
                ! ***************************************************************
                ! PDE: cxx*uxx + cyy*uyy + czz*uzz + cxy*uxy + cxz*uxz + cyz*uyz + cx*ux + cy*uy + cz*uz + c0 *u = f 
                ! PDE: cRR*urr + cSS*uss + cTT*utt + cRS*urs + cRT*urt + cST*ust  + ccR*ur + ccS*us + ccT*ut + c0 *u = f 
                ! =============== Start: Laplace operator: ==================== 
                 cxx=1.
                 cyy=1.
                 czz=1.
                 cxy=0.
                 cxz=0.
                 cyz=0.
                 cx=0.
                 cy=0.
                 cz=0.
                 c0=0.
                 cRR=cxx*ajrx**2+cyy*ajry**2+czz*ajrz**2 +cxy*ajrx*
     & ajry+cxz*ajrx*ajrz+cyz*ajry*ajrz
                 cSS=cxx*ajsx**2+cyy*ajsy**2+czz*ajsz**2 +cxy*ajsx*
     & ajsy+cxz*ajsx*ajsz+cyz*ajsy*ajsz
                 cTT=cxx*ajtx**2+cyy*ajty**2+czz*ajtz**2 +cxy*ajtx*
     & ajty+cxz*ajtx*ajtz+cyz*ajty*ajtz
                 cRS=2.*(cxx*ajrx*ajsx+cyy*ajry*ajsy+czz*ajrz*ajsz) +
     & cxy*(ajrx*ajsy+ajry*ajsx)+cxz*(ajrx*ajsz+ajrz*ajsx)+cyz*(ajry*
     & ajsz+ajrz*ajsy)
                 cRT=2.*(cxx*ajrx*ajtx+cyy*ajry*ajty+czz*ajrz*ajtz) +
     & cxy*(ajrx*ajty+ajry*ajtx)+cxz*(ajrx*ajtz+ajrz*ajtx)+cyz*(ajry*
     & ajtz+ajrz*ajty)
                 cST=2.*(cxx*ajsx*ajtx+cyy*ajsy*ajty+czz*ajsz*ajtz) +
     & cxy*(ajsx*ajty+ajsy*ajtx)+cxz*(ajsx*ajtz+ajsz*ajtx)+cyz*(ajsy*
     & ajtz+ajsz*ajty)
                 ccR=cxx*ajrxx+cyy*ajryy+czz*ajrzz +cxy*ajrxy+cxz*
     & ajrxz+cyz*ajryz + cx*ajrx+cy*ajry+cz*ajrz
                 ccS=cxx*ajsxx+cyy*ajsyy+czz*ajszz +cxy*ajsxy+cxz*
     & ajsxz+cyz*ajsyz + cx*ajsx+cy*ajsy+cz*ajsz
                 ccT=cxx*ajtxx+cyy*ajtyy+czz*ajtzz +cxy*ajtxy+cxz*
     & ajtxz+cyz*ajtyz + cx*ajtx+cy*ajty+cz*ajtz
                ! m=1...
                 cRRr=2.*(ajrx*ajrxr+ajry*ajryr+ajrz*ajrzr)
                 cRSr=2.*(ajrxr*ajsx+ajrx*ajsxr + ajryr*ajsy+ ajry*
     & ajsyr + ajrzr*ajsz+ ajrz*ajszr)
                 cRTr=2.*(ajrxr*ajtx+ajrx*ajtxr + ajryr*ajty+ ajry*
     & ajtyr + ajrzr*ajtz+ ajrz*ajtzr)
                 ccRr=ajrxxr+ajryyr+ajrzzr
                 cRRs=2.*(ajrx*ajrxs+ajry*ajrys+ajrz*ajrzs)
                 cRSs=2.*(ajrxs*ajsx+ajrx*ajsxs + ajrys*ajsy+ ajry*
     & ajsys + ajrzs*ajsz+ ajrz*ajszs)
                 cRTs=2.*(ajrxs*ajtx+ajrx*ajtxs + ajrys*ajty+ ajry*
     & ajtys + ajrzs*ajtz+ ajrz*ajtzs)
                 ccRs=ajrxxs+ajryys+ajrzzs
                 cRRt=2.*(ajrx*ajrxt+ajry*ajryt+ajrz*ajrzt)
                 cRSt=2.*(ajrxt*ajsx+ajrx*ajsxt + ajryt*ajsy+ ajry*
     & ajsyt + ajrzt*ajsz+ ajrz*ajszt)
                 cRTt=2.*(ajrxt*ajtx+ajrx*ajtxt + ajryt*ajty+ ajry*
     & ajtyt + ajrzt*ajtz+ ajrz*ajtzt)
                 ccRt=ajrxxt+ajryyt+ajrzzt
                ! m=2...
                 cSSr=2.*(ajsx*ajsxr+ajsy*ajsyr+ajsz*ajszr)
                 cSTr=2.*(ajsxr*ajtx+ajsx*ajtxr + ajsyr*ajty+ ajsy*
     & ajtyr + ajszr*ajtz+ ajsz*ajtzr)
                 ccSr=ajsxxr+ajsyyr+ajszzr
                 cSSs=2.*(ajsx*ajsxs+ajsy*ajsys+ajsz*ajszs)
                 cSTs=2.*(ajsxs*ajtx+ajsx*ajtxs + ajsys*ajty+ ajsy*
     & ajtys + ajszs*ajtz+ ajsz*ajtzs)
                 ccSs=ajsxxs+ajsyys+ajszzs
                 cSSt=2.*(ajsx*ajsxt+ajsy*ajsyt+ajsz*ajszt)
                 cSTt=2.*(ajsxt*ajtx+ajsx*ajtxt + ajsyt*ajty+ ajsy*
     & ajtyt + ajszt*ajtz+ ajsz*ajtzt)
                 ccSt=ajsxxt+ajsyyt+ajszzt
                ! m=3...
                 cTTr=2.*(ajtx*ajtxr+ajty*ajtyr+ajtz*ajtzr)
                 ccTr=ajtxxr+ajtyyr+ajtzzr
                 cTTs=2.*(ajtx*ajtxs+ajty*ajtys+ajtz*ajtzs)
                 ccTs=ajtxxs+ajtyys+ajtzzs
                 cTTt=2.*(ajtx*ajtxt+ajty*ajtyt+ajtz*ajtzt)
                 ccTt=ajtxxt+ajtyyt+ajtzzt
                 c0r=0.
                 c0s=0.
                 c0t=0.
                ! =============== End: Laplace operator: ==================== 
                ! ---------------- Start: Boundary condition: --------------- 
                ! BC: a1*u.n + a0*u = g 
                ! nsign=2*side-1
                ! a1=1.
                ! a0=0.
                 ! ---------------- Start r direction ---------------
                 ! ---------------- Start s direction ---------------
                 ! Outward normal : (n1,n2,n3) 
                 ani=nsign/sqrt(ajsx**2+ajsy**2+ajsz**2)
                 n1=ajsx*ani
                 n2=ajsy*ani
                 n3=ajsz*ani
                 ! BC : anS*us + anT*ut + anR*ur + a0*u 
                 anS=a1*(n1*ajsx+n2*ajsy+n3*ajsz)
                 anT=a1*(n1*ajtx+n2*ajty+n3*ajtz)
                 anR=a1*(n1*ajrx+n2*ajry+n3*ajrz)
                ! >>>>>>>
                 anit=-(ajsx*ajsxt+ajsy*ajsyt+ajsz*ajszt)*ani**3
                 anitt=-(ajsx*ajsxtt+ajsy*ajsytt+ajsz*ajsztt+ajsxt*
     & ajsxt+ajsyt*ajsyt+ajszt*ajszt)*ani**3 -3.*(ajsx*ajsxt+ajsy*
     & ajsyt+ajsz*ajszt)*ani**2*anit
                 n1t=ajsxt*ani + ajsx*anit
                 n1tt=ajsxtt*ani + 2.*ajsxt*anit + ajsx*anitt
                 n2t=ajsyt*ani + ajsy*anit
                 n2tt=ajsytt*ani + 2.*ajsyt*anit + ajsy*anitt
                 n3t=ajszt*ani + ajsz*anit
                 n3tt=ajsztt*ani + 2.*ajszt*anit + ajsz*anitt
                 anSt =a1*(n1*ajsxt+n2*ajsyt+n3*ajszt+n1t*ajsx+n2t*
     & ajsy+n3t*ajsz)
                 anStt=a1*(n1*ajsxtt+n2*ajsytt+n3*ajsztt+2.*(n1t*ajsxt+
     & n2t*ajsyt+n3t*ajszt)+n1tt*ajsx+n2tt*ajsy+n3tt*ajsz)
                 anTt =a1*(n1*ajtxt+n2*ajtyt+n3*ajtzt+n1t*ajtx+n2t*
     & ajty+n3t*ajtz)
                 anTtt=a1*(n1*ajtxtt+n2*ajtytt+n3*ajtztt+2.*(n1t*ajtxt+
     & n2t*ajtyt+n3t*ajtzt)+n1tt*ajtx+n2tt*ajty+n3tt*ajtz)
                 anRt =a1*(n1*ajrxt+n2*ajryt+n3*ajrzt+n1t*ajrx+n2t*
     & ajry+n3t*ajrz)
                 anRtt=a1*(n1*ajrxtt+n2*ajrytt+n3*ajrztt+2.*(n1t*ajrxt+
     & n2t*ajryt+n3t*ajrzt)+n1tt*ajrx+n2tt*ajry+n3tt*ajrz)
                ! <<<<<<<
                ! >>>>>>>
                 anir=-(ajsx*ajsxr+ajsy*ajsyr+ajsz*ajszr)*ani**3
                 anirr=-(ajsx*ajsxrr+ajsy*ajsyrr+ajsz*ajszrr+ajsxr*
     & ajsxr+ajsyr*ajsyr+ajszr*ajszr)*ani**3 -3.*(ajsx*ajsxr+ajsy*
     & ajsyr+ajsz*ajszr)*ani**2*anir
                 anirt=-(ajsx*ajsxrt+ajsy*ajsyrt+ajsz*ajszrt+ajsxt*
     & ajsxr+ajsyt*ajsyr+ajszt*ajszr)*ani**3 -3.*(ajsx*ajsxt+ajsy*
     & ajsyt+ajsz*ajszt)*ani**2*anir
                 n1r=ajsxr*ani + ajsx*anir
                 n1rr=ajsxrr*ani + 2.*ajsxr*anir + ajsx*anirr
                 n1rt=ajsxrt*ani + ajsxr*anit + ajsxt*anir + ajsx*anirt
                 n2r=ajsyr*ani + ajsy*anir
                 n2rr=ajsyrr*ani + 2.*ajsyr*anir + ajsy*anirr
                 n2rt=ajsyrt*ani + ajsyr*anit + ajsyt*anir + ajsy*anirt
                 n3r=ajszr*ani + ajsz*anir
                 n3rr=ajszrr*ani + 2.*ajszr*anir + ajsz*anirr
                 n3rt=ajszrt*ani + ajszr*anit + ajszt*anir + ajsz*anirt
                 anSr =a1*(n1*ajsxr+n2*ajsyr+n3*ajszr+n1r*ajsx+n2r*
     & ajsy+n3r*ajsz)
                 anSrr=a1*(n1*ajsxrr+n2*ajsyrr+n3*ajszrr+2.*(n1r*ajsxr+
     & n2r*ajsyr+n3r*ajszr)+n1rr*ajsx+n2rr*ajsy+n3rr*ajsz)
                 anSrt=a1*(n1*ajsxrt+n2*ajsyrt+n3*ajszrt +n1t*ajsxr+
     & n2t*ajsyr+n3t*ajszr +n1r*ajsxt+n2r*ajsyt+n3r*ajszt +n1rt*ajsx+
     & n2rt*ajsy+n3rt*ajsz)
                 anTr =a1*(n1*ajtxr+n2*ajtyr+n3*ajtzr+n1r*ajtx+n2r*
     & ajty+n3r*ajtz)
                 anTrr=a1*(n1*ajtxrr+n2*ajtyrr+n3*ajtzrr+2.*(n1r*ajtxr+
     & n2r*ajtyr+n3r*ajtzr)+n1rr*ajtx+n2rr*ajty+n3rr*ajtz)
                 anTrt=a1*(n1*ajtxrt+n2*ajtyrt+n3*ajtzrt +n1t*ajtxr+
     & n2t*ajtyr+n3t*ajtzr +n1r*ajtxt+n2r*ajtyt+n3r*ajtzt +n1rt*ajtx+
     & n2rt*ajty+n3rt*ajtz)
                 anRr =a1*(n1*ajrxr+n2*ajryr+n3*ajrzr+n1r*ajrx+n2r*
     & ajry+n3r*ajrz)
                 anRrr=a1*(n1*ajrxrr+n2*ajryrr+n3*ajrzrr+2.*(n1r*ajrxr+
     & n2r*ajryr+n3r*ajrzr)+n1rr*ajrx+n2rr*ajry+n3rr*ajrz)
                 anRrt=a1*(n1*ajrxrt+n2*ajryrt+n3*ajrzrt +n1t*ajrxr+
     & n2t*ajryr+n3t*ajrzr +n1r*ajrxt+n2r*ajryt+n3r*ajrzt +n1rt*ajrx+
     & n2rt*ajry+n3rt*ajrz)
                ! <<<<<<<
                 ! Here are the expressions for the normal derivatives
                bttt= -(cTT*cSS**2*anT*anS**2-cST**2*cSS*anT*anS**2+
     & cST*cTT*anS**3*cSS)/anS**3/cSS**3
                btt = -(cSSs*anS**3*cSS*cTT+cST*ccT*anS**3*cSS+cST*
     & cTTt*anS**3*cSS-cST*cSSt*anS**3*cTT-2*cST**2*cSS*anTt*anS**2-
     & cST**2*cSS*a0*anS**2+cSSt*anS**2*cST**2*anT+2*cTT*cSS**2*anTt*
     & anS**2+cTT*cSS**2*a0*anS**2+cRS*cTTr*anS**3*cSS-cRS*cSSr*anS**
     & 3*cTT+cRT*cSS**2*anTr*anS**2+ccS*anS**3*cSS*cTT+ccT*anS**2*cSS*
     & *2*anT+cSTs*anS**2*cSS**2*anT-cTTs*anS**3*cSS**2-cSSs*anS**2*
     & cSS*cST*anT+2*cST**2*cSS*anSt*anT*anS-2*cST*cRS*cSS*anTr*anS**
     & 2+2*cST*cRS*cSS*anSr*anT*anS-2*cST*ccS*anS**2*cSS*anT-cST*cSTt*
     & anS**2*cSS*anT-2*cTT*cSS**2*anSt*anT*anS-cRS*cSTr*anS**2*cSS*
     & anT+cRS*cSSr*anS**2*cST*anT-cRT*cSS**2*anSr*anT*anS)/anS**
     & 3/cSS**3
                bt  = -(-2*cRS**2*cSS*anSr**2*anT+cSSr*anS**2*cRS**2*
     & anTr+cRT*cSS**2*anTrt*anS**2+cRT*cSS**2*a0r*anS**2+cRR*cSS**2*
     & anTrr*anS**2+2*cRR*cSS**2*anSr**2*anT-ccS**2*anS**2*cSS*anT+
     & ccS*anS**3*cSS*ccT-ccTs*anS**3*cSS**2-cRS*cSSr*anS**3*ccT+cSSs*
     & anS**3*cSS*ccT-cST*cSSt*anS**3*ccT+cST*c0*anS**3*cSS+cST*ccTt*
     & anS**3*cSS-cST**2*cSS*anTtt*anS**2-2*cST**2*cSS*a0t*anS**2-2*
     & cST**2*cSS*anSt**2*anT+cSSt*anS**2*cST**2*anTt+cSSt*anS**2*cST*
     & *2*a0+cTT*cSS**2*anTtt*anS**2+2*cTT*cSS**2*a0t*anS**2+2*cTT*
     & cSS**2*anSt**2*anT+cRS*ccTr*anS**3*cSS-cRS**2*cSS*anTrr*anS**2-
     & cSSs*anS**2*cSS*cST*a0-cSSs*anS**2*cSS*cST*anTt-cSSs*anS**2*
     & cSS*cRS*anTr+cSSs*anS*cSS*cRS*anSr*anT+cSSs*anS*cSS*cST*anSt*
     & anT-cSSs*anS**2*cSS*ccS*anT+2*cST**2*cSS*anSt*anTt*anS+2*cST**
     & 2*cSS*anSt*a0*anS+cST**2*cSS*anStt*anS*anT+2*cST*cRS*cSS*anSt*
     & anTr*anS-2*cST*cRS*cSS*anTrt*anS**2-2*cST*cRS*cSS*a0r*anS**2-4*
     & cST*cRS*cSS*anSt*anSr*anT+2*cST*cRS*cSS*anSr*anTt*anS+2*cST*
     & cRS*cSS*anSr*a0*anS+2*cST*cRS*cSS*anSrt*anS*anT-2*cST*ccS*anS**
     & 2*cSS*anTt-2*cST*ccS*anS**2*cSS*a0+2*cST*ccS*anS*cSS*anSt*anT-
     & cST*cSTt*anS**2*cSS*anTt-cST*cSTt*anS**2*cSS*a0+cST*cSTt*anS*
     & cSS*anSt*anT-cST*cRSt*anS**2*cSS*anTr+cST*cRSt*anS*cSS*anSr*
     & anT-cST*ccSt*anS**2*cSS*anT-cSSt*anS*cST**2*anSt*anT+cST*cSSt*
     & anS**2*cRS*anTr+2*cRS**2*cSS*anSr*anTr*anS+cRS**2*cSS*anSrr*
     & anS*anT-2*cRS*ccS*anS**2*cSS*anTr+2*cRS*ccS*anS*cSS*anSr*anT-
     & cRS*cSTr*anS**2*cSS*anTt-cRS*cSTr*anS**2*cSS*a0+cRS*cSTr*anS*
     & cSS*anSt*anT-cRS*cRSr*anS**2*cSS*anTr+cRS*cRSr*anS*cSS*anSr*
     & anT-cRS*ccSr*anS**2*cSS*anT+cRS*cSSr*anS**2*cST*anTt-cST*cSSt*
     & anS*cRS*anSr*anT+cST*cSSt*anS**2*ccS*anT-2*cTT*cSS**2*anSt*
     & anTt*anS-2*cTT*cSS**2*anSt*a0*anS-cTT*cSS**2*anStt*anS*anT-
     & cSSr*anS*cRS**2*anSr*anT+cRS*cSSr*anS**2*ccS*anT-cRT*cSS**2*
     & anSt*anTr*anS+2*cRT*cSS**2*anSt*anSr*anT-cRT*cSS**2*anSr*anTt*
     & anS-cRT*cSS**2*anSr*a0*anS-cRT*cSS**2*anSrt*anS*anT-2*cRR*cSS**
     & 2*anSr*anTr*anS-cRR*cSS**2*anSrr*anS*anT+ccT*anS**2*cSS**2*
     & anTt+ccT*anS**2*cSS**2*a0+ccR*anS**2*cSS**2*anTr+c0*anS**2*cSS*
     & *2*anT+cSTs*anS**2*cSS**2*anTt+cSTs*anS**2*cSS**2*a0+cRSs*anS**
     & 2*cSS**2*anTr+ccSs*anS**2*cSS**2*anT+cRS*cSSr*anS**2*cST*a0-
     & cRS*cSSr*anS*cST*anSt*anT-ccT*anS*cSS**2*anSt*anT-ccR*anS*cSS**
     & 2*anSr*anT-cSTs*anS*cSS**2*anSt*anT-cRSs*anS*cSS**2*anSr*anT)
     & /anS**3/cSS**3
                brrr= -(cRS*cRR*anS**3*cSS+cRR*cSS**2*anR*anS**2-cRS**
     & 2*cSS*anR*anS**2)/anS**3/cSS**3
                brr = -(-cRRs*anS**3*cSS**2+cSSs*anS**3*cSS*cRR-cST*
     & cSSt*anS**3*cRR+cST*cRRt*anS**3*cSS+cRS*cRRr*anS**3*cSS+cRS*
     & ccR*anS**3*cSS-cRS*cSSr*anS**3*cRR-2*cRS**2*cSS*anRr*anS**2-
     & cRS**2*cSS*a0*anS**2+cSSr*anS**2*cRS**2*anR+cRT*cSS**2*anRt*
     & anS**2+2*cRR*cSS**2*anRr*anS**2+cRR*cSS**2*a0*anS**2+ccS*anS**
     & 3*cSS*cRR+ccR*anS**2*cSS**2*anR+cRSs*anS**2*cSS**2*anR-cSSs*
     & anS**2*cSS*cRS*anR-2*cST*cRS*cSS*anRt*anS**2+2*cST*cRS*cSS*
     & anSt*anR*anS-cST*cRSt*anS**2*cSS*anR+cST*cSSt*anS**2*cRS*anR+2*
     & cRS**2*cSS*anSr*anR*anS-2*cRS*ccS*anS**2*cSS*anR-cRS*cRSr*anS**
     & 2*cSS*anR-cRT*cSS**2*anSt*anR*anS-2*cRR*cSS**2*anSr*anR*anS)
     & /anS**3/cSS**3
                br  = -(c0*anS**2*cSS**2*anR-ccRs*anS**3*cSS**2+cSTs*
     & anS**2*cSS**2*anRt+cRSs*anS**2*cSS**2*anRr+cSSs*anS**3*cSS*ccR-
     & cST*cSSt*anS**3*ccR+cST*ccRt*anS**3*cSS-cST**2*cSS*anRtt*anS**
     & 2-2*cST**2*cSS*anSt**2*anR+cSSt*anS**2*cST**2*anRt+cTT*cSS**2*
     & anRtt*anS**2+2*cTT*cSS**2*anSt**2*anR+cRS*ccRr*anS**3*cSS+cRS*
     & c0*anS**3*cSS-cRS*cSSr*anS**3*ccR-cRS**2*cSS*anRrr*anS**2-2*
     & cRS**2*cSS*a0r*anS**2-2*cRS**2*cSS*anSr**2*anR+cSSr*anS**2*cRS*
     & *2*anRr+cSSr*anS**2*cRS**2*a0+cRT*cSS**2*anRrt*anS**2+cRT*cSS**
     & 2*a0t*anS**2+cRR*cSS**2*anRrr*anS**2+2*cRR*cSS**2*a0r*anS**2+2*
     & cRR*cSS**2*anSr**2*anR-ccS**2*anS**2*cSS*anR+ccS*anS**3*cSS*
     & ccR+ccT*anS**2*cSS**2*anRt+ccR*anS**2*cSS**2*anRr+ccR*anS**2*
     & cSS**2*a0-cSSs*anS**2*cSS*cST*anRt+cSSs*anS*cSS*cST*anSt*anR+
     & cSSs*anS*cSS*cRS*anSr*anR-cSSs*anS**2*cSS*cRS*anRr-cSSs*anS**2*
     & cSS*cRS*a0+2*cST**2*cSS*anSt*anRt*anS+2*cST*cRS*cSS*anSt*anRr*
     & anS-cSSs*anS**2*cSS*ccS*anR+cST**2*cSS*anStt*anS*anR-2*cST*cRS*
     & cSS*anRrt*anS**2-2*cST*cRS*cSS*a0t*anS**2+2*cST*cRS*cSS*anSt*
     & a0*anS-4*cST*cRS*cSS*anSt*anSr*anR-2*cST*ccS*anS**2*cSS*anRt+2*
     & cST*cRS*cSS*anSr*anRt*anS+2*cST*cRS*cSS*anSrt*anS*anR+2*cST*
     & ccS*anS*cSS*anSt*anR-cST*cSTt*anS**2*cSS*anRt+cST*cSTt*anS*cSS*
     & anSt*anR-cST*cRSt*anS**2*cSS*anRr-cST*cRSt*anS**2*cSS*a0+cST*
     & cRSt*anS*cSS*anSr*anR-cST*ccSt*anS**2*cSS*anR-cSSt*anS*cST**2*
     & anSt*anR+cST*cSSt*anS**2*cRS*anRr+cST*cSSt*anS**2*cRS*a0-cST*
     & cSSt*anS*cRS*anSr*anR+cST*cSSt*anS**2*ccS*anR-2*cTT*cSS**2*
     & anSt*anRt*anS-cTT*cSS**2*anStt*anS*anR+2*cRS**2*cSS*anSr*anRr*
     & anS+2*cRS**2*cSS*anSr*a0*anS+cRS**2*cSS*anSrr*anS*anR+2*cRS*
     & ccS*anS*cSS*anSr*anR-cRS*cSTr*anS**2*cSS*anRt+cRS*cSTr*anS*cSS*
     & anSt*anR-cRS*cRSr*anS**2*cSS*anRr-cRS*cRSr*anS**2*cSS*a0+cRS*
     & cRSr*anS*cSS*anSr*anR-cRS*ccSr*anS**2*cSS*anR+cRS*cSSr*anS**2*
     & cST*anRt-cRS*cSSr*anS*cST*anSt*anR-cSSr*anS*cRS**2*anSr*anR+
     & cRS*cSSr*anS**2*ccS*anR-cRT*cSS**2*anSt*anRr*anS-cRT*cSS**2*
     & anSt*a0*anS+2*cRT*cSS**2*anSt*anSr*anR-cRT*cSS**2*anSr*anRt*
     & anS-cRT*cSS**2*anSrt*anS*anR-2*cRR*cSS**2*anSr*anRr*anS-2*cRR*
     & cSS**2*anSr*a0*anS-2*cRS*ccS*anS**2*cSS*anRr-2*cRS*ccS*anS**2*
     & cSS*a0-ccR*anS*cSS**2*anSr*anR-cSTs*anS*cSS**2*anSt*anR+cRSs*
     & anS**2*cSS**2*a0+ccSs*anS**2*cSS**2*anR-cRR*cSS**2*anSrr*anS*
     & anR-ccT*anS*cSS**2*anSt*anR-cRSs*anS*cSS**2*anSr*anR)/anS**
     & 3/cSS**3
                bst = 0
                brs = 0
                brt = -(cSSs*anS**3*cSS*cRT+cST*ccR*anS**3*cSS+cST*
     & cRTt*anS**3*cSS-cST*cSSt*anS**3*cRT-2*cST**2*cSS*anRt*anS**2+
     & cSSt*anS**2*cST**2*anR+2*cTT*cSS**2*anRt*anS**2+cRS*cRTr*anS**
     & 3*cSS+cRS*ccT*anS**3*cSS-cRS*cSSr*anS**3*cRT-2*cRS**2*cSS*anTr*
     & anS**2+cSSr*anS**2*cRS**2*anT+cRT*cSS**2*anTt*anS**2+cRT*cSS**
     & 2*anRr*anS**2+cRT*cSS**2*a0*anS**2+2*cRR*cSS**2*anTr*anS**2+
     & ccS*anS**3*cSS*cRT+ccT*anS**2*cSS**2*anR+ccR*anS**2*cSS**2*anT+
     & cSTs*anS**2*cSS**2*anR+cRSs*anS**2*cSS**2*anT-cRTs*anS**3*cSS**
     & 2-cSSs*anS**2*cSS*cST*anR-cSSs*anS**2*cSS*cRS*anT+2*cST**2*cSS*
     & anSt*anR*anS+2*cST*cRS*cSS*anSt*anT*anS-2*cST*cRS*cSS*anTt*anS*
     & *2-2*cST*cRS*cSS*anRr*anS**2-2*cST*cRS*cSS*a0*anS**2+2*cST*cRS*
     & cSS*anSr*anR*anS-2*cST*ccS*anS**2*cSS*anR-cST*cSTt*anS**2*cSS*
     & anR-cST*cRSt*anS**2*cSS*anT+cST*cSSt*anS**2*cRS*anT-2*cTT*cSS**
     & 2*anSt*anR*anS-2*cRS*ccS*anS**2*cSS*anT-cRS*cSTr*anS**2*cSS*
     & anR-cRS*cRSr*anS**2*cSS*anT+cRS*cSSr*anS**2*cST*anR+2*cRS**2*
     & cSS*anSr*anT*anS-cRT*cSS**2*anSr*anR*anS-2*cRR*cSS**2*anSr*anT*
     & anS-cRT*cSS**2*anSt*anT*anS)/anS**3/cSS**3
                bstt= 0
                brst= 0
                brrs= 0
                brtt= -(cST*cRT*anS**3*cSS-cST**2*cSS*anR*anS**2-2*cST*
     & cRS*cSS*anT*anS**2+cTT*cSS**2*anR*anS**2+cRS*cTT*anS**3*cSS+
     & cRT*cSS**2*anT*anS**2)/anS**3/cSS**3
                brrt= -(cST*cRR*anS**3*cSS-2*cST*cRS*cSS*anR*anS**2+
     & cRS*cRT*anS**3*cSS-cRS**2*cSS*anT*anS**2+cRT*cSS**2*anR*anS**2+
     & cRR*cSS**2*anT*anS**2)/anS**3/cSS**3
                bf  = -(ffs*anS**3*cSS**2+cSSs*anS**2*cSS*cST*gt-cSSs*
     & anS*cSS*cST*anSt*g+cSSs*anS**2*cSS*cRS*gr-cSSs*anS*cSS*cRS*
     & anSr*g+cSSs*anS**2*cSS*ccS*g-cSSs*anS**3*cSS*ff-cSSt*anS**2*
     & cST**2*gt+cST**2*cSS*gtt*anS**2+2*cST**2*cSS*anSt**2*g-cST*fft*
     & anS**3*cSS+cST*cSSt*anS**3*ff-cTT*cSS**2*gtt*anS**2-2*cTT*cSS**
     & 2*anSt**2*g+2*cRS**2*cSS*anSr**2*g-cRS*ffr*anS**3*cSS+cRS**2*
     & cSS*grr*anS**2-cSSr*anS**2*cRS**2*gr+cRS*cSSr*anS**3*ff-cRT*
     & cSS**2*grt*anS**2-2*cRR*cSS**2*anSr**2*g-cRR*cSS**2*grr*anS**2+
     & ccS**2*anS**2*cSS*g-ccS*anS**3*cSS*ff-ccT*anS**2*cSS**2*gt-ccR*
     & anS**2*cSS**2*gr-c0*anS**2*cSS**2*g-cSTs*anS**2*cSS**2*gt-cRSs*
     & anS**2*cSS**2*gr-ccSs*anS**2*cSS**2*g-cST*cSSt*anS**2*ccS*g-
     & cST*cSSt*anS**2*cRS*gr+2*cST*cRS*cSS*grt*anS**2+2*cST*ccS*anS**
     & 2*cSS*gt+cST*cSTt*anS**2*cSS*gt+cST*cRSt*anS**2*cSS*gr+cST*
     & ccSt*anS**2*cSS*g-2*cST**2*cSS*anSt*gt*anS-cST**2*cSS*anStt*
     & anS*g-2*cST*cRS*cSS*anSt*gr*anS+4*cST*cRS*cSS*anSt*anSr*g-2*
     & cST*cRS*cSS*anSr*gt*anS-2*cST*cRS*cSS*anSrt*anS*g-2*cST*ccS*
     & anS*cSS*anSt*g-cST*cSTt*anS*cSS*anSt*g-cST*cRSt*anS*cSS*anSr*g+
     & cSSt*anS*cST**2*anSt*g+cST*cSSt*anS*cRS*anSr*g+2*cTT*cSS**2*
     & anSt*gt*anS+cTT*cSS**2*anStt*anS*g+2*cRS*ccS*anS**2*cSS*gr+cRS*
     & cSTr*anS**2*cSS*gt+cRS*cRSr*anS**2*cSS*gr+cRS*ccSr*anS**2*cSS*
     & g-cRS*cSSr*anS**2*cST*gt-cRS*cSSr*anS**2*ccS*g-2*cRS**2*cSS*
     & anSr*gr*anS-cRS**2*cSS*anSrr*anS*g-2*cRS*ccS*anS*cSS*anSr*g-
     & cRS*cSTr*anS*cSS*anSt*g-cRS*cRSr*anS*cSS*anSr*g+cRS*cSSr*anS*
     & cST*anSt*g+cSSr*anS*cRS**2*anSr*g+cRT*cSS**2*anSt*gr*anS-2*cRT*
     & cSS**2*anSt*anSr*g+cRT*cSS**2*anSr*gt*anS+cRT*cSS**2*anSrt*anS*
     & g+2*cRR*cSS**2*anSr*gr*anS+cRR*cSS**2*anSrr*anS*g+ccT*anS*cSS**
     & 2*anSt*g+ccR*anS*cSS**2*anSr*g+cSTs*anS*cSS**2*anSt*g+cRSs*anS*
     & cSS**2*anSr*g)/anS**3/cSS**3
                 ! ---------------- Start t direction ---------------
                  ur=ur4(i1,i2,i3)
                  urr=urr4(i1,i2,i3)
                  urrr=urrr2(i1,i2,i3)
                  ut=ut4(i1,i2,i3)
                  utt=utt4(i1,i2,i3)
                  uttt=uttt2(i1,i2,i3)
                  urt=urt4(i1,i2,i3)
                  urrt=urrt2(i1,i2,i3)
                  urtt=urtt2(i1,i2,i3)
                  r(i1-is1,i2-is2,i3-is3)=g - anR*ur -anT*ut
                  r(i1-2*is1,i2-2*is2,i3-2*is3)=-( br*ur +brr*urr +
     & brrr*urrr +bt*ut +btt*utt + bttt*uttt + brt*urt + brrt*urrt + 
     & brtt*urtt +bf )
                else
                  r(j1,j2,j3)=0.
                  r(i1-2*is1,i2-2*is2,i3-2*is3)=0.
                end if
              end do
              end do
              end do
             end if
           else if( axis.eq.2 .and. nd.eq.3 )then
             a0=bcData(0,side,axis)
             a1=bcData(1,side,axis)
             if( a1.eq.0. )then
               write(*,*) 'lineSmoothRHS:ERROR: a1=0!'
               stop 2
             end if
             if( gridType.eq.rectangular )then
            ! write(*,*) 'LSRHSt:4th-order neumann+EQN2 (rect)'
            !   write(*,'(''LSRHS:4th neumannAndEqn (rect) nn2a,nn2b='',2i3,)') nn2a,nn2b
               drn=dx(axis)
               nsign = 2*side-1
               ! (i1,i2,i3) = boundary point
               ! (j1,j2,j3) = ghost point
               do i3=m3a,m3b,m3c
                j3=i3-is3
               do i2=m2a,m2b,m2c
                j2=i2-is2
               do i1=m1a,m1b,m1c
                j1=i1-is1
                if( mask(i1,i2,i3).gt.0 )then
                ! the rhs for the mixed BC is stored in the ghost point value of f
                 ! the rhs for the mixed BC is stored in the ghost point value of f
                ! Cartesian grids use dx: 
                   g = f(j1,j2,j3)
                   ff=f(i1,i2,i3)
                     ! 3rd-order one sided:
                     fft=is3*(-11.*ff+18.*f(i1,i2,i3+is3)-9.*f(i1,i2,
     & i3+2*is3)+2.*f(i1,i2,i3+3*is3))/(6.*dx(2))
                     gv( 0, 0, 0)=f(i1,i2,j3)
                     i1m1 = i1-1
                     if( i1m1.lt.nn1a .or. mask(i1m1,i2,i3).le.0 )then
                      ! f(i1m1,i2,j3)= extrap3(f,i1m1,i2,j3, 1,0,0)
                      ! gv(-1, 0, 0) = extrap3(f,i1m1,i2,j3, 1,0,0)
                        if( mask(i1m1+  (1),i2+  (0),i3+  (0)).gt.0 
     & .and. mask(i1m1+2*(1),i2+2*(0),i3+2*(0)).gt.0 .and.mask(i1m1+3*
     & (1),i2+3*(0),i3+3*(0)).gt.0 .and.mask(i1m1+4*(1),i2+4*(0),i3+4*
     & (0)).gt.0 )then
                         gv(-1,0,0)=(4.*f(i1m1+(1),i2+(0),j3+(0))-6.*f(
     & i1m1+2*(1),i2+2*(0),j3+2*(0))+4.*f(i1m1+3*(1),i2+3*(0),j3+3*(0)
     & )-f(i1m1+4*(1),i2+4*(0),j3+4*(0)))
                        else if( mask(i1m1+  (1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1m1+2*(1),i2+2*(0),i3+2*(0)).gt.0 .and.mask(
     & i1m1+3*(1),i2+3*(0),i3+3*(0)).gt.0 )then
                         gv(-1,0,0)=(3.*f(i1m1+(1),i2+(0),j3+(0))-3.*f(
     & i1m1+2*(1),i2+2*(0),j3+2*(0))+f(i1m1+3*(1),i2+3*(0),j3+3*(0)))
                        else if( mask(i1m1+  (1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1m1+2*(1),i2+2*(0),i3+2*(0)).gt.0 )then
                         gv(-1,0,0)=(2.*f(i1m1+(1),i2+(0),j3+(0))-f(
     & i1m1+2*(1),i2+2*(0),j3+2*(0)))
                        else
                         gv(-1,0,0)=(f(i1m1+(1),i2+(0),j3+(0)))
                        end if
                     else
                      gv(-1, 0, 0) = f(i1m1,i2,j3)
                     end if
                     i1p1 = i1+1
                     if( i1p1.gt.nn1b .or. mask(i1p1,i2,i3).le.0 )then
                      ! f(i1p1,i2,j3)= extrap3(f,i1p1,i2,j3,-1,0,0)
                      ! gv(+1, 0, 0) = extrap3(f,i1p1,i2,j3,-1,0,0)
                        if( mask(i1p1+  (-1),i2+  (0),i3+  (0)).gt.0 
     & .and. mask(i1p1+2*(-1),i2+2*(0),i3+2*(0)).gt.0 .and.mask(i1p1+
     & 3*(-1),i2+3*(0),i3+3*(0)).gt.0 .and.mask(i1p1+4*(-1),i2+4*(0),
     & i3+4*(0)).gt.0 )then
                         gv(+1,0,0)=(4.*f(i1p1+(-1),i2+(0),j3+(0))-6.*
     & f(i1p1+2*(-1),i2+2*(0),j3+2*(0))+4.*f(i1p1+3*(-1),i2+3*(0),j3+
     & 3*(0))-f(i1p1+4*(-1),i2+4*(0),j3+4*(0)))
                        else if( mask(i1p1+  (-1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1p1+2*(-1),i2+2*(0),i3+2*(0)).gt.0 .and.mask(
     & i1p1+3*(-1),i2+3*(0),i3+3*(0)).gt.0 )then
                         gv(+1,0,0)=(3.*f(i1p1+(-1),i2+(0),j3+(0))-3.*
     & f(i1p1+2*(-1),i2+2*(0),j3+2*(0))+f(i1p1+3*(-1),i2+3*(0),j3+3*(
     & 0)))
                        else if( mask(i1p1+  (-1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1p1+2*(-1),i2+2*(0),i3+2*(0)).gt.0 )then
                         gv(+1,0,0)=(2.*f(i1p1+(-1),i2+(0),j3+(0))-f(
     & i1p1+2*(-1),i2+2*(0),j3+2*(0)))
                        else
                         gv(+1,0,0)=(f(i1p1+(-1),i2+(0),j3+(0)))
                        end if
                     else
                      gv(+1, 0, 0) = f(i1p1,i2,j3)
                     end if
                     ! grr=FRR(i1,i2,j3)
                     grr = ((gv(+1,0,0)-2.*gv(0,0,0)+gv(-1,0,0))*h22(0)
     & )
                     i2m1 = i2-1
                     if( i2m1.lt.nn2a .or. mask(i1,i2m1,i3).le.0 )then
                      ! f(i1,i2m1,j3)= extrap3(f,i1,i2m1,j3, 0,1,0)
                      ! gv( 0,-1, 0) = extrap3(f,i1,i2m1,j3, 0,1,0)
                        if( mask(i1+  (0),i2m1+  (1),i3+  (0)).gt.0 
     & .and. mask(i1+2*(0),i2m1+2*(1),i3+2*(0)).gt.0 .and.mask(i1+3*(
     & 0),i2m1+3*(1),i3+3*(0)).gt.0 .and.mask(i1+4*(0),i2m1+4*(1),i3+
     & 4*(0)).gt.0 )then
                         gv(0,-1,0)=(4.*f(i1+(0),i2m1+(1),j3+(0))-6.*f(
     & i1+2*(0),i2m1+2*(1),j3+2*(0))+4.*f(i1+3*(0),i2m1+3*(1),j3+3*(0)
     & )-f(i1+4*(0),i2m1+4*(1),j3+4*(0)))
                        else if( mask(i1+  (0),i2m1+  (1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2m1+2*(1),i3+2*(0)).gt.0 .and.mask(
     & i1+3*(0),i2m1+3*(1),i3+3*(0)).gt.0 )then
                         gv(0,-1,0)=(3.*f(i1+(0),i2m1+(1),j3+(0))-3.*f(
     & i1+2*(0),i2m1+2*(1),j3+2*(0))+f(i1+3*(0),i2m1+3*(1),j3+3*(0)))
                        else if( mask(i1+  (0),i2m1+  (1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2m1+2*(1),i3+2*(0)).gt.0 )then
                         gv(0,-1,0)=(2.*f(i1+(0),i2m1+(1),j3+(0))-f(i1+
     & 2*(0),i2m1+2*(1),j3+2*(0)))
                        else
                         gv(0,-1,0)=(f(i1+(0),i2m1+(1),j3+(0)))
                        end if
                     else
                      gv( 0,-1, 0) = f(i1,i2m1,j3)
                     end if
                     i2p1 = i2+1
                     if( i2p1.gt.nn2b .or. mask(i1,i2p1,i3).le.0 )then
                      ! f(i1,i2p1,j3)= extrap3(f,i1,i2p1,j3, 0,-1,0)
                      ! gv( 0,+1, 0) = extrap3(f,i1,i2p1,j3, 0,-1,0)
                        if( mask(i1+  (0),i2p1+  (-1),i3+  (0)).gt.0 
     & .and. mask(i1+2*(0),i2p1+2*(-1),i3+2*(0)).gt.0 .and.mask(i1+3*(
     & 0),i2p1+3*(-1),i3+3*(0)).gt.0 .and.mask(i1+4*(0),i2p1+4*(-1),
     & i3+4*(0)).gt.0 )then
                         gv(0,+1,0)=(4.*f(i1+(0),i2p1+(-1),j3+(0))-6.*
     & f(i1+2*(0),i2p1+2*(-1),j3+2*(0))+4.*f(i1+3*(0),i2p1+3*(-1),j3+
     & 3*(0))-f(i1+4*(0),i2p1+4*(-1),j3+4*(0)))
                        else if( mask(i1+  (0),i2p1+  (-1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2p1+2*(-1),i3+2*(0)).gt.0 .and.mask(
     & i1+3*(0),i2p1+3*(-1),i3+3*(0)).gt.0 )then
                         gv(0,+1,0)=(3.*f(i1+(0),i2p1+(-1),j3+(0))-3.*
     & f(i1+2*(0),i2p1+2*(-1),j3+2*(0))+f(i1+3*(0),i2p1+3*(-1),j3+3*(
     & 0)))
                        else if( mask(i1+  (0),i2p1+  (-1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2p1+2*(-1),i3+2*(0)).gt.0 )then
                         gv(0,+1,0)=(2.*f(i1+(0),i2p1+(-1),j3+(0))-f(
     & i1+2*(0),i2p1+2*(-1),j3+2*(0)))
                        else
                         gv(0,+1,0)=(f(i1+(0),i2p1+(-1),j3+(0)))
                        end if
                     else
                      gv( 0,+1, 0) = f(i1,i2p1,j3)
                     end if
                     ! gss=FSS(i1,i2,j3)
                     gss = ((gv(0,+1,0)-2.*gv(0,0,0)+gv(0,-1,0))*h22(1)
     & )
                     ! if( i1.eq.nn1a )then
                     !   grr =FRRa(i1,i2,j3)
                     ! else if( i1.eq.nn1b )then
                     !   grr =FRRb(i1,i2,j3)
                     ! else 
                     !   grr=FRR(i1,i2,j3)
                     ! end if
                     ! if( i2.eq.nn2a )then
                     !   gss =FSSa(i1,i2,j3)
                     ! else if( i2.eq.nn2b )then
                     !   gss =FSSb(i1,i2,j3)
                     ! else 
                     !   gss=FSS(i1,i2,j3)
                     ! end if
            !   write(*,'(''LNSM : i1,i2,i3,g,ffr,gss,u,uss ='',3i3,5f11.6)') i1,i2,i3,g,ffr,gss,u(i1,i2,i3),(u(i1,i2+1,i3)-2.*u(i1,i2,i3)+u(i1,i2-1,i3))/dx(1)**2
            !  write(*,'('' i1,i2,i3,f,f,f='',3i3,4e11.2)') i1,i2,i3,f(i1,i2,i3),f(i1+2*is1,i2+2*is2,i3),f(i1+is1,i2+is2,i3)
                r(j1,j2,j3)=g
                  r(i1,i2,i3-2*is3)=(fft-(grr+gss- a0*ff )/(a1*nsign))*
     & dx(axis)**3
                else
                  r(j1,j2,j3)=0.
                  r(i1-2*is1,i2-2*is2,i3-2*is3)=0.
                end if
              end do
              end do
              end do
             else
               ! **** curvilinear case ****
               nsign = 2*side-1
               ! (i1,i2,i3) = boundary point
               ! (j1,j2,j3) = ghost point
               do i3=m3a,m3b,m3c
                j3=i3-is3
               do i2=m2a,m2b,m2c
                j2=i2-is2
               do i1=m1a,m1b,m1c
                  j1=i1-is1
                 if( mask(i1,i2,i3).gt.0 )then
                ! the rhs for the mixed BC is stored in the ghost point value of f
                 ! the rhs for the mixed BC is stored in the ghost point value of f
                ! Curvilinear grids use dr:
                   g = f(j1,j2,j3)
                   ff= f(i1,i2,i3)
                    ax1 = mod(axis+1,nd)
                    ax2 = mod(axis+2,nd)
                    mdim(0,0)=nn1a
                    mdim(1,0)=nn1b
                    mdim(0,1)=nn2a
                    mdim(1,1)=nn2b
                    mdim(0,2)=nn3a
                    mdim(1,2)=nn3b
                     ! 3rd-order one sided:
                     fft=is3*(-11.*ff+18.*f(i1,i2,i3+is3)-9.*f(i1,i2,
     & i3+2*is3)+2.*f(i1,i2,i3+3*is3))/(6.*dr(2))
                     fv( 0, 0, 0) = f(i1,i2,i3)
                     gv( 0, 0, 0) = f(i1,i2,j3)
                     i1m1 = i1-1
                     if( i1m1.lt.nn1a .or. mask(i1m1,i2,i3).le.0 )then
                      ! f(i1m1,i2,i3)= extrap3(f,i1m1,i2,i3, 1,0,0)
                      ! f(i1m1,i2,j3)= extrap3(f,i1m1,i2,j3, 1,0,0)
                      ! fv(-1, 0, 0) = extrap3(f,i1m1,i2,i3, 1,0,0)
                      ! gv(-1, 0, 0) = extrap3(f,i1m1,i2,j3, 1,0,0)
                        if( mask(i1m1+  (1),i2+  (0),i3+  (0)).gt.0 
     & .and. mask(i1m1+2*(1),i2+2*(0),i3+2*(0)).gt.0 .and.mask(i1m1+3*
     & (1),i2+3*(0),i3+3*(0)).gt.0 .and.mask(i1m1+4*(1),i2+4*(0),i3+4*
     & (0)).gt.0 )then
                         fv(-1,0,0)=(4.*f(i1m1+(1),i2+(0),i3+(0))-6.*f(
     & i1m1+2*(1),i2+2*(0),i3+2*(0))+4.*f(i1m1+3*(1),i2+3*(0),i3+3*(0)
     & )-f(i1m1+4*(1),i2+4*(0),i3+4*(0)))
                        else if( mask(i1m1+  (1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1m1+2*(1),i2+2*(0),i3+2*(0)).gt.0 .and.mask(
     & i1m1+3*(1),i2+3*(0),i3+3*(0)).gt.0 )then
                         fv(-1,0,0)=(3.*f(i1m1+(1),i2+(0),i3+(0))-3.*f(
     & i1m1+2*(1),i2+2*(0),i3+2*(0))+f(i1m1+3*(1),i2+3*(0),i3+3*(0)))
                        else if( mask(i1m1+  (1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1m1+2*(1),i2+2*(0),i3+2*(0)).gt.0 )then
                         fv(-1,0,0)=(2.*f(i1m1+(1),i2+(0),i3+(0))-f(
     & i1m1+2*(1),i2+2*(0),i3+2*(0)))
                        else
                         fv(-1,0,0)=(f(i1m1+(1),i2+(0),i3+(0)))
                        end if
                        if( mask(i1m1+  (1),i2+  (0),i3+  (0)).gt.0 
     & .and. mask(i1m1+2*(1),i2+2*(0),i3+2*(0)).gt.0 .and.mask(i1m1+3*
     & (1),i2+3*(0),i3+3*(0)).gt.0 .and.mask(i1m1+4*(1),i2+4*(0),i3+4*
     & (0)).gt.0 )then
                         gv(-1,0,0)=(4.*f(i1m1+(1),i2+(0),j3+(0))-6.*f(
     & i1m1+2*(1),i2+2*(0),j3+2*(0))+4.*f(i1m1+3*(1),i2+3*(0),j3+3*(0)
     & )-f(i1m1+4*(1),i2+4*(0),j3+4*(0)))
                        else if( mask(i1m1+  (1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1m1+2*(1),i2+2*(0),i3+2*(0)).gt.0 .and.mask(
     & i1m1+3*(1),i2+3*(0),i3+3*(0)).gt.0 )then
                         gv(-1,0,0)=(3.*f(i1m1+(1),i2+(0),j3+(0))-3.*f(
     & i1m1+2*(1),i2+2*(0),j3+2*(0))+f(i1m1+3*(1),i2+3*(0),j3+3*(0)))
                        else if( mask(i1m1+  (1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1m1+2*(1),i2+2*(0),i3+2*(0)).gt.0 )then
                         gv(-1,0,0)=(2.*f(i1m1+(1),i2+(0),j3+(0))-f(
     & i1m1+2*(1),i2+2*(0),j3+2*(0)))
                        else
                         gv(-1,0,0)=(f(i1m1+(1),i2+(0),j3+(0)))
                        end if
                     else
                      fv(-1, 0, 0) = f(i1m1,i2,i3)
                      gv(-1, 0, 0) = f(i1m1,i2,j3)
                     endif
                     i1p1 = i1+1
                     if( i1p1.gt.nn1b .or. mask(i1p1,i2,i3).le.0 )then
                      ! f(i1p1,i2,i3)= extrap3(f,i1p1,i2,i3,-1,0,0)
                      ! f(i1p1,i2,j3)= extrap3(f,i1p1,i2,j3,-1,0,0)
                      ! fv(+1, 0, 0) = extrap3(f,i1p1,i2,i3,-1,0,0)
                      ! gv(+1, 0, 0) = extrap3(f,i1p1,i2,j3,-1,0,0)
                        if( mask(i1p1+  (-1),i2+  (0),i3+  (0)).gt.0 
     & .and. mask(i1p1+2*(-1),i2+2*(0),i3+2*(0)).gt.0 .and.mask(i1p1+
     & 3*(-1),i2+3*(0),i3+3*(0)).gt.0 .and.mask(i1p1+4*(-1),i2+4*(0),
     & i3+4*(0)).gt.0 )then
                         fv(+1,0,0)=(4.*f(i1p1+(-1),i2+(0),i3+(0))-6.*
     & f(i1p1+2*(-1),i2+2*(0),i3+2*(0))+4.*f(i1p1+3*(-1),i2+3*(0),i3+
     & 3*(0))-f(i1p1+4*(-1),i2+4*(0),i3+4*(0)))
                        else if( mask(i1p1+  (-1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1p1+2*(-1),i2+2*(0),i3+2*(0)).gt.0 .and.mask(
     & i1p1+3*(-1),i2+3*(0),i3+3*(0)).gt.0 )then
                         fv(+1,0,0)=(3.*f(i1p1+(-1),i2+(0),i3+(0))-3.*
     & f(i1p1+2*(-1),i2+2*(0),i3+2*(0))+f(i1p1+3*(-1),i2+3*(0),i3+3*(
     & 0)))
                        else if( mask(i1p1+  (-1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1p1+2*(-1),i2+2*(0),i3+2*(0)).gt.0 )then
                         fv(+1,0,0)=(2.*f(i1p1+(-1),i2+(0),i3+(0))-f(
     & i1p1+2*(-1),i2+2*(0),i3+2*(0)))
                        else
                         fv(+1,0,0)=(f(i1p1+(-1),i2+(0),i3+(0)))
                        end if
                        if( mask(i1p1+  (-1),i2+  (0),i3+  (0)).gt.0 
     & .and. mask(i1p1+2*(-1),i2+2*(0),i3+2*(0)).gt.0 .and.mask(i1p1+
     & 3*(-1),i2+3*(0),i3+3*(0)).gt.0 .and.mask(i1p1+4*(-1),i2+4*(0),
     & i3+4*(0)).gt.0 )then
                         gv(+1,0,0)=(4.*f(i1p1+(-1),i2+(0),j3+(0))-6.*
     & f(i1p1+2*(-1),i2+2*(0),j3+2*(0))+4.*f(i1p1+3*(-1),i2+3*(0),j3+
     & 3*(0))-f(i1p1+4*(-1),i2+4*(0),j3+4*(0)))
                        else if( mask(i1p1+  (-1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1p1+2*(-1),i2+2*(0),i3+2*(0)).gt.0 .and.mask(
     & i1p1+3*(-1),i2+3*(0),i3+3*(0)).gt.0 )then
                         gv(+1,0,0)=(3.*f(i1p1+(-1),i2+(0),j3+(0))-3.*
     & f(i1p1+2*(-1),i2+2*(0),j3+2*(0))+f(i1p1+3*(-1),i2+3*(0),j3+3*(
     & 0)))
                        else if( mask(i1p1+  (-1),i2+  (0),i3+  (0))
     & .gt.0 .and. mask(i1p1+2*(-1),i2+2*(0),i3+2*(0)).gt.0 )then
                         gv(+1,0,0)=(2.*f(i1p1+(-1),i2+(0),j3+(0))-f(
     & i1p1+2*(-1),i2+2*(0),j3+2*(0)))
                        else
                         gv(+1,0,0)=(f(i1p1+(-1),i2+(0),j3+(0)))
                        end if
                     else
                      fv(+1, 0, 0) = f(i1p1,i2,i3)
                      gv(+1, 0, 0) = f(i1p1,i2,j3)
                     endif
                     ! ffr= FR(i1,i2,i3)
                     ! gr = FR(i1,i2,j3)
                     ! grr=FRR(i1,i2,j3)
                     ffr = ((fv(+1,0,0)-fv(-1,0,0))*d12(0))
                     gr  = ((gv(+1,0,0)-gv(-1,0,0))*d12(0))
                     grr = ((gv(+1,0,0)-2.*gv(0,0,0)+gv(-1,0,0))*d22(0)
     & )
                     i2m1 = i2-1
                     if( i2m1.lt.nn2a .or. mask(i1,i2m1,i3).le.0 )then
                      ! f(i1,i2m1,i3)= extrap3(f,i1,i2m1,i3, 0,1,0)
                      ! f(i1,i2m1,j3)= extrap3(f,i1,i2m1,j3, 0,1,0)
                      ! fv( 0,-1, 0) = extrap3(f,i1,i2m1,i3, 0,1,0)
                      ! gv( 0,-1, 0) = extrap3(f,i1,i2m1,j3, 0,1,0)
                        if( mask(i1+  (0),i2m1+  (1),i3+  (0)).gt.0 
     & .and. mask(i1+2*(0),i2m1+2*(1),i3+2*(0)).gt.0 .and.mask(i1+3*(
     & 0),i2m1+3*(1),i3+3*(0)).gt.0 .and.mask(i1+4*(0),i2m1+4*(1),i3+
     & 4*(0)).gt.0 )then
                         fv(0,-1,0)=(4.*f(i1+(0),i2m1+(1),i3+(0))-6.*f(
     & i1+2*(0),i2m1+2*(1),i3+2*(0))+4.*f(i1+3*(0),i2m1+3*(1),i3+3*(0)
     & )-f(i1+4*(0),i2m1+4*(1),i3+4*(0)))
                        else if( mask(i1+  (0),i2m1+  (1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2m1+2*(1),i3+2*(0)).gt.0 .and.mask(
     & i1+3*(0),i2m1+3*(1),i3+3*(0)).gt.0 )then
                         fv(0,-1,0)=(3.*f(i1+(0),i2m1+(1),i3+(0))-3.*f(
     & i1+2*(0),i2m1+2*(1),i3+2*(0))+f(i1+3*(0),i2m1+3*(1),i3+3*(0)))
                        else if( mask(i1+  (0),i2m1+  (1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2m1+2*(1),i3+2*(0)).gt.0 )then
                         fv(0,-1,0)=(2.*f(i1+(0),i2m1+(1),i3+(0))-f(i1+
     & 2*(0),i2m1+2*(1),i3+2*(0)))
                        else
                         fv(0,-1,0)=(f(i1+(0),i2m1+(1),i3+(0)))
                        end if
                        if( mask(i1+  (0),i2m1+  (1),i3+  (0)).gt.0 
     & .and. mask(i1+2*(0),i2m1+2*(1),i3+2*(0)).gt.0 .and.mask(i1+3*(
     & 0),i2m1+3*(1),i3+3*(0)).gt.0 .and.mask(i1+4*(0),i2m1+4*(1),i3+
     & 4*(0)).gt.0 )then
                         gv(0,-1,0)=(4.*f(i1+(0),i2m1+(1),j3+(0))-6.*f(
     & i1+2*(0),i2m1+2*(1),j3+2*(0))+4.*f(i1+3*(0),i2m1+3*(1),j3+3*(0)
     & )-f(i1+4*(0),i2m1+4*(1),j3+4*(0)))
                        else if( mask(i1+  (0),i2m1+  (1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2m1+2*(1),i3+2*(0)).gt.0 .and.mask(
     & i1+3*(0),i2m1+3*(1),i3+3*(0)).gt.0 )then
                         gv(0,-1,0)=(3.*f(i1+(0),i2m1+(1),j3+(0))-3.*f(
     & i1+2*(0),i2m1+2*(1),j3+2*(0))+f(i1+3*(0),i2m1+3*(1),j3+3*(0)))
                        else if( mask(i1+  (0),i2m1+  (1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2m1+2*(1),i3+2*(0)).gt.0 )then
                         gv(0,-1,0)=(2.*f(i1+(0),i2m1+(1),j3+(0))-f(i1+
     & 2*(0),i2m1+2*(1),j3+2*(0)))
                        else
                         gv(0,-1,0)=(f(i1+(0),i2m1+(1),j3+(0)))
                        end if
                     else
                      fv( 0,-1, 0) = f(i1,i2m1,i3)
                      gv( 0,-1, 0) = f(i1,i2m1,j3)
                     endif
                     i2p1 = i2+1
                     if( i2p1.gt.nn2b .or. mask(i1,i2p1,i3).le.0 )then
                      ! f(i1,i2p1,i3)= extrap3(f,i1,i2p1,i3, 0,-1,0)
                      ! f(i1,i2p1,j3)= extrap3(f,i1,i2p1,j3, 0,-1,0)
                      ! fv( 0,+1, 0) = extrap3(f,i1,i2p1,i3, 0,-1,0)
                      ! gv( 0,+1, 0) = extrap3(f,i1,i2p1,j3, 0,-1,0)
                        if( mask(i1+  (0),i2p1+  (-1),i3+  (0)).gt.0 
     & .and. mask(i1+2*(0),i2p1+2*(-1),i3+2*(0)).gt.0 .and.mask(i1+3*(
     & 0),i2p1+3*(-1),i3+3*(0)).gt.0 .and.mask(i1+4*(0),i2p1+4*(-1),
     & i3+4*(0)).gt.0 )then
                         fv(0,+1,0)=(4.*f(i1+(0),i2p1+(-1),i3+(0))-6.*
     & f(i1+2*(0),i2p1+2*(-1),i3+2*(0))+4.*f(i1+3*(0),i2p1+3*(-1),i3+
     & 3*(0))-f(i1+4*(0),i2p1+4*(-1),i3+4*(0)))
                        else if( mask(i1+  (0),i2p1+  (-1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2p1+2*(-1),i3+2*(0)).gt.0 .and.mask(
     & i1+3*(0),i2p1+3*(-1),i3+3*(0)).gt.0 )then
                         fv(0,+1,0)=(3.*f(i1+(0),i2p1+(-1),i3+(0))-3.*
     & f(i1+2*(0),i2p1+2*(-1),i3+2*(0))+f(i1+3*(0),i2p1+3*(-1),i3+3*(
     & 0)))
                        else if( mask(i1+  (0),i2p1+  (-1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2p1+2*(-1),i3+2*(0)).gt.0 )then
                         fv(0,+1,0)=(2.*f(i1+(0),i2p1+(-1),i3+(0))-f(
     & i1+2*(0),i2p1+2*(-1),i3+2*(0)))
                        else
                         fv(0,+1,0)=(f(i1+(0),i2p1+(-1),i3+(0)))
                        end if
                        if( mask(i1+  (0),i2p1+  (-1),i3+  (0)).gt.0 
     & .and. mask(i1+2*(0),i2p1+2*(-1),i3+2*(0)).gt.0 .and.mask(i1+3*(
     & 0),i2p1+3*(-1),i3+3*(0)).gt.0 .and.mask(i1+4*(0),i2p1+4*(-1),
     & i3+4*(0)).gt.0 )then
                         gv(0,+1,0)=(4.*f(i1+(0),i2p1+(-1),j3+(0))-6.*
     & f(i1+2*(0),i2p1+2*(-1),j3+2*(0))+4.*f(i1+3*(0),i2p1+3*(-1),j3+
     & 3*(0))-f(i1+4*(0),i2p1+4*(-1),j3+4*(0)))
                        else if( mask(i1+  (0),i2p1+  (-1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2p1+2*(-1),i3+2*(0)).gt.0 .and.mask(
     & i1+3*(0),i2p1+3*(-1),i3+3*(0)).gt.0 )then
                         gv(0,+1,0)=(3.*f(i1+(0),i2p1+(-1),j3+(0))-3.*
     & f(i1+2*(0),i2p1+2*(-1),j3+2*(0))+f(i1+3*(0),i2p1+3*(-1),j3+3*(
     & 0)))
                        else if( mask(i1+  (0),i2p1+  (-1),i3+  (0))
     & .gt.0 .and. mask(i1+2*(0),i2p1+2*(-1),i3+2*(0)).gt.0 )then
                         gv(0,+1,0)=(2.*f(i1+(0),i2p1+(-1),j3+(0))-f(
     & i1+2*(0),i2p1+2*(-1),j3+2*(0)))
                        else
                         gv(0,+1,0)=(f(i1+(0),i2p1+(-1),j3+(0)))
                        end if
                     else
                      fv( 0,+1, 0) = f(i1,i2p1,i3)
                      gv( 0,+1, 0) = f(i1,i2p1,j3)
                     endif
                     ! ffs= FS(i1,i2,i3)
                     ! gs = FS(i1,i2,j3)
                     ! gss=FSS(i1,i2,j3)
                     ffs = ((fv(0,+1,0)-fv(0,-1,0))*d12(1))
                     gs  = ((gv(0,+1,0)-gv(0,-1,0))*d12(1))
                     gss = ((gv(0,+1,0)-2.*gv(0,0,0)+gv(0,-1,0))*d22(1)
     & )
                     ! Evaluate g at neighbouring points so we can evaluate the cross derivative 
                      ! Add these checks -- comment out later
                      if( abs(i1m1-i1).gt.1 .or. abs(i2m1-i2).gt.1 
     & .or. abs(j3-j3).gt.1 )then
                        stop 3338
                      end if
                      ! iv(0:2) = boundary point next to (i1m1,i2m1,j3)
                      iv(0)=i1m1
                      iv(1)=i2m1
                      iv(2)=i3
                      ! dv(0:2) : extrapolate in direction dv (if dv[a]=0 a=0,1,2 then there is no extrapolation)
                      dv(0)=0
                      dv(1)=0
                      dv(2)=0
                      if( iv(ax1).lt.mdim(0,ax1) )then
                       dv(ax1)=1
                      else if( iv(ax1).gt.mdim(1,ax1) )then
                       dv(ax1)=-1
                      end if
                      if( iv(ax2).lt.mdim(0,ax2) )then
                        dv(ax2)=1
                      else if( iv(ax2).gt.mdim(1,ax2) )then
                        dv(ax2)=-1
                      end if
                      if( mask(iv(0)+dv(0),iv(1)+dv(1),iv(2)+dv(2))
     & .le.0 )then
                        ! The neighbouring pt kv or the point we start the extrapolation from is not valid
                        ! Find a direction to extrapolate in: The target point must be valid so start the 
                        ! extrpolation in that direction.
                        dv(0)=i1-i1m1
                        dv(1)=i2-i2m1
                        dv(2)=j3-j3
                      end if
                      if( dv(0).eq.0 .and. dv(1).eq.0. .and. dv(2)
     & .eq.0 )then
                        ! We can use the value from the adjacent point:
                        gv(i1m1-i1,i2m1-i2,j3-j3)=f(i1m1,i2m1,j3)
                      else if( mask(iv(0)+  dv(0),iv(1)+  dv(1),iv(2)+ 
     &  dv(2)).gt.0 .and. mask(iv(0)+2*dv(0),iv(1)+2*dv(1),iv(2)+2*dv(
     & 2)).gt.0 .and. mask(iv(0)+3*dv(0),iv(1)+3*dv(1),iv(2)+3*dv(2))
     & .gt.0 .and. mask(iv(0)+4*dv(0),iv(1)+4*dv(1),iv(2)+4*dv(2))
     & .gt.0 )then
                        ! we can extrapolate with 4 points:
                        gv(i1m1-i1,i2m1-i2,j3-j3) = (4.*f(i1m1+(dv(0)),
     & i2m1+(dv(1)),j3+(dv(2)))-6.*f(i1m1+2*(dv(0)),i2m1+2*(dv(1)),j3+
     & 2*(dv(2)))+4.*f(i1m1+3*(dv(0)),i2m1+3*(dv(1)),j3+3*(dv(2)))-f(
     & i1m1+4*(dv(0)),i2m1+4*(dv(1)),j3+4*(dv(2))))
                      else if( mask(iv(0)+  dv(0),iv(1)+  dv(1),iv(2)+ 
     &  dv(2)).gt.0 .and. mask(iv(0)+2*dv(0),iv(1)+2*dv(1),iv(2)+2*dv(
     & 2)).gt.0 .and. mask(iv(0)+3*dv(0),iv(1)+3*dv(1),iv(2)+3*dv(2))
     & .gt.0 )then
                        ! we can extrapolate with 3 points:
                        gv(i1m1-i1,i2m1-i2,j3-j3) = (3.*f(i1m1+(dv(0)),
     & i2m1+(dv(1)),j3+(dv(2)))-3.*f(i1m1+2*(dv(0)),i2m1+2*(dv(1)),j3+
     & 2*(dv(2)))+f(i1m1+3*(dv(0)),i2m1+3*(dv(1)),j3+3*(dv(2))))
                      else if( mask(iv(0)+  dv(0),iv(1)+  dv(1),iv(2)+ 
     &  dv(2)).gt.0 .and. mask(iv(0)+2*dv(0),iv(1)+2*dv(1),iv(2)+2*dv(
     & 2)).gt.0 )then
                        ! we can extrapolate with 2 points: 
                        gv(i1m1-i1,i2m1-i2,j3-j3) = (2.*f(i1m1+(dv(0)),
     & i2m1+(dv(1)),j3+(dv(2)))-f(i1m1+2*(dv(0)),i2m1+2*(dv(1)),j3+2*(
     & dv(2))))
                      else
                        ! as a backup just use the value from the target point
                        gv(i1m1-i1,i2m1-i2,j3-j3)=f(i1,i2,j3)
                      end if
                      ! Add these checks -- comment out later
                      if( abs(i1p1-i1).gt.1 .or. abs(i2m1-i2).gt.1 
     & .or. abs(j3-j3).gt.1 )then
                        stop 3338
                      end if
                      ! iv(0:2) = boundary point next to (i1p1,i2m1,j3)
                      iv(0)=i1p1
                      iv(1)=i2m1
                      iv(2)=i3
                      ! dv(0:2) : extrapolate in direction dv (if dv[a]=0 a=0,1,2 then there is no extrapolation)
                      dv(0)=0
                      dv(1)=0
                      dv(2)=0
                      if( iv(ax1).lt.mdim(0,ax1) )then
                       dv(ax1)=1
                      else if( iv(ax1).gt.mdim(1,ax1) )then
                       dv(ax1)=-1
                      end if
                      if( iv(ax2).lt.mdim(0,ax2) )then
                        dv(ax2)=1
                      else if( iv(ax2).gt.mdim(1,ax2) )then
                        dv(ax2)=-1
                      end if
                      if( mask(iv(0)+dv(0),iv(1)+dv(1),iv(2)+dv(2))
     & .le.0 )then
                        ! The neighbouring pt kv or the point we start the extrapolation from is not valid
                        ! Find a direction to extrapolate in: The target point must be valid so start the 
                        ! extrpolation in that direction.
                        dv(0)=i1-i1p1
                        dv(1)=i2-i2m1
                        dv(2)=j3-j3
                      end if
                      if( dv(0).eq.0 .and. dv(1).eq.0. .and. dv(2)
     & .eq.0 )then
                        ! We can use the value from the adjacent point:
                        gv(i1p1-i1,i2m1-i2,j3-j3)=f(i1p1,i2m1,j3)
                      else if( mask(iv(0)+  dv(0),iv(1)+  dv(1),iv(2)+ 
     &  dv(2)).gt.0 .and. mask(iv(0)+2*dv(0),iv(1)+2*dv(1),iv(2)+2*dv(
     & 2)).gt.0 .and. mask(iv(0)+3*dv(0),iv(1)+3*dv(1),iv(2)+3*dv(2))
     & .gt.0 .and. mask(iv(0)+4*dv(0),iv(1)+4*dv(1),iv(2)+4*dv(2))
     & .gt.0 )then
                        ! we can extrapolate with 4 points:
                        gv(i1p1-i1,i2m1-i2,j3-j3) = (4.*f(i1p1+(dv(0)),
     & i2m1+(dv(1)),j3+(dv(2)))-6.*f(i1p1+2*(dv(0)),i2m1+2*(dv(1)),j3+
     & 2*(dv(2)))+4.*f(i1p1+3*(dv(0)),i2m1+3*(dv(1)),j3+3*(dv(2)))-f(
     & i1p1+4*(dv(0)),i2m1+4*(dv(1)),j3+4*(dv(2))))
                      else if( mask(iv(0)+  dv(0),iv(1)+  dv(1),iv(2)+ 
     &  dv(2)).gt.0 .and. mask(iv(0)+2*dv(0),iv(1)+2*dv(1),iv(2)+2*dv(
     & 2)).gt.0 .and. mask(iv(0)+3*dv(0),iv(1)+3*dv(1),iv(2)+3*dv(2))
     & .gt.0 )then
                        ! we can extrapolate with 3 points:
                        gv(i1p1-i1,i2m1-i2,j3-j3) = (3.*f(i1p1+(dv(0)),
     & i2m1+(dv(1)),j3+(dv(2)))-3.*f(i1p1+2*(dv(0)),i2m1+2*(dv(1)),j3+
     & 2*(dv(2)))+f(i1p1+3*(dv(0)),i2m1+3*(dv(1)),j3+3*(dv(2))))
                      else if( mask(iv(0)+  dv(0),iv(1)+  dv(1),iv(2)+ 
     &  dv(2)).gt.0 .and. mask(iv(0)+2*dv(0),iv(1)+2*dv(1),iv(2)+2*dv(
     & 2)).gt.0 )then
                        ! we can extrapolate with 2 points: 
                        gv(i1p1-i1,i2m1-i2,j3-j3) = (2.*f(i1p1+(dv(0)),
     & i2m1+(dv(1)),j3+(dv(2)))-f(i1p1+2*(dv(0)),i2m1+2*(dv(1)),j3+2*(
     & dv(2))))
                      else
                        ! as a backup just use the value from the target point
                        gv(i1p1-i1,i2m1-i2,j3-j3)=f(i1,i2,j3)
                      end if
                      ! Add these checks -- comment out later
                      if( abs(i1m1-i1).gt.1 .or. abs(i2p1-i2).gt.1 
     & .or. abs(j3-j3).gt.1 )then
                        stop 3338
                      end if
                      ! iv(0:2) = boundary point next to (i1m1,i2p1,j3)
                      iv(0)=i1m1
                      iv(1)=i2p1
                      iv(2)=i3
                      ! dv(0:2) : extrapolate in direction dv (if dv[a]=0 a=0,1,2 then there is no extrapolation)
                      dv(0)=0
                      dv(1)=0
                      dv(2)=0
                      if( iv(ax1).lt.mdim(0,ax1) )then
                       dv(ax1)=1
                      else if( iv(ax1).gt.mdim(1,ax1) )then
                       dv(ax1)=-1
                      end if
                      if( iv(ax2).lt.mdim(0,ax2) )then
                        dv(ax2)=1
                      else if( iv(ax2).gt.mdim(1,ax2) )then
                        dv(ax2)=-1
                      end if
                      if( mask(iv(0)+dv(0),iv(1)+dv(1),iv(2)+dv(2))
     & .le.0 )then
                        ! The neighbouring pt kv or the point we start the extrapolation from is not valid
                        ! Find a direction to extrapolate in: The target point must be valid so start the 
                        ! extrpolation in that direction.
                        dv(0)=i1-i1m1
                        dv(1)=i2-i2p1
                        dv(2)=j3-j3
                      end if
                      if( dv(0).eq.0 .and. dv(1).eq.0. .and. dv(2)
     & .eq.0 )then
                        ! We can use the value from the adjacent point:
                        gv(i1m1-i1,i2p1-i2,j3-j3)=f(i1m1,i2p1,j3)
                      else if( mask(iv(0)+  dv(0),iv(1)+  dv(1),iv(2)+ 
     &  dv(2)).gt.0 .and. mask(iv(0)+2*dv(0),iv(1)+2*dv(1),iv(2)+2*dv(
     & 2)).gt.0 .and. mask(iv(0)+3*dv(0),iv(1)+3*dv(1),iv(2)+3*dv(2))
     & .gt.0 .and. mask(iv(0)+4*dv(0),iv(1)+4*dv(1),iv(2)+4*dv(2))
     & .gt.0 )then
                        ! we can extrapolate with 4 points:
                        gv(i1m1-i1,i2p1-i2,j3-j3) = (4.*f(i1m1+(dv(0)),
     & i2p1+(dv(1)),j3+(dv(2)))-6.*f(i1m1+2*(dv(0)),i2p1+2*(dv(1)),j3+
     & 2*(dv(2)))+4.*f(i1m1+3*(dv(0)),i2p1+3*(dv(1)),j3+3*(dv(2)))-f(
     & i1m1+4*(dv(0)),i2p1+4*(dv(1)),j3+4*(dv(2))))
                      else if( mask(iv(0)+  dv(0),iv(1)+  dv(1),iv(2)+ 
     &  dv(2)).gt.0 .and. mask(iv(0)+2*dv(0),iv(1)+2*dv(1),iv(2)+2*dv(
     & 2)).gt.0 .and. mask(iv(0)+3*dv(0),iv(1)+3*dv(1),iv(2)+3*dv(2))
     & .gt.0 )then
                        ! we can extrapolate with 3 points:
                        gv(i1m1-i1,i2p1-i2,j3-j3) = (3.*f(i1m1+(dv(0)),
     & i2p1+(dv(1)),j3+(dv(2)))-3.*f(i1m1+2*(dv(0)),i2p1+2*(dv(1)),j3+
     & 2*(dv(2)))+f(i1m1+3*(dv(0)),i2p1+3*(dv(1)),j3+3*(dv(2))))
                      else if( mask(iv(0)+  dv(0),iv(1)+  dv(1),iv(2)+ 
     &  dv(2)).gt.0 .and. mask(iv(0)+2*dv(0),iv(1)+2*dv(1),iv(2)+2*dv(
     & 2)).gt.0 )then
                        ! we can extrapolate with 2 points: 
                        gv(i1m1-i1,i2p1-i2,j3-j3) = (2.*f(i1m1+(dv(0)),
     & i2p1+(dv(1)),j3+(dv(2)))-f(i1m1+2*(dv(0)),i2p1+2*(dv(1)),j3+2*(
     & dv(2))))
                      else
                        ! as a backup just use the value from the target point
                        gv(i1m1-i1,i2p1-i2,j3-j3)=f(i1,i2,j3)
                      end if
                      ! Add these checks -- comment out later
                      if( abs(i1p1-i1).gt.1 .or. abs(i2p1-i2).gt.1 
     & .or. abs(j3-j3).gt.1 )then
                        stop 3338
                      end if
                      ! iv(0:2) = boundary point next to (i1p1,i2p1,j3)
                      iv(0)=i1p1
                      iv(1)=i2p1
                      iv(2)=i3
                      ! dv(0:2) : extrapolate in direction dv (if dv[a]=0 a=0,1,2 then there is no extrapolation)
                      dv(0)=0
                      dv(1)=0
                      dv(2)=0
                      if( iv(ax1).lt.mdim(0,ax1) )then
                       dv(ax1)=1
                      else if( iv(ax1).gt.mdim(1,ax1) )then
                       dv(ax1)=-1
                      end if
                      if( iv(ax2).lt.mdim(0,ax2) )then
                        dv(ax2)=1
                      else if( iv(ax2).gt.mdim(1,ax2) )then
                        dv(ax2)=-1
                      end if
                      if( mask(iv(0)+dv(0),iv(1)+dv(1),iv(2)+dv(2))
     & .le.0 )then
                        ! The neighbouring pt kv or the point we start the extrapolation from is not valid
                        ! Find a direction to extrapolate in: The target point must be valid so start the 
                        ! extrpolation in that direction.
                        dv(0)=i1-i1p1
                        dv(1)=i2-i2p1
                        dv(2)=j3-j3
                      end if
                      if( dv(0).eq.0 .and. dv(1).eq.0. .and. dv(2)
     & .eq.0 )then
                        ! We can use the value from the adjacent point:
                        gv(i1p1-i1,i2p1-i2,j3-j3)=f(i1p1,i2p1,j3)
                      else if( mask(iv(0)+  dv(0),iv(1)+  dv(1),iv(2)+ 
     &  dv(2)).gt.0 .and. mask(iv(0)+2*dv(0),iv(1)+2*dv(1),iv(2)+2*dv(
     & 2)).gt.0 .and. mask(iv(0)+3*dv(0),iv(1)+3*dv(1),iv(2)+3*dv(2))
     & .gt.0 .and. mask(iv(0)+4*dv(0),iv(1)+4*dv(1),iv(2)+4*dv(2))
     & .gt.0 )then
                        ! we can extrapolate with 4 points:
                        gv(i1p1-i1,i2p1-i2,j3-j3) = (4.*f(i1p1+(dv(0)),
     & i2p1+(dv(1)),j3+(dv(2)))-6.*f(i1p1+2*(dv(0)),i2p1+2*(dv(1)),j3+
     & 2*(dv(2)))+4.*f(i1p1+3*(dv(0)),i2p1+3*(dv(1)),j3+3*(dv(2)))-f(
     & i1p1+4*(dv(0)),i2p1+4*(dv(1)),j3+4*(dv(2))))
                      else if( mask(iv(0)+  dv(0),iv(1)+  dv(1),iv(2)+ 
     &  dv(2)).gt.0 .and. mask(iv(0)+2*dv(0),iv(1)+2*dv(1),iv(2)+2*dv(
     & 2)).gt.0 .and. mask(iv(0)+3*dv(0),iv(1)+3*dv(1),iv(2)+3*dv(2))
     & .gt.0 )then
                        ! we can extrapolate with 3 points:
                        gv(i1p1-i1,i2p1-i2,j3-j3) = (3.*f(i1p1+(dv(0)),
     & i2p1+(dv(1)),j3+(dv(2)))-3.*f(i1p1+2*(dv(0)),i2p1+2*(dv(1)),j3+
     & 2*(dv(2)))+f(i1p1+3*(dv(0)),i2p1+3*(dv(1)),j3+3*(dv(2))))
                      else if( mask(iv(0)+  dv(0),iv(1)+  dv(1),iv(2)+ 
     &  dv(2)).gt.0 .and. mask(iv(0)+2*dv(0),iv(1)+2*dv(1),iv(2)+2*dv(
     & 2)).gt.0 )then
                        ! we can extrapolate with 2 points: 
                        gv(i1p1-i1,i2p1-i2,j3-j3) = (2.*f(i1p1+(dv(0)),
     & i2p1+(dv(1)),j3+(dv(2)))-f(i1p1+2*(dv(0)),i2p1+2*(dv(1)),j3+2*(
     & dv(2))))
                      else
                        ! as a backup just use the value from the target point
                        gv(i1p1-i1,i2p1-i2,j3-j3)=f(i1,i2,j3)
                      end if
                     grs = (((gv(+1,+1,0)-gv(+1,-1,0))-(gv(-1,+1,0)-gv(
     & -1,-1,0)))*d12(0)*d12(1))
                 ! ---- 3D ----
                ! We need 2 parameteric and 1 real derivative. Do this for now: 
                 ! this next call will define the jacobian and its derivatives (parameteric and spatial)
                 ajrx = rsxy(i1,i2,i3,0,0)
                 ajrxr = (rsxy(i1-2,i2,i3,0,0)-8.*rsxy(i1-1,i2,i3,0,0)+
     & 8.*rsxy(i1+1,i2,i3,0,0)-rsxy(i1+2,i2,i3,0,0))/(12.*dr(0))
                 ajrxs = (rsxy(i1,i2-2,i3,0,0)-8.*rsxy(i1,i2-1,i3,0,0)+
     & 8.*rsxy(i1,i2+1,i3,0,0)-rsxy(i1,i2+2,i3,0,0))/(12.*dr(1))
                 ajrxt = (rsxy(i1,i2,i3-2,0,0)-8.*rsxy(i1,i2,i3-1,0,0)+
     & 8.*rsxy(i1,i2,i3+1,0,0)-rsxy(i1,i2,i3+2,0,0))/(12.*dr(2))
                 ajrxrr = (-rsxy(i1-2,i2,i3,0,0)+16.*rsxy(i1-1,i2,i3,0,
     & 0)-30.*rsxy(i1,i2,i3,0,0)+16.*rsxy(i1+1,i2,i3,0,0)-rsxy(i1+2,
     & i2,i3,0,0))/(12.*dr(0)**2)
                 ajrxrs = ((rsxy(i1-2,i2-2,i3,0,0)-8.*rsxy(i1-2,i2-1,
     & i3,0,0)+8.*rsxy(i1-2,i2+1,i3,0,0)-rsxy(i1-2,i2+2,i3,0,0))/(12.*
     & dr(1))-8.*(rsxy(i1-1,i2-2,i3,0,0)-8.*rsxy(i1-1,i2-1,i3,0,0)+8.*
     & rsxy(i1-1,i2+1,i3,0,0)-rsxy(i1-1,i2+2,i3,0,0))/(12.*dr(1))+8.*(
     & rsxy(i1+1,i2-2,i3,0,0)-8.*rsxy(i1+1,i2-1,i3,0,0)+8.*rsxy(i1+1,
     & i2+1,i3,0,0)-rsxy(i1+1,i2+2,i3,0,0))/(12.*dr(1))-(rsxy(i1+2,i2-
     & 2,i3,0,0)-8.*rsxy(i1+2,i2-1,i3,0,0)+8.*rsxy(i1+2,i2+1,i3,0,0)-
     & rsxy(i1+2,i2+2,i3,0,0))/(12.*dr(1)))/(12.*dr(0))
                 ajrxss = (-rsxy(i1,i2-2,i3,0,0)+16.*rsxy(i1,i2-1,i3,0,
     & 0)-30.*rsxy(i1,i2,i3,0,0)+16.*rsxy(i1,i2+1,i3,0,0)-rsxy(i1,i2+
     & 2,i3,0,0))/(12.*dr(1)**2)
                 ajrxrt = ((rsxy(i1-2,i2,i3-2,0,0)-8.*rsxy(i1-2,i2,i3-
     & 1,0,0)+8.*rsxy(i1-2,i2,i3+1,0,0)-rsxy(i1-2,i2,i3+2,0,0))/(12.*
     & dr(2))-8.*(rsxy(i1-1,i2,i3-2,0,0)-8.*rsxy(i1-1,i2,i3-1,0,0)+8.*
     & rsxy(i1-1,i2,i3+1,0,0)-rsxy(i1-1,i2,i3+2,0,0))/(12.*dr(2))+8.*(
     & rsxy(i1+1,i2,i3-2,0,0)-8.*rsxy(i1+1,i2,i3-1,0,0)+8.*rsxy(i1+1,
     & i2,i3+1,0,0)-rsxy(i1+1,i2,i3+2,0,0))/(12.*dr(2))-(rsxy(i1+2,i2,
     & i3-2,0,0)-8.*rsxy(i1+2,i2,i3-1,0,0)+8.*rsxy(i1+2,i2,i3+1,0,0)-
     & rsxy(i1+2,i2,i3+2,0,0))/(12.*dr(2)))/(12.*dr(0))
                 ajrxst = ((rsxy(i1,i2-2,i3-2,0,0)-8.*rsxy(i1,i2-2,i3-
     & 1,0,0)+8.*rsxy(i1,i2-2,i3+1,0,0)-rsxy(i1,i2-2,i3+2,0,0))/(12.*
     & dr(2))-8.*(rsxy(i1,i2-1,i3-2,0,0)-8.*rsxy(i1,i2-1,i3-1,0,0)+8.*
     & rsxy(i1,i2-1,i3+1,0,0)-rsxy(i1,i2-1,i3+2,0,0))/(12.*dr(2))+8.*(
     & rsxy(i1,i2+1,i3-2,0,0)-8.*rsxy(i1,i2+1,i3-1,0,0)+8.*rsxy(i1,i2+
     & 1,i3+1,0,0)-rsxy(i1,i2+1,i3+2,0,0))/(12.*dr(2))-(rsxy(i1,i2+2,
     & i3-2,0,0)-8.*rsxy(i1,i2+2,i3-1,0,0)+8.*rsxy(i1,i2+2,i3+1,0,0)-
     & rsxy(i1,i2+2,i3+2,0,0))/(12.*dr(2)))/(12.*dr(1))
                 ajrxtt = (-rsxy(i1,i2,i3-2,0,0)+16.*rsxy(i1,i2,i3-1,0,
     & 0)-30.*rsxy(i1,i2,i3,0,0)+16.*rsxy(i1,i2,i3+1,0,0)-rsxy(i1,i2,
     & i3+2,0,0))/(12.*dr(2)**2)
                 ajsx = rsxy(i1,i2,i3,1,0)
                 ajsxr = (rsxy(i1-2,i2,i3,1,0)-8.*rsxy(i1-1,i2,i3,1,0)+
     & 8.*rsxy(i1+1,i2,i3,1,0)-rsxy(i1+2,i2,i3,1,0))/(12.*dr(0))
                 ajsxs = (rsxy(i1,i2-2,i3,1,0)-8.*rsxy(i1,i2-1,i3,1,0)+
     & 8.*rsxy(i1,i2+1,i3,1,0)-rsxy(i1,i2+2,i3,1,0))/(12.*dr(1))
                 ajsxt = (rsxy(i1,i2,i3-2,1,0)-8.*rsxy(i1,i2,i3-1,1,0)+
     & 8.*rsxy(i1,i2,i3+1,1,0)-rsxy(i1,i2,i3+2,1,0))/(12.*dr(2))
                 ajsxrr = (-rsxy(i1-2,i2,i3,1,0)+16.*rsxy(i1-1,i2,i3,1,
     & 0)-30.*rsxy(i1,i2,i3,1,0)+16.*rsxy(i1+1,i2,i3,1,0)-rsxy(i1+2,
     & i2,i3,1,0))/(12.*dr(0)**2)
                 ajsxrs = ((rsxy(i1-2,i2-2,i3,1,0)-8.*rsxy(i1-2,i2-1,
     & i3,1,0)+8.*rsxy(i1-2,i2+1,i3,1,0)-rsxy(i1-2,i2+2,i3,1,0))/(12.*
     & dr(1))-8.*(rsxy(i1-1,i2-2,i3,1,0)-8.*rsxy(i1-1,i2-1,i3,1,0)+8.*
     & rsxy(i1-1,i2+1,i3,1,0)-rsxy(i1-1,i2+2,i3,1,0))/(12.*dr(1))+8.*(
     & rsxy(i1+1,i2-2,i3,1,0)-8.*rsxy(i1+1,i2-1,i3,1,0)+8.*rsxy(i1+1,
     & i2+1,i3,1,0)-rsxy(i1+1,i2+2,i3,1,0))/(12.*dr(1))-(rsxy(i1+2,i2-
     & 2,i3,1,0)-8.*rsxy(i1+2,i2-1,i3,1,0)+8.*rsxy(i1+2,i2+1,i3,1,0)-
     & rsxy(i1+2,i2+2,i3,1,0))/(12.*dr(1)))/(12.*dr(0))
                 ajsxss = (-rsxy(i1,i2-2,i3,1,0)+16.*rsxy(i1,i2-1,i3,1,
     & 0)-30.*rsxy(i1,i2,i3,1,0)+16.*rsxy(i1,i2+1,i3,1,0)-rsxy(i1,i2+
     & 2,i3,1,0))/(12.*dr(1)**2)
                 ajsxrt = ((rsxy(i1-2,i2,i3-2,1,0)-8.*rsxy(i1-2,i2,i3-
     & 1,1,0)+8.*rsxy(i1-2,i2,i3+1,1,0)-rsxy(i1-2,i2,i3+2,1,0))/(12.*
     & dr(2))-8.*(rsxy(i1-1,i2,i3-2,1,0)-8.*rsxy(i1-1,i2,i3-1,1,0)+8.*
     & rsxy(i1-1,i2,i3+1,1,0)-rsxy(i1-1,i2,i3+2,1,0))/(12.*dr(2))+8.*(
     & rsxy(i1+1,i2,i3-2,1,0)-8.*rsxy(i1+1,i2,i3-1,1,0)+8.*rsxy(i1+1,
     & i2,i3+1,1,0)-rsxy(i1+1,i2,i3+2,1,0))/(12.*dr(2))-(rsxy(i1+2,i2,
     & i3-2,1,0)-8.*rsxy(i1+2,i2,i3-1,1,0)+8.*rsxy(i1+2,i2,i3+1,1,0)-
     & rsxy(i1+2,i2,i3+2,1,0))/(12.*dr(2)))/(12.*dr(0))
                 ajsxst = ((rsxy(i1,i2-2,i3-2,1,0)-8.*rsxy(i1,i2-2,i3-
     & 1,1,0)+8.*rsxy(i1,i2-2,i3+1,1,0)-rsxy(i1,i2-2,i3+2,1,0))/(12.*
     & dr(2))-8.*(rsxy(i1,i2-1,i3-2,1,0)-8.*rsxy(i1,i2-1,i3-1,1,0)+8.*
     & rsxy(i1,i2-1,i3+1,1,0)-rsxy(i1,i2-1,i3+2,1,0))/(12.*dr(2))+8.*(
     & rsxy(i1,i2+1,i3-2,1,0)-8.*rsxy(i1,i2+1,i3-1,1,0)+8.*rsxy(i1,i2+
     & 1,i3+1,1,0)-rsxy(i1,i2+1,i3+2,1,0))/(12.*dr(2))-(rsxy(i1,i2+2,
     & i3-2,1,0)-8.*rsxy(i1,i2+2,i3-1,1,0)+8.*rsxy(i1,i2+2,i3+1,1,0)-
     & rsxy(i1,i2+2,i3+2,1,0))/(12.*dr(2)))/(12.*dr(1))
                 ajsxtt = (-rsxy(i1,i2,i3-2,1,0)+16.*rsxy(i1,i2,i3-1,1,
     & 0)-30.*rsxy(i1,i2,i3,1,0)+16.*rsxy(i1,i2,i3+1,1,0)-rsxy(i1,i2,
     & i3+2,1,0))/(12.*dr(2)**2)
                 ajtx = rsxy(i1,i2,i3,2,0)
                 ajtxr = (rsxy(i1-2,i2,i3,2,0)-8.*rsxy(i1-1,i2,i3,2,0)+
     & 8.*rsxy(i1+1,i2,i3,2,0)-rsxy(i1+2,i2,i3,2,0))/(12.*dr(0))
                 ajtxs = (rsxy(i1,i2-2,i3,2,0)-8.*rsxy(i1,i2-1,i3,2,0)+
     & 8.*rsxy(i1,i2+1,i3,2,0)-rsxy(i1,i2+2,i3,2,0))/(12.*dr(1))
                 ajtxt = (rsxy(i1,i2,i3-2,2,0)-8.*rsxy(i1,i2,i3-1,2,0)+
     & 8.*rsxy(i1,i2,i3+1,2,0)-rsxy(i1,i2,i3+2,2,0))/(12.*dr(2))
                 ajtxrr = (-rsxy(i1-2,i2,i3,2,0)+16.*rsxy(i1-1,i2,i3,2,
     & 0)-30.*rsxy(i1,i2,i3,2,0)+16.*rsxy(i1+1,i2,i3,2,0)-rsxy(i1+2,
     & i2,i3,2,0))/(12.*dr(0)**2)
                 ajtxrs = ((rsxy(i1-2,i2-2,i3,2,0)-8.*rsxy(i1-2,i2-1,
     & i3,2,0)+8.*rsxy(i1-2,i2+1,i3,2,0)-rsxy(i1-2,i2+2,i3,2,0))/(12.*
     & dr(1))-8.*(rsxy(i1-1,i2-2,i3,2,0)-8.*rsxy(i1-1,i2-1,i3,2,0)+8.*
     & rsxy(i1-1,i2+1,i3,2,0)-rsxy(i1-1,i2+2,i3,2,0))/(12.*dr(1))+8.*(
     & rsxy(i1+1,i2-2,i3,2,0)-8.*rsxy(i1+1,i2-1,i3,2,0)+8.*rsxy(i1+1,
     & i2+1,i3,2,0)-rsxy(i1+1,i2+2,i3,2,0))/(12.*dr(1))-(rsxy(i1+2,i2-
     & 2,i3,2,0)-8.*rsxy(i1+2,i2-1,i3,2,0)+8.*rsxy(i1+2,i2+1,i3,2,0)-
     & rsxy(i1+2,i2+2,i3,2,0))/(12.*dr(1)))/(12.*dr(0))
                 ajtxss = (-rsxy(i1,i2-2,i3,2,0)+16.*rsxy(i1,i2-1,i3,2,
     & 0)-30.*rsxy(i1,i2,i3,2,0)+16.*rsxy(i1,i2+1,i3,2,0)-rsxy(i1,i2+
     & 2,i3,2,0))/(12.*dr(1)**2)
                 ajtxrt = ((rsxy(i1-2,i2,i3-2,2,0)-8.*rsxy(i1-2,i2,i3-
     & 1,2,0)+8.*rsxy(i1-2,i2,i3+1,2,0)-rsxy(i1-2,i2,i3+2,2,0))/(12.*
     & dr(2))-8.*(rsxy(i1-1,i2,i3-2,2,0)-8.*rsxy(i1-1,i2,i3-1,2,0)+8.*
     & rsxy(i1-1,i2,i3+1,2,0)-rsxy(i1-1,i2,i3+2,2,0))/(12.*dr(2))+8.*(
     & rsxy(i1+1,i2,i3-2,2,0)-8.*rsxy(i1+1,i2,i3-1,2,0)+8.*rsxy(i1+1,
     & i2,i3+1,2,0)-rsxy(i1+1,i2,i3+2,2,0))/(12.*dr(2))-(rsxy(i1+2,i2,
     & i3-2,2,0)-8.*rsxy(i1+2,i2,i3-1,2,0)+8.*rsxy(i1+2,i2,i3+1,2,0)-
     & rsxy(i1+2,i2,i3+2,2,0))/(12.*dr(2)))/(12.*dr(0))
                 ajtxst = ((rsxy(i1,i2-2,i3-2,2,0)-8.*rsxy(i1,i2-2,i3-
     & 1,2,0)+8.*rsxy(i1,i2-2,i3+1,2,0)-rsxy(i1,i2-2,i3+2,2,0))/(12.*
     & dr(2))-8.*(rsxy(i1,i2-1,i3-2,2,0)-8.*rsxy(i1,i2-1,i3-1,2,0)+8.*
     & rsxy(i1,i2-1,i3+1,2,0)-rsxy(i1,i2-1,i3+2,2,0))/(12.*dr(2))+8.*(
     & rsxy(i1,i2+1,i3-2,2,0)-8.*rsxy(i1,i2+1,i3-1,2,0)+8.*rsxy(i1,i2+
     & 1,i3+1,2,0)-rsxy(i1,i2+1,i3+2,2,0))/(12.*dr(2))-(rsxy(i1,i2+2,
     & i3-2,2,0)-8.*rsxy(i1,i2+2,i3-1,2,0)+8.*rsxy(i1,i2+2,i3+1,2,0)-
     & rsxy(i1,i2+2,i3+2,2,0))/(12.*dr(2)))/(12.*dr(1))
                 ajtxtt = (-rsxy(i1,i2,i3-2,2,0)+16.*rsxy(i1,i2,i3-1,2,
     & 0)-30.*rsxy(i1,i2,i3,2,0)+16.*rsxy(i1,i2,i3+1,2,0)-rsxy(i1,i2,
     & i3+2,2,0))/(12.*dr(2)**2)
                 ajry = rsxy(i1,i2,i3,0,1)
                 ajryr = (rsxy(i1-2,i2,i3,0,1)-8.*rsxy(i1-1,i2,i3,0,1)+
     & 8.*rsxy(i1+1,i2,i3,0,1)-rsxy(i1+2,i2,i3,0,1))/(12.*dr(0))
                 ajrys = (rsxy(i1,i2-2,i3,0,1)-8.*rsxy(i1,i2-1,i3,0,1)+
     & 8.*rsxy(i1,i2+1,i3,0,1)-rsxy(i1,i2+2,i3,0,1))/(12.*dr(1))
                 ajryt = (rsxy(i1,i2,i3-2,0,1)-8.*rsxy(i1,i2,i3-1,0,1)+
     & 8.*rsxy(i1,i2,i3+1,0,1)-rsxy(i1,i2,i3+2,0,1))/(12.*dr(2))
                 ajryrr = (-rsxy(i1-2,i2,i3,0,1)+16.*rsxy(i1-1,i2,i3,0,
     & 1)-30.*rsxy(i1,i2,i3,0,1)+16.*rsxy(i1+1,i2,i3,0,1)-rsxy(i1+2,
     & i2,i3,0,1))/(12.*dr(0)**2)
                 ajryrs = ((rsxy(i1-2,i2-2,i3,0,1)-8.*rsxy(i1-2,i2-1,
     & i3,0,1)+8.*rsxy(i1-2,i2+1,i3,0,1)-rsxy(i1-2,i2+2,i3,0,1))/(12.*
     & dr(1))-8.*(rsxy(i1-1,i2-2,i3,0,1)-8.*rsxy(i1-1,i2-1,i3,0,1)+8.*
     & rsxy(i1-1,i2+1,i3,0,1)-rsxy(i1-1,i2+2,i3,0,1))/(12.*dr(1))+8.*(
     & rsxy(i1+1,i2-2,i3,0,1)-8.*rsxy(i1+1,i2-1,i3,0,1)+8.*rsxy(i1+1,
     & i2+1,i3,0,1)-rsxy(i1+1,i2+2,i3,0,1))/(12.*dr(1))-(rsxy(i1+2,i2-
     & 2,i3,0,1)-8.*rsxy(i1+2,i2-1,i3,0,1)+8.*rsxy(i1+2,i2+1,i3,0,1)-
     & rsxy(i1+2,i2+2,i3,0,1))/(12.*dr(1)))/(12.*dr(0))
                 ajryss = (-rsxy(i1,i2-2,i3,0,1)+16.*rsxy(i1,i2-1,i3,0,
     & 1)-30.*rsxy(i1,i2,i3,0,1)+16.*rsxy(i1,i2+1,i3,0,1)-rsxy(i1,i2+
     & 2,i3,0,1))/(12.*dr(1)**2)
                 ajryrt = ((rsxy(i1-2,i2,i3-2,0,1)-8.*rsxy(i1-2,i2,i3-
     & 1,0,1)+8.*rsxy(i1-2,i2,i3+1,0,1)-rsxy(i1-2,i2,i3+2,0,1))/(12.*
     & dr(2))-8.*(rsxy(i1-1,i2,i3-2,0,1)-8.*rsxy(i1-1,i2,i3-1,0,1)+8.*
     & rsxy(i1-1,i2,i3+1,0,1)-rsxy(i1-1,i2,i3+2,0,1))/(12.*dr(2))+8.*(
     & rsxy(i1+1,i2,i3-2,0,1)-8.*rsxy(i1+1,i2,i3-1,0,1)+8.*rsxy(i1+1,
     & i2,i3+1,0,1)-rsxy(i1+1,i2,i3+2,0,1))/(12.*dr(2))-(rsxy(i1+2,i2,
     & i3-2,0,1)-8.*rsxy(i1+2,i2,i3-1,0,1)+8.*rsxy(i1+2,i2,i3+1,0,1)-
     & rsxy(i1+2,i2,i3+2,0,1))/(12.*dr(2)))/(12.*dr(0))
                 ajryst = ((rsxy(i1,i2-2,i3-2,0,1)-8.*rsxy(i1,i2-2,i3-
     & 1,0,1)+8.*rsxy(i1,i2-2,i3+1,0,1)-rsxy(i1,i2-2,i3+2,0,1))/(12.*
     & dr(2))-8.*(rsxy(i1,i2-1,i3-2,0,1)-8.*rsxy(i1,i2-1,i3-1,0,1)+8.*
     & rsxy(i1,i2-1,i3+1,0,1)-rsxy(i1,i2-1,i3+2,0,1))/(12.*dr(2))+8.*(
     & rsxy(i1,i2+1,i3-2,0,1)-8.*rsxy(i1,i2+1,i3-1,0,1)+8.*rsxy(i1,i2+
     & 1,i3+1,0,1)-rsxy(i1,i2+1,i3+2,0,1))/(12.*dr(2))-(rsxy(i1,i2+2,
     & i3-2,0,1)-8.*rsxy(i1,i2+2,i3-1,0,1)+8.*rsxy(i1,i2+2,i3+1,0,1)-
     & rsxy(i1,i2+2,i3+2,0,1))/(12.*dr(2)))/(12.*dr(1))
                 ajrytt = (-rsxy(i1,i2,i3-2,0,1)+16.*rsxy(i1,i2,i3-1,0,
     & 1)-30.*rsxy(i1,i2,i3,0,1)+16.*rsxy(i1,i2,i3+1,0,1)-rsxy(i1,i2,
     & i3+2,0,1))/(12.*dr(2)**2)
                 ajsy = rsxy(i1,i2,i3,1,1)
                 ajsyr = (rsxy(i1-2,i2,i3,1,1)-8.*rsxy(i1-1,i2,i3,1,1)+
     & 8.*rsxy(i1+1,i2,i3,1,1)-rsxy(i1+2,i2,i3,1,1))/(12.*dr(0))
                 ajsys = (rsxy(i1,i2-2,i3,1,1)-8.*rsxy(i1,i2-1,i3,1,1)+
     & 8.*rsxy(i1,i2+1,i3,1,1)-rsxy(i1,i2+2,i3,1,1))/(12.*dr(1))
                 ajsyt = (rsxy(i1,i2,i3-2,1,1)-8.*rsxy(i1,i2,i3-1,1,1)+
     & 8.*rsxy(i1,i2,i3+1,1,1)-rsxy(i1,i2,i3+2,1,1))/(12.*dr(2))
                 ajsyrr = (-rsxy(i1-2,i2,i3,1,1)+16.*rsxy(i1-1,i2,i3,1,
     & 1)-30.*rsxy(i1,i2,i3,1,1)+16.*rsxy(i1+1,i2,i3,1,1)-rsxy(i1+2,
     & i2,i3,1,1))/(12.*dr(0)**2)
                 ajsyrs = ((rsxy(i1-2,i2-2,i3,1,1)-8.*rsxy(i1-2,i2-1,
     & i3,1,1)+8.*rsxy(i1-2,i2+1,i3,1,1)-rsxy(i1-2,i2+2,i3,1,1))/(12.*
     & dr(1))-8.*(rsxy(i1-1,i2-2,i3,1,1)-8.*rsxy(i1-1,i2-1,i3,1,1)+8.*
     & rsxy(i1-1,i2+1,i3,1,1)-rsxy(i1-1,i2+2,i3,1,1))/(12.*dr(1))+8.*(
     & rsxy(i1+1,i2-2,i3,1,1)-8.*rsxy(i1+1,i2-1,i3,1,1)+8.*rsxy(i1+1,
     & i2+1,i3,1,1)-rsxy(i1+1,i2+2,i3,1,1))/(12.*dr(1))-(rsxy(i1+2,i2-
     & 2,i3,1,1)-8.*rsxy(i1+2,i2-1,i3,1,1)+8.*rsxy(i1+2,i2+1,i3,1,1)-
     & rsxy(i1+2,i2+2,i3,1,1))/(12.*dr(1)))/(12.*dr(0))
                 ajsyss = (-rsxy(i1,i2-2,i3,1,1)+16.*rsxy(i1,i2-1,i3,1,
     & 1)-30.*rsxy(i1,i2,i3,1,1)+16.*rsxy(i1,i2+1,i3,1,1)-rsxy(i1,i2+
     & 2,i3,1,1))/(12.*dr(1)**2)
                 ajsyrt = ((rsxy(i1-2,i2,i3-2,1,1)-8.*rsxy(i1-2,i2,i3-
     & 1,1,1)+8.*rsxy(i1-2,i2,i3+1,1,1)-rsxy(i1-2,i2,i3+2,1,1))/(12.*
     & dr(2))-8.*(rsxy(i1-1,i2,i3-2,1,1)-8.*rsxy(i1-1,i2,i3-1,1,1)+8.*
     & rsxy(i1-1,i2,i3+1,1,1)-rsxy(i1-1,i2,i3+2,1,1))/(12.*dr(2))+8.*(
     & rsxy(i1+1,i2,i3-2,1,1)-8.*rsxy(i1+1,i2,i3-1,1,1)+8.*rsxy(i1+1,
     & i2,i3+1,1,1)-rsxy(i1+1,i2,i3+2,1,1))/(12.*dr(2))-(rsxy(i1+2,i2,
     & i3-2,1,1)-8.*rsxy(i1+2,i2,i3-1,1,1)+8.*rsxy(i1+2,i2,i3+1,1,1)-
     & rsxy(i1+2,i2,i3+2,1,1))/(12.*dr(2)))/(12.*dr(0))
                 ajsyst = ((rsxy(i1,i2-2,i3-2,1,1)-8.*rsxy(i1,i2-2,i3-
     & 1,1,1)+8.*rsxy(i1,i2-2,i3+1,1,1)-rsxy(i1,i2-2,i3+2,1,1))/(12.*
     & dr(2))-8.*(rsxy(i1,i2-1,i3-2,1,1)-8.*rsxy(i1,i2-1,i3-1,1,1)+8.*
     & rsxy(i1,i2-1,i3+1,1,1)-rsxy(i1,i2-1,i3+2,1,1))/(12.*dr(2))+8.*(
     & rsxy(i1,i2+1,i3-2,1,1)-8.*rsxy(i1,i2+1,i3-1,1,1)+8.*rsxy(i1,i2+
     & 1,i3+1,1,1)-rsxy(i1,i2+1,i3+2,1,1))/(12.*dr(2))-(rsxy(i1,i2+2,
     & i3-2,1,1)-8.*rsxy(i1,i2+2,i3-1,1,1)+8.*rsxy(i1,i2+2,i3+1,1,1)-
     & rsxy(i1,i2+2,i3+2,1,1))/(12.*dr(2)))/(12.*dr(1))
                 ajsytt = (-rsxy(i1,i2,i3-2,1,1)+16.*rsxy(i1,i2,i3-1,1,
     & 1)-30.*rsxy(i1,i2,i3,1,1)+16.*rsxy(i1,i2,i3+1,1,1)-rsxy(i1,i2,
     & i3+2,1,1))/(12.*dr(2)**2)
                 ajty = rsxy(i1,i2,i3,2,1)
                 ajtyr = (rsxy(i1-2,i2,i3,2,1)-8.*rsxy(i1-1,i2,i3,2,1)+
     & 8.*rsxy(i1+1,i2,i3,2,1)-rsxy(i1+2,i2,i3,2,1))/(12.*dr(0))
                 ajtys = (rsxy(i1,i2-2,i3,2,1)-8.*rsxy(i1,i2-1,i3,2,1)+
     & 8.*rsxy(i1,i2+1,i3,2,1)-rsxy(i1,i2+2,i3,2,1))/(12.*dr(1))
                 ajtyt = (rsxy(i1,i2,i3-2,2,1)-8.*rsxy(i1,i2,i3-1,2,1)+
     & 8.*rsxy(i1,i2,i3+1,2,1)-rsxy(i1,i2,i3+2,2,1))/(12.*dr(2))
                 ajtyrr = (-rsxy(i1-2,i2,i3,2,1)+16.*rsxy(i1-1,i2,i3,2,
     & 1)-30.*rsxy(i1,i2,i3,2,1)+16.*rsxy(i1+1,i2,i3,2,1)-rsxy(i1+2,
     & i2,i3,2,1))/(12.*dr(0)**2)
                 ajtyrs = ((rsxy(i1-2,i2-2,i3,2,1)-8.*rsxy(i1-2,i2-1,
     & i3,2,1)+8.*rsxy(i1-2,i2+1,i3,2,1)-rsxy(i1-2,i2+2,i3,2,1))/(12.*
     & dr(1))-8.*(rsxy(i1-1,i2-2,i3,2,1)-8.*rsxy(i1-1,i2-1,i3,2,1)+8.*
     & rsxy(i1-1,i2+1,i3,2,1)-rsxy(i1-1,i2+2,i3,2,1))/(12.*dr(1))+8.*(
     & rsxy(i1+1,i2-2,i3,2,1)-8.*rsxy(i1+1,i2-1,i3,2,1)+8.*rsxy(i1+1,
     & i2+1,i3,2,1)-rsxy(i1+1,i2+2,i3,2,1))/(12.*dr(1))-(rsxy(i1+2,i2-
     & 2,i3,2,1)-8.*rsxy(i1+2,i2-1,i3,2,1)+8.*rsxy(i1+2,i2+1,i3,2,1)-
     & rsxy(i1+2,i2+2,i3,2,1))/(12.*dr(1)))/(12.*dr(0))
                 ajtyss = (-rsxy(i1,i2-2,i3,2,1)+16.*rsxy(i1,i2-1,i3,2,
     & 1)-30.*rsxy(i1,i2,i3,2,1)+16.*rsxy(i1,i2+1,i3,2,1)-rsxy(i1,i2+
     & 2,i3,2,1))/(12.*dr(1)**2)
                 ajtyrt = ((rsxy(i1-2,i2,i3-2,2,1)-8.*rsxy(i1-2,i2,i3-
     & 1,2,1)+8.*rsxy(i1-2,i2,i3+1,2,1)-rsxy(i1-2,i2,i3+2,2,1))/(12.*
     & dr(2))-8.*(rsxy(i1-1,i2,i3-2,2,1)-8.*rsxy(i1-1,i2,i3-1,2,1)+8.*
     & rsxy(i1-1,i2,i3+1,2,1)-rsxy(i1-1,i2,i3+2,2,1))/(12.*dr(2))+8.*(
     & rsxy(i1+1,i2,i3-2,2,1)-8.*rsxy(i1+1,i2,i3-1,2,1)+8.*rsxy(i1+1,
     & i2,i3+1,2,1)-rsxy(i1+1,i2,i3+2,2,1))/(12.*dr(2))-(rsxy(i1+2,i2,
     & i3-2,2,1)-8.*rsxy(i1+2,i2,i3-1,2,1)+8.*rsxy(i1+2,i2,i3+1,2,1)-
     & rsxy(i1+2,i2,i3+2,2,1))/(12.*dr(2)))/(12.*dr(0))
                 ajtyst = ((rsxy(i1,i2-2,i3-2,2,1)-8.*rsxy(i1,i2-2,i3-
     & 1,2,1)+8.*rsxy(i1,i2-2,i3+1,2,1)-rsxy(i1,i2-2,i3+2,2,1))/(12.*
     & dr(2))-8.*(rsxy(i1,i2-1,i3-2,2,1)-8.*rsxy(i1,i2-1,i3-1,2,1)+8.*
     & rsxy(i1,i2-1,i3+1,2,1)-rsxy(i1,i2-1,i3+2,2,1))/(12.*dr(2))+8.*(
     & rsxy(i1,i2+1,i3-2,2,1)-8.*rsxy(i1,i2+1,i3-1,2,1)+8.*rsxy(i1,i2+
     & 1,i3+1,2,1)-rsxy(i1,i2+1,i3+2,2,1))/(12.*dr(2))-(rsxy(i1,i2+2,
     & i3-2,2,1)-8.*rsxy(i1,i2+2,i3-1,2,1)+8.*rsxy(i1,i2+2,i3+1,2,1)-
     & rsxy(i1,i2+2,i3+2,2,1))/(12.*dr(2)))/(12.*dr(1))
                 ajtytt = (-rsxy(i1,i2,i3-2,2,1)+16.*rsxy(i1,i2,i3-1,2,
     & 1)-30.*rsxy(i1,i2,i3,2,1)+16.*rsxy(i1,i2,i3+1,2,1)-rsxy(i1,i2,
     & i3+2,2,1))/(12.*dr(2)**2)
                 ajrz = rsxy(i1,i2,i3,0,2)
                 ajrzr = (rsxy(i1-2,i2,i3,0,2)-8.*rsxy(i1-1,i2,i3,0,2)+
     & 8.*rsxy(i1+1,i2,i3,0,2)-rsxy(i1+2,i2,i3,0,2))/(12.*dr(0))
                 ajrzs = (rsxy(i1,i2-2,i3,0,2)-8.*rsxy(i1,i2-1,i3,0,2)+
     & 8.*rsxy(i1,i2+1,i3,0,2)-rsxy(i1,i2+2,i3,0,2))/(12.*dr(1))
                 ajrzt = (rsxy(i1,i2,i3-2,0,2)-8.*rsxy(i1,i2,i3-1,0,2)+
     & 8.*rsxy(i1,i2,i3+1,0,2)-rsxy(i1,i2,i3+2,0,2))/(12.*dr(2))
                 ajrzrr = (-rsxy(i1-2,i2,i3,0,2)+16.*rsxy(i1-1,i2,i3,0,
     & 2)-30.*rsxy(i1,i2,i3,0,2)+16.*rsxy(i1+1,i2,i3,0,2)-rsxy(i1+2,
     & i2,i3,0,2))/(12.*dr(0)**2)
                 ajrzrs = ((rsxy(i1-2,i2-2,i3,0,2)-8.*rsxy(i1-2,i2-1,
     & i3,0,2)+8.*rsxy(i1-2,i2+1,i3,0,2)-rsxy(i1-2,i2+2,i3,0,2))/(12.*
     & dr(1))-8.*(rsxy(i1-1,i2-2,i3,0,2)-8.*rsxy(i1-1,i2-1,i3,0,2)+8.*
     & rsxy(i1-1,i2+1,i3,0,2)-rsxy(i1-1,i2+2,i3,0,2))/(12.*dr(1))+8.*(
     & rsxy(i1+1,i2-2,i3,0,2)-8.*rsxy(i1+1,i2-1,i3,0,2)+8.*rsxy(i1+1,
     & i2+1,i3,0,2)-rsxy(i1+1,i2+2,i3,0,2))/(12.*dr(1))-(rsxy(i1+2,i2-
     & 2,i3,0,2)-8.*rsxy(i1+2,i2-1,i3,0,2)+8.*rsxy(i1+2,i2+1,i3,0,2)-
     & rsxy(i1+2,i2+2,i3,0,2))/(12.*dr(1)))/(12.*dr(0))
                 ajrzss = (-rsxy(i1,i2-2,i3,0,2)+16.*rsxy(i1,i2-1,i3,0,
     & 2)-30.*rsxy(i1,i2,i3,0,2)+16.*rsxy(i1,i2+1,i3,0,2)-rsxy(i1,i2+
     & 2,i3,0,2))/(12.*dr(1)**2)
                 ajrzrt = ((rsxy(i1-2,i2,i3-2,0,2)-8.*rsxy(i1-2,i2,i3-
     & 1,0,2)+8.*rsxy(i1-2,i2,i3+1,0,2)-rsxy(i1-2,i2,i3+2,0,2))/(12.*
     & dr(2))-8.*(rsxy(i1-1,i2,i3-2,0,2)-8.*rsxy(i1-1,i2,i3-1,0,2)+8.*
     & rsxy(i1-1,i2,i3+1,0,2)-rsxy(i1-1,i2,i3+2,0,2))/(12.*dr(2))+8.*(
     & rsxy(i1+1,i2,i3-2,0,2)-8.*rsxy(i1+1,i2,i3-1,0,2)+8.*rsxy(i1+1,
     & i2,i3+1,0,2)-rsxy(i1+1,i2,i3+2,0,2))/(12.*dr(2))-(rsxy(i1+2,i2,
     & i3-2,0,2)-8.*rsxy(i1+2,i2,i3-1,0,2)+8.*rsxy(i1+2,i2,i3+1,0,2)-
     & rsxy(i1+2,i2,i3+2,0,2))/(12.*dr(2)))/(12.*dr(0))
                 ajrzst = ((rsxy(i1,i2-2,i3-2,0,2)-8.*rsxy(i1,i2-2,i3-
     & 1,0,2)+8.*rsxy(i1,i2-2,i3+1,0,2)-rsxy(i1,i2-2,i3+2,0,2))/(12.*
     & dr(2))-8.*(rsxy(i1,i2-1,i3-2,0,2)-8.*rsxy(i1,i2-1,i3-1,0,2)+8.*
     & rsxy(i1,i2-1,i3+1,0,2)-rsxy(i1,i2-1,i3+2,0,2))/(12.*dr(2))+8.*(
     & rsxy(i1,i2+1,i3-2,0,2)-8.*rsxy(i1,i2+1,i3-1,0,2)+8.*rsxy(i1,i2+
     & 1,i3+1,0,2)-rsxy(i1,i2+1,i3+2,0,2))/(12.*dr(2))-(rsxy(i1,i2+2,
     & i3-2,0,2)-8.*rsxy(i1,i2+2,i3-1,0,2)+8.*rsxy(i1,i2+2,i3+1,0,2)-
     & rsxy(i1,i2+2,i3+2,0,2))/(12.*dr(2)))/(12.*dr(1))
                 ajrztt = (-rsxy(i1,i2,i3-2,0,2)+16.*rsxy(i1,i2,i3-1,0,
     & 2)-30.*rsxy(i1,i2,i3,0,2)+16.*rsxy(i1,i2,i3+1,0,2)-rsxy(i1,i2,
     & i3+2,0,2))/(12.*dr(2)**2)
                 ajsz = rsxy(i1,i2,i3,1,2)
                 ajszr = (rsxy(i1-2,i2,i3,1,2)-8.*rsxy(i1-1,i2,i3,1,2)+
     & 8.*rsxy(i1+1,i2,i3,1,2)-rsxy(i1+2,i2,i3,1,2))/(12.*dr(0))
                 ajszs = (rsxy(i1,i2-2,i3,1,2)-8.*rsxy(i1,i2-1,i3,1,2)+
     & 8.*rsxy(i1,i2+1,i3,1,2)-rsxy(i1,i2+2,i3,1,2))/(12.*dr(1))
                 ajszt = (rsxy(i1,i2,i3-2,1,2)-8.*rsxy(i1,i2,i3-1,1,2)+
     & 8.*rsxy(i1,i2,i3+1,1,2)-rsxy(i1,i2,i3+2,1,2))/(12.*dr(2))
                 ajszrr = (-rsxy(i1-2,i2,i3,1,2)+16.*rsxy(i1-1,i2,i3,1,
     & 2)-30.*rsxy(i1,i2,i3,1,2)+16.*rsxy(i1+1,i2,i3,1,2)-rsxy(i1+2,
     & i2,i3,1,2))/(12.*dr(0)**2)
                 ajszrs = ((rsxy(i1-2,i2-2,i3,1,2)-8.*rsxy(i1-2,i2-1,
     & i3,1,2)+8.*rsxy(i1-2,i2+1,i3,1,2)-rsxy(i1-2,i2+2,i3,1,2))/(12.*
     & dr(1))-8.*(rsxy(i1-1,i2-2,i3,1,2)-8.*rsxy(i1-1,i2-1,i3,1,2)+8.*
     & rsxy(i1-1,i2+1,i3,1,2)-rsxy(i1-1,i2+2,i3,1,2))/(12.*dr(1))+8.*(
     & rsxy(i1+1,i2-2,i3,1,2)-8.*rsxy(i1+1,i2-1,i3,1,2)+8.*rsxy(i1+1,
     & i2+1,i3,1,2)-rsxy(i1+1,i2+2,i3,1,2))/(12.*dr(1))-(rsxy(i1+2,i2-
     & 2,i3,1,2)-8.*rsxy(i1+2,i2-1,i3,1,2)+8.*rsxy(i1+2,i2+1,i3,1,2)-
     & rsxy(i1+2,i2+2,i3,1,2))/(12.*dr(1)))/(12.*dr(0))
                 ajszss = (-rsxy(i1,i2-2,i3,1,2)+16.*rsxy(i1,i2-1,i3,1,
     & 2)-30.*rsxy(i1,i2,i3,1,2)+16.*rsxy(i1,i2+1,i3,1,2)-rsxy(i1,i2+
     & 2,i3,1,2))/(12.*dr(1)**2)
                 ajszrt = ((rsxy(i1-2,i2,i3-2,1,2)-8.*rsxy(i1-2,i2,i3-
     & 1,1,2)+8.*rsxy(i1-2,i2,i3+1,1,2)-rsxy(i1-2,i2,i3+2,1,2))/(12.*
     & dr(2))-8.*(rsxy(i1-1,i2,i3-2,1,2)-8.*rsxy(i1-1,i2,i3-1,1,2)+8.*
     & rsxy(i1-1,i2,i3+1,1,2)-rsxy(i1-1,i2,i3+2,1,2))/(12.*dr(2))+8.*(
     & rsxy(i1+1,i2,i3-2,1,2)-8.*rsxy(i1+1,i2,i3-1,1,2)+8.*rsxy(i1+1,
     & i2,i3+1,1,2)-rsxy(i1+1,i2,i3+2,1,2))/(12.*dr(2))-(rsxy(i1+2,i2,
     & i3-2,1,2)-8.*rsxy(i1+2,i2,i3-1,1,2)+8.*rsxy(i1+2,i2,i3+1,1,2)-
     & rsxy(i1+2,i2,i3+2,1,2))/(12.*dr(2)))/(12.*dr(0))
                 ajszst = ((rsxy(i1,i2-2,i3-2,1,2)-8.*rsxy(i1,i2-2,i3-
     & 1,1,2)+8.*rsxy(i1,i2-2,i3+1,1,2)-rsxy(i1,i2-2,i3+2,1,2))/(12.*
     & dr(2))-8.*(rsxy(i1,i2-1,i3-2,1,2)-8.*rsxy(i1,i2-1,i3-1,1,2)+8.*
     & rsxy(i1,i2-1,i3+1,1,2)-rsxy(i1,i2-1,i3+2,1,2))/(12.*dr(2))+8.*(
     & rsxy(i1,i2+1,i3-2,1,2)-8.*rsxy(i1,i2+1,i3-1,1,2)+8.*rsxy(i1,i2+
     & 1,i3+1,1,2)-rsxy(i1,i2+1,i3+2,1,2))/(12.*dr(2))-(rsxy(i1,i2+2,
     & i3-2,1,2)-8.*rsxy(i1,i2+2,i3-1,1,2)+8.*rsxy(i1,i2+2,i3+1,1,2)-
     & rsxy(i1,i2+2,i3+2,1,2))/(12.*dr(2)))/(12.*dr(1))
                 ajsztt = (-rsxy(i1,i2,i3-2,1,2)+16.*rsxy(i1,i2,i3-1,1,
     & 2)-30.*rsxy(i1,i2,i3,1,2)+16.*rsxy(i1,i2,i3+1,1,2)-rsxy(i1,i2,
     & i3+2,1,2))/(12.*dr(2)**2)
                 ajtz = rsxy(i1,i2,i3,2,2)
                 ajtzr = (rsxy(i1-2,i2,i3,2,2)-8.*rsxy(i1-1,i2,i3,2,2)+
     & 8.*rsxy(i1+1,i2,i3,2,2)-rsxy(i1+2,i2,i3,2,2))/(12.*dr(0))
                 ajtzs = (rsxy(i1,i2-2,i3,2,2)-8.*rsxy(i1,i2-1,i3,2,2)+
     & 8.*rsxy(i1,i2+1,i3,2,2)-rsxy(i1,i2+2,i3,2,2))/(12.*dr(1))
                 ajtzt = (rsxy(i1,i2,i3-2,2,2)-8.*rsxy(i1,i2,i3-1,2,2)+
     & 8.*rsxy(i1,i2,i3+1,2,2)-rsxy(i1,i2,i3+2,2,2))/(12.*dr(2))
                 ajtzrr = (-rsxy(i1-2,i2,i3,2,2)+16.*rsxy(i1-1,i2,i3,2,
     & 2)-30.*rsxy(i1,i2,i3,2,2)+16.*rsxy(i1+1,i2,i3,2,2)-rsxy(i1+2,
     & i2,i3,2,2))/(12.*dr(0)**2)
                 ajtzrs = ((rsxy(i1-2,i2-2,i3,2,2)-8.*rsxy(i1-2,i2-1,
     & i3,2,2)+8.*rsxy(i1-2,i2+1,i3,2,2)-rsxy(i1-2,i2+2,i3,2,2))/(12.*
     & dr(1))-8.*(rsxy(i1-1,i2-2,i3,2,2)-8.*rsxy(i1-1,i2-1,i3,2,2)+8.*
     & rsxy(i1-1,i2+1,i3,2,2)-rsxy(i1-1,i2+2,i3,2,2))/(12.*dr(1))+8.*(
     & rsxy(i1+1,i2-2,i3,2,2)-8.*rsxy(i1+1,i2-1,i3,2,2)+8.*rsxy(i1+1,
     & i2+1,i3,2,2)-rsxy(i1+1,i2+2,i3,2,2))/(12.*dr(1))-(rsxy(i1+2,i2-
     & 2,i3,2,2)-8.*rsxy(i1+2,i2-1,i3,2,2)+8.*rsxy(i1+2,i2+1,i3,2,2)-
     & rsxy(i1+2,i2+2,i3,2,2))/(12.*dr(1)))/(12.*dr(0))
                 ajtzss = (-rsxy(i1,i2-2,i3,2,2)+16.*rsxy(i1,i2-1,i3,2,
     & 2)-30.*rsxy(i1,i2,i3,2,2)+16.*rsxy(i1,i2+1,i3,2,2)-rsxy(i1,i2+
     & 2,i3,2,2))/(12.*dr(1)**2)
                 ajtzrt = ((rsxy(i1-2,i2,i3-2,2,2)-8.*rsxy(i1-2,i2,i3-
     & 1,2,2)+8.*rsxy(i1-2,i2,i3+1,2,2)-rsxy(i1-2,i2,i3+2,2,2))/(12.*
     & dr(2))-8.*(rsxy(i1-1,i2,i3-2,2,2)-8.*rsxy(i1-1,i2,i3-1,2,2)+8.*
     & rsxy(i1-1,i2,i3+1,2,2)-rsxy(i1-1,i2,i3+2,2,2))/(12.*dr(2))+8.*(
     & rsxy(i1+1,i2,i3-2,2,2)-8.*rsxy(i1+1,i2,i3-1,2,2)+8.*rsxy(i1+1,
     & i2,i3+1,2,2)-rsxy(i1+1,i2,i3+2,2,2))/(12.*dr(2))-(rsxy(i1+2,i2,
     & i3-2,2,2)-8.*rsxy(i1+2,i2,i3-1,2,2)+8.*rsxy(i1+2,i2,i3+1,2,2)-
     & rsxy(i1+2,i2,i3+2,2,2))/(12.*dr(2)))/(12.*dr(0))
                 ajtzst = ((rsxy(i1,i2-2,i3-2,2,2)-8.*rsxy(i1,i2-2,i3-
     & 1,2,2)+8.*rsxy(i1,i2-2,i3+1,2,2)-rsxy(i1,i2-2,i3+2,2,2))/(12.*
     & dr(2))-8.*(rsxy(i1,i2-1,i3-2,2,2)-8.*rsxy(i1,i2-1,i3-1,2,2)+8.*
     & rsxy(i1,i2-1,i3+1,2,2)-rsxy(i1,i2-1,i3+2,2,2))/(12.*dr(2))+8.*(
     & rsxy(i1,i2+1,i3-2,2,2)-8.*rsxy(i1,i2+1,i3-1,2,2)+8.*rsxy(i1,i2+
     & 1,i3+1,2,2)-rsxy(i1,i2+1,i3+2,2,2))/(12.*dr(2))-(rsxy(i1,i2+2,
     & i3-2,2,2)-8.*rsxy(i1,i2+2,i3-1,2,2)+8.*rsxy(i1,i2+2,i3+1,2,2)-
     & rsxy(i1,i2+2,i3+2,2,2))/(12.*dr(2)))/(12.*dr(1))
                 ajtztt = (-rsxy(i1,i2,i3-2,2,2)+16.*rsxy(i1,i2,i3-1,2,
     & 2)-30.*rsxy(i1,i2,i3,2,2)+16.*rsxy(i1,i2,i3+1,2,2)-rsxy(i1,i2,
     & i3+2,2,2))/(12.*dr(2)**2)
                 ajrxx = ajrx*ajrxr+ajsx*ajrxs+ajtx*ajrxt
                 ajrxy = ajry*ajrxr+ajsy*ajrxs+ajty*ajrxt
                 ajrxz = ajrz*ajrxr+ajsz*ajrxs+ajtz*ajrxt
                 ajsxx = ajrx*ajsxr+ajsx*ajsxs+ajtx*ajsxt
                 ajsxy = ajry*ajsxr+ajsy*ajsxs+ajty*ajsxt
                 ajsxz = ajrz*ajsxr+ajsz*ajsxs+ajtz*ajsxt
                 ajtxx = ajrx*ajtxr+ajsx*ajtxs+ajtx*ajtxt
                 ajtxy = ajry*ajtxr+ajsy*ajtxs+ajty*ajtxt
                 ajtxz = ajrz*ajtxr+ajsz*ajtxs+ajtz*ajtxt
                 ajryx = ajrx*ajryr+ajsx*ajrys+ajtx*ajryt
                 ajryy = ajry*ajryr+ajsy*ajrys+ajty*ajryt
                 ajryz = ajrz*ajryr+ajsz*ajrys+ajtz*ajryt
                 ajsyx = ajrx*ajsyr+ajsx*ajsys+ajtx*ajsyt
                 ajsyy = ajry*ajsyr+ajsy*ajsys+ajty*ajsyt
                 ajsyz = ajrz*ajsyr+ajsz*ajsys+ajtz*ajsyt
                 ajtyx = ajrx*ajtyr+ajsx*ajtys+ajtx*ajtyt
                 ajtyy = ajry*ajtyr+ajsy*ajtys+ajty*ajtyt
                 ajtyz = ajrz*ajtyr+ajsz*ajtys+ajtz*ajtyt
                 ajrzx = ajrx*ajrzr+ajsx*ajrzs+ajtx*ajrzt
                 ajrzy = ajry*ajrzr+ajsy*ajrzs+ajty*ajrzt
                 ajrzz = ajrz*ajrzr+ajsz*ajrzs+ajtz*ajrzt
                 ajszx = ajrx*ajszr+ajsx*ajszs+ajtx*ajszt
                 ajszy = ajry*ajszr+ajsy*ajszs+ajty*ajszt
                 ajszz = ajrz*ajszr+ajsz*ajszs+ajtz*ajszt
                 ajtzx = ajrx*ajtzr+ajsx*ajtzs+ajtx*ajtzt
                 ajtzy = ajry*ajtzr+ajsy*ajtzs+ajty*ajtzt
                 ajtzz = ajrz*ajtzr+ajsz*ajtzs+ajtz*ajtzt
                 t1 = ajrx**2
                 t6 = ajsx**2
                 t14 = ajtx**2
                 ajrxxx = t1*ajrxrr+2*ajrx*ajsx*ajrxrs+t6*ajrxss+2*
     & ajrx*ajtx*ajrxrt+2*ajsx*ajtx*ajrxst+t14*ajrxtt+ajrxx*ajrxr+
     & ajsxx*ajrxs+ajtxx*ajrxt
                 ajrxxy = ajry*ajrx*ajrxrr+(ajsy*ajrx+ajry*ajsx)*
     & ajrxrs+ajsy*ajsx*ajrxss+(ajry*ajtx+ajty*ajrx)*ajrxrt+(ajty*
     & ajsx+ajsy*ajtx)*ajrxst+ajty*ajtx*ajrxtt+ajrxy*ajrxr+ajsxy*
     & ajrxs+ajtxy*ajrxt
                 t1 = ajry**2
                 t6 = ajsy**2
                 t14 = ajty**2
                 ajrxyy = t1*ajrxrr+2*ajry*ajsy*ajrxrs+t6*ajrxss+2*
     & ajry*ajty*ajrxrt+2*ajsy*ajty*ajrxst+t14*ajrxtt+ajryy*ajrxr+
     & ajsyy*ajrxs+ajtyy*ajrxt
                 ajrxxz = ajrz*ajrx*ajrxrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajrxrs+ajsz*ajsx*ajrxss+(ajrz*ajtx+ajtz*ajrx)*ajrxrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajrxst+ajtz*ajtx*ajrxtt+ajrxz*ajrxr+ajsxz*
     & ajrxs+ajtxz*ajrxt
                 ajrxyz = ajrz*ajry*ajrxrr+(ajsz*ajry+ajrz*ajsy)*
     & ajrxrs+ajsz*ajsy*ajrxss+(ajrz*ajty+ajtz*ajry)*ajrxrt+(ajtz*
     & ajsy+ajsz*ajty)*ajrxst+ajtz*ajty*ajrxtt+ajryz*ajrxr+ajsyz*
     & ajrxs+ajtyz*ajrxt
                 t1 = ajrz**2
                 t6 = ajsz**2
                 t14 = ajtz**2
                 ajrxzz = t1*ajrxrr+2*ajrz*ajsz*ajrxrs+t6*ajrxss+2*
     & ajrz*ajtz*ajrxrt+2*ajsz*ajtz*ajrxst+t14*ajrxtt+ajrzz*ajrxr+
     & ajszz*ajrxs+ajtzz*ajrxt
                 t1 = ajrx**2
                 t6 = ajsx**2
                 t14 = ajtx**2
                 ajsxxx = t1*ajsxrr+2*ajrx*ajsx*ajsxrs+t6*ajsxss+2*
     & ajrx*ajtx*ajsxrt+2*ajsx*ajtx*ajsxst+t14*ajsxtt+ajrxx*ajsxr+
     & ajsxx*ajsxs+ajtxx*ajsxt
                 ajsxxy = ajry*ajrx*ajsxrr+(ajsy*ajrx+ajry*ajsx)*
     & ajsxrs+ajsy*ajsx*ajsxss+(ajry*ajtx+ajty*ajrx)*ajsxrt+(ajty*
     & ajsx+ajsy*ajtx)*ajsxst+ajty*ajtx*ajsxtt+ajrxy*ajsxr+ajsxy*
     & ajsxs+ajtxy*ajsxt
                 t1 = ajry**2
                 t6 = ajsy**2
                 t14 = ajty**2
                 ajsxyy = t1*ajsxrr+2*ajry*ajsy*ajsxrs+t6*ajsxss+2*
     & ajry*ajty*ajsxrt+2*ajsy*ajty*ajsxst+t14*ajsxtt+ajryy*ajsxr+
     & ajsyy*ajsxs+ajtyy*ajsxt
                 ajsxxz = ajrz*ajrx*ajsxrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajsxrs+ajsz*ajsx*ajsxss+(ajrz*ajtx+ajtz*ajrx)*ajsxrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajsxst+ajtz*ajtx*ajsxtt+ajrxz*ajsxr+ajsxz*
     & ajsxs+ajtxz*ajsxt
                 ajsxyz = ajrz*ajry*ajsxrr+(ajsz*ajry+ajrz*ajsy)*
     & ajsxrs+ajsz*ajsy*ajsxss+(ajrz*ajty+ajtz*ajry)*ajsxrt+(ajtz*
     & ajsy+ajsz*ajty)*ajsxst+ajtz*ajty*ajsxtt+ajryz*ajsxr+ajsyz*
     & ajsxs+ajtyz*ajsxt
                 t1 = ajrz**2
                 t6 = ajsz**2
                 t14 = ajtz**2
                 ajsxzz = t1*ajsxrr+2*ajrz*ajsz*ajsxrs+t6*ajsxss+2*
     & ajrz*ajtz*ajsxrt+2*ajsz*ajtz*ajsxst+t14*ajsxtt+ajrzz*ajsxr+
     & ajszz*ajsxs+ajtzz*ajsxt
                 t1 = ajrx**2
                 t6 = ajsx**2
                 t14 = ajtx**2
                 ajtxxx = t1*ajtxrr+2*ajrx*ajsx*ajtxrs+t6*ajtxss+2*
     & ajrx*ajtx*ajtxrt+2*ajsx*ajtx*ajtxst+t14*ajtxtt+ajrxx*ajtxr+
     & ajsxx*ajtxs+ajtxx*ajtxt
                 ajtxxy = ajry*ajrx*ajtxrr+(ajsy*ajrx+ajry*ajsx)*
     & ajtxrs+ajsy*ajsx*ajtxss+(ajry*ajtx+ajty*ajrx)*ajtxrt+(ajty*
     & ajsx+ajsy*ajtx)*ajtxst+ajty*ajtx*ajtxtt+ajrxy*ajtxr+ajsxy*
     & ajtxs+ajtxy*ajtxt
                 t1 = ajry**2
                 t6 = ajsy**2
                 t14 = ajty**2
                 ajtxyy = t1*ajtxrr+2*ajry*ajsy*ajtxrs+t6*ajtxss+2*
     & ajry*ajty*ajtxrt+2*ajsy*ajty*ajtxst+t14*ajtxtt+ajryy*ajtxr+
     & ajsyy*ajtxs+ajtyy*ajtxt
                 ajtxxz = ajrz*ajrx*ajtxrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajtxrs+ajsz*ajsx*ajtxss+(ajrz*ajtx+ajtz*ajrx)*ajtxrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajtxst+ajtz*ajtx*ajtxtt+ajrxz*ajtxr+ajsxz*
     & ajtxs+ajtxz*ajtxt
                 ajtxyz = ajrz*ajry*ajtxrr+(ajsz*ajry+ajrz*ajsy)*
     & ajtxrs+ajsz*ajsy*ajtxss+(ajrz*ajty+ajtz*ajry)*ajtxrt+(ajtz*
     & ajsy+ajsz*ajty)*ajtxst+ajtz*ajty*ajtxtt+ajryz*ajtxr+ajsyz*
     & ajtxs+ajtyz*ajtxt
                 t1 = ajrz**2
                 t6 = ajsz**2
                 t14 = ajtz**2
                 ajtxzz = t1*ajtxrr+2*ajrz*ajsz*ajtxrs+t6*ajtxss+2*
     & ajrz*ajtz*ajtxrt+2*ajsz*ajtz*ajtxst+t14*ajtxtt+ajrzz*ajtxr+
     & ajszz*ajtxs+ajtzz*ajtxt
                 t1 = ajrx**2
                 t6 = ajsx**2
                 t14 = ajtx**2
                 ajryxx = t1*ajryrr+2*ajrx*ajsx*ajryrs+t6*ajryss+2*
     & ajrx*ajtx*ajryrt+2*ajsx*ajtx*ajryst+t14*ajrytt+ajrxx*ajryr+
     & ajsxx*ajrys+ajtxx*ajryt
                 ajryxy = ajry*ajrx*ajryrr+(ajsy*ajrx+ajry*ajsx)*
     & ajryrs+ajsy*ajsx*ajryss+(ajry*ajtx+ajty*ajrx)*ajryrt+(ajty*
     & ajsx+ajsy*ajtx)*ajryst+ajty*ajtx*ajrytt+ajrxy*ajryr+ajsxy*
     & ajrys+ajtxy*ajryt
                 t1 = ajry**2
                 t6 = ajsy**2
                 t14 = ajty**2
                 ajryyy = t1*ajryrr+2*ajry*ajsy*ajryrs+t6*ajryss+2*
     & ajry*ajty*ajryrt+2*ajsy*ajty*ajryst+t14*ajrytt+ajryy*ajryr+
     & ajsyy*ajrys+ajtyy*ajryt
                 ajryxz = ajrz*ajrx*ajryrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajryrs+ajsz*ajsx*ajryss+(ajrz*ajtx+ajtz*ajrx)*ajryrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajryst+ajtz*ajtx*ajrytt+ajrxz*ajryr+ajsxz*
     & ajrys+ajtxz*ajryt
                 ajryyz = ajrz*ajry*ajryrr+(ajsz*ajry+ajrz*ajsy)*
     & ajryrs+ajsz*ajsy*ajryss+(ajrz*ajty+ajtz*ajry)*ajryrt+(ajtz*
     & ajsy+ajsz*ajty)*ajryst+ajtz*ajty*ajrytt+ajryz*ajryr+ajsyz*
     & ajrys+ajtyz*ajryt
                 t1 = ajrz**2
                 t6 = ajsz**2
                 t14 = ajtz**2
                 ajryzz = t1*ajryrr+2*ajrz*ajsz*ajryrs+t6*ajryss+2*
     & ajrz*ajtz*ajryrt+2*ajsz*ajtz*ajryst+t14*ajrytt+ajrzz*ajryr+
     & ajszz*ajrys+ajtzz*ajryt
                 t1 = ajrx**2
                 t6 = ajsx**2
                 t14 = ajtx**2
                 ajsyxx = t1*ajsyrr+2*ajrx*ajsx*ajsyrs+t6*ajsyss+2*
     & ajrx*ajtx*ajsyrt+2*ajsx*ajtx*ajsyst+t14*ajsytt+ajrxx*ajsyr+
     & ajsxx*ajsys+ajtxx*ajsyt
                 ajsyxy = ajry*ajrx*ajsyrr+(ajsy*ajrx+ajry*ajsx)*
     & ajsyrs+ajsy*ajsx*ajsyss+(ajry*ajtx+ajty*ajrx)*ajsyrt+(ajty*
     & ajsx+ajsy*ajtx)*ajsyst+ajty*ajtx*ajsytt+ajrxy*ajsyr+ajsxy*
     & ajsys+ajtxy*ajsyt
                 t1 = ajry**2
                 t6 = ajsy**2
                 t14 = ajty**2
                 ajsyyy = t1*ajsyrr+2*ajry*ajsy*ajsyrs+t6*ajsyss+2*
     & ajry*ajty*ajsyrt+2*ajsy*ajty*ajsyst+t14*ajsytt+ajryy*ajsyr+
     & ajsyy*ajsys+ajtyy*ajsyt
                 ajsyxz = ajrz*ajrx*ajsyrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajsyrs+ajsz*ajsx*ajsyss+(ajrz*ajtx+ajtz*ajrx)*ajsyrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajsyst+ajtz*ajtx*ajsytt+ajrxz*ajsyr+ajsxz*
     & ajsys+ajtxz*ajsyt
                 ajsyyz = ajrz*ajry*ajsyrr+(ajsz*ajry+ajrz*ajsy)*
     & ajsyrs+ajsz*ajsy*ajsyss+(ajrz*ajty+ajtz*ajry)*ajsyrt+(ajtz*
     & ajsy+ajsz*ajty)*ajsyst+ajtz*ajty*ajsytt+ajryz*ajsyr+ajsyz*
     & ajsys+ajtyz*ajsyt
                 t1 = ajrz**2
                 t6 = ajsz**2
                 t14 = ajtz**2
                 ajsyzz = t1*ajsyrr+2*ajrz*ajsz*ajsyrs+t6*ajsyss+2*
     & ajrz*ajtz*ajsyrt+2*ajsz*ajtz*ajsyst+t14*ajsytt+ajrzz*ajsyr+
     & ajszz*ajsys+ajtzz*ajsyt
                 t1 = ajrx**2
                 t6 = ajsx**2
                 t14 = ajtx**2
                 ajtyxx = t1*ajtyrr+2*ajrx*ajsx*ajtyrs+t6*ajtyss+2*
     & ajrx*ajtx*ajtyrt+2*ajsx*ajtx*ajtyst+t14*ajtytt+ajrxx*ajtyr+
     & ajsxx*ajtys+ajtxx*ajtyt
                 ajtyxy = ajry*ajrx*ajtyrr+(ajsy*ajrx+ajry*ajsx)*
     & ajtyrs+ajsy*ajsx*ajtyss+(ajry*ajtx+ajty*ajrx)*ajtyrt+(ajty*
     & ajsx+ajsy*ajtx)*ajtyst+ajty*ajtx*ajtytt+ajrxy*ajtyr+ajsxy*
     & ajtys+ajtxy*ajtyt
                 t1 = ajry**2
                 t6 = ajsy**2
                 t14 = ajty**2
                 ajtyyy = t1*ajtyrr+2*ajry*ajsy*ajtyrs+t6*ajtyss+2*
     & ajry*ajty*ajtyrt+2*ajsy*ajty*ajtyst+t14*ajtytt+ajryy*ajtyr+
     & ajsyy*ajtys+ajtyy*ajtyt
                 ajtyxz = ajrz*ajrx*ajtyrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajtyrs+ajsz*ajsx*ajtyss+(ajrz*ajtx+ajtz*ajrx)*ajtyrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajtyst+ajtz*ajtx*ajtytt+ajrxz*ajtyr+ajsxz*
     & ajtys+ajtxz*ajtyt
                 ajtyyz = ajrz*ajry*ajtyrr+(ajsz*ajry+ajrz*ajsy)*
     & ajtyrs+ajsz*ajsy*ajtyss+(ajrz*ajty+ajtz*ajry)*ajtyrt+(ajtz*
     & ajsy+ajsz*ajty)*ajtyst+ajtz*ajty*ajtytt+ajryz*ajtyr+ajsyz*
     & ajtys+ajtyz*ajtyt
                 t1 = ajrz**2
                 t6 = ajsz**2
                 t14 = ajtz**2
                 ajtyzz = t1*ajtyrr+2*ajrz*ajsz*ajtyrs+t6*ajtyss+2*
     & ajrz*ajtz*ajtyrt+2*ajsz*ajtz*ajtyst+t14*ajtytt+ajrzz*ajtyr+
     & ajszz*ajtys+ajtzz*ajtyt
                 t1 = ajrx**2
                 t6 = ajsx**2
                 t14 = ajtx**2
                 ajrzxx = t1*ajrzrr+2*ajrx*ajsx*ajrzrs+t6*ajrzss+2*
     & ajrx*ajtx*ajrzrt+2*ajsx*ajtx*ajrzst+t14*ajrztt+ajrxx*ajrzr+
     & ajsxx*ajrzs+ajtxx*ajrzt
                 ajrzxy = ajry*ajrx*ajrzrr+(ajsy*ajrx+ajry*ajsx)*
     & ajrzrs+ajsy*ajsx*ajrzss+(ajry*ajtx+ajty*ajrx)*ajrzrt+(ajty*
     & ajsx+ajsy*ajtx)*ajrzst+ajty*ajtx*ajrztt+ajrxy*ajrzr+ajsxy*
     & ajrzs+ajtxy*ajrzt
                 t1 = ajry**2
                 t6 = ajsy**2
                 t14 = ajty**2
                 ajrzyy = t1*ajrzrr+2*ajry*ajsy*ajrzrs+t6*ajrzss+2*
     & ajry*ajty*ajrzrt+2*ajsy*ajty*ajrzst+t14*ajrztt+ajryy*ajrzr+
     & ajsyy*ajrzs+ajtyy*ajrzt
                 ajrzxz = ajrz*ajrx*ajrzrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajrzrs+ajsz*ajsx*ajrzss+(ajrz*ajtx+ajtz*ajrx)*ajrzrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajrzst+ajtz*ajtx*ajrztt+ajrxz*ajrzr+ajsxz*
     & ajrzs+ajtxz*ajrzt
                 ajrzyz = ajrz*ajry*ajrzrr+(ajsz*ajry+ajrz*ajsy)*
     & ajrzrs+ajsz*ajsy*ajrzss+(ajrz*ajty+ajtz*ajry)*ajrzrt+(ajtz*
     & ajsy+ajsz*ajty)*ajrzst+ajtz*ajty*ajrztt+ajryz*ajrzr+ajsyz*
     & ajrzs+ajtyz*ajrzt
                 t1 = ajrz**2
                 t6 = ajsz**2
                 t14 = ajtz**2
                 ajrzzz = t1*ajrzrr+2*ajrz*ajsz*ajrzrs+t6*ajrzss+2*
     & ajrz*ajtz*ajrzrt+2*ajsz*ajtz*ajrzst+t14*ajrztt+ajrzz*ajrzr+
     & ajszz*ajrzs+ajtzz*ajrzt
                 t1 = ajrx**2
                 t6 = ajsx**2
                 t14 = ajtx**2
                 ajszxx = t1*ajszrr+2*ajrx*ajsx*ajszrs+t6*ajszss+2*
     & ajrx*ajtx*ajszrt+2*ajsx*ajtx*ajszst+t14*ajsztt+ajrxx*ajszr+
     & ajsxx*ajszs+ajtxx*ajszt
                 ajszxy = ajry*ajrx*ajszrr+(ajsy*ajrx+ajry*ajsx)*
     & ajszrs+ajsy*ajsx*ajszss+(ajry*ajtx+ajty*ajrx)*ajszrt+(ajty*
     & ajsx+ajsy*ajtx)*ajszst+ajty*ajtx*ajsztt+ajrxy*ajszr+ajsxy*
     & ajszs+ajtxy*ajszt
                 t1 = ajry**2
                 t6 = ajsy**2
                 t14 = ajty**2
                 ajszyy = t1*ajszrr+2*ajry*ajsy*ajszrs+t6*ajszss+2*
     & ajry*ajty*ajszrt+2*ajsy*ajty*ajszst+t14*ajsztt+ajryy*ajszr+
     & ajsyy*ajszs+ajtyy*ajszt
                 ajszxz = ajrz*ajrx*ajszrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajszrs+ajsz*ajsx*ajszss+(ajrz*ajtx+ajtz*ajrx)*ajszrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajszst+ajtz*ajtx*ajsztt+ajrxz*ajszr+ajsxz*
     & ajszs+ajtxz*ajszt
                 ajszyz = ajrz*ajry*ajszrr+(ajsz*ajry+ajrz*ajsy)*
     & ajszrs+ajsz*ajsy*ajszss+(ajrz*ajty+ajtz*ajry)*ajszrt+(ajtz*
     & ajsy+ajsz*ajty)*ajszst+ajtz*ajty*ajsztt+ajryz*ajszr+ajsyz*
     & ajszs+ajtyz*ajszt
                 t1 = ajrz**2
                 t6 = ajsz**2
                 t14 = ajtz**2
                 ajszzz = t1*ajszrr+2*ajrz*ajsz*ajszrs+t6*ajszss+2*
     & ajrz*ajtz*ajszrt+2*ajsz*ajtz*ajszst+t14*ajsztt+ajrzz*ajszr+
     & ajszz*ajszs+ajtzz*ajszt
                 t1 = ajrx**2
                 t6 = ajsx**2
                 t14 = ajtx**2
                 ajtzxx = t1*ajtzrr+2*ajrx*ajsx*ajtzrs+t6*ajtzss+2*
     & ajrx*ajtx*ajtzrt+2*ajsx*ajtx*ajtzst+t14*ajtztt+ajrxx*ajtzr+
     & ajsxx*ajtzs+ajtxx*ajtzt
                 ajtzxy = ajry*ajrx*ajtzrr+(ajsy*ajrx+ajry*ajsx)*
     & ajtzrs+ajsy*ajsx*ajtzss+(ajry*ajtx+ajty*ajrx)*ajtzrt+(ajty*
     & ajsx+ajsy*ajtx)*ajtzst+ajty*ajtx*ajtztt+ajrxy*ajtzr+ajsxy*
     & ajtzs+ajtxy*ajtzt
                 t1 = ajry**2
                 t6 = ajsy**2
                 t14 = ajty**2
                 ajtzyy = t1*ajtzrr+2*ajry*ajsy*ajtzrs+t6*ajtzss+2*
     & ajry*ajty*ajtzrt+2*ajsy*ajty*ajtzst+t14*ajtztt+ajryy*ajtzr+
     & ajsyy*ajtzs+ajtyy*ajtzt
                 ajtzxz = ajrz*ajrx*ajtzrr+(ajsz*ajrx+ajrz*ajsx)*
     & ajtzrs+ajsz*ajsx*ajtzss+(ajrz*ajtx+ajtz*ajrx)*ajtzrt+(ajtz*
     & ajsx+ajsz*ajtx)*ajtzst+ajtz*ajtx*ajtztt+ajrxz*ajtzr+ajsxz*
     & ajtzs+ajtxz*ajtzt
                 ajtzyz = ajrz*ajry*ajtzrr+(ajsz*ajry+ajrz*ajsy)*
     & ajtzrs+ajsz*ajsy*ajtzss+(ajrz*ajty+ajtz*ajry)*ajtzrt+(ajtz*
     & ajsy+ajsz*ajty)*ajtzst+ajtz*ajty*ajtztt+ajryz*ajtzr+ajsyz*
     & ajtzs+ajtyz*ajtzt
                 t1 = ajrz**2
                 t6 = ajsz**2
                 t14 = ajtz**2
                 ajtzzz = t1*ajtzrr+2*ajrz*ajsz*ajtzrs+t6*ajtzss+2*
     & ajrz*ajtz*ajtzrt+2*ajsz*ajtz*ajtzst+t14*ajtztt+ajrzz*ajtzr+
     & ajszz*ajtzs+ajtzz*ajtzt
                 ! define these derivatives of the mapping (which are not normally computed by the standard macros):
                ajrxxr=ajrx*ajrxrr + ajsx*ajrxrs + ajtx*ajrxrt + ajrxr*
     & ajrxr +ajsxr*ajrxs + ajtxr*ajrxt
                ajrxxs=ajrx*ajrxrs + ajsx*ajrxss + ajtx*ajrxst + ajrxs*
     & ajrxr +ajsxs*ajrxs + ajtxs*ajrxt
                ajrxxt=ajrx*ajrxrt + ajsx*ajrxst + ajtx*ajrxtt + ajrxt*
     & ajrxr +ajsxt*ajrxs + ajtxt*ajrxt
                ajrxyr=ajry*ajrxrr + ajsy*ajrxrs + ajty*ajrxrt + ajryr*
     & ajrxr +ajsyr*ajrxs + ajtyr*ajrxt
                ajrxys=ajry*ajrxrs + ajsy*ajrxss + ajty*ajrxst + ajrys*
     & ajrxr +ajsys*ajrxs + ajtys*ajrxt
                ajrxyt=ajry*ajrxrt + ajsy*ajrxst + ajty*ajrxtt + ajryt*
     & ajrxr +ajsyt*ajrxs + ajtyt*ajrxt
                ajrxzr=ajrz*ajrxrr + ajsz*ajrxrs + ajtz*ajrxrt + ajrzr*
     & ajrxr +ajszr*ajrxs + ajtzr*ajrxt
                ajrxzs=ajrz*ajrxrs + ajsz*ajrxss + ajtz*ajrxst + ajrzs*
     & ajrxr +ajszs*ajrxs + ajtzs*ajrxt
                ajrxzt=ajrz*ajrxrt + ajsz*ajrxst + ajtz*ajrxtt + ajrzt*
     & ajrxr +ajszt*ajrxs + ajtzt*ajrxt
                ajryxr=ajrx*ajryrr + ajsx*ajryrs + ajtx*ajryrt + ajrxr*
     & ajryr +ajsxr*ajrys + ajtxr*ajryt
                ajryxs=ajrx*ajryrs + ajsx*ajryss + ajtx*ajryst + ajrxs*
     & ajryr +ajsxs*ajrys + ajtxs*ajryt
                ajryxt=ajrx*ajryrt + ajsx*ajryst + ajtx*ajrytt + ajrxt*
     & ajryr +ajsxt*ajrys + ajtxt*ajryt
                ajryyr=ajry*ajryrr + ajsy*ajryrs + ajty*ajryrt + ajryr*
     & ajryr +ajsyr*ajrys + ajtyr*ajryt
                ajryys=ajry*ajryrs + ajsy*ajryss + ajty*ajryst + ajrys*
     & ajryr +ajsys*ajrys + ajtys*ajryt
                ajryyt=ajry*ajryrt + ajsy*ajryst + ajty*ajrytt + ajryt*
     & ajryr +ajsyt*ajrys + ajtyt*ajryt
                ajryzr=ajrz*ajryrr + ajsz*ajryrs + ajtz*ajryrt + ajrzr*
     & ajryr +ajszr*ajrys + ajtzr*ajryt
                ajryzs=ajrz*ajryrs + ajsz*ajryss + ajtz*ajryst + ajrzs*
     & ajryr +ajszs*ajrys + ajtzs*ajryt
                ajryzt=ajrz*ajryrt + ajsz*ajryst + ajtz*ajrytt + ajrzt*
     & ajryr +ajszt*ajrys + ajtzt*ajryt
                ajrzxr=ajrx*ajrzrr + ajsx*ajrzrs + ajtx*ajrzrt + ajrxr*
     & ajrzr +ajsxr*ajrzs + ajtxr*ajrzt
                ajrzxs=ajrx*ajrzrs + ajsx*ajrzss + ajtx*ajrzst + ajrxs*
     & ajrzr +ajsxs*ajrzs + ajtxs*ajrzt
                ajrzxt=ajrx*ajrzrt + ajsx*ajrzst + ajtx*ajrztt + ajrxt*
     & ajrzr +ajsxt*ajrzs + ajtxt*ajrzt
                ajrzyr=ajry*ajrzrr + ajsy*ajrzrs + ajty*ajrzrt + ajryr*
     & ajrzr +ajsyr*ajrzs + ajtyr*ajrzt
                ajrzys=ajry*ajrzrs + ajsy*ajrzss + ajty*ajrzst + ajrys*
     & ajrzr +ajsys*ajrzs + ajtys*ajrzt
                ajrzyt=ajry*ajrzrt + ajsy*ajrzst + ajty*ajrztt + ajryt*
     & ajrzr +ajsyt*ajrzs + ajtyt*ajrzt
                ajrzzr=ajrz*ajrzrr + ajsz*ajrzrs + ajtz*ajrzrt + ajrzr*
     & ajrzr +ajszr*ajrzs + ajtzr*ajrzt
                ajrzzs=ajrz*ajrzrs + ajsz*ajrzss + ajtz*ajrzst + ajrzs*
     & ajrzr +ajszs*ajrzs + ajtzs*ajrzt
                ajrzzt=ajrz*ajrzrt + ajsz*ajrzst + ajtz*ajrztt + ajrzt*
     & ajrzr +ajszt*ajrzs + ajtzt*ajrzt
                ajsxxr=ajrx*ajsxrr + ajsx*ajsxrs + ajtx*ajsxrt + ajrxr*
     & ajsxr +ajsxr*ajsxs + ajtxr*ajsxt
                ajsxxs=ajrx*ajsxrs + ajsx*ajsxss + ajtx*ajsxst + ajrxs*
     & ajsxr +ajsxs*ajsxs + ajtxs*ajsxt
                ajsxxt=ajrx*ajsxrt + ajsx*ajsxst + ajtx*ajsxtt + ajrxt*
     & ajsxr +ajsxt*ajsxs + ajtxt*ajsxt
                ajsxyr=ajry*ajsxrr + ajsy*ajsxrs + ajty*ajsxrt + ajryr*
     & ajsxr +ajsyr*ajsxs + ajtyr*ajsxt
                ajsxys=ajry*ajsxrs + ajsy*ajsxss + ajty*ajsxst + ajrys*
     & ajsxr +ajsys*ajsxs + ajtys*ajsxt
                ajsxyt=ajry*ajsxrt + ajsy*ajsxst + ajty*ajsxtt + ajryt*
     & ajsxr +ajsyt*ajsxs + ajtyt*ajsxt
                ajsxzr=ajrz*ajsxrr + ajsz*ajsxrs + ajtz*ajsxrt + ajrzr*
     & ajsxr +ajszr*ajsxs + ajtzr*ajsxt
                ajsxzs=ajrz*ajsxrs + ajsz*ajsxss + ajtz*ajsxst + ajrzs*
     & ajsxr +ajszs*ajsxs + ajtzs*ajsxt
                ajsxzt=ajrz*ajsxrt + ajsz*ajsxst + ajtz*ajsxtt + ajrzt*
     & ajsxr +ajszt*ajsxs + ajtzt*ajsxt
                ajsyxr=ajrx*ajsyrr + ajsx*ajsyrs + ajtx*ajsyrt + ajrxr*
     & ajsyr +ajsxr*ajsys + ajtxr*ajsyt
                ajsyxs=ajrx*ajsyrs + ajsx*ajsyss + ajtx*ajsyst + ajrxs*
     & ajsyr +ajsxs*ajsys + ajtxs*ajsyt
                ajsyxt=ajrx*ajsyrt + ajsx*ajsyst + ajtx*ajsytt + ajrxt*
     & ajsyr +ajsxt*ajsys + ajtxt*ajsyt
                ajsyyr=ajry*ajsyrr + ajsy*ajsyrs + ajty*ajsyrt + ajryr*
     & ajsyr +ajsyr*ajsys + ajtyr*ajsyt
                ajsyys=ajry*ajsyrs + ajsy*ajsyss + ajty*ajsyst + ajrys*
     & ajsyr +ajsys*ajsys + ajtys*ajsyt
                ajsyyt=ajry*ajsyrt + ajsy*ajsyst + ajty*ajsytt + ajryt*
     & ajsyr +ajsyt*ajsys + ajtyt*ajsyt
                ajsyzr=ajrz*ajsyrr + ajsz*ajsyrs + ajtz*ajsyrt + ajrzr*
     & ajsyr +ajszr*ajsys + ajtzr*ajsyt
                ajsyzs=ajrz*ajsyrs + ajsz*ajsyss + ajtz*ajsyst + ajrzs*
     & ajsyr +ajszs*ajsys + ajtzs*ajsyt
                ajsyzt=ajrz*ajsyrt + ajsz*ajsyst + ajtz*ajsytt + ajrzt*
     & ajsyr +ajszt*ajsys + ajtzt*ajsyt
                ajszxr=ajrx*ajszrr + ajsx*ajszrs + ajtx*ajszrt + ajrxr*
     & ajszr +ajsxr*ajszs + ajtxr*ajszt
                ajszxs=ajrx*ajszrs + ajsx*ajszss + ajtx*ajszst + ajrxs*
     & ajszr +ajsxs*ajszs + ajtxs*ajszt
                ajszxt=ajrx*ajszrt + ajsx*ajszst + ajtx*ajsztt + ajrxt*
     & ajszr +ajsxt*ajszs + ajtxt*ajszt
                ajszyr=ajry*ajszrr + ajsy*ajszrs + ajty*ajszrt + ajryr*
     & ajszr +ajsyr*ajszs + ajtyr*ajszt
                ajszys=ajry*ajszrs + ajsy*ajszss + ajty*ajszst + ajrys*
     & ajszr +ajsys*ajszs + ajtys*ajszt
                ajszyt=ajry*ajszrt + ajsy*ajszst + ajty*ajsztt + ajryt*
     & ajszr +ajsyt*ajszs + ajtyt*ajszt
                ajszzr=ajrz*ajszrr + ajsz*ajszrs + ajtz*ajszrt + ajrzr*
     & ajszr +ajszr*ajszs + ajtzr*ajszt
                ajszzs=ajrz*ajszrs + ajsz*ajszss + ajtz*ajszst + ajrzs*
     & ajszr +ajszs*ajszs + ajtzs*ajszt
                ajszzt=ajrz*ajszrt + ajsz*ajszst + ajtz*ajsztt + ajrzt*
     & ajszr +ajszt*ajszs + ajtzt*ajszt
                ajtxxr=ajrx*ajtxrr + ajsx*ajtxrs + ajtx*ajtxrt + ajrxr*
     & ajtxr +ajsxr*ajtxs + ajtxr*ajtxt
                ajtxxs=ajrx*ajtxrs + ajsx*ajtxss + ajtx*ajtxst + ajrxs*
     & ajtxr +ajsxs*ajtxs + ajtxs*ajtxt
                ajtxxt=ajrx*ajtxrt + ajsx*ajtxst + ajtx*ajtxtt + ajrxt*
     & ajtxr +ajsxt*ajtxs + ajtxt*ajtxt
                ajtxyr=ajry*ajtxrr + ajsy*ajtxrs + ajty*ajtxrt + ajryr*
     & ajtxr +ajsyr*ajtxs + ajtyr*ajtxt
                ajtxys=ajry*ajtxrs + ajsy*ajtxss + ajty*ajtxst + ajrys*
     & ajtxr +ajsys*ajtxs + ajtys*ajtxt
                ajtxyt=ajry*ajtxrt + ajsy*ajtxst + ajty*ajtxtt + ajryt*
     & ajtxr +ajsyt*ajtxs + ajtyt*ajtxt
                ajtxzr=ajrz*ajtxrr + ajsz*ajtxrs + ajtz*ajtxrt + ajrzr*
     & ajtxr +ajszr*ajtxs + ajtzr*ajtxt
                ajtxzs=ajrz*ajtxrs + ajsz*ajtxss + ajtz*ajtxst + ajrzs*
     & ajtxr +ajszs*ajtxs + ajtzs*ajtxt
                ajtxzt=ajrz*ajtxrt + ajsz*ajtxst + ajtz*ajtxtt + ajrzt*
     & ajtxr +ajszt*ajtxs + ajtzt*ajtxt
                ajtyxr=ajrx*ajtyrr + ajsx*ajtyrs + ajtx*ajtyrt + ajrxr*
     & ajtyr +ajsxr*ajtys + ajtxr*ajtyt
                ajtyxs=ajrx*ajtyrs + ajsx*ajtyss + ajtx*ajtyst + ajrxs*
     & ajtyr +ajsxs*ajtys + ajtxs*ajtyt
                ajtyxt=ajrx*ajtyrt + ajsx*ajtyst + ajtx*ajtytt + ajrxt*
     & ajtyr +ajsxt*ajtys + ajtxt*ajtyt
                ajtyyr=ajry*ajtyrr + ajsy*ajtyrs + ajty*ajtyrt + ajryr*
     & ajtyr +ajsyr*ajtys + ajtyr*ajtyt
                ajtyys=ajry*ajtyrs + ajsy*ajtyss + ajty*ajtyst + ajrys*
     & ajtyr +ajsys*ajtys + ajtys*ajtyt
                ajtyyt=ajry*ajtyrt + ajsy*ajtyst + ajty*ajtytt + ajryt*
     & ajtyr +ajsyt*ajtys + ajtyt*ajtyt
                ajtyzr=ajrz*ajtyrr + ajsz*ajtyrs + ajtz*ajtyrt + ajrzr*
     & ajtyr +ajszr*ajtys + ajtzr*ajtyt
                ajtyzs=ajrz*ajtyrs + ajsz*ajtyss + ajtz*ajtyst + ajrzs*
     & ajtyr +ajszs*ajtys + ajtzs*ajtyt
                ajtyzt=ajrz*ajtyrt + ajsz*ajtyst + ajtz*ajtytt + ajrzt*
     & ajtyr +ajszt*ajtys + ajtzt*ajtyt
                ajtzxr=ajrx*ajtzrr + ajsx*ajtzrs + ajtx*ajtzrt + ajrxr*
     & ajtzr +ajsxr*ajtzs + ajtxr*ajtzt
                ajtzxs=ajrx*ajtzrs + ajsx*ajtzss + ajtx*ajtzst + ajrxs*
     & ajtzr +ajsxs*ajtzs + ajtxs*ajtzt
                ajtzxt=ajrx*ajtzrt + ajsx*ajtzst + ajtx*ajtztt + ajrxt*
     & ajtzr +ajsxt*ajtzs + ajtxt*ajtzt
                ajtzyr=ajry*ajtzrr + ajsy*ajtzrs + ajty*ajtzrt + ajryr*
     & ajtzr +ajsyr*ajtzs + ajtyr*ajtzt
                ajtzys=ajry*ajtzrs + ajsy*ajtzss + ajty*ajtzst + ajrys*
     & ajtzr +ajsys*ajtzs + ajtys*ajtzt
                ajtzyt=ajry*ajtzrt + ajsy*ajtzst + ajty*ajtztt + ajryt*
     & ajtzr +ajsyt*ajtzs + ajtyt*ajtzt
                ajtzzr=ajrz*ajtzrr + ajsz*ajtzrs + ajtz*ajtzrt + ajrzr*
     & ajtzr +ajszr*ajtzs + ajtzr*ajtzt
                ajtzzs=ajrz*ajtzrs + ajsz*ajtzss + ajtz*ajtzst + ajrzs*
     & ajtzr +ajszs*ajtzs + ajtzs*ajtzt
                ajtzzt=ajrz*ajtzrt + ajsz*ajtzst + ajtz*ajtztt + ajrzt*
     & ajtzr +ajszt*ajtzs + ajtzt*ajtzt
                ! ***************************************************************
                ! PDE: cxx*uxx + cyy*uyy + czz*uzz + cxy*uxy + cxz*uxz + cyz*uyz + cx*ux + cy*uy + cz*uz + c0 *u = f 
                ! PDE: cRR*urr + cSS*uss + cTT*utt + cRS*urs + cRT*urt + cST*ust  + ccR*ur + ccS*us + ccT*ut + c0 *u = f 
                ! =============== Start: Laplace operator: ==================== 
                 cxx=1.
                 cyy=1.
                 czz=1.
                 cxy=0.
                 cxz=0.
                 cyz=0.
                 cx=0.
                 cy=0.
                 cz=0.
                 c0=0.
                 cRR=cxx*ajrx**2+cyy*ajry**2+czz*ajrz**2 +cxy*ajrx*
     & ajry+cxz*ajrx*ajrz+cyz*ajry*ajrz
                 cSS=cxx*ajsx**2+cyy*ajsy**2+czz*ajsz**2 +cxy*ajsx*
     & ajsy+cxz*ajsx*ajsz+cyz*ajsy*ajsz
                 cTT=cxx*ajtx**2+cyy*ajty**2+czz*ajtz**2 +cxy*ajtx*
     & ajty+cxz*ajtx*ajtz+cyz*ajty*ajtz
                 cRS=2.*(cxx*ajrx*ajsx+cyy*ajry*ajsy+czz*ajrz*ajsz) +
     & cxy*(ajrx*ajsy+ajry*ajsx)+cxz*(ajrx*ajsz+ajrz*ajsx)+cyz*(ajry*
     & ajsz+ajrz*ajsy)
                 cRT=2.*(cxx*ajrx*ajtx+cyy*ajry*ajty+czz*ajrz*ajtz) +
     & cxy*(ajrx*ajty+ajry*ajtx)+cxz*(ajrx*ajtz+ajrz*ajtx)+cyz*(ajry*
     & ajtz+ajrz*ajty)
                 cST=2.*(cxx*ajsx*ajtx+cyy*ajsy*ajty+czz*ajsz*ajtz) +
     & cxy*(ajsx*ajty+ajsy*ajtx)+cxz*(ajsx*ajtz+ajsz*ajtx)+cyz*(ajsy*
     & ajtz+ajsz*ajty)
                 ccR=cxx*ajrxx+cyy*ajryy+czz*ajrzz +cxy*ajrxy+cxz*
     & ajrxz+cyz*ajryz + cx*ajrx+cy*ajry+cz*ajrz
                 ccS=cxx*ajsxx+cyy*ajsyy+czz*ajszz +cxy*ajsxy+cxz*
     & ajsxz+cyz*ajsyz + cx*ajsx+cy*ajsy+cz*ajsz
                 ccT=cxx*ajtxx+cyy*ajtyy+czz*ajtzz +cxy*ajtxy+cxz*
     & ajtxz+cyz*ajtyz + cx*ajtx+cy*ajty+cz*ajtz
                ! m=1...
                 cRRr=2.*(ajrx*ajrxr+ajry*ajryr+ajrz*ajrzr)
                 cRSr=2.*(ajrxr*ajsx+ajrx*ajsxr + ajryr*ajsy+ ajry*
     & ajsyr + ajrzr*ajsz+ ajrz*ajszr)
                 cRTr=2.*(ajrxr*ajtx+ajrx*ajtxr + ajryr*ajty+ ajry*
     & ajtyr + ajrzr*ajtz+ ajrz*ajtzr)
                 ccRr=ajrxxr+ajryyr+ajrzzr
                 cRRs=2.*(ajrx*ajrxs+ajry*ajrys+ajrz*ajrzs)
                 cRSs=2.*(ajrxs*ajsx+ajrx*ajsxs + ajrys*ajsy+ ajry*
     & ajsys + ajrzs*ajsz+ ajrz*ajszs)
                 cRTs=2.*(ajrxs*ajtx+ajrx*ajtxs + ajrys*ajty+ ajry*
     & ajtys + ajrzs*ajtz+ ajrz*ajtzs)
                 ccRs=ajrxxs+ajryys+ajrzzs
                 cRRt=2.*(ajrx*ajrxt+ajry*ajryt+ajrz*ajrzt)
                 cRSt=2.*(ajrxt*ajsx+ajrx*ajsxt + ajryt*ajsy+ ajry*
     & ajsyt + ajrzt*ajsz+ ajrz*ajszt)
                 cRTt=2.*(ajrxt*ajtx+ajrx*ajtxt + ajryt*ajty+ ajry*
     & ajtyt + ajrzt*ajtz+ ajrz*ajtzt)
                 ccRt=ajrxxt+ajryyt+ajrzzt
                ! m=2...
                 cSSr=2.*(ajsx*ajsxr+ajsy*ajsyr+ajsz*ajszr)
                 cSTr=2.*(ajsxr*ajtx+ajsx*ajtxr + ajsyr*ajty+ ajsy*
     & ajtyr + ajszr*ajtz+ ajsz*ajtzr)
                 ccSr=ajsxxr+ajsyyr+ajszzr
                 cSSs=2.*(ajsx*ajsxs+ajsy*ajsys+ajsz*ajszs)
                 cSTs=2.*(ajsxs*ajtx+ajsx*ajtxs + ajsys*ajty+ ajsy*
     & ajtys + ajszs*ajtz+ ajsz*ajtzs)
                 ccSs=ajsxxs+ajsyys+ajszzs
                 cSSt=2.*(ajsx*ajsxt+ajsy*ajsyt+ajsz*ajszt)
                 cSTt=2.*(ajsxt*ajtx+ajsx*ajtxt + ajsyt*ajty+ ajsy*
     & ajtyt + ajszt*ajtz+ ajsz*ajtzt)
                 ccSt=ajsxxt+ajsyyt+ajszzt
                ! m=3...
                 cTTr=2.*(ajtx*ajtxr+ajty*ajtyr+ajtz*ajtzr)
                 ccTr=ajtxxr+ajtyyr+ajtzzr
                 cTTs=2.*(ajtx*ajtxs+ajty*ajtys+ajtz*ajtzs)
                 ccTs=ajtxxs+ajtyys+ajtzzs
                 cTTt=2.*(ajtx*ajtxt+ajty*ajtyt+ajtz*ajtzt)
                 ccTt=ajtxxt+ajtyyt+ajtzzt
                 c0r=0.
                 c0s=0.
                 c0t=0.
                ! =============== End: Laplace operator: ==================== 
                ! ---------------- Start: Boundary condition: --------------- 
                ! BC: a1*u.n + a0*u = g 
                ! nsign=2*side-1
                ! a1=1.
                ! a0=0.
                 ! ---------------- Start r direction ---------------
                 ! ---------------- Start s direction ---------------
                 ! ---------------- Start t direction ---------------
                 ! Outward normal : (n1,n2,n3) 
                 ani=nsign/sqrt(ajtx**2+ajty**2+ajtz**2)
                 n1=ajtx*ani
                 n2=ajty*ani
                 n3=ajtz*ani
                 ! BC : anT*ut + anR*ur + anS*us + a0*u 
                 anT=a1*(n1*ajtx+n2*ajty+n3*ajtz)
                 anR=a1*(n1*ajrx+n2*ajry+n3*ajrz)
                 anS=a1*(n1*ajsx+n2*ajsy+n3*ajsz)
                ! >>>>>>>
                 anir=-(ajtx*ajtxr+ajty*ajtyr+ajtz*ajtzr)*ani**3
                 anirr=-(ajtx*ajtxrr+ajty*ajtyrr+ajtz*ajtzrr+ajtxr*
     & ajtxr+ajtyr*ajtyr+ajtzr*ajtzr)*ani**3 -3.*(ajtx*ajtxr+ajty*
     & ajtyr+ajtz*ajtzr)*ani**2*anir
                 n1r=ajtxr*ani + ajtx*anir
                 n1rr=ajtxrr*ani + 2.*ajtxr*anir + ajtx*anirr
                 n2r=ajtyr*ani + ajty*anir
                 n2rr=ajtyrr*ani + 2.*ajtyr*anir + ajty*anirr
                 n3r=ajtzr*ani + ajtz*anir
                 n3rr=ajtzrr*ani + 2.*ajtzr*anir + ajtz*anirr
                 anTr =a1*(n1*ajtxr+n2*ajtyr+n3*ajtzr+n1r*ajtx+n2r*
     & ajty+n3r*ajtz)
                 anTrr=a1*(n1*ajtxrr+n2*ajtyrr+n3*ajtzrr+2.*(n1r*ajtxr+
     & n2r*ajtyr+n3r*ajtzr)+n1rr*ajtx+n2rr*ajty+n3rr*ajtz)
                 anRr =a1*(n1*ajrxr+n2*ajryr+n3*ajrzr+n1r*ajrx+n2r*
     & ajry+n3r*ajrz)
                 anRrr=a1*(n1*ajrxrr+n2*ajryrr+n3*ajrzrr+2.*(n1r*ajrxr+
     & n2r*ajryr+n3r*ajrzr)+n1rr*ajrx+n2rr*ajry+n3rr*ajrz)
                 anSr =a1*(n1*ajsxr+n2*ajsyr+n3*ajszr+n1r*ajsx+n2r*
     & ajsy+n3r*ajsz)
                 anSrr=a1*(n1*ajsxrr+n2*ajsyrr+n3*ajszrr+2.*(n1r*ajsxr+
     & n2r*ajsyr+n3r*ajszr)+n1rr*ajsx+n2rr*ajsy+n3rr*ajsz)
                ! <<<<<<<
                ! >>>>>>>
                 anis=-(ajtx*ajtxs+ajty*ajtys+ajtz*ajtzs)*ani**3
                 aniss=-(ajtx*ajtxss+ajty*ajtyss+ajtz*ajtzss+ajtxs*
     & ajtxs+ajtys*ajtys+ajtzs*ajtzs)*ani**3 -3.*(ajtx*ajtxs+ajty*
     & ajtys+ajtz*ajtzs)*ani**2*anis
                 anirs=-(ajtx*ajtxrs+ajty*ajtyrs+ajtz*ajtzrs+ajtxr*
     & ajtxs+ajtyr*ajtys+ajtzr*ajtzs)*ani**3 -3.*(ajtx*ajtxr+ajty*
     & ajtyr+ajtz*ajtzr)*ani**2*anis
                 n1s=ajtxs*ani + ajtx*anis
                 n1ss=ajtxss*ani + 2.*ajtxs*anis + ajtx*aniss
                 n1rs=ajtxrs*ani + ajtxs*anir + ajtxr*anis + ajtx*anirs
                 n2s=ajtys*ani + ajty*anis
                 n2ss=ajtyss*ani + 2.*ajtys*anis + ajty*aniss
                 n2rs=ajtyrs*ani + ajtys*anir + ajtyr*anis + ajty*anirs
                 n3s=ajtzs*ani + ajtz*anis
                 n3ss=ajtzss*ani + 2.*ajtzs*anis + ajtz*aniss
                 n3rs=ajtzrs*ani + ajtzs*anir + ajtzr*anis + ajtz*anirs
                 anTs =a1*(n1*ajtxs+n2*ajtys+n3*ajtzs+n1s*ajtx+n2s*
     & ajty+n3s*ajtz)
                 anTss=a1*(n1*ajtxss+n2*ajtyss+n3*ajtzss+2.*(n1s*ajtxs+
     & n2s*ajtys+n3s*ajtzs)+n1ss*ajtx+n2ss*ajty+n3ss*ajtz)
                 anTrs=a1*(n1*ajtxrs+n2*ajtyrs+n3*ajtzrs +n1r*ajtxs+
     & n2r*ajtys+n3r*ajtzs +n1s*ajtxr+n2s*ajtyr+n3s*ajtzr +n1rs*ajtx+
     & n2rs*ajty+n3rs*ajtz)
                 anRs =a1*(n1*ajrxs+n2*ajrys+n3*ajrzs+n1s*ajrx+n2s*
     & ajry+n3s*ajrz)
                 anRss=a1*(n1*ajrxss+n2*ajryss+n3*ajrzss+2.*(n1s*ajrxs+
     & n2s*ajrys+n3s*ajrzs)+n1ss*ajrx+n2ss*ajry+n3ss*ajrz)
                 anRrs=a1*(n1*ajrxrs+n2*ajryrs+n3*ajrzrs +n1r*ajrxs+
     & n2r*ajrys+n3r*ajrzs +n1s*ajrxr+n2s*ajryr+n3s*ajrzr +n1rs*ajrx+
     & n2rs*ajry+n3rs*ajrz)
                 anSs =a1*(n1*ajsxs+n2*ajsys+n3*ajszs+n1s*ajsx+n2s*
     & ajsy+n3s*ajsz)
                 anSss=a1*(n1*ajsxss+n2*ajsyss+n3*ajszss+2.*(n1s*ajsxs+
     & n2s*ajsys+n3s*ajszs)+n1ss*ajsx+n2ss*ajsy+n3ss*ajsz)
                 anSrs=a1*(n1*ajsxrs+n2*ajsyrs+n3*ajszrs +n1r*ajsxs+
     & n2r*ajsys+n3r*ajszs +n1s*ajsxr+n2s*ajsyr+n3s*ajszr +n1rs*ajsx+
     & n2rs*ajsy+n3rs*ajsz)
                ! <<<<<<<
                 ! Here are the expressions for the normal derivatives
                brrr= -(cRR*cTT**2*anR*anT**2-cRT**2*cTT*anR*anT**2+
     & cRT*cRR*anT**3*cTT)/anT**3/cTT**3
                brr = -(cTTt*anT**3*cTT*cRR+cRT*ccR*anT**3*cTT+cRT*
     & cRRr*anT**3*cTT-cRT*cTTr*anT**3*cRR-2*cRT**2*cTT*anRr*anT**2-
     & cRT**2*cTT*a0*anT**2+cTTr*anT**2*cRT**2*anR+2*cRR*cTT**2*anRr*
     & anT**2+cRR*cTT**2*a0*anT**2+cST*cRRs*anT**3*cTT-cST*cTTs*anT**
     & 3*cRR+cRS*cTT**2*anRs*anT**2+ccT*anT**3*cTT*cRR+ccR*anT**2*cTT*
     & *2*anR+cRTt*anT**2*cTT**2*anR-cRRt*anT**3*cTT**2-cTTt*anT**2*
     & cTT*cRT*anR+2*cRT**2*cTT*anTr*anR*anT-2*cRT*cST*cTT*anRs*anT**
     & 2+2*cRT*cST*cTT*anTs*anR*anT-2*cRT*ccT*anT**2*cTT*anR-cRT*cRTr*
     & anT**2*cTT*anR-2*cRR*cTT**2*anTr*anR*anT-cST*cRTs*anT**2*cTT*
     & anR+cST*cTTs*anT**2*cRT*anR-cRS*cTT**2*anTs*anR*anT)/anT**
     & 3/cTT**3
                br  = -(-2*cST**2*cTT*anTs**2*anR+cTTs*anT**2*cST**2*
     & anRs+cRS*cTT**2*anRrs*anT**2+cRS*cTT**2*a0s*anT**2+cSS*cTT**2*
     & anRss*anT**2+2*cSS*cTT**2*anTs**2*anR-ccT**2*anT**2*cTT*anR+
     & ccT*anT**3*cTT*ccR-ccRt*anT**3*cTT**2-cST*cTTs*anT**3*ccR+cTTt*
     & anT**3*cTT*ccR-cRT*cTTr*anT**3*ccR+cRT*c0*anT**3*cTT+cRT*ccRr*
     & anT**3*cTT-cRT**2*cTT*anRrr*anT**2-2*cRT**2*cTT*a0r*anT**2-2*
     & cRT**2*cTT*anTr**2*anR+cTTr*anT**2*cRT**2*anRr+cTTr*anT**2*cRT*
     & *2*a0+cRR*cTT**2*anRrr*anT**2+2*cRR*cTT**2*a0r*anT**2+2*cRR*
     & cTT**2*anTr**2*anR+cST*ccRs*anT**3*cTT-cST**2*cTT*anRss*anT**2-
     & cTTt*anT**2*cTT*cRT*a0-cTTt*anT**2*cTT*cRT*anRr-cTTt*anT**2*
     & cTT*cST*anRs+cTTt*anT*cTT*cST*anTs*anR+cTTt*anT*cTT*cRT*anTr*
     & anR-cTTt*anT**2*cTT*ccT*anR+2*cRT**2*cTT*anTr*anRr*anT+2*cRT**
     & 2*cTT*anTr*a0*anT+cRT**2*cTT*anTrr*anT*anR+2*cRT*cST*cTT*anTr*
     & anRs*anT-2*cRT*cST*cTT*anRrs*anT**2-2*cRT*cST*cTT*a0s*anT**2-4*
     & cRT*cST*cTT*anTr*anTs*anR+2*cRT*cST*cTT*anTs*anRr*anT+2*cRT*
     & cST*cTT*anTs*a0*anT+2*cRT*cST*cTT*anTrs*anT*anR-2*cRT*ccT*anT**
     & 2*cTT*anRr-2*cRT*ccT*anT**2*cTT*a0+2*cRT*ccT*anT*cTT*anTr*anR-
     & cRT*cRTr*anT**2*cTT*anRr-cRT*cRTr*anT**2*cTT*a0+cRT*cRTr*anT*
     & cTT*anTr*anR-cRT*cSTr*anT**2*cTT*anRs+cRT*cSTr*anT*cTT*anTs*
     & anR-cRT*ccTr*anT**2*cTT*anR-cTTr*anT*cRT**2*anTr*anR+cRT*cTTr*
     & anT**2*cST*anRs+2*cST**2*cTT*anTs*anRs*anT+cST**2*cTT*anTss*
     & anT*anR-2*cST*ccT*anT**2*cTT*anRs+2*cST*ccT*anT*cTT*anTs*anR-
     & cST*cRTs*anT**2*cTT*anRr-cST*cRTs*anT**2*cTT*a0+cST*cRTs*anT*
     & cTT*anTr*anR-cST*cSTs*anT**2*cTT*anRs+cST*cSTs*anT*cTT*anTs*
     & anR-cST*ccTs*anT**2*cTT*anR+cST*cTTs*anT**2*cRT*anRr-cRT*cTTr*
     & anT*cST*anTs*anR+cRT*cTTr*anT**2*ccT*anR-2*cRR*cTT**2*anTr*
     & anRr*anT-2*cRR*cTT**2*anTr*a0*anT-cRR*cTT**2*anTrr*anT*anR-
     & cTTs*anT*cST**2*anTs*anR+cST*cTTs*anT**2*ccT*anR-cRS*cTT**2*
     & anTr*anRs*anT+2*cRS*cTT**2*anTr*anTs*anR-cRS*cTT**2*anTs*anRr*
     & anT-cRS*cTT**2*anTs*a0*anT-cRS*cTT**2*anTrs*anT*anR-2*cSS*cTT**
     & 2*anTs*anRs*anT-cSS*cTT**2*anTss*anT*anR+ccR*anT**2*cTT**2*
     & anRr+ccR*anT**2*cTT**2*a0+ccS*anT**2*cTT**2*anRs+c0*anT**2*cTT*
     & *2*anR+cRTt*anT**2*cTT**2*anRr+cRTt*anT**2*cTT**2*a0+cSTt*anT**
     & 2*cTT**2*anRs+ccTt*anT**2*cTT**2*anR+cST*cTTs*anT**2*cRT*a0-
     & cST*cTTs*anT*cRT*anTr*anR-ccR*anT*cTT**2*anTr*anR-ccS*anT*cTT**
     & 2*anTs*anR-cRTt*anT*cTT**2*anTr*anR-cSTt*anT*cTT**2*anTs*anR)
     & /anT**3/cTT**3
                bsss= -(cST*cSS*anT**3*cTT+cSS*cTT**2*anS*anT**2-cST**
     & 2*cTT*anS*anT**2)/anT**3/cTT**3
                bss = -(-cSSt*anT**3*cTT**2+cTTt*anT**3*cTT*cSS-cRT*
     & cTTr*anT**3*cSS+cRT*cSSr*anT**3*cTT+cST*cSSs*anT**3*cTT+cST*
     & ccS*anT**3*cTT-cST*cTTs*anT**3*cSS-2*cST**2*cTT*anSs*anT**2-
     & cST**2*cTT*a0*anT**2+cTTs*anT**2*cST**2*anS+cRS*cTT**2*anSr*
     & anT**2+2*cSS*cTT**2*anSs*anT**2+cSS*cTT**2*a0*anT**2+ccT*anT**
     & 3*cTT*cSS+ccS*anT**2*cTT**2*anS+cSTt*anT**2*cTT**2*anS-cTTt*
     & anT**2*cTT*cST*anS-2*cRT*cST*cTT*anSr*anT**2+2*cRT*cST*cTT*
     & anTr*anS*anT-cRT*cSTr*anT**2*cTT*anS+cRT*cTTr*anT**2*cST*anS+2*
     & cST**2*cTT*anTs*anS*anT-2*cST*ccT*anT**2*cTT*anS-cST*cSTs*anT**
     & 2*cTT*anS-cRS*cTT**2*anTr*anS*anT-2*cSS*cTT**2*anTs*anS*anT)
     & /anT**3/cTT**3
                bs  = -(c0*anT**2*cTT**2*anS-ccSt*anT**3*cTT**2+cRTt*
     & anT**2*cTT**2*anSr+cSTt*anT**2*cTT**2*anSs+cTTt*anT**3*cTT*ccS-
     & cRT*cTTr*anT**3*ccS+cRT*ccSr*anT**3*cTT-cRT**2*cTT*anSrr*anT**
     & 2-2*cRT**2*cTT*anTr**2*anS+cTTr*anT**2*cRT**2*anSr+cRR*cTT**2*
     & anSrr*anT**2+2*cRR*cTT**2*anTr**2*anS+cST*ccSs*anT**3*cTT+cST*
     & c0*anT**3*cTT-cST*cTTs*anT**3*ccS-cST**2*cTT*anSss*anT**2-2*
     & cST**2*cTT*a0s*anT**2-2*cST**2*cTT*anTs**2*anS+cTTs*anT**2*cST*
     & *2*anSs+cTTs*anT**2*cST**2*a0+cRS*cTT**2*anSrs*anT**2+cRS*cTT**
     & 2*a0r*anT**2+cSS*cTT**2*anSss*anT**2+2*cSS*cTT**2*a0s*anT**2+2*
     & cSS*cTT**2*anTs**2*anS-ccT**2*anT**2*cTT*anS+ccT*anT**3*cTT*
     & ccS+ccR*anT**2*cTT**2*anSr+ccS*anT**2*cTT**2*anSs+ccS*anT**2*
     & cTT**2*a0-cTTt*anT**2*cTT*cRT*anSr+cTTt*anT*cTT*cRT*anTr*anS+
     & cTTt*anT*cTT*cST*anTs*anS-cTTt*anT**2*cTT*cST*anSs-cTTt*anT**2*
     & cTT*cST*a0+2*cRT**2*cTT*anTr*anSr*anT+2*cRT*cST*cTT*anTr*anSs*
     & anT-cTTt*anT**2*cTT*ccT*anS+cRT**2*cTT*anTrr*anT*anS-2*cRT*cST*
     & cTT*anSrs*anT**2-2*cRT*cST*cTT*a0r*anT**2+2*cRT*cST*cTT*anTr*
     & a0*anT-4*cRT*cST*cTT*anTr*anTs*anS-2*cRT*ccT*anT**2*cTT*anSr+2*
     & cRT*cST*cTT*anTs*anSr*anT+2*cRT*cST*cTT*anTrs*anT*anS+2*cRT*
     & ccT*anT*cTT*anTr*anS-cRT*cRTr*anT**2*cTT*anSr+cRT*cRTr*anT*cTT*
     & anTr*anS-cRT*cSTr*anT**2*cTT*anSs-cRT*cSTr*anT**2*cTT*a0+cRT*
     & cSTr*anT*cTT*anTs*anS-cRT*ccTr*anT**2*cTT*anS-cTTr*anT*cRT**2*
     & anTr*anS+cRT*cTTr*anT**2*cST*anSs+cRT*cTTr*anT**2*cST*a0-cRT*
     & cTTr*anT*cST*anTs*anS+cRT*cTTr*anT**2*ccT*anS-2*cRR*cTT**2*
     & anTr*anSr*anT-cRR*cTT**2*anTrr*anT*anS+2*cST**2*cTT*anTs*anSs*
     & anT+2*cST**2*cTT*anTs*a0*anT+cST**2*cTT*anTss*anT*anS+2*cST*
     & ccT*anT*cTT*anTs*anS-cST*cRTs*anT**2*cTT*anSr+cST*cRTs*anT*cTT*
     & anTr*anS-cST*cSTs*anT**2*cTT*anSs-cST*cSTs*anT**2*cTT*a0+cST*
     & cSTs*anT*cTT*anTs*anS-cST*ccTs*anT**2*cTT*anS+cST*cTTs*anT**2*
     & cRT*anSr-cST*cTTs*anT*cRT*anTr*anS-cTTs*anT*cST**2*anTs*anS+
     & cST*cTTs*anT**2*ccT*anS-cRS*cTT**2*anTr*anSs*anT-cRS*cTT**2*
     & anTr*a0*anT+2*cRS*cTT**2*anTr*anTs*anS-cRS*cTT**2*anTs*anSr*
     & anT-cRS*cTT**2*anTrs*anT*anS-2*cSS*cTT**2*anTs*anSs*anT-2*cSS*
     & cTT**2*anTs*a0*anT-2*cST*ccT*anT**2*cTT*anSs-2*cST*ccT*anT**2*
     & cTT*a0-ccS*anT*cTT**2*anTs*anS-cRTt*anT*cTT**2*anTr*anS+cSTt*
     & anT**2*cTT**2*a0+ccTt*anT**2*cTT**2*anS-cSS*cTT**2*anTss*anT*
     & anS-ccR*anT*cTT**2*anTr*anS-cSTt*anT*cTT**2*anTs*anS)/anT**
     & 3/cTT**3
                brt = 0
                bst = 0
                brs = -(cTTt*anT**3*cTT*cRS+cRT*ccS*anT**3*cTT+cRT*
     & cRSr*anT**3*cTT-cRT*cTTr*anT**3*cRS-2*cRT**2*cTT*anSr*anT**2+
     & cTTr*anT**2*cRT**2*anS+2*cRR*cTT**2*anSr*anT**2+cST*cRSs*anT**
     & 3*cTT+cST*ccR*anT**3*cTT-cST*cTTs*anT**3*cRS-2*cST**2*cTT*anRs*
     & anT**2+cTTs*anT**2*cST**2*anR+cRS*cTT**2*anRr*anT**2+cRS*cTT**
     & 2*anSs*anT**2+cRS*cTT**2*a0*anT**2+2*cSS*cTT**2*anRs*anT**2+
     & ccT*anT**3*cTT*cRS+ccR*anT**2*cTT**2*anS+ccS*anT**2*cTT**2*anR+
     & cRTt*anT**2*cTT**2*anS+cSTt*anT**2*cTT**2*anR-cRSt*anT**3*cTT**
     & 2-cTTt*anT**2*cTT*cRT*anS-cTTt*anT**2*cTT*cST*anR+2*cRT**2*cTT*
     & anTr*anS*anT+2*cRT*cST*cTT*anTr*anR*anT-2*cRT*cST*cTT*anRr*anT*
     & *2-2*cRT*cST*cTT*anSs*anT**2-2*cRT*cST*cTT*a0*anT**2+2*cRT*cST*
     & cTT*anTs*anS*anT-2*cRT*ccT*anT**2*cTT*anS-cRT*cRTr*anT**2*cTT*
     & anS-cRT*cSTr*anT**2*cTT*anR+cRT*cTTr*anT**2*cST*anR-2*cRR*cTT**
     & 2*anTr*anS*anT-2*cST*ccT*anT**2*cTT*anR-cST*cRTs*anT**2*cTT*
     & anS-cST*cSTs*anT**2*cTT*anR+cST*cTTs*anT**2*cRT*anS+2*cST**2*
     & cTT*anTs*anR*anT-cRS*cTT**2*anTs*anS*anT-2*cSS*cTT**2*anTs*anR*
     & anT-cRS*cTT**2*anTr*anR*anT)/anT**3/cTT**3
                brrt= 0
                brst= 0
                bsst= 0
                brrs= -(cRT*cRS*anT**3*cTT-cRT**2*cTT*anS*anT**2-2*cRT*
     & cST*cTT*anR*anT**2+cRR*cTT**2*anS*anT**2+cST*cRR*anT**3*cTT+
     & cRS*cTT**2*anR*anT**2)/anT**3/cTT**3
                brss= -(cRT*cSS*anT**3*cTT-2*cRT*cST*cTT*anS*anT**2+
     & cST*cRS*anT**3*cTT-cST**2*cTT*anR*anT**2+cRS*cTT**2*anS*anT**2+
     & cSS*cTT**2*anR*anT**2)/anT**3/cTT**3
                bf  = -(fft*anT**3*cTT**2+cTTt*anT**2*cTT*cRT*gr-cTTt*
     & anT*cTT*cRT*anTr*g+cTTt*anT**2*cTT*cST*gs-cTTt*anT*cTT*cST*
     & anTs*g+cTTt*anT**2*cTT*ccT*g-cTTt*anT**3*cTT*ff-cTTr*anT**2*
     & cRT**2*gr+cRT**2*cTT*grr*anT**2+2*cRT**2*cTT*anTr**2*g-cRT*ffr*
     & anT**3*cTT+cRT*cTTr*anT**3*ff-cRR*cTT**2*grr*anT**2-2*cRR*cTT**
     & 2*anTr**2*g+2*cST**2*cTT*anTs**2*g-cST*ffs*anT**3*cTT+cST**2*
     & cTT*gss*anT**2-cTTs*anT**2*cST**2*gs+cST*cTTs*anT**3*ff-cRS*
     & cTT**2*grs*anT**2-2*cSS*cTT**2*anTs**2*g-cSS*cTT**2*gss*anT**2+
     & ccT**2*anT**2*cTT*g-ccT*anT**3*cTT*ff-ccR*anT**2*cTT**2*gr-ccS*
     & anT**2*cTT**2*gs-c0*anT**2*cTT**2*g-cRTt*anT**2*cTT**2*gr-cSTt*
     & anT**2*cTT**2*gs-ccTt*anT**2*cTT**2*g-cRT*cTTr*anT**2*ccT*g-
     & cRT*cTTr*anT**2*cST*gs+2*cRT*cST*cTT*grs*anT**2+2*cRT*ccT*anT**
     & 2*cTT*gr+cRT*cRTr*anT**2*cTT*gr+cRT*cSTr*anT**2*cTT*gs+cRT*
     & ccTr*anT**2*cTT*g-2*cRT**2*cTT*anTr*gr*anT-cRT**2*cTT*anTrr*
     & anT*g-2*cRT*cST*cTT*anTr*gs*anT+4*cRT*cST*cTT*anTr*anTs*g-2*
     & cRT*cST*cTT*anTs*gr*anT-2*cRT*cST*cTT*anTrs*anT*g-2*cRT*ccT*
     & anT*cTT*anTr*g-cRT*cRTr*anT*cTT*anTr*g-cRT*cSTr*anT*cTT*anTs*g+
     & cTTr*anT*cRT**2*anTr*g+cRT*cTTr*anT*cST*anTs*g+2*cRR*cTT**2*
     & anTr*gr*anT+cRR*cTT**2*anTrr*anT*g+2*cST*ccT*anT**2*cTT*gs+cST*
     & cRTs*anT**2*cTT*gr+cST*cSTs*anT**2*cTT*gs+cST*ccTs*anT**2*cTT*
     & g-cST*cTTs*anT**2*cRT*gr-cST*cTTs*anT**2*ccT*g-2*cST**2*cTT*
     & anTs*gs*anT-cST**2*cTT*anTss*anT*g-2*cST*ccT*anT*cTT*anTs*g-
     & cST*cRTs*anT*cTT*anTr*g-cST*cSTs*anT*cTT*anTs*g+cST*cTTs*anT*
     & cRT*anTr*g+cTTs*anT*cST**2*anTs*g+cRS*cTT**2*anTr*gs*anT-2*cRS*
     & cTT**2*anTr*anTs*g+cRS*cTT**2*anTs*gr*anT+cRS*cTT**2*anTrs*anT*
     & g+2*cSS*cTT**2*anTs*gs*anT+cSS*cTT**2*anTss*anT*g+ccR*anT*cTT**
     & 2*anTr*g+ccS*anT*cTT**2*anTs*g+cRTt*anT*cTT**2*anTr*g+cSTt*anT*
     & cTT**2*anTs*g)/anT**3/cTT**3
                  ur=ur4(i1,i2,i3)
                  urr=urr4(i1,i2,i3)
                  urrr=urrr2(i1,i2,i3)
                  us=us4(i1,i2,i3)
                  uss=uss4(i1,i2,i3)
                  usss=usss2(i1,i2,i3)
                  urs=urs4(i1,i2,i3)
                  urrs=urrs2(i1,i2,i3)
                  urss=urss2(i1,i2,i3)
                  r(i1-is1,i2-is2,i3-is3)=g - anR*ur -anS*us
                  r(i1-2*is1,i2-2*is2,i3-2*is3)=-( br*ur +brr*urr +
     & brrr*urrr +bs*us +bss*uss + bsss*usss + brs*urs + brrs*urrs + 
     & brss*urss +bf )
                else
                  r(j1,j2,j3)=0.
                  r(i1-2*is1,i2-2*is2,i3-2*is3)=0.
                end if
              end do
              end do
              end do
             end if
           else
            stop 10
           end if

          else if( bcOptionN.eq.0 .and. isNeumannBC(side).eq.1 .and. 
     & level.gt.0 .and. gridType.eq.curvilinear )then

           ! second-order Neumann/mixed BC ise used on lower levels of a 4th-order method
           ! write(*,'("$$$lineSmoothRHS: assign RHS for 2nd order Neumann/mixed on lower levels")')

            a0=bcData(0,side,axis)
            a1=bcData(1,side,axis)
            ! write(*,'(" lineSmoothRHS: assign RHS for mixedSecondOrder, side,axis,grid=",3i3," a0,a1=",2f6.2)') side,axis,grid,a0,a1
            is=1-2*side
            axisp1 = mod(axis+1,nd)
            axisp2 = mod(axis+2,nd)
             do i3=m3a,m3b,m3c
             j3=i3-is3
             do i2=m2a,m2b,m2c
             j2=i2-is2
             do i1=m1a,m1b,m1c
             j1=i1-is1
              ! Boundary: (i1,i2,i3)
              ! Ghost:    (j1,j2,j3)
              if( mask(i1,i2,i3).gt.0 )then
               ! compute ur and us to second order:
               urv(0) = (u(i1+1,i2,i3)-u(i1-1,i2,i3))/(2.*dr(0))
               urv(1) = (u(i1,i2+1,i3)-u(i1,i2-1,i3))/(2.*dr(1))
               an1 = rsxy(i1,i2,i3,axis,0)
               an2 = rsxy(i1,i2,i3,axis,1)
               if( nd.eq.2 )then
                aNormi = (-is)/sqrt(an1**2+an2**2)
                an1=an1*aNormi
                an2=an2*aNormi
                t1=a1*( an1*rsxy(i1,i2,i3,axisp1,0)+an2*rsxy(i1,i2,i3,
     & axisp1,1) )
                if( useBoundaryForcing.eq.1 )then
                  r(j1,j2,j3)=f(j1,j2,j3) - ( t1*urv(axisp1) )
                else
                  r(j1,j2,j3)=            - ( t1*urv(axisp1) )
                end if
               else
                ! compute ut to second order:
                urv(2) = (u(i1,i2,i3+1)-u(i1,i2,i3-1))/(2.*dr(2))
                an3 = rsxy(i1,i2,i3,axis,2)
                aNormi = (-is)/sqrt(an1**2+an2**2+an3**2)
                an1=an1*aNormi
                an2=an2*aNormi
                an3=an3*aNormi
                t1=a1*( an1*rsxy(i1,i2,i3,axisp1,0)+an2*rsxy(i1,i2,i3,
     & axisp1,1)+an3*rsxy(i1,i2,i3,axisp1,2) )
                t2=a1*( an1*rsxy(i1,i2,i3,axisp2,0)+an2*rsxy(i1,i2,i3,
     & axisp2,1)+an3*rsxy(i1,i2,i3,axisp2,2) )
                if( useBoundaryForcing.eq.1 )then
                  r(j1,j2,j3)=f(j1,j2,j3) - ( t1*urv(axisp1) +t2*urv(
     & axisp2) )
                else
                  r(j1,j2,j3)=            - ( t1*urv(axisp1) +t2*urv(
     & axisp2) )
                end if
               end if
              else
               r(j1,j2,j3)=0.
              end if
             end do
             end do
             end do

          else if( bcOptionN.eq.3. )then
           ! *new* 110308 -- apply real 2nd-order approximations on two ghost 
           ! write(*,'(">>>lineSmoothRHS: assign RHS for 2nd order Neumann/mixed on TWO lines")')

           if( gridType.eq.curvilinear )then
              a0=bcData(0,side,axis)
              a1=bcData(1,side,axis)
              ! write(*,'(">>> lineSmoothRHS: assign RHS for mixedSecondOrderTwoLines, side,axis,grid=",3i3," a0,a1=",2f6.2)') side,axis,grid,a0,a1
              is=1-2*side
              axisp1 = mod(axis+1,nd)
              axisp2 = mod(axis+2,nd)
               do i3=m3a,m3b,m3c
               j3=i3-is3
               do i2=m2a,m2b,m2c
               j2=i2-is2
               do i1=m1a,m1b,m1c
               j1=i1-is1
                ! Boundary: (i1,i2,i3)
                ! Ghost:    (j1,j2,j3)
                k1=i1-2*is1 ! (k1,k2,k3) is the 2nd ghost line
                k2=i2-2*is2
                k3=i3-2*is3
                if( mask(i1,i2,i3).gt.0 )then
                 ! compute ur and us to second order:
                 urv(0)  = (u(i1+1,i2,i3)-u(i1-1,i2,i3))/(2.*dr(0))
                 urv(1)  = (u(i1,i2+1,i3)-u(i1,i2-1,i3))/(2.*dr(1))
                 ! use wider stencil for 2nd ghost 
                 urv2(0) = (u(i1+2,i2,i3)-u(i1-2,i2,i3))/(4.*dr(0))
                 urv2(1) = (u(i1,i2+2,i3)-u(i1,i2-2,i3))/(4.*dr(1))
                 an1 = rsxy(i1,i2,i3,axis,0)
                 an2 = rsxy(i1,i2,i3,axis,1)
                 if( nd.eq.2 )then
                  aNormi = (-is)/sqrt(an1**2+an2**2)
                  an1=an1*aNormi
                  an2=an2*aNormi
                  t1=a1*( an1*rsxy(i1,i2,i3,axisp1,0)+an2*rsxy(i1,i2,
     & i3,axisp1,1) )
                  if( useBoundaryForcing.eq.1 )then
                    ! Note forcing is stored in the ghost point of f
                    r(j1,j2,j3)=f(j1,j2,j3) - ( t1*urv(axisp1) )
                    r(k1,k2,k3)=f(j1,j2,j3) - ( t1*urv2(axisp1) )
                  else
                    r(j1,j2,j3)=            - ( t1*urv(axisp1) )
                    r(k1,k2,k3)=            - ( t1*urv2(axisp1) )
                  end if
                 else
                  ! compute ut to second order:
                  urv(2)  = (u(i1,i2,i3+1)-u(i1,i2,i3-1))/(2.*dr(2))
                  urv2(2) = (u(i1,i2,i3+2)-u(i1,i2,i3-2))/(4.*dr(2))
                  an3 = rsxy(i1,i2,i3,axis,2)
                  aNormi = (-is)/sqrt(an1**2+an2**2+an3**2)
                  an1=an1*aNormi
                  an2=an2*aNormi
                  an3=an3*aNormi
                  t1=a1*( an1*rsxy(i1,i2,i3,axisp1,0)+an2*rsxy(i1,i2,
     & i3,axisp1,1)+an3*rsxy(i1,i2,i3,axisp1,2) )
                  t2=a1*( an1*rsxy(i1,i2,i3,axisp2,0)+an2*rsxy(i1,i2,
     & i3,axisp2,1)+an3*rsxy(i1,i2,i3,axisp2,2) )
                  if( useBoundaryForcing.eq.1 )then
                    ! Note forcing is stored in the ghost point of f
                    r(j1,j2,j3)=f(j1,j2,j3) - ( t1*urv(axisp1)  +t2*
     & urv(axisp2) )
                    r(k1,k2,k3)=f(j1,j2,j3) - ( t1*urv2(axisp1) +t2*
     & urv2(axisp2) )
                  else
                    r(j1,j2,j3)=            - ( t1*urv(axisp1)  +t2*
     & urv(axisp2) )
                    r(k1,k2,k3)=            - ( t1*urv2(axisp1) +t2*
     & urv2(axisp2) )
                  end if
                 end if
                else
                 r(j1,j2,j3)=0.
                 r(k1,k2,k3)=0.
                end if
               end do
               end do
               end do
           else
             ! On Cartesian grids there is no RHS to fill in unless there is a forcing. This only
             ! occurs on level=0 in whcih case this BC should not normally be used.:
             if( level.eq.0 )then
               write(*,'("lineSmoothRHS:ERROR: unexpected case 
     & encountered")')
               stop 1212
             end if
           end if

          else

             ! -- these remaining cases should have already been done 
             ! in lineSmooth.bC: lineSmoothBoundaryConditions (macro)

          end if
         else
          write(*,'(" ERROR: lineSmoothRHS: orderOfAccuracy=",i4)') 
     & orderOfAccuracy
          stop 8145
         end if
        end if
      end do

      return
      end





! *********  FINISH ME *****

! *********  FINISH ME *****

      subroutine lineSmoothUpdate( nd,nd1a,nd1b,nd2a,nd2b,nd3a,nd3b,
     &     u, defect, mask, ndc, c, ipar, rpar )
! ===================================================================================
!  Line smooth: update the solution u
!
! Update u: 
!     u(i1,i2,i3)=(1-omega)m*u(i1,i2,i3)+omega*defect(i1,i2,i3) 
!  
! ===================================================================================

      implicit none
      integer nd,nd1a,nd1b,nd2a,nd2b,nd3a,nd3b,ndc

      integer mask(nd1a:nd1b,nd2a:nd2b,nd3a:nd3b)
      integer ipar(0:*)

      real u(nd1a:nd1b,nd2a:nd2b,nd3a:nd3b)
      real defect(nd1a:nd1b,nd2a:nd2b,nd3a:nd3b)
      real c(1:ndc,nd1a:nd1b,nd2a:nd2b,nd3a:nd3b)
      real rpar(0:*)

!................ local
      integer orderOfAccuracy,i1,i2,i3,variableCoefficients,direction,
     & useOmega
      integer n1a,n1b,n1c,n2a,n2b,n2c,n3a,n3b,n3c
      integer m1a,m1b,m2a,m2b,width,wBase,k1,k1Old
      integer j1,j2,j3,shift3

      real omega,omegam,variableOmegaFactor,c1,c2,cmin,cmax

!............. start statement function
      integer m123
      m123(i1,i2,i3)=i1-wBase+width*(i2-wBase+width*(i3-wBase))+1  ! index into 3d stencil,
!............. end statement function

      n1a                 =ipar(0)
      n1b                 =ipar(1)
      n1c                 =ipar(2)
      n2a                 =ipar(3)
      n2b                 =ipar(4)
      n2c                 =ipar(5)
      n3a                 =ipar(6)
      n3b                 =ipar(7)
      n3c                 =ipar(8)
      direction           =ipar(9)
      orderOfAccuracy     =ipar(10)
      variableCoefficients=ipar(11)
      useOmega            =ipar(12)

      omega               =rpar(0)
      variableOmegaFactor =rpar(1)

      if( orderOfAccuracy.eq.2 )then
        width=3
        wBase=-1
      else
        width=5
        wBase=-2
      end if

      ! write(*,'("lineSmoothUpdate: direction,variableCoefficients,useOmega=",3i3," omega=",f6.3)') direction,variableCoefficients,useOmega,omega

      if( useOmega.eq.0 )then

        do i3=n3a,n3b,n3c
        do i2=n2a,n2b,n2c
        do i1=n1a,n1b,n1c
        if( mask(i1,i2,i3).ge.0 )then
          u(i1,i2,i3)=defect(i1,i2,i3)
          end if
        end do
        end do
        end do

      else if( useOmega.eq.1 .or. variableCoefficients.eq.0 )then
        ! use constant omega or constant coefficients -> use constant omega
        omegam=1.-omega
        do i3=n3a,n3b,n3c
        do i2=n2a,n2b,n2c
        do i1=n1a,n1b,n1c
        if( mask(i1,i2,i3).ge.0 )then
          u(i1,i2,i3)=omegam*u(i1,i2,i3)+omega*defect(i1,i2,i3)
          end if
        end do
        end do
        end do

      else
        if( variableCoefficients.ne.1 )then
          write(*,'("ERROR: variableCoefficients.ne.1")')
          stop 123
        end if

        ! use variable omega and variable coeff -> use variable omega

        ! (m1a,m1b) and (m2a,m2b) : use these indicies to determine the size of the coefficients
        ! in the two tangential directions to direction -- used in the calculation of omega
        if( direction.eq.0 )then
          m1a=m123( 0,-1, 0)
          m1b=m123( 0, 1, 0)
          m2a=m123( 0, 0,-1)
          m2b=m123( 0, 0, 1)
        else if( direction.eq.1 )then
          m1a=m123(-1, 0, 0)
          m1b=m123( 1, 0, 0)
          m2a=m123( 0, 0,-1)
          m2b=m123( 0, 0, 1)
        else if( direction.eq.2 )then
          m1a=m123(-1, 0, 0)
          m1b=m123( 1, 0, 0)
          m2a=m123( 0,-1, 0)
          m2b=m123( 0, 1, 0)
        else
          stop 55
        end if

        ! write(*,'(" direction=",i1,", ndc=",i3,", m1a,m1b,m2a,m2b=",6i3)') direction,ndc,m1a,m1b,m2a,m2b

        if( nd.eq.2 )then
          ! --- 2D ---
          shift3=0
          if( orderOfAccuracy.eq.2 )then
            do i3=n3a,n3b,n3c
              j3=max(n3a+shift3,min(n3b-shift3,i3)) ! avoid boundaries for omega -- coefficients could be zero (BC)
            do i2=n2a,n2b,n2c
              j2=max(n2a+1,min(n2b-1,i2))
            do i1=n1a,n1b,n1c
            if( mask(i1,i2,i3).ge.0 )then
                j1=max(n1a+1,min(n1b-1,i1))
                 c1=abs(c(m1a,j1,j2,j3)+c(m1b,j1,j2,j3))
                 c2=abs(c(m2a,j1,j2,j3)+c(m2b,j1,j2,j3))
                 ! At the end points the coefficients may be zero
                !  if( c1+c2 .gt. 0. )then
                   cmax=1.-min(c1,c2)/(c1+c2)
                !  else
                !    cmax=.5
                !  end if
                 omega=variableOmegaFactor/(1.+sqrt(1.-cmax**2))
                 ! omega=1.072*(.666-cmax)/.166 + 1.145*(cmax-.5)/.166
                 ! write(*,'(''j1,j2='',2i3,'' c1,c2,cmax,omega='',4(f9.4,1x))') j1,j2,c1,c2,cmax,omega
              u(i1,i2,i3)=(1.-omega)*u(i1,i2,i3)+omega*defect(i1,i2,i3)
              end if
            end do
            end do
            end do
          else
            do i3=n3a,n3b,n3c
              j3=max(n3a+shift3,min(n3b-shift3,i3)) ! avoid boundaries for omega -- coefficients could be zero (BC)
            do i2=n2a,n2b,n2c
              j2=max(n2a+2,min(n2b-2,i2))
            do i1=n1a,n1b,n1c
            if( mask(i1,i2,i3).ge.0 )then
                j1=max(n1a+2,min(n1b-2,i1))
                 c1=abs(c(m1a,j1,j2,j3)+c(m1b,j1,j2,j3))
                 c2=abs(c(m2a,j1,j2,j3)+c(m2b,j1,j2,j3))
                 ! At the end points the coefficients may be zero
                !  if( c1+c2 .gt. 0. )then
                   cmin=min(c1,c2)/(c1+c2)
                !  else
                !    cmin=.5
                !  end if
                 omega=(1.23-.16*cmin)*variableOmegaFactor  ! w(.5)=1.15 w(.25)=1.19 -- this is for a W[2,1] ***
                 ! write(*,'(''j1,j2='',2i3,'' cmin,omega='',2(f7.4,1x))') j1,j2,cmin,omega
              u(i1,i2,i3)=(1.-omega)*u(i1,i2,i3)+omega*defect(i1,i2,i3)
              end if
            end do
            end do
            end do
          end if

        else
          ! --- 3D ---
          shift3=orderOfAccuracy/2

          if( orderOfAccuracy.eq.2 )then
            do i3=n3a,n3b,n3c
              j3=max(n3a+shift3,min(n3b-shift3,i3)) ! avoid boundaries for omega -- coefficients could be zero (BC)
            do i2=n2a,n2b,n2c
              j2=max(n2a+1,min(n2b-1,i2))
            do i1=n1a,n1b,n1c
            if( mask(i1,i2,i3).ge.0 )then
                j1=max(n1a+1,min(n1b-1,i1))
                 write(*,'(" lineSmoothUpdate:ERROR: finish me for 3D 
     & and variable Omega")')
                 stop 6298
                 c1=abs(c(m1a,j1,j2,j3)+c(m1b,j1,j2,j3))
                 c2=abs(c(m2a,j1,j2,j3)+c(m2b,j1,j2,j3))
                 ! At the end points the coefficients may be zero
                !  if( c1+c2 .gt. 0. )then
                   cmax=1.-min(c1,c2)/(c1+c2)
                !  else
                !    cmax=.5
                !  end if
                 omega=variableOmegaFactor/(1.+sqrt(1.-cmax**2))
                 ! omega=1.072*(.666-cmax)/.166 + 1.145*(cmax-.5)/.166
                 ! write(*,'(''j1,j2='',2i3,'' c1,c2,cmax,omega='',4(f9.4,1x))') j1,j2,c1,c2,cmax,omega
              u(i1,i2,i3)=(1.-omega)*u(i1,i2,i3)+omega*defect(i1,i2,i3)
              end if
            end do
            end do
            end do
          else
            do i3=n3a,n3b,n3c
              j3=max(n3a+shift3,min(n3b-shift3,i3)) ! avoid boundaries for omega -- coefficients could be zero (BC)
            do i2=n2a,n2b,n2c
              j2=max(n2a+2,min(n2b-2,i2))
            do i1=n1a,n1b,n1c
            if( mask(i1,i2,i3).ge.0 )then
                j1=max(n1a+2,min(n1b-2,i1))
                 write(*,'(" lineSmoothUpdate:ERROR: finish me for 3D 
     & and variable Omega")')
                 stop 6297
                 c1=abs(c(m1a,j1,j2,j3)+c(m1b,j1,j2,j3))
                 c2=abs(c(m2a,j1,j2,j3)+c(m2b,j1,j2,j3))
                 ! At the end points the coefficients may be zero
                !  if( c1+c2 .gt. 0. )then
                   cmin=min(c1,c2)/(c1+c2)
                !  else
                !    cmin=.5
                !  end if
                 omega=(1.23-.16*cmin)*variableOmegaFactor  ! w(.5)=1.15 w(.25)=1.19 -- this is for a W[2,1] ***
                 ! write(*,'(''j1,j2='',2i3,'' cmin,omega='',2(f7.4,1x))') j1,j2,cmin,omega
              u(i1,i2,i3)=(1.-omega)*u(i1,i2,i3)+omega*defect(i1,i2,i3)
              end if
            end do
            end do
            end do
          end if

        end if

      end if

      return
      end
